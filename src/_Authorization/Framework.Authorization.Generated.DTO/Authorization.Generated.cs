//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Authorization.Generated.DTO
{
    
    
    public partial interface IAuthorizationClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapFullToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleFullDTO currentSource);
        
        void MapFullToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO currentSource);
        
        void MapFullToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO currentSource);
        
        void MapFullToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO currentSource);
        
        void MapFullToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFullDTO currentSource);
        
        void MapFullToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO currentSource);
        
        void MapFullToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO currentSource);
        
        void MapFullToStrictForPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalFullDTO currentSource);
        
        void MapFullToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO currentSource);
        
        void MapFullToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO currentSource);
        
        void MapFullToStrictForSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO target, Framework.Authorization.Generated.DTO.SecurityEntityFullDTO currentSource);
        
        void MapFullToStrictForUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO currentSource);
        
        void MapRichToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRichDTO currentSource);
        
        void MapRichToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO currentSource);
        
        void MapRichToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO currentSource);
        
        void MapRichToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO currentSource);
        
        void MapRichToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRichDTO currentSource);
        
        void MapRichToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO currentSource);
        
        void MapRichToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO currentSource);
        
        void MapRichToStrictForPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRichDTO currentSource);
        
        void MapRichToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO currentSource);
        
        void MapRichToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO currentSource);
        
        void MapRichToStrictForSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO target, Framework.Authorization.Generated.DTO.SecurityEntityRichDTO currentSource);
        
        void MapRichToStrictForUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO currentSource);
        
        void MapSimpleToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO currentSource);
        
        void MapSimpleToStrictForSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO target, Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO currentSource);
        
        void MapSimpleToStrictForUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO currentSource);
    }
    
    public abstract partial class AuthorizationClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBasePersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapFullToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Principal, null))
            {
                target.Principal = source.Principal.Identity;
            }
            else
            {
                target.Principal = default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DelegateFromPermission, null))
            {
                target.DelegateFromPermission = source.DelegateFromPermission.Identity;
            }
            else
            {
                target.DelegateFromPermission = default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Principal, null))
            {
                target.Principal = source.Principal.Identity;
            }
            else
            {
                target.Principal = default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Role, null))
            {
                target.Role = source.Role.Identity;
            }
            else
            {
                target.Role = default(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.SecurityContextType, null))
            {
                target.SecurityContextType = source.SecurityContextType.Identity;
            }
            else
            {
                target.SecurityContextType = default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.SecurityContextType, null))
            {
                target.SecurityContextType = source.SecurityContextType.Identity;
            }
            else
            {
                target.SecurityContextType = default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DelagetedFrom, null))
            {
                target.DelagetedFrom = source.DelagetedFrom.Identity;
            }
            else
            {
                target.DelagetedFrom = default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO);
            }
            if (!object.ReferenceEquals(source.Principal, null))
            {
                target.Principal = source.Principal.Identity;
            }
            else
            {
                target.Principal = default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO);
            }
            if (!object.ReferenceEquals(source.SecurityContextType, null))
            {
                target.SecurityContextType = source.SecurityContextType.Identity;
            }
            else
            {
                target.SecurityContextType = default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.RunAs, null))
            {
                target.RunAs = source.RunAs.Identity;
            }
            else
            {
                target.RunAs = default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessRole, null))
            {
                target.BusinessRole = source.BusinessRole.Identity;
            }
            else
            {
                target.BusinessRole = default(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO target, Framework.Authorization.Generated.DTO.SecurityEntityFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DelegateFromPermission, null))
            {
                target.DelegateFromPermission = source.DelegateFromPermission.Identity;
            }
            else
            {
                target.DelegateFromPermission = default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO);
            }
        }
        
        public virtual void MapRichToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Items, null))
            {
                target.Items = Framework.Core.EnumerableExtensions.ToList(source.Items, delegateToItemModel => new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(delegateToItemModel));
            }
        }
        
        public virtual void MapRichToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Permission, null))
            {
                target.Permission = new Framework.Authorization.Generated.DTO.PermissionStrictDTO(source.Permission);
            }
            else
            {
                target.Permission = null;
            }
        }
        
        public virtual void MapRichToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Restrictions, null))
            {
                target.Restrictions = Framework.Core.EnumerableExtensions.ToList(source.Restrictions, permissionRestriction => new Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO(permissionRestriction));
            }
        }
        
        public virtual void MapRichToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Permissions, null))
            {
                target.Permissions = Framework.Core.EnumerableExtensions.ToList(source.Permissions, permission => new Framework.Authorization.Generated.DTO.PermissionStrictDTO(permission));
            }
        }
        
        public virtual void MapRichToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO target, Framework.Authorization.Generated.DTO.SecurityEntityRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.AddItems, null))
            {
                target.AddItems = Framework.Core.EnumerableExtensions.ToList(source.AddItems, delegateToItemModel => new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(delegateToItemModel));
            }
            if (!object.ReferenceEquals(source.RemoveItems, null))
            {
                target.RemoveItems = Framework.Core.EnumerableExtensions.ToList(source.RemoveItems, permission => permission.Identity);
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Comment = source.Comment;
            target.Period = source.Period;
        }
        
        public virtual void MapSimpleToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.SecurityContextId = source.SecurityContextId;
            target.StrongDirect = source.StrongDirect;
        }
        
        public virtual void MapSimpleToStrictForPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.SecurityContextId = source.SecurityContextId;
        }
        
        public virtual void MapSimpleToStrictForPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.SecurityContextId = source.SecurityContextId;
        }
        
        public virtual void MapSimpleToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.ExternalId = source.ExternalId;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO target, Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Id = source.Id;
            target.Name = source.Name;
            target.ParentId = source.ParentId;
        }
        
        public virtual void MapSimpleToStrictForUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
    }
    
    public partial class AuthorizationClientPrimitiveDTOMappingService : Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingServiceBase
    {
        
        private static Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService _default = new Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService();
        
        public static Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService Default
        {
            get
            {
                return Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService._default;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public class BusinessRoleIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public BusinessRoleIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public BusinessRoleIdentityDTO(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public BusinessRoleIdentityDTO(Framework.Authorization.Domain.BusinessRole domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public BusinessRoleIdentityDTO()
        {
        }
        
        public BusinessRoleIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity1, Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity1, Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Authorization.Domain.BusinessRole ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToBusinessRole(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public class PermissionIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.PermissionIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public PermissionIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public PermissionIdentityDTO(Framework.Authorization.Generated.DTO.PermissionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public PermissionIdentityDTO(Framework.Authorization.Domain.Permission domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public PermissionIdentityDTO()
        {
        }
        
        public PermissionIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.PermissionIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity1, Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity1, Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.PermissionIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.PermissionIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.PermissionIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Authorization.Domain.Permission ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPermission(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public class PermissionRestrictionIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public PermissionRestrictionIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public PermissionRestrictionIdentityDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public PermissionRestrictionIdentityDTO(Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public PermissionRestrictionIdentityDTO()
        {
        }
        
        public PermissionRestrictionIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO identity1, Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO identity1, Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Authorization.Domain.PermissionRestriction ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPermissionRestriction(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public class PrincipalIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.PrincipalIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public PrincipalIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public PrincipalIdentityDTO(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public PrincipalIdentityDTO(Framework.Authorization.Domain.Principal domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public PrincipalIdentityDTO()
        {
        }
        
        public PrincipalIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.PrincipalIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity1, Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity1, Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Authorization.Domain.Principal ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPrincipal(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public class SecurityContextTypeIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public SecurityContextTypeIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public SecurityContextTypeIdentityDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public SecurityContextTypeIdentityDTO(Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public SecurityContextTypeIdentityDTO()
        {
        }
        
        public SecurityContextTypeIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO identity1, Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO identity1, Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Authorization.Domain.SecurityContextType ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToSecurityContextType(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DomainObjectBase), "BaseAbstractDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public abstract partial class BaseAbstractDTO
    {
        
        protected BaseAbstractDTO()
        {
        }
        
        protected BaseAbstractDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DomainObjectBase domainObject)
        {
            mappingService.MapDomainObjectBase(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PersistentDomainObjectBase), "BasePersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public abstract partial class BasePersistentDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private System.Guid _id;
        
        protected BasePersistentDTO()
        {
        }
        
        protected BasePersistentDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public bool IsNew
        {
            get
            {
                return (default(System.Guid) == this.Id);
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.AuditPersistentDomainObjectBase), "BaseAuditPersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public abstract partial class BaseAuditPersistentDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        protected BaseAuditPersistentDTO()
        {
        }
        
        protected BaseAuditPersistentDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.AuditPersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAuditPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PersistentDomainObjectBase), "BaseEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRestrictionSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRestrictionRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRootFilterModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRootFilterModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityEntitySaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityEntityRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRemoveEventDTO))]
    public abstract partial class EventDTOBase
    {
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleVisualDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>
    {
        
        private string _name;
        
        public BusinessRoleVisualDTO()
        {
        }
        
        public BusinessRoleVisualDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRole(domainObject, this);
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO))]
    public partial class BusinessRoleSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>
    {
        
        private string _description;
        
        private bool _isAdmin;
        
        private string _name;
        
        public BusinessRoleSimpleDTO()
        {
        }
        
        public BusinessRoleSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRole(domainObject, this);
        }
        
        public BusinessRoleSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin
        {
            get
            {
                return this._isAdmin;
            }
            set
            {
                this._isAdmin = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO))]
    public partial class BusinessRoleFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO
    {
        
        public BusinessRoleFullDTO()
        {
        }
        
        public BusinessRoleFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRole(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleFullDTO
    {
        
        public BusinessRoleRichDTO()
        {
        }
        
        public BusinessRoleRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRole(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.BusinessRole, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.BusinessRole>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        public BusinessRoleStrictDTO()
        {
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRole(this, source);
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRole(this, source);
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRole(this, source);
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForBusinessRole(this, source);
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForBusinessRole(this, source);
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject)
        {
            mappingService.MapBusinessRole(this, domainObject);
        }
        
        public Framework.Authorization.Domain.BusinessRole ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToBusinessRole(this);
        }
        
        public Framework.Authorization.Domain.BusinessRole ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToBusinessRole(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO BusinessRole;
        
        public BusinessRoleSaveEventDTO()
        {
        }
        
        public BusinessRoleSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject)
        {
            this.BusinessRole = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO BusinessRole;
        
        public BusinessRoleRemoveEventDTO()
        {
        }
        
        public BusinessRoleRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject)
        {
            this.BusinessRole = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleEventRichDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _description;
        
        private System.Guid _id;
        
        private bool _isAdmin;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public BusinessRoleEventRichDTO()
        {
        }
        
        public BusinessRoleEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject)
        {
            mappingService.MapBusinessRole(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin
        {
            get
            {
                return this._isAdmin;
            }
            set
            {
                this._isAdmin = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRole), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _description;
        
        private System.Guid _id;
        
        private bool _isAdmin;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public BusinessRoleEventSimpleDTO()
        {
        }
        
        public BusinessRoleEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRole domainObject)
        {
            mappingService.MapBusinessRole(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin
        {
            get
            {
                return this._isAdmin;
            }
            set
            {
                this._isAdmin = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO))]
    public partial class BusinessRoleCreateModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public BusinessRoleCreateModelSimpleDTO()
        {
        }
        
        public BusinessRoleCreateModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRoleCreateModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO))]
    public partial class BusinessRoleCreateModelFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO
    {
        
        public BusinessRoleCreateModelFullDTO()
        {
        }
        
        public BusinessRoleCreateModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRoleCreateModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleCreateModelRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO
    {
        
        public BusinessRoleCreateModelRichDTO()
        {
        }
        
        public BusinessRoleCreateModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRoleCreateModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleCreateModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.BusinessRoleCreateModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.BusinessRoleCreateModel>
    {
        
        public BusinessRoleCreateModelStrictDTO()
        {
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRoleCreateModel(this, source);
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRoleCreateModel(this, source);
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRoleCreateModel(this, source);
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject)
        {
            mappingService.MapBusinessRoleCreateModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.BusinessRoleCreateModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToBusinessRoleCreateModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleCreateModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO BusinessRoleCreateModel;
        
        public BusinessRoleCreateModelSaveEventDTO()
        {
        }
        
        public BusinessRoleCreateModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject)
        {
            this.BusinessRoleCreateModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleCreateModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO BusinessRoleCreateModel;
        
        public BusinessRoleCreateModelRemoveEventDTO()
        {
        }
        
        public BusinessRoleCreateModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject)
        {
            this.BusinessRoleCreateModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleCreateModelEventRichDTO
    {
        
        public BusinessRoleCreateModelEventRichDTO()
        {
        }
        
        public BusinessRoleCreateModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject)
        {
            mappingService.MapBusinessRoleCreateModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleCreateModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleCreateModelEventSimpleDTO
    {
        
        public BusinessRoleCreateModelEventSimpleDTO()
        {
        }
        
        public BusinessRoleCreateModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject)
        {
            mappingService.MapBusinessRoleCreateModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO))]
    public partial class BusinessRoleRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public BusinessRoleRootFilterModelSimpleDTO()
        {
        }
        
        public BusinessRoleRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRoleRootFilterModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO))]
    public partial class BusinessRoleRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        public BusinessRoleRootFilterModelFullDTO()
        {
        }
        
        public BusinessRoleRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRoleRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO
    {
        
        public BusinessRoleRootFilterModelRichDTO()
        {
        }
        
        public BusinessRoleRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapBusinessRoleRootFilterModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel>
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalIdentityDTO _principal;
        
        public BusinessRoleRootFilterModelStrictDTO()
        {
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRoleRootFilterModel(this, source);
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRoleRootFilterModel(this, source);
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRoleRootFilterModel(this, source);
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject)
        {
            mappingService.MapBusinessRoleRootFilterModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.BusinessRoleRootFilterModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToBusinessRoleRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleRootFilterModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO BusinessRoleRootFilterModel;
        
        public BusinessRoleRootFilterModelSaveEventDTO()
        {
        }
        
        public BusinessRoleRootFilterModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject)
        {
            this.BusinessRoleRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleRootFilterModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO BusinessRoleRootFilterModel;
        
        public BusinessRoleRootFilterModelRemoveEventDTO()
        {
        }
        
        public BusinessRoleRootFilterModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject)
        {
            this.BusinessRoleRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleRootFilterModelEventRichDTO
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO _principal;
        
        public BusinessRoleRootFilterModelEventRichDTO()
        {
        }
        
        public BusinessRoleRootFilterModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject)
        {
            mappingService.MapBusinessRoleRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.BusinessRoleRootFilterModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class BusinessRoleRootFilterModelEventSimpleDTO
    {
        
        public BusinessRoleRootFilterModelEventSimpleDTO()
        {
        }
        
        public BusinessRoleRootFilterModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject)
        {
            mappingService.MapBusinessRoleRootFilterModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO))]
    public partial class ChangePermissionDelegatesModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public ChangePermissionDelegatesModelSimpleDTO()
        {
        }
        
        public ChangePermissionDelegatesModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapChangePermissionDelegatesModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO))]
    public partial class ChangePermissionDelegatesModelFullDTO : Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionSimpleDTO _delegateFromPermission;
        
        public ChangePermissionDelegatesModelFullDTO()
        {
        }
        
        public ChangePermissionDelegatesModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapChangePermissionDelegatesModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                this._delegateFromPermission = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class ChangePermissionDelegatesModelRichDTO : Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> _items = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO>();
        
        public ChangePermissionDelegatesModelRichDTO()
        {
        }
        
        public ChangePermissionDelegatesModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapChangePermissionDelegatesModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class ChangePermissionDelegatesModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel>
    {
        
        private Framework.Authorization.Generated.DTO.PermissionIdentityDTO _delegateFromPermission;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO> _items = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO>();
        
        public ChangePermissionDelegatesModelStrictDTO()
        {
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForChangePermissionDelegatesModel(this, source);
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForChangePermissionDelegatesModel(this, source);
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForChangePermissionDelegatesModel(this, source);
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                this._delegateFromPermission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject)
        {
            mappingService.MapChangePermissionDelegatesModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.ChangePermissionDelegatesModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToChangePermissionDelegatesModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class ChangePermissionDelegatesModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO ChangePermissionDelegatesModel;
        
        public ChangePermissionDelegatesModelSaveEventDTO()
        {
        }
        
        public ChangePermissionDelegatesModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject)
        {
            this.ChangePermissionDelegatesModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class ChangePermissionDelegatesModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO ChangePermissionDelegatesModel;
        
        public ChangePermissionDelegatesModelRemoveEventDTO()
        {
        }
        
        public ChangePermissionDelegatesModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject)
        {
            this.ChangePermissionDelegatesModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class ChangePermissionDelegatesModelEventRichDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO _delegateFromPermission;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO> _items;
        
        public ChangePermissionDelegatesModelEventRichDTO()
        {
        }
        
        public ChangePermissionDelegatesModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject)
        {
            mappingService.MapChangePermissionDelegatesModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                this._delegateFromPermission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.ChangePermissionDelegatesModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class ChangePermissionDelegatesModelEventSimpleDTO
    {
        
        public ChangePermissionDelegatesModelEventSimpleDTO()
        {
        }
        
        public ChangePermissionDelegatesModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject)
        {
            mappingService.MapChangePermissionDelegatesModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO))]
    public partial class DelegateToItemModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public DelegateToItemModelSimpleDTO()
        {
        }
        
        public DelegateToItemModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDelegateToItemModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO))]
    public partial class DelegateToItemModelFullDTO : Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        public DelegateToItemModelFullDTO()
        {
        }
        
        public DelegateToItemModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDelegateToItemModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class DelegateToItemModelRichDTO : Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionRichDTO _permission;
        
        public DelegateToItemModelRichDTO()
        {
        }
        
        public DelegateToItemModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDelegateToItemModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionRichDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                this._permission = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class DelegateToItemModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.DelegateToItemModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.DelegateToItemModel>
    {
        
        private Framework.Authorization.Generated.DTO.PermissionStrictDTO _permission;
        
        private Framework.Authorization.Generated.DTO.PrincipalIdentityDTO _principal;
        
        public DelegateToItemModelStrictDTO()
        {
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForDelegateToItemModel(this, source);
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForDelegateToItemModel(this, source);
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForDelegateToItemModel(this, source);
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionStrictDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                this._permission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject)
        {
            mappingService.MapDelegateToItemModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.DelegateToItemModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToDelegateToItemModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class DelegateToItemModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO DelegateToItemModel;
        
        public DelegateToItemModelSaveEventDTO()
        {
        }
        
        public DelegateToItemModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject)
        {
            this.DelegateToItemModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class DelegateToItemModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO DelegateToItemModel;
        
        public DelegateToItemModelRemoveEventDTO()
        {
        }
        
        public DelegateToItemModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject)
        {
            this.DelegateToItemModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class DelegateToItemModelEventRichDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionEventRichDTO _permission;
        
        private Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO _principal;
        
        public DelegateToItemModelEventRichDTO()
        {
        }
        
        public DelegateToItemModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject)
        {
            mappingService.MapDelegateToItemModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventRichDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                this._permission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.DelegateToItemModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class DelegateToItemModelEventSimpleDTO
    {
        
        public DelegateToItemModelEventSimpleDTO()
        {
        }
        
        public DelegateToItemModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.DelegateToItemModel domainObject)
        {
            mappingService.MapDelegateToItemModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRichDTO))]
    public partial class PermissionSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>
    {
        
        private string _comment;
        
        private bool _isDelegatedFrom;
        
        private bool _isDelegatedTo;
        
        private Framework.Core.Period _period = Framework.Core.Period.Eternity;
        
        public PermissionSimpleDTO()
        {
        }
        
        public PermissionSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermission(domainObject, this);
        }
        
        public PermissionSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedFrom
        {
            get
            {
                return this._isDelegatedFrom;
            }
            set
            {
                this._isDelegatedFrom = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedTo
        {
            get
            {
                return this._isDelegatedTo;
            }
            set
            {
                this._isDelegatedTo = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Core.Period Period
        {
            get
            {
                return this._period;
            }
            set
            {
                this._period = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRichDTO))]
    public partial class PermissionFullDTO : Framework.Authorization.Generated.DTO.PermissionSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _delegatedFromPrincipal;
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _role;
        
        public PermissionFullDTO()
        {
        }
        
        public PermissionFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermission(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO DelegatedFromPrincipal
        {
            get
            {
                return this._delegatedFromPrincipal;
            }
            set
            {
                this._delegatedFromPrincipal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO Role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionRichDTO : Framework.Authorization.Generated.DTO.PermissionFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO> _delegatedTo = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO>();
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO> _restrictions = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO>();
        
        public PermissionRichDTO()
        {
        }
        
        public PermissionRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermission(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO> DelegatedTo
        {
            get
            {
                return this._delegatedTo;
            }
            set
            {
                this._delegatedTo = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO> Restrictions
        {
            get
            {
                return this._restrictions;
            }
            set
            {
                this._restrictions = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.Permission, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.Permission>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>
    {
        
        private string _comment;
        
        private System.Guid _id;
        
        private Framework.Core.Period _period;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO> _restrictions = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO>();
        
        private Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO _role;
        
        public PermissionStrictDTO()
        {
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermission(this, source);
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermission(this, source);
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermission(this, source);
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForPermission(this, source);
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForPermission(this, source);
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Core.Period Period
        {
            get
            {
                return this._period;
            }
            set
            {
                this._period = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO> Restrictions
        {
            get
            {
                return this._restrictions;
            }
            set
            {
                this._restrictions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject)
        {
            mappingService.MapPermission(this, domainObject);
        }
        
        public Framework.Authorization.Domain.Permission ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPermission(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventRichDTO Permission;
        
        public PermissionSaveEventDTO()
        {
        }
        
        public PermissionSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject)
        {
            this.Permission = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventRichDTO Permission;
        
        public PermissionRemoveEventDTO()
        {
        }
        
        public PermissionRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject)
        {
            this.Permission = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionEventRichDTO
    {
        
        private bool _active;
        
        private string _comment;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO _delegatedFromPrincipal;
        
        private System.Guid _id;
        
        private bool _isDelegatedFrom;
        
        private bool _isDelegatedTo;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private Framework.Core.Period _period;
        
        private Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO _principal;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO> _restrictions;
        
        private Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO _role;
        
        public PermissionEventRichDTO()
        {
        }
        
        public PermissionEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject)
        {
            mappingService.MapPermission(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO DelegatedFromPrincipal
        {
            get
            {
                return this._delegatedFromPrincipal;
            }
            set
            {
                this._delegatedFromPrincipal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedFrom
        {
            get
            {
                return this._isDelegatedFrom;
            }
            set
            {
                this._isDelegatedFrom = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedTo
        {
            get
            {
                return this._isDelegatedTo;
            }
            set
            {
                this._isDelegatedTo = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Core.Period Period
        {
            get
            {
                return this._period;
            }
            set
            {
                this._period = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO> Restrictions
        {
            get
            {
                return this._restrictions;
            }
            set
            {
                this._restrictions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO Role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Permission), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionEventSimpleDTO
    {
        
        private bool _active;
        
        private string _comment;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private bool _isDelegatedFrom;
        
        private bool _isDelegatedTo;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private Framework.Core.Period _period;
        
        public PermissionEventSimpleDTO()
        {
        }
        
        public PermissionEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Permission domainObject)
        {
            mappingService.MapPermission(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedFrom
        {
            get
            {
                return this._isDelegatedFrom;
            }
            set
            {
                this._isDelegatedFrom = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedTo
        {
            get
            {
                return this._isDelegatedTo;
            }
            set
            {
                this._isDelegatedTo = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Core.Period Period
        {
            get
            {
                return this._period;
            }
            set
            {
                this._period = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO))]
    public partial class PermissionDirectFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        private System.Guid _securityContextId;
        
        private bool _strongDirect;
        
        public PermissionDirectFilterModelSimpleDTO()
        {
        }
        
        public PermissionDirectFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionDirectFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StrongDirect
        {
            get
            {
                return this._strongDirect;
            }
            set
            {
                this._strongDirect = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO))]
    public partial class PermissionDirectFilterModelFullDTO : Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO _securityContextType;
        
        public PermissionDirectFilterModelFullDTO()
        {
        }
        
        public PermissionDirectFilterModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionDirectFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionDirectFilterModelRichDTO : Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO
    {
        
        public PermissionDirectFilterModelRichDTO()
        {
        }
        
        public PermissionDirectFilterModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionDirectFilterModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionDirectFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PermissionDirectFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PermissionDirectFilterModel>
    {
        
        private System.Guid _securityContextId;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO _securityContextType;
        
        private bool _strongDirect;
        
        public PermissionDirectFilterModelStrictDTO()
        {
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermissionDirectFilterModel(this, source);
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermissionDirectFilterModel(this, source);
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermissionDirectFilterModel(this, source);
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StrongDirect
        {
            get
            {
                return this._strongDirect;
            }
            set
            {
                this._strongDirect = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject)
        {
            mappingService.MapPermissionDirectFilterModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.PermissionDirectFilterModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPermissionDirectFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionDirectFilterModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO PermissionDirectFilterModel;
        
        public PermissionDirectFilterModelSaveEventDTO()
        {
        }
        
        public PermissionDirectFilterModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject)
        {
            this.PermissionDirectFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionDirectFilterModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO PermissionDirectFilterModel;
        
        public PermissionDirectFilterModelRemoveEventDTO()
        {
        }
        
        public PermissionDirectFilterModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject)
        {
            this.PermissionDirectFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionDirectFilterModelEventRichDTO
    {
        
        private System.Guid _securityContextId;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO _securityContextType;
        
        private bool _strongDirect;
        
        public PermissionDirectFilterModelEventRichDTO()
        {
        }
        
        public PermissionDirectFilterModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject)
        {
            mappingService.MapPermissionDirectFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StrongDirect
        {
            get
            {
                return this._strongDirect;
            }
            set
            {
                this._strongDirect = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionDirectFilterModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionDirectFilterModelEventSimpleDTO
    {
        
        private System.Guid _securityContextId;
        
        private bool _strongDirect;
        
        public PermissionDirectFilterModelEventSimpleDTO()
        {
        }
        
        public PermissionDirectFilterModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject)
        {
            mappingService.MapPermissionDirectFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StrongDirect
        {
            get
            {
                return this._strongDirect;
            }
            set
            {
                this._strongDirect = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO))]
    public partial class PermissionRestrictionSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO>
    {
        
        private System.Guid _securityContextId;
        
        public PermissionRestrictionSimpleDTO()
        {
        }
        
        public PermissionRestrictionSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionRestriction(domainObject, this);
        }
        
        public PermissionRestrictionSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO))]
    public partial class PermissionRestrictionFullDTO : Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionSimpleDTO _permission;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO _securityContextType;
        
        public PermissionRestrictionFullDTO()
        {
        }
        
        public PermissionRestrictionFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionRestriction(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                this._permission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionRestrictionRichDTO : Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO
    {
        
        public PermissionRestrictionRichDTO()
        {
        }
        
        public PermissionRestrictionRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionRestriction(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionRestrictionStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PermissionRestriction, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PermissionRestriction>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO>
    {
        
        private System.Guid _id;
        
        private System.Guid _securityContextId;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO _securityContextType;
        
        public PermissionRestrictionStrictDTO()
        {
        }
        
        public PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermissionRestriction(this, source);
        }
        
        public PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermissionRestriction(this, source);
        }
        
        public PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermissionRestriction(this, source);
        }
        
        public PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForPermissionRestriction(this, source);
        }
        
        private PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForPermissionRestriction(this, source);
        }
        
        private PermissionRestrictionStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            mappingService.MapPermissionRestriction(this, domainObject);
        }
        
        public Framework.Authorization.Domain.PermissionRestriction ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPermissionRestriction(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRestrictionSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO PermissionRestriction;
        
        public PermissionRestrictionSaveEventDTO()
        {
        }
        
        public PermissionRestrictionSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            this.PermissionRestriction = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRestrictionRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO PermissionRestriction;
        
        public PermissionRestrictionRemoveEventDTO()
        {
        }
        
        public PermissionRestrictionRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            this.PermissionRestriction = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRestrictionEventRichDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO _permission;
        
        private System.Guid _securityContextId;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO _securityContextType;
        
        public PermissionRestrictionEventRichDTO()
        {
        }
        
        public PermissionRestrictionEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            mappingService.MapPermissionRestriction(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                this._permission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRestriction), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRestrictionEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private System.Guid _securityContextId;
        
        public PermissionRestrictionEventSimpleDTO()
        {
        }
        
        public PermissionRestrictionEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            mappingService.MapPermissionRestriction(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO))]
    public partial class PermissionRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        private System.Guid? _securityContextId;
        
        public PermissionRootFilterModelSimpleDTO()
        {
        }
        
        public PermissionRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO))]
    public partial class PermissionRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionSimpleDTO _delagetedFrom;
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO _securityContextType;
        
        public PermissionRootFilterModelFullDTO()
        {
        }
        
        public PermissionRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO DelagetedFrom
        {
            get
            {
                return this._delagetedFrom;
            }
            set
            {
                this._delagetedFrom = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO
    {
        
        public PermissionRootFilterModelRichDTO()
        {
        }
        
        public PermissionRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPermissionRootFilterModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PermissionRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PermissionRootFilterModel>
    {
        
        private Framework.Authorization.Generated.DTO.PermissionIdentityDTO _delagetedFrom;
        
        private Framework.Authorization.Generated.DTO.PrincipalIdentityDTO _principal;
        
        private System.Guid? _securityContextId;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO _securityContextType;
        
        public PermissionRootFilterModelStrictDTO()
        {
        }
        
        public PermissionRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermissionRootFilterModel(this, source);
        }
        
        public PermissionRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermissionRootFilterModel(this, source);
        }
        
        public PermissionRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermissionRootFilterModel(this, source);
        }
        
        public PermissionRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO DelagetedFrom
        {
            get
            {
                return this._delagetedFrom;
            }
            set
            {
                this._delagetedFrom = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject)
        {
            mappingService.MapPermissionRootFilterModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.PermissionRootFilterModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPermissionRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRootFilterModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO PermissionRootFilterModel;
        
        public PermissionRootFilterModelSaveEventDTO()
        {
        }
        
        public PermissionRootFilterModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject)
        {
            this.PermissionRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRootFilterModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO PermissionRootFilterModel;
        
        public PermissionRootFilterModelRemoveEventDTO()
        {
        }
        
        public PermissionRootFilterModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject)
        {
            this.PermissionRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRootFilterModelEventRichDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO _delagetedFrom;
        
        private Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO _principal;
        
        private System.Guid? _securityContextId;
        
        private Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO _securityContextType;
        
        public PermissionRootFilterModelEventRichDTO()
        {
        }
        
        public PermissionRootFilterModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject)
        {
            mappingService.MapPermissionRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO DelagetedFrom
        {
            get
            {
                return this._delagetedFrom;
            }
            set
            {
                this._delagetedFrom = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                this._principal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO SecurityContextType
        {
            get
            {
                return this._securityContextType;
            }
            set
            {
                this._securityContextType = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PermissionRootFilterModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PermissionRootFilterModelEventSimpleDTO
    {
        
        private System.Guid? _securityContextId;
        
        public PermissionRootFilterModelEventSimpleDTO()
        {
        }
        
        public PermissionRootFilterModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PermissionRootFilterModel domainObject)
        {
            mappingService.MapPermissionRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? SecurityContextId
        {
            get
            {
                return this._securityContextId;
            }
            set
            {
                this._securityContextId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalVisualDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>
    {
        
        private string _name;
        
        public PrincipalVisualDTO()
        {
        }
        
        public PrincipalVisualDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipal(domainObject, this);
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRichDTO))]
    public partial class PrincipalSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>
    {
        
        private System.Guid? _externalId;
        
        private string _name;
        
        public PrincipalSimpleDTO()
        {
        }
        
        public PrincipalSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipal(domainObject, this);
        }
        
        public PrincipalSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? ExternalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                this._externalId = value;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.PrincipalStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRichDTO))]
    public partial class PrincipalFullDTO : Framework.Authorization.Generated.DTO.PrincipalSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _runAs;
        
        public PrincipalFullDTO()
        {
        }
        
        public PrincipalFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipal(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO RunAs
        {
            get
            {
                return this._runAs;
            }
            set
            {
                this._runAs = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalRichDTO : Framework.Authorization.Generated.DTO.PrincipalFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO> _permissions = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO>();
        
        public PrincipalRichDTO()
        {
        }
        
        public PrincipalRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipal(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO> Permissions
        {
            get
            {
                return this._permissions;
            }
            set
            {
                this._permissions = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.Principal, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.Principal>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>
    {
        
        private bool _active = true;
        
        private System.Guid? _externalId;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionStrictDTO> _permissions = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionStrictDTO>();
        
        private Framework.Authorization.Generated.DTO.PrincipalIdentityDTO _runAs;
        
        public PrincipalStrictDTO()
        {
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPrincipal(this, source);
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPrincipal(this, source);
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPrincipal(this, source);
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForPrincipal(this, source);
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForPrincipal(this, source);
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? ExternalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                this._externalId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionStrictDTO> Permissions
        {
            get
            {
                return this._permissions;
            }
            set
            {
                this._permissions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO RunAs
        {
            get
            {
                return this._runAs;
            }
            set
            {
                this._runAs = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject)
        {
            mappingService.MapPrincipal(this, domainObject);
        }
        
        public Framework.Authorization.Domain.Principal ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPrincipal(this);
        }
        
        public Framework.Authorization.Domain.Principal ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToPrincipal(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventRichDTO Principal;
        
        public PrincipalSaveEventDTO()
        {
        }
        
        public PrincipalSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject)
        {
            this.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventRichDTO Principal;
        
        public PrincipalRemoveEventDTO()
        {
        }
        
        public PrincipalRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject)
        {
            this.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalEventRichDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid? _externalId;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionEventRichDTO> _permissions;
        
        private Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO _runAs;
        
        public PrincipalEventRichDTO()
        {
        }
        
        public PrincipalEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject)
        {
            mappingService.MapPrincipal(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? ExternalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                this._externalId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionEventRichDTO> Permissions
        {
            get
            {
                return this._permissions;
            }
            set
            {
                this._permissions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO RunAs
        {
            get
            {
                return this._runAs;
            }
            set
            {
                this._runAs = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.Principal), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid? _externalId;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public PrincipalEventSimpleDTO()
        {
        }
        
        public PrincipalEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.Principal domainObject)
        {
            mappingService.MapPrincipal(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? ExternalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                this._externalId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO))]
    public partial class PrincipalCreateModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public PrincipalCreateModelSimpleDTO()
        {
        }
        
        public PrincipalCreateModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipalCreateModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO))]
    public partial class PrincipalCreateModelFullDTO : Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO
    {
        
        public PrincipalCreateModelFullDTO()
        {
        }
        
        public PrincipalCreateModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipalCreateModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalCreateModelRichDTO : Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO
    {
        
        public PrincipalCreateModelRichDTO()
        {
        }
        
        public PrincipalCreateModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipalCreateModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalCreateModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PrincipalCreateModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PrincipalCreateModel>
    {
        
        public PrincipalCreateModelStrictDTO()
        {
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPrincipalCreateModel(this, source);
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPrincipalCreateModel(this, source);
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPrincipalCreateModel(this, source);
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject)
        {
            mappingService.MapPrincipalCreateModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.PrincipalCreateModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPrincipalCreateModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalCreateModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO PrincipalCreateModel;
        
        public PrincipalCreateModelSaveEventDTO()
        {
        }
        
        public PrincipalCreateModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject)
        {
            this.PrincipalCreateModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalCreateModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO PrincipalCreateModel;
        
        public PrincipalCreateModelRemoveEventDTO()
        {
        }
        
        public PrincipalCreateModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject)
        {
            this.PrincipalCreateModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalCreateModelEventRichDTO
    {
        
        public PrincipalCreateModelEventRichDTO()
        {
        }
        
        public PrincipalCreateModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject)
        {
            mappingService.MapPrincipalCreateModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalCreateModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalCreateModelEventSimpleDTO
    {
        
        public PrincipalCreateModelEventSimpleDTO()
        {
        }
        
        public PrincipalCreateModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalCreateModel domainObject)
        {
            mappingService.MapPrincipalCreateModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO))]
    public partial class PrincipalRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public PrincipalRootFilterModelSimpleDTO()
        {
        }
        
        public PrincipalRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipalRootFilterModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO))]
    public partial class PrincipalRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _businessRole;
        
        public PrincipalRootFilterModelFullDTO()
        {
        }
        
        public PrincipalRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipalRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                this._businessRole = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO
    {
        
        public PrincipalRootFilterModelRichDTO()
        {
        }
        
        public PrincipalRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPrincipalRootFilterModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PrincipalRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.PrincipalRootFilterModel>
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO _businessRole;
        
        public PrincipalRootFilterModelStrictDTO()
        {
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPrincipalRootFilterModel(this, source);
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPrincipalRootFilterModel(this, source);
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPrincipalRootFilterModel(this, source);
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                this._businessRole = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject)
        {
            mappingService.MapPrincipalRootFilterModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.PrincipalRootFilterModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToPrincipalRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalRootFilterModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO PrincipalRootFilterModel;
        
        public PrincipalRootFilterModelSaveEventDTO()
        {
        }
        
        public PrincipalRootFilterModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject)
        {
            this.PrincipalRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalRootFilterModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO PrincipalRootFilterModel;
        
        public PrincipalRootFilterModelRemoveEventDTO()
        {
        }
        
        public PrincipalRootFilterModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject)
        {
            this.PrincipalRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalRootFilterModelEventRichDTO
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO _businessRole;
        
        public PrincipalRootFilterModelEventRichDTO()
        {
        }
        
        public PrincipalRootFilterModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject)
        {
            mappingService.MapPrincipalRootFilterModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                this._businessRole = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.PrincipalRootFilterModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class PrincipalRootFilterModelEventSimpleDTO
    {
        
        public PrincipalRootFilterModelEventSimpleDTO()
        {
        }
        
        public PrincipalRootFilterModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject)
        {
            mappingService.MapPrincipalRootFilterModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityContextTypeVisualDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO>
    {
        
        private string _name;
        
        public SecurityContextTypeVisualDTO()
        {
        }
        
        public SecurityContextTypeVisualDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextType(domainObject, this);
        }
        
        public Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO))]
    public partial class SecurityContextTypeSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO>
    {
        
        private string _name;
        
        public SecurityContextTypeSimpleDTO()
        {
        }
        
        public SecurityContextTypeSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextType(domainObject, this);
        }
        
        public SecurityContextTypeSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO))]
    public partial class SecurityContextTypeFullDTO : Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO
    {
        
        public SecurityContextTypeFullDTO()
        {
        }
        
        public SecurityContextTypeFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextType(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityContextTypeRichDTO : Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO
    {
        
        public SecurityContextTypeRichDTO()
        {
        }
        
        public SecurityContextTypeRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextType(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityContextTypeStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.SecurityContextType, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.SecurityContextType>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO>
    {
        
        private System.Guid _id;
        
        public SecurityContextTypeStrictDTO()
        {
        }
        
        public SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForSecurityContextType(this, source);
        }
        
        public SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForSecurityContextType(this, source);
        }
        
        public SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForSecurityContextType(this, source);
        }
        
        public SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForSecurityContextType(this, source);
        }
        
        private SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForSecurityContextType(this, source);
        }
        
        private SecurityContextTypeStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO(this.Id);
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            mappingService.MapSecurityContextType(this, domainObject);
        }
        
        public Framework.Authorization.Domain.SecurityContextType ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToSecurityContextType(this);
        }
        
        public Framework.Authorization.Domain.SecurityContextType ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToSecurityContextType(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO SecurityContextType;
        
        public SecurityContextTypeSaveEventDTO()
        {
        }
        
        public SecurityContextTypeSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            this.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO SecurityContextType;
        
        public SecurityContextTypeRemoveEventDTO()
        {
        }
        
        public SecurityContextTypeRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            this.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeEventRichDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public SecurityContextTypeEventRichDTO()
        {
        }
        
        public SecurityContextTypeEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            mappingService.MapSecurityContextType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextType), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public SecurityContextTypeEventSimpleDTO()
        {
        }
        
        public SecurityContextTypeEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            mappingService.MapSecurityContextType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO))]
    public partial class SecurityContextTypeRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public SecurityContextTypeRootFilterModelSimpleDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextTypeRootFilterModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO))]
    public partial class SecurityContextTypeRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO
    {
        
        public SecurityContextTypeRootFilterModelFullDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextTypeRootFilterModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityContextTypeRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO
    {
        
        public SecurityContextTypeRootFilterModelRichDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityContextTypeRootFilterModel(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityContextTypeRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel>
    {
        
        public SecurityContextTypeRootFilterModelStrictDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForSecurityContextTypeRootFilterModel(this, source);
        }
        
        public SecurityContextTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SecurityContextTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForSecurityContextTypeRootFilterModel(this, source);
        }
        
        public SecurityContextTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SecurityContextTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForSecurityContextTypeRootFilterModel(this, source);
        }
        
        public SecurityContextTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject)
        {
            mappingService.MapSecurityContextTypeRootFilterModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.SecurityContextTypeRootFilterModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToSecurityContextTypeRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeRootFilterModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO SecurityContextTypeRootFilterModel;
        
        public SecurityContextTypeRootFilterModelSaveEventDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject)
        {
            this.SecurityContextTypeRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeRootFilterModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO SecurityContextTypeRootFilterModel;
        
        public SecurityContextTypeRootFilterModelRemoveEventDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject)
        {
            this.SecurityContextTypeRootFilterModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeRootFilterModelEventRichDTO
    {
        
        public SecurityContextTypeRootFilterModelEventRichDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject)
        {
            mappingService.MapSecurityContextTypeRootFilterModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityContextTypeRootFilterModelEventSimpleDTO
    {
        
        public SecurityContextTypeRootFilterModelEventSimpleDTO()
        {
        }
        
        public SecurityContextTypeRootFilterModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject)
        {
            mappingService.MapSecurityContextTypeRootFilterModel(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityEntityFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityEntityRichDTO))]
    public partial class SecurityEntitySimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        private bool _active;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Guid _parentId;
        
        public SecurityEntitySimpleDTO()
        {
        }
        
        public SecurityEntitySimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityEntity(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                this._parentId = value;
            }
        }
        
        public virtual Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityEntityRichDTO))]
    public partial class SecurityEntityFullDTO : Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO
    {
        
        public SecurityEntityFullDTO()
        {
        }
        
        public SecurityEntityFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityEntity(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityEntityRichDTO : Framework.Authorization.Generated.DTO.SecurityEntityFullDTO
    {
        
        public SecurityEntityRichDTO()
        {
        }
        
        public SecurityEntityRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapSecurityEntity(domainObject, this);
        }
        
        public override Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityEntityStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.SecurityEntity>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.SecurityEntity>
    {
        
        private bool _active;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Guid _parentId;
        
        public SecurityEntityStrictDTO()
        {
        }
        
        public SecurityEntityStrictDTO(Framework.Authorization.Generated.DTO.SecurityEntityRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SecurityEntityFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForSecurityEntity(this, source);
        }
        
        public SecurityEntityStrictDTO(Framework.Authorization.Generated.DTO.SecurityEntityRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SecurityEntityStrictDTO(Framework.Authorization.Generated.DTO.SecurityEntityFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForSecurityEntity(this, source);
        }
        
        public SecurityEntityStrictDTO(Framework.Authorization.Generated.DTO.SecurityEntityFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SecurityEntityStrictDTO(Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForSecurityEntity(this, source);
        }
        
        public SecurityEntityStrictDTO(Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                this._parentId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject)
        {
            mappingService.MapSecurityEntity(this, domainObject);
        }
        
        public Framework.Authorization.Domain.SecurityEntity ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToSecurityEntity(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityEntitySaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO SecurityEntity;
        
        public SecurityEntitySaveEventDTO()
        {
        }
        
        public SecurityEntitySaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject)
        {
            this.SecurityEntity = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityEntityRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO SecurityEntity;
        
        public SecurityEntityRemoveEventDTO()
        {
        }
        
        public SecurityEntityRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject)
        {
            this.SecurityEntity = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityEntityEventRichDTO
    {
        
        private bool _active;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Guid _parentId;
        
        public SecurityEntityEventRichDTO()
        {
        }
        
        public SecurityEntityEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject)
        {
            mappingService.MapSecurityEntity(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                this._parentId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.SecurityEntity), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class SecurityEntityEventSimpleDTO
    {
        
        private bool _active;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Guid _parentId;
        
        public SecurityEntityEventSimpleDTO()
        {
        }
        
        public SecurityEntityEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.SecurityEntity domainObject)
        {
            mappingService.MapSecurityEntity(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                this._parentId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO))]
    public partial class UpdatePermissionDelegatesModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO
    {
        
        public UpdatePermissionDelegatesModelSimpleDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapUpdatePermissionDelegatesModel(domainObject, this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO))]
    public partial class UpdatePermissionDelegatesModelFullDTO : Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO
    {
        
        private Framework.Authorization.Generated.DTO.PermissionSimpleDTO _delegateFromPermission;
        
        public UpdatePermissionDelegatesModelFullDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelFullDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapUpdatePermissionDelegatesModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                this._delegateFromPermission = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class UpdatePermissionDelegatesModelRichDTO : Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> _addItems = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO>();
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionSimpleDTO> _removeItems = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionSimpleDTO>();
        
        public UpdatePermissionDelegatesModelRichDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapUpdatePermissionDelegatesModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> AddItems
        {
            get
            {
                return this._addItems;
            }
            set
            {
                this._addItems = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionSimpleDTO> RemoveItems
        {
            get
            {
                return this._removeItems;
            }
            set
            {
                this._removeItems = value;
            }
        }
        
        public override Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class UpdatePermissionDelegatesModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel>
    {
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO> _addItems = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO>();
        
        private Framework.Authorization.Generated.DTO.PermissionIdentityDTO _delegateFromPermission;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionIdentityDTO> _removeItems = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>();
        
        public UpdatePermissionDelegatesModelStrictDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForUpdatePermissionDelegatesModel(this, source);
        }
        
        public UpdatePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public UpdatePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForUpdatePermissionDelegatesModel(this, source);
        }
        
        public UpdatePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public UpdatePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForUpdatePermissionDelegatesModel(this, source);
        }
        
        public UpdatePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO> AddItems
        {
            get
            {
                return this._addItems;
            }
            set
            {
                this._addItems = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                this._delegateFromPermission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionIdentityDTO> RemoveItems
        {
            get
            {
                return this._removeItems;
            }
            set
            {
                this._removeItems = value;
            }
        }
        
        public void MapToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject)
        {
            mappingService.MapUpdatePermissionDelegatesModel(this, domainObject);
        }
        
        public Framework.Authorization.Domain.UpdatePermissionDelegatesModel ToDomainObject(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return mappingService.ToUpdatePermissionDelegatesModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class UpdatePermissionDelegatesModelSaveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO UpdatePermissionDelegatesModel;
        
        public UpdatePermissionDelegatesModelSaveEventDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelSaveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject)
        {
            this.UpdatePermissionDelegatesModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class UpdatePermissionDelegatesModelRemoveEventDTO : Framework.Authorization.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO UpdatePermissionDelegatesModel;
        
        public UpdatePermissionDelegatesModelRemoveEventDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelRemoveEventDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject)
        {
            this.UpdatePermissionDelegatesModel = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class UpdatePermissionDelegatesModelEventRichDTO
    {
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO> _addItems;
        
        private Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO _delegateFromPermission;
        
        private System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO> _removeItems;
        
        public UpdatePermissionDelegatesModelEventRichDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelEventRichDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject)
        {
            mappingService.MapUpdatePermissionDelegatesModel(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO> AddItems
        {
            get
            {
                return this._addItems;
            }
            set
            {
                this._addItems = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                this._delegateFromPermission = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO> RemoveItems
        {
            get
            {
                return this._removeItems;
            }
            set
            {
                this._removeItems = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Authorization.Domain.UpdatePermissionDelegatesModel), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://authorization.luxoft.com/IntegrationEvent")]
    public partial class UpdatePermissionDelegatesModelEventSimpleDTO
    {
        
        public UpdatePermissionDelegatesModelEventSimpleDTO()
        {
        }
        
        public UpdatePermissionDelegatesModelEventSimpleDTO(Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject)
        {
            mappingService.MapUpdatePermissionDelegatesModel(domainObject, this);
        }
    }
    
    #region 
	static
    public class LambdaHelper
    {
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleFullDTO ToFullDTO(this Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO ToFullDTO(this Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO ToFullDTO(this Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO ToFullDTO(this Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO ToFullDTO(this Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionFullDTO ToFullDTO(this Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO ToFullDTO(this Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO ToFullDTO(this Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO ToFullDTO(this Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalFullDTO ToFullDTO(this Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO ToFullDTO(this Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO ToFullDTO(this Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO ToFullDTO(this Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO ToFullDTO(this Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityEntityFullDTO ToFullDTO(this Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO ToFullDTO(this Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.ChangePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.DelegateToItemModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Permission> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionDirectFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRestriction> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextTypeRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityEntityFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityEntity> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.UpdatePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO ToIdentityDTO(this Framework.Authorization.Domain.BusinessRole domainObject)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionIdentityDTO ToIdentityDTO(this Framework.Authorization.Domain.Permission domainObject)
        {
            return new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO ToIdentityDTO(this Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO(domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalIdentityDTO ToIdentityDTO(this Framework.Authorization.Domain.Principal domainObject)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO ToIdentityDTO(this Framework.Authorization.Domain.SecurityContextType domainObject)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO(domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Permission> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRestriction> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleRichDTO ToRichDTO(this Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO ToRichDTO(this Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO ToRichDTO(this Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO ToRichDTO(this Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO ToRichDTO(this Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRichDTO ToRichDTO(this Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO ToRichDTO(this Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO ToRichDTO(this Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO ToRichDTO(this Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalRichDTO ToRichDTO(this Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO ToRichDTO(this Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO ToRichDTO(this Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO ToRichDTO(this Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO ToRichDTO(this Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityEntityRichDTO ToRichDTO(this Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO ToRichDTO(this Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.ChangePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.DelegateToItemModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Permission> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionDirectFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRestriction> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextTypeRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityEntityRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityEntity> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.UpdatePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO ToRichEventDTO(this Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.ChangePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.DelegateToItemModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Permission> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionDirectFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRestriction> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextTypeRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityEntity> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.UpdatePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO ToSimpleDTO(this Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.ChangePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.DelegateToItemModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Permission> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionDirectFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRestriction> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextTypeRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityEntity> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.UpdatePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.DelegateToItemModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRestrictionEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRestrictionEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalCreateModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityEntityEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventSimpleDTO ToSimpleEventDTO(this Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRoleRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.ChangePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.DelegateToItemModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Permission> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionDirectFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRestrictionEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRestriction> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PermissionRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalCreateModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalCreateModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.PrincipalRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextTypeRootFilterModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityEntityEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityEntity> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.UpdatePermissionDelegatesModel> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO ToVisualDTO(this Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalVisualDTO ToVisualDTO(this Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Authorization.Generated.DTO.SecurityContextTypeVisualDTO ToVisualDTO(this Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return new Framework.Authorization.Generated.DTO.SecurityContextTypeVisualDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.BusinessRole> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PrincipalVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.Principal> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SecurityContextTypeVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Authorization.Domain.SecurityContextType> domainObjects, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Authorization.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
    }
    #endregion
    
    public partial interface IAuthorizationDTOMappingService : Framework.DomainDriven.IDTOMappingService<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        void MapAuditPersistentDomainObjectBase(Framework.Authorization.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO mappingObject);
        
        void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO mappingObject);
        
        void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO mappingObject);
        
        void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleFullDTO mappingObject);
        
        void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRichDTO mappingObject);
        
        void MapBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO mappingObject, Framework.Authorization.Domain.BusinessRole domainObject);
        
        void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO mappingObject);
        
        void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO mappingObject);
        
        void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO mappingObject);
        
        void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO mappingObject);
        
        void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO mappingObject);
        
        void MapBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO mappingObject, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject);
        
        void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO mappingObject);
        
        void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventSimpleDTO mappingObject);
        
        void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO mappingObject);
        
        void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO mappingObject);
        
        void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO mappingObject);
        
        void MapBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject);
        
        void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO mappingObject);
        
        void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventSimpleDTO mappingObject);
        
        void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO mappingObject);
        
        void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO mappingObject);
        
        void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO mappingObject);
        
        void MapChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO mappingObject, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject);
        
        void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO mappingObject);
        
        void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventSimpleDTO mappingObject);
        
        void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO mappingObject);
        
        void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO mappingObject);
        
        void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO mappingObject);
        
        void MapDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO mappingObject, Framework.Authorization.Domain.DelegateToItemModel domainObject);
        
        void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO mappingObject);
        
        void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelEventSimpleDTO mappingObject);
        
        void MapDomainObjectBase(Framework.Authorization.Domain.DomainObjectBase domainObject, Framework.Authorization.Generated.DTO.BaseAbstractDTO mappingObject);
        
        void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionSimpleDTO mappingObject);
        
        void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionFullDTO mappingObject);
        
        void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionRichDTO mappingObject);
        
        void MapPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO mappingObject, Framework.Authorization.Domain.Permission domainObject);
        
        void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionEventRichDTO mappingObject);
        
        void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO mappingObject);
        
        void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO mappingObject);
        
        void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO mappingObject);
        
        void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO mappingObject);
        
        void MapPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject);
        
        void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO mappingObject);
        
        void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventSimpleDTO mappingObject);
        
        void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO mappingObject);
        
        void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO mappingObject);
        
        void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO mappingObject);
        
        void MapPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO mappingObject, Framework.Authorization.Domain.PermissionRestriction domainObject);
        
        void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO mappingObject);
        
        void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionEventSimpleDTO mappingObject);
        
        void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO mappingObject);
        
        void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO mappingObject);
        
        void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO mappingObject);
        
        void MapPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.PermissionRootFilterModel domainObject);
        
        void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO mappingObject);
        
        void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventSimpleDTO mappingObject);
        
        void MapPersistentDomainObjectBase(Framework.Authorization.Domain.PersistentDomainObjectBase domainObject, Framework.Authorization.Generated.DTO.BasePersistentDTO mappingObject);
        
        void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalVisualDTO mappingObject);
        
        void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalSimpleDTO mappingObject);
        
        void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalFullDTO mappingObject);
        
        void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalRichDTO mappingObject);
        
        void MapPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO mappingObject, Framework.Authorization.Domain.Principal domainObject);
        
        void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalEventRichDTO mappingObject);
        
        void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO mappingObject);
        
        void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO mappingObject);
        
        void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO mappingObject);
        
        void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO mappingObject);
        
        void MapPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO mappingObject, Framework.Authorization.Domain.PrincipalCreateModel domainObject);
        
        void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO mappingObject);
        
        void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelEventSimpleDTO mappingObject);
        
        void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO mappingObject);
        
        void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO mappingObject);
        
        void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO mappingObject);
        
        void MapPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject);
        
        void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO mappingObject);
        
        void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventSimpleDTO mappingObject);
        
        void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeVisualDTO mappingObject);
        
        void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO mappingObject);
        
        void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO mappingObject);
        
        void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO mappingObject);
        
        void MapSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO mappingObject, Framework.Authorization.Domain.SecurityContextType domainObject);
        
        void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO mappingObject);
        
        void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO mappingObject);
        
        void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO mappingObject);
        
        void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO mappingObject);
        
        void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO mappingObject);
        
        void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject);
        
        void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO mappingObject);
        
        void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventSimpleDTO mappingObject);
        
        void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO mappingObject);
        
        void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityFullDTO mappingObject);
        
        void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityRichDTO mappingObject);
        
        void MapSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO mappingObject, Framework.Authorization.Domain.SecurityEntity domainObject);
        
        void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO mappingObject);
        
        void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityEventSimpleDTO mappingObject);
        
        void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO mappingObject);
        
        void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO mappingObject);
        
        void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO mappingObject);
        
        void MapUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO mappingObject, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject);
        
        void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO mappingObject);
        
        void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventSimpleDTO mappingObject);
        
        Framework.Authorization.Domain.BusinessRole ToBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO businessRoleIdentityDTO);
        
        Framework.Authorization.Domain.BusinessRole ToBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO businessRoleStrictDTO);
        
        Framework.Authorization.Domain.BusinessRole ToBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO businessRoleStrictDTO, bool allowCreate);
        
        Framework.Authorization.Domain.BusinessRoleCreateModel ToBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO businessRoleCreateModelStrictDTO);
        
        Framework.Authorization.Domain.BusinessRoleRootFilterModel ToBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO businessRoleRootFilterModelStrictDTO);
        
        Framework.Authorization.Domain.ChangePermissionDelegatesModel ToChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO changePermissionDelegatesModelStrictDTO);
        
        Framework.Authorization.Domain.DelegateToItemModel ToDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO delegateToItemModelStrictDTO);
        
        Framework.Authorization.Domain.Permission ToPermission(Framework.Authorization.Generated.DTO.PermissionIdentityDTO permissionIdentityDTO);
        
        Framework.Authorization.Domain.Permission ToPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO permissionStrictDTO);
        
        Framework.Authorization.Domain.Permission ToPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO permissionStrictDTO, Framework.Authorization.Domain.Principal master);
        
        Framework.Authorization.Domain.PermissionDirectFilterModel ToPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO permissionDirectFilterModelStrictDTO);
        
        Framework.Authorization.Domain.PermissionRestriction ToPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO permissionRestrictionIdentityDTO);
        
        Framework.Authorization.Domain.PermissionRestriction ToPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO permissionRestrictionStrictDTO);
        
        Framework.Authorization.Domain.PermissionRestriction ToPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO permissionRestrictionStrictDTO, Framework.Authorization.Domain.Permission master);
        
        Framework.Authorization.Domain.PermissionRootFilterModel ToPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO permissionRootFilterModelStrictDTO);
        
        Framework.Authorization.Domain.Principal ToPrincipal(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO principalIdentityDTO);
        
        Framework.Authorization.Domain.Principal ToPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO principalStrictDTO);
        
        Framework.Authorization.Domain.Principal ToPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO principalStrictDTO, bool allowCreate);
        
        Framework.Authorization.Domain.PrincipalCreateModel ToPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO principalCreateModelStrictDTO);
        
        Framework.Authorization.Domain.PrincipalRootFilterModel ToPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO principalRootFilterModelStrictDTO);
        
        Framework.Authorization.Domain.SecurityContextType ToSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO securityContextTypeIdentityDTO);
        
        Framework.Authorization.Domain.SecurityContextType ToSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO securityContextTypeStrictDTO);
        
        Framework.Authorization.Domain.SecurityContextType ToSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO securityContextTypeStrictDTO, bool allowCreate);
        
        Framework.Authorization.Domain.SecurityContextTypeRootFilterModel ToSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO securityContextTypeRootFilterModelStrictDTO);
        
        Framework.Authorization.Domain.SecurityEntity ToSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO securityEntityStrictDTO);
        
        Framework.Authorization.Domain.UpdatePermissionDelegatesModel ToUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO updatePermissionDelegatesModelStrictDTO);
    }
    
    public abstract partial class AuthorizationServerPrimitiveDTOMappingServiceBase : Framework.DomainDriven.DTOMappingService<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.AuditPersistentDomainObjectBase, System.Guid, Framework.Core.Ignore>, Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService
    {
        
        protected AuthorizationServerPrimitiveDTOMappingServiceBase(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        public virtual void MapAuditPersistentDomainObjectBase(Framework.Authorization.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.IsAdmin = domainObject.IsAdmin;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleFullDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO mappingObject, Framework.Authorization.Domain.BusinessRole domainObject)
        {
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Description = domainObject.Description;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsAdmin = domainObject.IsAdmin;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapBusinessRole(Framework.Authorization.Domain.BusinessRole domainObject, Framework.Authorization.Generated.DTO.BusinessRoleEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Description = domainObject.Description;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsAdmin = domainObject.IsAdmin;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO mappingObject, Framework.Authorization.Domain.BusinessRoleCreateModel domainObject)
        {
        }
        
        public virtual void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleCreateModel(Framework.Authorization.Domain.BusinessRoleCreateModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
        }
        
        public virtual void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Principal, default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)))
            {
                domainObject.Principal = this.ToPrincipal(mappingObject.Principal);
            }
            else
            {
                domainObject.Principal = null;
            }
        }
        
        public virtual void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
        }
        
        public virtual void MapBusinessRoleRootFilterModel(Framework.Authorization.Domain.BusinessRoleRootFilterModel domainObject, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DelegateFromPermission, null))
            {
                mappingObject.DelegateFromPermission = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DelegateFromPermission, this);
            }
            else
            {
                mappingObject.DelegateFromPermission = null;
            }
        }
        
        public virtual void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO mappingObject)
        {
            mappingObject.Items = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Items, this);
        }
        
        public virtual void MapChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO mappingObject, Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject)
        {
            if (!object.Equals(mappingObject.DelegateFromPermission, default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO)))
            {
                domainObject.DelegateFromPermission = this.ToPermission(mappingObject.DelegateFromPermission);
            }
            else
            {
                domainObject.DelegateFromPermission = null;
            }
            if (!object.ReferenceEquals(mappingObject.Items, null))
            {
                domainObject.Items = Framework.Core.EnumerableExtensions.ToList(mappingObject.Items, v => this.ToDelegateToItemModel(v));
            }
        }
        
        public virtual void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DelegateFromPermission, null))
            {
                mappingObject.DelegateFromPermission = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.DelegateFromPermission, this);
            }
            else
            {
                mappingObject.DelegateFromPermission = null;
            }
            mappingObject.Items = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Items, this);
        }
        
        public virtual void MapChangePermissionDelegatesModel(Framework.Authorization.Domain.ChangePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
        }
        
        public virtual void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Permission, null))
            {
                mappingObject.Permission = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTO(domainObject.Permission, this);
            }
            else
            {
                mappingObject.Permission = null;
            }
        }
        
        public virtual void MapDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO mappingObject, Framework.Authorization.Domain.DelegateToItemModel domainObject)
        {
            if (!object.Equals(mappingObject.Permission, default(Framework.Authorization.Generated.DTO.PermissionStrictDTO)))
            {
                domainObject.Permission = this.ToPermission(mappingObject.Permission.Identity);
            }
            else
            {
                domainObject.Permission = null;
            }
            if (!object.Equals(mappingObject.Principal, default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)))
            {
                domainObject.Principal = this.ToPrincipal(mappingObject.Principal);
            }
            else
            {
                domainObject.Principal = null;
            }
        }
        
        public virtual void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Permission, null))
            {
                mappingObject.Permission = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject.Permission, this);
            }
            else
            {
                mappingObject.Permission = null;
            }
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
        }
        
        public virtual void MapDelegateToItemModel(Framework.Authorization.Domain.DelegateToItemModel domainObject, Framework.Authorization.Generated.DTO.DelegateToItemModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapDomainObjectBase(Framework.Authorization.Domain.DomainObjectBase domainObject, Framework.Authorization.Generated.DTO.BaseAbstractDTO mappingObject)
        {
        }
        
        public virtual void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionSimpleDTO mappingObject)
        {
            mappingObject.Comment = domainObject.Comment;
            mappingObject.IsDelegatedFrom = domainObject.IsDelegatedFrom;
            mappingObject.IsDelegatedTo = domainObject.IsDelegatedTo;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DelegatedFromPrincipal, null))
            {
                mappingObject.DelegatedFromPrincipal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DelegatedFromPrincipal, this);
            }
            else
            {
                mappingObject.DelegatedFromPrincipal = null;
            }
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
        }
        
        public virtual void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionRichDTO mappingObject)
        {
            mappingObject.DelegatedTo = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.DelegatedTo, this);
            mappingObject.Restrictions = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Restrictions, this);
        }
        
        public virtual void MapPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO mappingObject, Framework.Authorization.Domain.Permission domainObject)
        {
            domainObject.Comment = mappingObject.Comment;
            domainObject.Period = mappingObject.Period;
            if (!object.ReferenceEquals(mappingObject.Restrictions, null))
            {
                this.GetCollectionMappingService<Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO, Framework.Authorization.Domain.PermissionRestriction>(detailDTO => this.ToPermissionRestriction(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Authorization.Domain.Permission, Framework.Authorization.Domain.PermissionRestriction>(domainObject, detail)).Map(mappingObject.Restrictions, domainObject.Restrictions);
            }
            if (!object.Equals(mappingObject.Role, default(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO)))
            {
                domainObject.Role = this.ToBusinessRole(mappingObject.Role);
            }
            else
            {
                domainObject.Role = null;
            }
        }
        
        public virtual void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Comment = domainObject.Comment;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.DelegatedFromPrincipal, null))
            {
                mappingObject.DelegatedFromPrincipal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.DelegatedFromPrincipal, this);
            }
            else
            {
                mappingObject.DelegatedFromPrincipal = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.IsDelegatedFrom = domainObject.IsDelegatedFrom;
            mappingObject.IsDelegatedTo = domainObject.IsDelegatedTo;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Period = domainObject.Period;
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
            mappingObject.Restrictions = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Restrictions, this);
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
        }
        
        public virtual void MapPermission(Framework.Authorization.Domain.Permission domainObject, Framework.Authorization.Generated.DTO.PermissionEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Comment = domainObject.Comment;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsDelegatedFrom = domainObject.IsDelegatedFrom;
            mappingObject.IsDelegatedTo = domainObject.IsDelegatedTo;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO mappingObject)
        {
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
            mappingObject.StrongDirect = domainObject.StrongDirect;
        }
        
        public virtual void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.SecurityContextType, null))
            {
                mappingObject.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.SecurityContextType, this);
            }
            else
            {
                mappingObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.PermissionDirectFilterModel domainObject)
        {
            domainObject.SecurityContextId = mappingObject.SecurityContextId;
            if (!object.Equals(mappingObject.SecurityContextType, default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO)))
            {
                domainObject.SecurityContextType = this.ToSecurityContextType(mappingObject.SecurityContextType);
            }
            else
            {
                domainObject.SecurityContextType = null;
            }
            domainObject.StrongDirect = mappingObject.StrongDirect;
        }
        
        public virtual void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventRichDTO mappingObject)
        {
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
            if (!object.ReferenceEquals(domainObject.SecurityContextType, null))
            {
                mappingObject.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.SecurityContextType, this);
            }
            else
            {
                mappingObject.SecurityContextType = null;
            }
            mappingObject.StrongDirect = domainObject.StrongDirect;
        }
        
        public virtual void MapPermissionDirectFilterModel(Framework.Authorization.Domain.PermissionDirectFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelEventSimpleDTO mappingObject)
        {
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
            mappingObject.StrongDirect = domainObject.StrongDirect;
        }
        
        public virtual void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionSimpleDTO mappingObject)
        {
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
        }
        
        public virtual void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Permission, null))
            {
                mappingObject.Permission = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Permission, this);
            }
            else
            {
                mappingObject.Permission = null;
            }
            if (!object.ReferenceEquals(domainObject.SecurityContextType, null))
            {
                mappingObject.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.SecurityContextType, this);
            }
            else
            {
                mappingObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionRichDTO mappingObject)
        {
        }
        
        public virtual void MapPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO mappingObject, Framework.Authorization.Domain.PermissionRestriction domainObject)
        {
            domainObject.SecurityContextId = mappingObject.SecurityContextId;
            if (!object.Equals(mappingObject.SecurityContextType, default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO)))
            {
                domainObject.SecurityContextType = this.ToSecurityContextType(mappingObject.SecurityContextType);
            }
            else
            {
                domainObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Permission, null))
            {
                mappingObject.Permission = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Permission, this);
            }
            else
            {
                mappingObject.Permission = null;
            }
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
            if (!object.ReferenceEquals(domainObject.SecurityContextType, null))
            {
                mappingObject.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.SecurityContextType, this);
            }
            else
            {
                mappingObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionRestriction(Framework.Authorization.Domain.PermissionRestriction domainObject, Framework.Authorization.Generated.DTO.PermissionRestrictionEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
        }
        
        public virtual void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelSimpleDTO mappingObject)
        {
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
        }
        
        public virtual void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DelagetedFrom, null))
            {
                mappingObject.DelagetedFrom = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DelagetedFrom, this);
            }
            else
            {
                mappingObject.DelagetedFrom = null;
            }
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
            if (!object.ReferenceEquals(domainObject.SecurityContextType, null))
            {
                mappingObject.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.SecurityContextType, this);
            }
            else
            {
                mappingObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.PermissionRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.DelagetedFrom, default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO)))
            {
                domainObject.DelagetedFrom = this.ToPermission(mappingObject.DelagetedFrom);
            }
            else
            {
                domainObject.DelagetedFrom = null;
            }
            if (!object.Equals(mappingObject.Principal, default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)))
            {
                domainObject.Principal = this.ToPrincipal(mappingObject.Principal);
            }
            else
            {
                domainObject.Principal = null;
            }
            domainObject.SecurityContextId = mappingObject.SecurityContextId;
            if (!object.Equals(mappingObject.SecurityContextType, default(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO)))
            {
                domainObject.SecurityContextType = this.ToSecurityContextType(mappingObject.SecurityContextType);
            }
            else
            {
                domainObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DelagetedFrom, null))
            {
                mappingObject.DelagetedFrom = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.DelagetedFrom, this);
            }
            else
            {
                mappingObject.DelagetedFrom = null;
            }
            if (!object.ReferenceEquals(domainObject.Principal, null))
            {
                mappingObject.Principal = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Principal, this);
            }
            else
            {
                mappingObject.Principal = null;
            }
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
            if (!object.ReferenceEquals(domainObject.SecurityContextType, null))
            {
                mappingObject.SecurityContextType = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.SecurityContextType, this);
            }
            else
            {
                mappingObject.SecurityContextType = null;
            }
        }
        
        public virtual void MapPermissionRootFilterModel(Framework.Authorization.Domain.PermissionRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PermissionRootFilterModelEventSimpleDTO mappingObject)
        {
            mappingObject.SecurityContextId = domainObject.SecurityContextId;
        }
        
        public virtual void MapPersistentDomainObjectBase(Framework.Authorization.Domain.PersistentDomainObjectBase domainObject, Framework.Authorization.Generated.DTO.BasePersistentDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalSimpleDTO mappingObject)
        {
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.RunAs, null))
            {
                mappingObject.RunAs = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.RunAs, this);
            }
            else
            {
                mappingObject.RunAs = null;
            }
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalRichDTO mappingObject)
        {
            mappingObject.Permissions = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Permissions, this);
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO mappingObject, Framework.Authorization.Domain.Principal domainObject)
        {
            domainObject.Active = mappingObject.Active;
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.Permissions, null))
            {
                this.GetCollectionMappingService<Framework.Authorization.Generated.DTO.PermissionStrictDTO, Framework.Authorization.Domain.Permission>(detailDTO => this.ToPermission(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Authorization.Domain.Principal, Framework.Authorization.Domain.Permission>(domainObject, detail)).Map(mappingObject.Permissions, domainObject.Permissions);
            }
            if (!object.Equals(mappingObject.RunAs, default(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)))
            {
                domainObject.RunAs = this.ToPrincipal(mappingObject.RunAs);
            }
            else
            {
                domainObject.RunAs = null;
            }
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Permissions = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Permissions, this);
            if (!object.ReferenceEquals(domainObject.RunAs, null))
            {
                mappingObject.RunAs = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.RunAs, this);
            }
            else
            {
                mappingObject.RunAs = null;
            }
        }
        
        public virtual void MapPrincipal(Framework.Authorization.Domain.Principal domainObject, Framework.Authorization.Generated.DTO.PrincipalEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO mappingObject, Framework.Authorization.Domain.PrincipalCreateModel domainObject)
        {
        }
        
        public virtual void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalCreateModel(Framework.Authorization.Domain.PrincipalCreateModel domainObject, Framework.Authorization.Generated.DTO.PrincipalCreateModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessRole, null))
            {
                mappingObject.BusinessRole = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessRole, this);
            }
            else
            {
                mappingObject.BusinessRole = null;
            }
        }
        
        public virtual void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.PrincipalRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.BusinessRole, default(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO)))
            {
                domainObject.BusinessRole = this.ToBusinessRole(mappingObject.BusinessRole);
            }
            else
            {
                domainObject.BusinessRole = null;
            }
        }
        
        public virtual void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessRole, null))
            {
                mappingObject.BusinessRole = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessRole, this);
            }
            else
            {
                mappingObject.BusinessRole = null;
            }
        }
        
        public virtual void MapPrincipalRootFilterModel(Framework.Authorization.Domain.PrincipalRootFilterModel domainObject, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeFullDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRichDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO mappingObject, Framework.Authorization.Domain.SecurityContextType domainObject)
        {
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapSecurityContextType(Framework.Authorization.Domain.SecurityContextType domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelFullDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO mappingObject, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject)
        {
        }
        
        public virtual void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityContextTypeRootFilterModel(Framework.Authorization.Domain.SecurityContextTypeRootFilterModel domainObject, Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Id = domainObject.Id;
            mappingObject.Name = domainObject.Name;
            mappingObject.ParentId = domainObject.ParentId;
        }
        
        public virtual void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityFullDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityRichDTO mappingObject)
        {
        }
        
        public virtual void MapSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO mappingObject, Framework.Authorization.Domain.SecurityEntity domainObject)
        {
            domainObject.Active = mappingObject.Active;
            domainObject.Id = mappingObject.Id;
            domainObject.Name = mappingObject.Name;
            domainObject.ParentId = mappingObject.ParentId;
        }
        
        public virtual void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Id = domainObject.Id;
            mappingObject.Name = domainObject.Name;
            mappingObject.ParentId = domainObject.ParentId;
        }
        
        public virtual void MapSecurityEntity(Framework.Authorization.Domain.SecurityEntity domainObject, Framework.Authorization.Generated.DTO.SecurityEntityEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Id = domainObject.Id;
            mappingObject.Name = domainObject.Name;
            mappingObject.ParentId = domainObject.ParentId;
        }
        
        protected virtual void MapToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, TDomainObject domainObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Authorization.Domain.DomainObjectBase
        {
            mappingObject.MapToDomainObject(this, domainObject);
        }
        
        public virtual void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DelegateFromPermission, null))
            {
                mappingObject.DelegateFromPermission = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DelegateFromPermission, this);
            }
            else
            {
                mappingObject.DelegateFromPermission = null;
            }
        }
        
        public virtual void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelRichDTO mappingObject)
        {
            mappingObject.AddItems = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.AddItems, this);
            mappingObject.RemoveItems = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleDTOList(domainObject.RemoveItems, this);
        }
        
        public virtual void MapUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO mappingObject, Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.AddItems, null))
            {
                domainObject.AddItems = Framework.Core.EnumerableExtensions.ToList(mappingObject.AddItems, v => this.ToDelegateToItemModel(v));
            }
            if (!object.Equals(mappingObject.DelegateFromPermission, default(Framework.Authorization.Generated.DTO.PermissionIdentityDTO)))
            {
                domainObject.DelegateFromPermission = this.ToPermission(mappingObject.DelegateFromPermission);
            }
            else
            {
                domainObject.DelegateFromPermission = null;
            }
            if (!object.ReferenceEquals(mappingObject.RemoveItems, null))
            {
                domainObject.RemoveItems = Framework.Core.EnumerableExtensions.ToList(mappingObject.RemoveItems, v => this.ToPermission(v));
            }
        }
        
        public virtual void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventRichDTO mappingObject)
        {
            mappingObject.AddItems = Framework.Authorization.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.AddItems, this);
            if (!object.ReferenceEquals(domainObject.DelegateFromPermission, null))
            {
                mappingObject.DelegateFromPermission = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.DelegateFromPermission, this);
            }
            else
            {
                mappingObject.DelegateFromPermission = null;
            }
            mappingObject.RemoveItems = Framework.Authorization.Generated.DTO.LambdaHelper.ToSimpleEventDTOList(domainObject.RemoveItems, this);
        }
        
        public virtual void MapUpdatePermissionDelegatesModel(Framework.Authorization.Domain.UpdatePermissionDelegatesModel domainObject, Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelEventSimpleDTO mappingObject)
        {
        }
        
        public virtual Framework.Authorization.Domain.BusinessRole ToBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO businessRoleIdentityDTO)
        {
            return this.GetById<Framework.Authorization.Domain.BusinessRole>(businessRoleIdentityDTO.Id);
        }
        
        public virtual Framework.Authorization.Domain.BusinessRole ToBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO businessRoleStrictDTO)
        {
            return this.ToDomainObject<Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO, Framework.Authorization.Domain.BusinessRole>(businessRoleStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.BusinessRole ToBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO businessRoleStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessRoleStrictDTO, () => new Framework.Authorization.Domain.BusinessRole());
            }
            else
            {
                return this.ToBusinessRole(businessRoleStrictDTO);
            }
        }
        
        public virtual Framework.Authorization.Domain.BusinessRoleCreateModel ToBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO businessRoleCreateModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO, Framework.Authorization.Domain.BusinessRoleCreateModel>(businessRoleCreateModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.BusinessRoleRootFilterModel ToBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO businessRoleRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO, Framework.Authorization.Domain.BusinessRoleRootFilterModel>(businessRoleRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.ChangePermissionDelegatesModel ToChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO changePermissionDelegatesModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO, Framework.Authorization.Domain.ChangePermissionDelegatesModel>(changePermissionDelegatesModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.DelegateToItemModel ToDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO delegateToItemModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO, Framework.Authorization.Domain.DelegateToItemModel>(delegateToItemModelStrictDTO);
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Authorization.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetById<TDomainObject>(mappingObject.Id, Framework.DomainDriven.IdCheckMode.CheckAll);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, System.Func<TDomainObject> createFunc)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Authorization.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetByIdOrCreate<TDomainObject>(mappingObject.Id, createFunc);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObjectBase<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Authorization.Generated.DTO.IAuthorizationDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Authorization.Domain.DomainObjectBase, new ()
        {
            TDomainObject domainObject = new TDomainObject();
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        public virtual Framework.Authorization.Domain.Permission ToPermission(Framework.Authorization.Generated.DTO.PermissionIdentityDTO permissionIdentityDTO)
        {
            return this.GetById<Framework.Authorization.Domain.Permission>(permissionIdentityDTO.Id);
        }
        
        public virtual Framework.Authorization.Domain.Permission ToPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO permissionStrictDTO)
        {
            return this.ToDomainObject<Framework.Authorization.Generated.DTO.PermissionStrictDTO, Framework.Authorization.Domain.Permission>(permissionStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.Permission ToPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO permissionStrictDTO, Framework.Authorization.Domain.Principal principal)
        {
            return this.ToDomainObject(permissionStrictDTO, () => new Framework.Authorization.Domain.Permission(principal));
        }
        
        public virtual Framework.Authorization.Domain.PermissionDirectFilterModel ToPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO permissionDirectFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO, Framework.Authorization.Domain.PermissionDirectFilterModel>(permissionDirectFilterModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.PermissionRestriction ToPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionIdentityDTO permissionRestrictionIdentityDTO)
        {
            return this.GetById<Framework.Authorization.Domain.PermissionRestriction>(permissionRestrictionIdentityDTO.Id);
        }
        
        public virtual Framework.Authorization.Domain.PermissionRestriction ToPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO permissionRestrictionStrictDTO)
        {
            return this.ToDomainObject<Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO, Framework.Authorization.Domain.PermissionRestriction>(permissionRestrictionStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.PermissionRestriction ToPermissionRestriction(Framework.Authorization.Generated.DTO.PermissionRestrictionStrictDTO permissionRestrictionStrictDTO, Framework.Authorization.Domain.Permission permission)
        {
            return this.ToDomainObject(permissionRestrictionStrictDTO, () => new Framework.Authorization.Domain.PermissionRestriction(permission));
        }
        
        public virtual Framework.Authorization.Domain.PermissionRootFilterModel ToPermissionRootFilterModel(Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO permissionRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.PermissionRootFilterModelStrictDTO, Framework.Authorization.Domain.PermissionRootFilterModel>(permissionRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.Principal ToPrincipal(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO principalIdentityDTO)
        {
            return this.GetById<Framework.Authorization.Domain.Principal>(principalIdentityDTO.Id);
        }
        
        public virtual Framework.Authorization.Domain.Principal ToPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO principalStrictDTO)
        {
            return this.ToDomainObject<Framework.Authorization.Generated.DTO.PrincipalStrictDTO, Framework.Authorization.Domain.Principal>(principalStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.Principal ToPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO principalStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(principalStrictDTO, () => new Framework.Authorization.Domain.Principal());
            }
            else
            {
                return this.ToPrincipal(principalStrictDTO);
            }
        }
        
        public virtual Framework.Authorization.Domain.PrincipalCreateModel ToPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO principalCreateModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO, Framework.Authorization.Domain.PrincipalCreateModel>(principalCreateModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.PrincipalRootFilterModel ToPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO principalRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO, Framework.Authorization.Domain.PrincipalRootFilterModel>(principalRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.SecurityContextType ToSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeIdentityDTO securityContextTypeIdentityDTO)
        {
            return this.GetById<Framework.Authorization.Domain.SecurityContextType>(securityContextTypeIdentityDTO.Id);
        }
        
        public virtual Framework.Authorization.Domain.SecurityContextType ToSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO securityContextTypeStrictDTO)
        {
            return this.ToDomainObject<Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO, Framework.Authorization.Domain.SecurityContextType>(securityContextTypeStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.SecurityContextType ToSecurityContextType(Framework.Authorization.Generated.DTO.SecurityContextTypeStrictDTO securityContextTypeStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(securityContextTypeStrictDTO, () => new Framework.Authorization.Domain.SecurityContextType());
            }
            else
            {
                return this.ToSecurityContextType(securityContextTypeStrictDTO);
            }
        }
        
        public virtual Framework.Authorization.Domain.SecurityContextTypeRootFilterModel ToSecurityContextTypeRootFilterModel(Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO securityContextTypeRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.SecurityContextTypeRootFilterModelStrictDTO, Framework.Authorization.Domain.SecurityContextTypeRootFilterModel>(securityContextTypeRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.SecurityEntity ToSecurityEntity(Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO securityEntityStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.SecurityEntityStrictDTO, Framework.Authorization.Domain.SecurityEntity>(securityEntityStrictDTO);
        }
        
        public virtual Framework.Authorization.Domain.UpdatePermissionDelegatesModel ToUpdatePermissionDelegatesModel(Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO updatePermissionDelegatesModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Authorization.Generated.DTO.UpdatePermissionDelegatesModelStrictDTO, Framework.Authorization.Domain.UpdatePermissionDelegatesModel>(updatePermissionDelegatesModelStrictDTO);
        }
    }
    
    public partial class AuthorizationServerPrimitiveDTOMappingService : Framework.Authorization.Generated.DTO.AuthorizationServerPrimitiveDTOMappingServiceBase
    {
        
        public AuthorizationServerPrimitiveDTOMappingService(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
}
