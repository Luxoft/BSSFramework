//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Configuration.BLL
{
    
    
    public partial class ConfigurationMainFetchServiceBase : Framework.DomainDriven.MainFetchServiceBase<Framework.Configuration.Domain.PersistentDomainObjectBase>
    {
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.AccessableBusinessRoleReportRight> GetAccessableBusinessRoleReportRightContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.AccessableBusinessRoleReportRight>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.AccessableBusinessRoleReportRight>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.AccessableBusinessRoleReportRight>(fetchRootRule => fetchRootRule.SelectNested(accessableBusinessRoleReportRight => accessableBusinessRoleReportRight.Report));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.AccessableBusinessRoleReportRight>(fetchRootRule => fetchRootRule.SelectNested(accessableBusinessRoleReportRight => accessableBusinessRoleReportRight.Report));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.AccessableOperationReportRight> GetAccessableOperationReportRightContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.AccessableOperationReportRight>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.AccessableOperationReportRight>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.AccessableOperationReportRight>(fetchRootRule => fetchRootRule.SelectNested(accessableOperationReportRight => accessableOperationReportRight.Report));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.AccessableOperationReportRight>(fetchRootRule => fetchRootRule.SelectNested(accessableOperationReportRight => accessableOperationReportRight.Report));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.AccessablePrincipalReportRight> GetAccessablePrincipalReportRightContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.AccessablePrincipalReportRight>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.AccessablePrincipalReportRight>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.AccessablePrincipalReportRight>(fetchRootRule => fetchRootRule.SelectNested(accessablePrincipalReportRight => accessablePrincipalReportRight.Report));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.AccessablePrincipalReportRight>(fetchRootRule => fetchRootRule.SelectNested(accessablePrincipalReportRight => accessablePrincipalReportRight.Report));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Attachment> GetAttachmentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Attachment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Attachment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Attachment>(fetchRootRule => fetchRootRule.SelectNested(attachment => attachment.Container));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Attachment>(
                    fetchRootRule => fetchRootRule.SelectNested(attachment => attachment.Container),
                    fetchRootRule => fetchRootRule.SelectMany(attachment => attachment.Tags));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.AttachmentContainer> GetAttachmentContainerContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.AttachmentContainer>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.AttachmentContainer>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.AttachmentContainer>(fetchRootRule => fetchRootRule.SelectNested(attachmentContainer => attachmentContainer.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.AttachmentContainer>(
                    fetchRootRule => fetchRootRule.SelectMany(attachmentContainer => attachmentContainer.Attachments).SelectMany(attachment => attachment.Tags),
                    fetchRootRule => fetchRootRule.SelectNested(attachmentContainer => attachmentContainer.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.AttachmentTag> GetAttachmentTagContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.AttachmentTag>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.AttachmentTag>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.AttachmentTag>(fetchRootRule => fetchRootRule.SelectNested(attachmentTag => attachmentTag.Attachment));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.AttachmentTag>(fetchRootRule => fetchRootRule.SelectNested(attachmentTag => attachmentTag.Attachment));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.CodeFirstSubscription> GetCodeFirstSubscriptionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.CodeFirstSubscription>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.CodeFirstSubscription>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.CodeFirstSubscription>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.CodeFirstSubscription>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected override Framework.DomainDriven.IFetchContainer<TDomainObject> GetContainer<TDomainObject>(Framework.Transfering.ViewDTOType rule)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAttachmentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAttachmentContainerContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.AttachmentTag)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAttachmentTagContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.CodeFirstSubscription)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCodeFirstSubscriptionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ControlSettings)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetControlSettingsContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ControlSettingsParam)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetControlSettingsParamContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ControlSettingsParamValue)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetControlSettingsParamValueContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectEvent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainObjectEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectModification)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainObjectModificationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectNotification)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainObjectNotificationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainTypeEventOperation)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainTypeEventOperationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ExceptionMessage)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetExceptionMessageContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.LogMessage)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLogMessageContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.MessageTemplate)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMessageTemplateContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetNamedLockContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.RegularJob)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetRegularJobContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.AccessableBusinessRoleReportRight)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAccessableBusinessRoleReportRightContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.AccessableOperationReportRight)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAccessableOperationReportRightContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.AccessablePrincipalReportRight)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAccessablePrincipalReportRightContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.Report)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetReportContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportFilter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetReportFilterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportParameter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetReportParameterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportProperty)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetReportPropertyContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SentMessage)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSentMessageContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Sequence)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSequenceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SubBusinessRole)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSubBusinessRoleContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Subscription)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSubscriptionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SubscriptionLambda)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSubscriptionLambdaContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SubscriptionSecurityItem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSubscriptionSecurityItemContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SystemConstant)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSystemConstantContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.TargetSystem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTargetSystemContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserAction)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetUserActionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserActionObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetUserActionObjectContainer(rule)));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("TDomainObject");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.ControlSettings> GetControlSettingsContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ControlSettings>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ControlSettings>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ControlSettings>(fetchRootRule => fetchRootRule.SelectNested(controlSettings => controlSettings.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ControlSettings>(
                    fetchRootRule => fetchRootRule.SelectMany(controlSettings => controlSettings.Children).SelectMany(controlSettings => controlSettings.ControlSettingsParams).SelectMany(controlSettingsParam => controlSettingsParam.ControlSettingsParamValues),
                    fetchRootRule => fetchRootRule.SelectMany(controlSettings => controlSettings.ControlSettingsParams).SelectMany(controlSettingsParam => controlSettingsParam.ControlSettingsParamValues),
                    fetchRootRule => fetchRootRule.SelectNested(controlSettings => controlSettings.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.ControlSettingsParam> GetControlSettingsParamContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ControlSettingsParam>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ControlSettingsParam>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ControlSettingsParam>(fetchRootRule => fetchRootRule.SelectNested(controlSettingsParam => controlSettingsParam.ControlSettings));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ControlSettingsParam>(
                    fetchRootRule => fetchRootRule.SelectNested(controlSettingsParam => controlSettingsParam.ControlSettings),
                    fetchRootRule => fetchRootRule.SelectMany(controlSettingsParam => controlSettingsParam.ControlSettingsParamValues));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.ControlSettingsParamValue> GetControlSettingsParamValueContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ControlSettingsParamValue>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ControlSettingsParamValue>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ControlSettingsParamValue>(fetchRootRule => fetchRootRule.SelectNested(controlSettingsParamValue => controlSettingsParamValue.ControlSettingsParam));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ControlSettingsParamValue>(fetchRootRule => fetchRootRule.SelectNested(controlSettingsParamValue => controlSettingsParamValue.ControlSettingsParam));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.DomainObjectEvent> GetDomainObjectEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainObjectEvent>(fetchRootRule => fetchRootRule.SelectNested(domainObjectEvent => domainObjectEvent.Operation));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainObjectEvent>(fetchRootRule => fetchRootRule.SelectNested(domainObjectEvent => domainObjectEvent.Operation));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.DomainObjectModification> GetDomainObjectModificationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectModification>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectModification>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainObjectModification>(fetchRootRule => fetchRootRule.SelectNested(domainObjectModification => domainObjectModification.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainObjectModification>(fetchRootRule => fetchRootRule.SelectNested(domainObjectModification => domainObjectModification.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.DomainObjectNotification> GetDomainObjectNotificationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectNotification>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectNotification>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectNotification>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainObjectNotification>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.DomainType> GetDomainTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainType>(fetchRootRule => fetchRootRule.SelectNested(domainType => domainType.TargetSystem));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainType>(
                    fetchRootRule => fetchRootRule.SelectMany(domainType => domainType.EventOperations),
                    fetchRootRule => fetchRootRule.SelectNested(domainType => domainType.TargetSystem));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.DomainTypeEventOperation> GetDomainTypeEventOperationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainTypeEventOperation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.DomainTypeEventOperation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainTypeEventOperation>(fetchRootRule => fetchRootRule.SelectNested(domainTypeEventOperation => domainTypeEventOperation.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.DomainTypeEventOperation>(fetchRootRule => fetchRootRule.SelectNested(domainTypeEventOperation => domainTypeEventOperation.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.ExceptionMessage> GetExceptionMessageContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ExceptionMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ExceptionMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.ExceptionMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.ExceptionMessage>(fetchRootRule => fetchRootRule.SelectNested(exceptionMessage => exceptionMessage.InnerException));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.LogMessage> GetLogMessageContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.LogMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.LogMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.LogMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.LogMessage>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.MessageTemplate> GetMessageTemplateContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.MessageTemplate>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.MessageTemplate>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.MessageTemplate>(fetchRootRule => fetchRootRule.SelectNested(messageTemplate => messageTemplate.DomainType).SelectNested(domainType => domainType.TargetSystem));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.MessageTemplate>(fetchRootRule => fetchRootRule.SelectNested(messageTemplate => messageTemplate.DomainType).SelectNested(domainType => domainType.TargetSystem));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.NamedLock> GetNamedLockContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.NamedLock>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.RegularJob> GetRegularJobContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.RegularJob>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.RegularJob>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.RegularJob>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.RegularJob>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.Report> GetReportContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.Report>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.Report>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.Report>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.Report>(
                    fetchRootRule => fetchRootRule.SelectMany(report => report.AccessableBusinessRoles),
                    fetchRootRule => fetchRootRule.SelectMany(report => report.AccessableOperations),
                    fetchRootRule => fetchRootRule.SelectMany(report => report.AccessablePrincipals),
                    fetchRootRule => fetchRootRule.SelectMany(report => report.Filters),
                    fetchRootRule => fetchRootRule.SelectMany(report => report.Parameters),
                    fetchRootRule => fetchRootRule.SelectMany(report => report.Properties));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.ReportFilter> GetReportFilterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.ReportFilter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.ReportFilter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.ReportFilter>(fetchRootRule => fetchRootRule.SelectNested(reportFilter => reportFilter.Report));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.ReportFilter>(fetchRootRule => fetchRootRule.SelectNested(reportFilter => reportFilter.Report));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.ReportParameter> GetReportParameterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.ReportParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.ReportParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.ReportParameter>(fetchRootRule => fetchRootRule.SelectNested(reportParameter => reportParameter.Report));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.ReportParameter>(fetchRootRule => fetchRootRule.SelectNested(reportParameter => reportParameter.Report));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Reports.ReportProperty> GetReportPropertyContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.ReportProperty>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Reports.ReportProperty>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.ReportProperty>(fetchRootRule => fetchRootRule.SelectNested(reportProperty => reportProperty.Report));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Reports.ReportProperty>(fetchRootRule => fetchRootRule.SelectNested(reportProperty => reportProperty.Report));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.SentMessage> GetSentMessageContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SentMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SentMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SentMessage>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SentMessage>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Sequence> GetSequenceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Sequence>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Sequence>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Sequence>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Sequence>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.SubBusinessRole> GetSubBusinessRoleContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SubBusinessRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SubBusinessRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SubBusinessRole>(fetchRootRule => fetchRootRule.SelectNested(subBusinessRole => subBusinessRole.Subscription));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SubBusinessRole>(fetchRootRule => fetchRootRule.SelectNested(subBusinessRole => subBusinessRole.Subscription));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.Subscription> GetSubscriptionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Subscription>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.Subscription>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Subscription>(
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.CopyGeneration),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.DomainType).SelectNested(domainType => domainType.TargetSystem),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.DynamicSource),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.Generation),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.MessageTemplate),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.ReplyToGeneration));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.Subscription>(
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.CopyGeneration),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.DomainType).SelectNested(domainType => domainType.TargetSystem),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.DynamicSource),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.Generation),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.MessageTemplate),
                    fetchRootRule => fetchRootRule.SelectNested(subscription => subscription.ReplyToGeneration),
                    fetchRootRule => fetchRootRule.SelectMany(subscription => subscription.SecurityItems).SelectNested(subscriptionSecurityItem => subscriptionSecurityItem.Source),
                    fetchRootRule => fetchRootRule.SelectMany(subscription => subscription.SubBusinessRoles));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.SubscriptionLambda> GetSubscriptionLambdaContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SubscriptionLambda>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SubscriptionLambda>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SubscriptionLambda>(fetchRootRule => fetchRootRule.SelectNested(subscriptionLambda => subscriptionLambda.DomainType).SelectNested(domainType => domainType.TargetSystem));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SubscriptionLambda>(fetchRootRule => fetchRootRule.SelectNested(subscriptionLambda => subscriptionLambda.DomainType).SelectNested(domainType => domainType.TargetSystem));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.SubscriptionSecurityItem> GetSubscriptionSecurityItemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SubscriptionSecurityItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SubscriptionSecurityItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SubscriptionSecurityItem>(
                    fetchRootRule => fetchRootRule.SelectNested(subscriptionSecurityItem => subscriptionSecurityItem.Source),
                    fetchRootRule => fetchRootRule.SelectNested(subscriptionSecurityItem => subscriptionSecurityItem.Subscription));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SubscriptionSecurityItem>(
                    fetchRootRule => fetchRootRule.SelectNested(subscriptionSecurityItem => subscriptionSecurityItem.Source),
                    fetchRootRule => fetchRootRule.SelectNested(subscriptionSecurityItem => subscriptionSecurityItem.Subscription));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.SystemConstant> GetSystemConstantContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SystemConstant>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.SystemConstant>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SystemConstant>(fetchRootRule => fetchRootRule.SelectNested(systemConstant => systemConstant.Type));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.SystemConstant>(fetchRootRule => fetchRootRule.SelectNested(systemConstant => systemConstant.Type));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.TargetSystem> GetTargetSystemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.TargetSystem>(fetchRootRule => fetchRootRule.SelectMany(targetSystem => targetSystem.DomainTypes).SelectMany(domainType => domainType.EventOperations));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.UserAction> GetUserActionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.UserAction>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.UserAction>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.UserAction>(fetchRootRule => fetchRootRule.SelectNested(userAction => userAction.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.UserAction>(
                    fetchRootRule => fetchRootRule.SelectNested(userAction => userAction.DomainType),
                    fetchRootRule => fetchRootRule.SelectMany(userAction => userAction.ObjectIdentities).SelectNested(userActionObject => userActionObject.UserAction).SelectNested(userAction => userAction.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Configuration.Domain.UserActionObject> GetUserActionObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Configuration.Domain.UserActionObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.UserActionObject>(fetchRootRule => fetchRootRule.SelectNested(userActionObject => userActionObject.UserAction).SelectNested(userAction => userAction.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.UserActionObject>(fetchRootRule => fetchRootRule.SelectNested(userActionObject => userActionObject.UserAction).SelectNested(userAction => userAction.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Configuration.Domain.UserActionObject>(fetchRootRule => fetchRootRule.SelectNested(userActionObject => userActionObject.UserAction).SelectNested(userAction => userAction.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
    }
    
    public partial class ConfigurationMainFetchService : Framework.Configuration.BLL.ConfigurationMainFetchServiceBase
    {
    }
}
