//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Workflow.BLL
{
    
    
    public partial class WorkflowMainFetchServiceBase : Framework.DomainDriven.MainFetchServiceBase<Framework.Workflow.Domain.PersistentDomainObjectBase>
    {
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.Command> GetCommandContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Command>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Command>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Command>(
                    fetchRootRule => fetchRootRule.SelectNested(command => command.ExecuteAction),
                    fetchRootRule => fetchRootRule.SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow).SelectNested(workflow => workflow.DomainType).SelectNested(domainType => domainType.TargetSystem));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Command>(
                    fetchRootRule => fetchRootRule.SelectNested(command => command.ExecuteAction),
                    fetchRootRule => fetchRootRule.SelectMany(command => command.InternalEvents),
                    fetchRootRule => fetchRootRule.SelectMany(command => command.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(command => command.Parameters).SelectNested(commandParameter => commandParameter.Command).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(command => command.Parameters).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(command => command.RoleAccesses).SelectNested(commandRoleAccess => commandRoleAccess.Role),
                    fetchRootRule => fetchRootRule.SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow).SelectNested(workflow => workflow.DomainType).SelectNested(domainType => domainType.TargetSystem));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.CommandEvent> GetCommandEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandEvent>(fetchRootRule => fetchRootRule.SelectNested(commandEvent => commandEvent.Owner).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandEvent>(fetchRootRule => fetchRootRule.SelectNested(commandEvent => commandEvent.Owner).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.CommandMetadata> GetCommandMetadataContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandMetadata>(fetchRootRule => fetchRootRule.SelectNested(commandMetadata => commandMetadata.Command));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandMetadata>(fetchRootRule => fetchRootRule.SelectNested(commandMetadata => commandMetadata.Command));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.CommandParameter> GetCommandParameterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(commandParameter => commandParameter.Command).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectNested(commandParameter => commandParameter.Type));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(commandParameter => commandParameter.Command).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectNested(commandParameter => commandParameter.Type));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.CommandRoleAccess> GetCommandRoleAccessContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandRoleAccess>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.CommandRoleAccess>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandRoleAccess>(
                    fetchRootRule => fetchRootRule.SelectNested(commandRoleAccess => commandRoleAccess.Command),
                    fetchRootRule => fetchRootRule.SelectNested(commandRoleAccess => commandRoleAccess.Role));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.CommandRoleAccess>(
                    fetchRootRule => fetchRootRule.SelectNested(commandRoleAccess => commandRoleAccess.Command),
                    fetchRootRule => fetchRootRule.SelectNested(commandRoleAccess => commandRoleAccess.Role));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.ConditionState> GetConditionStateContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ConditionState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ConditionState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ConditionState>(
                    fetchRootRule => fetchRootRule.SelectNested(conditionState => conditionState.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(conditionState => conditionState.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ConditionState>(
                    fetchRootRule => fetchRootRule.SelectNested(conditionState => conditionState.Condition),
                    fetchRootRule => fetchRootRule.SelectMany(conditionState => conditionState.InternalEvents),
                    fetchRootRule => fetchRootRule.SelectNested(conditionState => conditionState.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent> GetConditionStateEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ConditionStateEvent>(fetchRootRule => fetchRootRule.SelectNested(conditionStateEvent => conditionStateEvent.Owner).SelectNested(conditionState => conditionState.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ConditionStateEvent>(fetchRootRule => fetchRootRule.SelectNested(conditionStateEvent => conditionStateEvent.Owner).SelectNested(conditionState => conditionState.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected override Framework.DomainDriven.IFetchContainer<TDomainObject> GetContainer<TDomainObject>(Framework.Transfering.ViewDTOType rule)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.Command)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCommandContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.CommandEvent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCommandEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.CommandMetadata)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCommandMetadataContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.CommandParameter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCommandParameterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.CommandRoleAccess)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCommandRoleAccessContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.ConditionState)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetConditionStateContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetConditionStateEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.DomainType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.Event)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.ParallelState)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetParallelStateContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetParallelStateFinalEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.ParallelStateStartItem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetParallelStateStartItemContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.Role)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetRoleContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetStartWorkflowDomainObjectConditionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.State)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetStateContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.StateBase)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetStateBaseContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetStateDomainObjectEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetStateTimeoutEventContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.TargetSystem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTargetSystemContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.Task)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTaskContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.TaskMetadata)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTaskMetadataContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.Transition)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTransitionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.TransitionAction)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTransitionActionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.Workflow)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.WorkflowLambda)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowLambdaContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowMetadataContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.WorkflowParameter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowParameterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Definition.WorkflowSource)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowSourceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetNamedLockContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniCommand)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniCommandContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniCommandMetadata)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniCommandMetadataContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniCommandParameter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniCommandParameterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniState)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniStateContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniStateBase)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniStateBaseContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniTask)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniTaskContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniTaskInstance)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniTaskInstanceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniTaskMetadata)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniTaskMetadataContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniWorkflow)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniWorkflowContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniWorkflowInstance)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniWorkflowInstanceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniWorkflowMetadata)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniWorkflowMetadataContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.MiniWorkflowSource)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniWorkflowSourceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.VisualDomainType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetVisualDomainTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Projections.VisualWorkflow)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetVisualWorkflowContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.ExecutedCommand)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetExecutedCommandContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetExecutedCommandParameterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.StateInstance)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetStateInstanceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.TaskInstance)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTaskInstanceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.TransitionInstance)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTransitionInstanceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowInstanceContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowInstanceParameterContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkflowInstanceWatcherContainer(rule)));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("TDomainObject");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.DomainType> GetDomainTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.DomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.DomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.DomainType>(fetchRootRule => fetchRootRule.SelectNested(domainType => domainType.TargetSystem));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.DomainType>(fetchRootRule => fetchRootRule.SelectNested(domainType => domainType.TargetSystem));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.Event> GetEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Event>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Event>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Event>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Event>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.ExecutedCommand> GetExecutedCommandContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.ExecutedCommand>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.ExecutedCommand>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.ExecutedCommand>(
                    fetchRootRule => fetchRootRule.SelectNested(executedCommand => executedCommand.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.ExecutedCommand>(
                    fetchRootRule => fetchRootRule.SelectNested(executedCommand => executedCommand.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Command).SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Definition).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter> GetExecutedCommandParameterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(executedCommandParameter => executedCommandParameter.Command).SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow),
                    fetchRootRule => fetchRootRule.SelectNested(executedCommandParameter => executedCommandParameter.Definition).SelectNested(commandParameter => commandParameter.Type));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(executedCommandParameter => executedCommandParameter.Command).SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow),
                    fetchRootRule => fetchRootRule.SelectNested(executedCommandParameter => executedCommandParameter.Definition).SelectNested(commandParameter => commandParameter.Type));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniCommand> GetMiniCommandContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommand>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommand>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommand>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniCommand>(
                    fetchRootRule => fetchRootRule.SelectMany(miniCommand => miniCommand.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(miniCommand => miniCommand.Parameters));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniCommand>(
                    fetchRootRule => fetchRootRule.SelectMany(miniCommand => miniCommand.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(miniCommand => miniCommand.Parameters));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniCommandMetadata> GetMiniCommandMetadataContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandMetadata>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniCommandParameter> GetMiniCommandParameterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniCommandParameter>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniStateBase> GetMiniStateBaseContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniStateBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniStateBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniStateBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniStateBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniStateBase>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniState> GetMiniStateContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniState>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniTask> GetMiniTaskContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTask>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTask>(fetchRootRule => fetchRootRule.SelectNested(miniTask => miniTask.State));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTask>(fetchRootRule => fetchRootRule.SelectNested(miniTask => miniTask.State));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTask>(
                    fetchRootRule => fetchRootRule.SelectMany(miniTask => miniTask.Commands).SelectMany(miniCommand => miniCommand.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(miniTask => miniTask.Commands).SelectMany(miniCommand => miniCommand.Parameters),
                    fetchRootRule => fetchRootRule.SelectMany(miniTask => miniTask.Metadatas),
                    fetchRootRule => fetchRootRule.SelectNested(miniTask => miniTask.State));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTask>(
                    fetchRootRule => fetchRootRule.SelectMany(miniTask => miniTask.Commands).SelectMany(miniCommand => miniCommand.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(miniTask => miniTask.Commands).SelectMany(miniCommand => miniCommand.Parameters),
                    fetchRootRule => fetchRootRule.SelectMany(miniTask => miniTask.Metadatas),
                    fetchRootRule => fetchRootRule.SelectNested(miniTask => miniTask.State));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniTaskInstance> GetMiniTaskInstanceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTaskInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTaskInstance>(fetchRootRule => fetchRootRule.SelectNested(miniTaskInstance => miniTaskInstance.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTaskInstance>(fetchRootRule => fetchRootRule.SelectNested(miniTaskInstance => miniTaskInstance.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTaskInstance>(fetchRootRule => fetchRootRule.SelectNested(miniTaskInstance => miniTaskInstance.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniTaskInstance>(fetchRootRule => fetchRootRule.SelectNested(miniTaskInstance => miniTaskInstance.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniTaskMetadata> GetMiniTaskMetadataContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTaskMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTaskMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTaskMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTaskMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniTaskMetadata>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflow> GetMiniWorkflowContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflow>(fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.Owner));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflow>(
                    fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.DomainType),
                    fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.Owner));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflow>(
                    fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.DomainType),
                    fetchRootRule => fetchRootRule.SelectMany(miniWorkflow => miniWorkflow.Metadatas),
                    fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.Owner));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflow>(
                    fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.DomainType),
                    fetchRootRule => fetchRootRule.SelectMany(miniWorkflow => miniWorkflow.Metadatas),
                    fetchRootRule => fetchRootRule.SelectNested(miniWorkflow => miniWorkflow.Owner));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowInstance> GetMiniWorkflowInstanceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowInstance>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata> GetMiniWorkflowMetadataContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowSource> GetMiniWorkflowSourceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowSource>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.MiniWorkflowSource>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflowSource>(fetchRootRule => fetchRootRule.SelectNested(miniWorkflowSource => miniWorkflowSource.Type));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflowSource>(fetchRootRule => fetchRootRule.SelectNested(miniWorkflowSource => miniWorkflowSource.Type));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Projections.MiniWorkflowSource>(fetchRootRule => fetchRootRule.SelectNested(miniWorkflowSource => miniWorkflowSource.Type));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.NamedLock> GetNamedLockContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.NamedLock>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.ParallelState> GetParallelStateContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ParallelState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ParallelState>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ParallelState>(fetchRootRule => fetchRootRule.SelectNested(parallelState => parallelState.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ParallelState>(
                    fetchRootRule => fetchRootRule.SelectMany(parallelState => parallelState.FinalEvents).SelectNested(parallelStateFinalEvent => parallelStateFinalEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectMany(parallelState => parallelState.FinalEvents).SelectNested(parallelStateFinalEvent => parallelStateFinalEvent.Owner).SelectNested(parallelState => parallelState.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(parallelState => parallelState.StartItems).SelectNested(parallelStateStartItem => parallelStateStartItem.Factory),
                    fetchRootRule => fetchRootRule.SelectMany(parallelState => parallelState.StartItems).SelectNested(parallelStateStartItem => parallelStateStartItem.SubWorkflow),
                    fetchRootRule => fetchRootRule.SelectNested(parallelState => parallelState.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> GetParallelStateFinalEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateFinalEvent => parallelStateFinalEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateFinalEvent => parallelStateFinalEvent.Owner).SelectNested(parallelState => parallelState.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateFinalEvent => parallelStateFinalEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateFinalEvent => parallelStateFinalEvent.Owner).SelectNested(parallelState => parallelState.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.ParallelStateStartItem> GetParallelStateStartItemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ParallelStateStartItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.ParallelStateStartItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateStartItem => parallelStateStartItem.Factory),
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateStartItem => parallelStateStartItem.State),
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateStartItem => parallelStateStartItem.SubWorkflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateStartItem => parallelStateStartItem.Factory),
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateStartItem => parallelStateStartItem.State),
                    fetchRootRule => fetchRootRule.SelectNested(parallelStateStartItem => parallelStateStartItem.SubWorkflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.Role> GetRoleContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Role>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Role>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Role>(
                    fetchRootRule => fetchRootRule.SelectNested(role => role.CustomSecurityProvider),
                    fetchRootRule => fetchRootRule.SelectNested(role => role.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Role>(
                    fetchRootRule => fetchRootRule.SelectNested(role => role.CustomSecurityProvider),
                    fetchRootRule => fetchRootRule.SelectNested(role => role.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> GetStartWorkflowDomainObjectConditionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(
                    fetchRootRule => fetchRootRule.SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Factory),
                    fetchRootRule => fetchRootRule.SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(
                    fetchRootRule => fetchRootRule.SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Factory),
                    fetchRootRule => fetchRootRule.SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.StateBase> GetStateBaseContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StateBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StateBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StateBase>(fetchRootRule => fetchRootRule.SelectNested(stateBase => stateBase.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StateBase>(fetchRootRule => fetchRootRule.SelectNested(stateBase => stateBase.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.State> GetStateContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.State>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.State>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.State>(fetchRootRule => fetchRootRule.SelectNested(state => state.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.State>(
                    fetchRootRule => fetchRootRule.SelectMany(state => state.DomainObjectEvents).SelectNested(stateDomainObjectEvent => stateDomainObjectEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.DomainObjectEvents).SelectNested(stateDomainObjectEvent => stateDomainObjectEvent.Owner).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectNested(command => command.ExecuteAction),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectMany(command => command.InternalEvents),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectMany(command => command.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectMany(command => command.Parameters).SelectNested(commandParameter => commandParameter.Command).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectMany(command => command.Parameters).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectMany(command => command.RoleAccesses).SelectNested(commandRoleAccess => commandRoleAccess.Role),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Commands).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow).SelectNested(workflow => workflow.DomainType).SelectNested(domainType => domainType.TargetSystem),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectMany(task => task.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.Tasks).SelectNested(task => task.State).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.TimeoutEvents).SelectNested(stateTimeoutEvent => stateTimeoutEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectMany(state => state.TimeoutEvents).SelectNested(stateTimeoutEvent => stateTimeoutEvent.Owner).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectNested(state => state.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> GetStateDomainObjectEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(
                    fetchRootRule => fetchRootRule.SelectNested(stateDomainObjectEvent => stateDomainObjectEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(stateDomainObjectEvent => stateDomainObjectEvent.Owner).SelectNested(state => state.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(
                    fetchRootRule => fetchRootRule.SelectNested(stateDomainObjectEvent => stateDomainObjectEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(stateDomainObjectEvent => stateDomainObjectEvent.Owner).SelectNested(state => state.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.StateInstance> GetStateInstanceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.StateInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.StateInstance>(fetchRootRule => fetchRootRule.SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.StateInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.StateInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(stateInstance => stateInstance.Tasks).SelectMany(taskInstance => taskInstance.Commands).SelectNested(executedCommand => executedCommand.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(stateInstance => stateInstance.Tasks).SelectMany(taskInstance => taskInstance.Commands).SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Command).SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(stateInstance => stateInstance.Tasks).SelectMany(taskInstance => taskInstance.Commands).SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Definition).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(stateInstance => stateInstance.Tasks).SelectNested(taskInstance => taskInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(stateInstance => stateInstance.Tasks).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(stateInstance => stateInstance.Tasks).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent> GetStateTimeoutEventContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(
                    fetchRootRule => fetchRootRule.SelectNested(stateTimeoutEvent => stateTimeoutEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(stateTimeoutEvent => stateTimeoutEvent.Owner).SelectNested(state => state.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(
                    fetchRootRule => fetchRootRule.SelectNested(stateTimeoutEvent => stateTimeoutEvent.Condition),
                    fetchRootRule => fetchRootRule.SelectNested(stateTimeoutEvent => stateTimeoutEvent.Owner).SelectNested(state => state.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.TargetSystem> GetTargetSystemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.TargetSystem>(fetchRootRule => fetchRootRule.SelectMany(targetSystem => targetSystem.DomainTypes));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.Task> GetTaskContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Task>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Task>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Task>(fetchRootRule => fetchRootRule.SelectNested(task => task.State).SelectNested(state => state.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Task>(
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectNested(command => command.ExecuteAction),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectMany(command => command.InternalEvents),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectMany(command => command.Metadatas),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectMany(command => command.Parameters).SelectNested(commandParameter => commandParameter.Command).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectMany(command => command.Parameters).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectMany(command => command.RoleAccesses).SelectNested(commandRoleAccess => commandRoleAccess.Role),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Commands).SelectNested(command => command.Task).SelectNested(task => task.State).SelectNested(state => state.Workflow).SelectNested(workflow => workflow.DomainType).SelectNested(domainType => domainType.TargetSystem),
                    fetchRootRule => fetchRootRule.SelectMany(task => task.Metadatas),
                    fetchRootRule => fetchRootRule.SelectNested(task => task.State).SelectNested(state => state.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.TaskInstance> GetTaskInstanceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.TaskInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.TaskInstance>(fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.TaskInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.TaskInstance>(
                    fetchRootRule => fetchRootRule.SelectMany(taskInstance => taskInstance.Commands).SelectNested(executedCommand => executedCommand.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(taskInstance => taskInstance.Commands).SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Command).SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(taskInstance => taskInstance.Commands).SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Definition).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.TaskMetadata> GetTaskMetadataContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TaskMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TaskMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.TaskMetadata>(fetchRootRule => fetchRootRule.SelectNested(taskMetadata => taskMetadata.Task));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.TaskMetadata>(fetchRootRule => fetchRootRule.SelectNested(taskMetadata => taskMetadata.Task));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.TransitionAction> GetTransitionActionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TransitionAction>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.TransitionAction>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.TransitionAction>(
                    fetchRootRule => fetchRootRule.SelectNested(transitionAction => transitionAction.Action),
                    fetchRootRule => fetchRootRule.SelectNested(transitionAction => transitionAction.Transition).SelectNested(transition => transition.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.TransitionAction>(
                    fetchRootRule => fetchRootRule.SelectNested(transitionAction => transitionAction.Action),
                    fetchRootRule => fetchRootRule.SelectNested(transitionAction => transitionAction.Transition).SelectNested(transition => transition.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.Transition> GetTransitionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Transition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Transition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Transition>(
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.From),
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.To),
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.TriggerEvent),
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Transition>(
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.From),
                    fetchRootRule => fetchRootRule.SelectMany(transition => transition.PostActions).SelectNested(transitionAction => transitionAction.Action),
                    fetchRootRule => fetchRootRule.SelectMany(transition => transition.PostActions).SelectNested(transitionAction => transitionAction.Transition).SelectNested(transition => transition.Workflow),
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.To),
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.TriggerEvent),
                    fetchRootRule => fetchRootRule.SelectNested(transition => transition.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.TransitionInstance> GetTransitionInstanceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.TransitionInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.From).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.To).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.WorkflowInstance));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.TransitionInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.From).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.To).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(transitionInstance => transitionInstance.WorkflowInstance));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.VisualDomainType> GetVisualDomainTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualDomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualDomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualDomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualDomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualDomainType>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Projections.VisualWorkflow> GetVisualWorkflowContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualWorkflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualWorkflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualWorkflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualWorkflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Projections.VisualWorkflow>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.Workflow> GetWorkflowContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Workflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.Workflow>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Workflow>(
                    fetchRootRule => fetchRootRule.SelectNested(workflow => workflow.ActiveCondition),
                    fetchRootRule => fetchRootRule.SelectNested(workflow => workflow.DomainType).SelectNested(domainType => domainType.TargetSystem),
                    fetchRootRule => fetchRootRule.SelectNested(workflow => workflow.Owner));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.Workflow>(
                    fetchRootRule => fetchRootRule.SelectNested(workflow => workflow.ActiveCondition),
                    fetchRootRule => fetchRootRule.SelectNested(workflow => workflow.DomainType).SelectNested(domainType => domainType.TargetSystem),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Lambdas),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Metadatas),
                    fetchRootRule => fetchRootRule.SelectNested(workflow => workflow.Owner),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Parameters).SelectNested(workflowParameter => workflowParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Roles).SelectNested(role => role.CustomSecurityProvider),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Sources).SelectNested(workflowSource => workflowSource.Elements),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Sources).SelectNested(workflowSource => workflowSource.Path),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Sources).SelectNested(workflowSource => workflowSource.Type),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Sources).SelectNested(workflowSource => workflowSource.Workflow).SelectNested(workflow => workflow.DomainType),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.StartConditions).SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Condition),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.StartConditions).SelectNested(startWorkflowDomainObjectCondition => startWorkflowDomainObjectCondition.Factory),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Transitions).SelectNested(transition => transition.From),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Transitions).SelectMany(transition => transition.PostActions).SelectNested(transitionAction => transitionAction.Action),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Transitions).SelectMany(transition => transition.PostActions).SelectNested(transitionAction => transitionAction.Transition).SelectNested(transition => transition.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Transitions).SelectNested(transition => transition.To),
                    fetchRootRule => fetchRootRule.SelectMany(workflow => workflow.Transitions).SelectNested(transition => transition.TriggerEvent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance> GetWorkflowInstanceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.WorkflowInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.CurrentState).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.CurrentState).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.OwnerState).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.OwnerState).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.Definition));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.WorkflowInstance>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.CurrentState).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.CurrentState).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.OwnerState).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstance => workflowInstance.OwnerState).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.Parameters).SelectNested(workflowInstanceParameter => workflowInstanceParameter.Definition).SelectNested(workflowParameter => workflowParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectMany(stateInstance => stateInstance.Tasks).SelectMany(taskInstance => taskInstance.Commands).SelectNested(executedCommand => executedCommand.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectMany(stateInstance => stateInstance.Tasks).SelectMany(taskInstance => taskInstance.Commands).SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Command).SelectNested(executedCommand => executedCommand.Task).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectMany(stateInstance => stateInstance.Tasks).SelectMany(taskInstance => taskInstance.Commands).SelectMany(executedCommand => executedCommand.Parameters).SelectNested(executedCommandParameter => executedCommandParameter.Definition).SelectNested(commandParameter => commandParameter.Type),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectMany(stateInstance => stateInstance.Tasks).SelectNested(taskInstance => taskInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectMany(stateInstance => stateInstance.Tasks).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectMany(stateInstance => stateInstance.Tasks).SelectNested(taskInstance => taskInstance.State).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.States).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.Transitions).SelectNested(transitionInstance => transitionInstance.Definition),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.Transitions).SelectNested(transitionInstance => transitionInstance.From).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.Transitions).SelectNested(transitionInstance => transitionInstance.To).SelectNested(stateInstance => stateInstance.Workflow).SelectNested(workflowInstance => workflowInstance.CurrentState),
                    fetchRootRule => fetchRootRule.SelectMany(workflowInstance => workflowInstance.Watchers));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter> GetWorkflowInstanceParameterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstanceParameter => workflowInstanceParameter.Definition).SelectNested(workflowParameter => workflowParameter.Type),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstanceParameter => workflowInstanceParameter.WorkflowInstance));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstanceParameter => workflowInstanceParameter.Definition).SelectNested(workflowParameter => workflowParameter.Type),
                    fetchRootRule => fetchRootRule.SelectNested(workflowInstanceParameter => workflowInstanceParameter.WorkflowInstance));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher> GetWorkflowInstanceWatcherContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(fetchRootRule => fetchRootRule.SelectNested(workflowInstanceWatcher => workflowInstanceWatcher.WorkflowInstance));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(fetchRootRule => fetchRootRule.SelectNested(workflowInstanceWatcher => workflowInstanceWatcher.WorkflowInstance));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.WorkflowLambda> GetWorkflowLambdaContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowLambda>(fetchRootRule => fetchRootRule.SelectNested(workflowLambda => workflowLambda.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowLambda>(fetchRootRule => fetchRootRule.SelectNested(workflowLambda => workflowLambda.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.WorkflowMetadata> GetWorkflowMetadataContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowMetadata>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowMetadata>(fetchRootRule => fetchRootRule.SelectNested(workflowMetadata => workflowMetadata.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowMetadata>(fetchRootRule => fetchRootRule.SelectNested(workflowMetadata => workflowMetadata.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.WorkflowParameter> GetWorkflowParameterContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowParameter>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowParameter => workflowParameter.Type),
                    fetchRootRule => fetchRootRule.SelectNested(workflowParameter => workflowParameter.Workflow));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowParameter>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowParameter => workflowParameter.Type),
                    fetchRootRule => fetchRootRule.SelectNested(workflowParameter => workflowParameter.Workflow));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Workflow.Domain.Definition.WorkflowSource> GetWorkflowSourceContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowSource>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Workflow.Domain.Definition.WorkflowSource>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowSource>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Elements),
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Path),
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Type),
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Workflow).SelectNested(workflow => workflow.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Workflow.Domain.Definition.WorkflowSource>(
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Elements),
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Path),
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Type),
                    fetchRootRule => fetchRootRule.SelectNested(workflowSource => workflowSource.Workflow).SelectNested(workflow => workflow.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
    }
    
    public partial class WorkflowMainFetchService : Framework.Workflow.BLL.WorkflowMainFetchServiceBase
    {
    }
}
