//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Workflow.Domain.Projections
{
    
    
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.AvailableTaskInstanceGroup), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroup))]
    public partial class MiniAvailableTaskInstanceGroup : Framework.Workflow.Domain.DomainObjectBase, Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroup
    {
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem> items;
        
        private Framework.Workflow.Domain.Projections.MiniTask task;
        
        protected MiniAvailableTaskInstanceGroup()
        {
        }
        
        public MiniAvailableTaskInstanceGroup(Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroup source)
        {
            this.items = Framework.Core.EnumerableExtensions.ToList(source.Items, v => new Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem(v));
            if (!object.ReferenceEquals(source.Task, null))
            {
                this.task = new Framework.Workflow.Domain.Projections.MiniTask(source.Task);
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem> Items
        {
            get
            {
                return this.items;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Items")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroupItem> Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroup.Items
        {
            get
            {
                return this.Items;
            }
        }
        
        public virtual Framework.Workflow.Domain.Projections.MiniTask Task
        {
            get
            {
                return this.task;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Task")]
        Framework.Workflow.Domain.Definition.IMiniTask Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroup.Task
        {
            get
            {
                return this.Task;
            }
        }
    }
    
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.AvailableTaskInstanceGroupItem), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroupItem))]
    public partial class MiniAvailableTaskInstanceGroupItem : Framework.Workflow.Domain.DomainObjectBase, Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroupItem
    {
        
        private System.Guid[] commandsIdents;
        
        private string[] path;
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniTaskInstance> taskInstances;
        
        protected MiniAvailableTaskInstanceGroupItem()
        {
        }
        
        public MiniAvailableTaskInstanceGroupItem(Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroupItem source)
        {
            this.commandsIdents = source.CommandsIdents;
            this.path = source.Path;
            this.taskInstances = Framework.Core.EnumerableExtensions.ToList(source.TaskInstances, v => new Framework.Workflow.Domain.Projections.MiniTaskInstance(v));
        }
        
        public virtual System.Guid[] CommandsIdents
        {
            get
            {
                return this.commandsIdents;
            }
        }
        
        public virtual string[] Path
        {
            get
            {
                return this.path;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniTaskInstance> TaskInstances
        {
            get
            {
                return this.taskInstances;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("TaskInstances")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.IMiniTaskInstance> Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroupItem.TaskInstances
        {
            get
            {
                return this.TaskInstances;
            }
        }
    }
    
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.IMiniAvailableTaskInstanceWorkflowGroup))]
    public partial class MiniAvailableTaskInstanceWorkflowGroup : Framework.Workflow.Domain.DomainObjectBase, Framework.Workflow.Domain.IMiniAvailableTaskInstanceWorkflowGroup
    {
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup> items;
        
        private Framework.Workflow.Domain.Projections.MiniWorkflowSource source;
        
        private Framework.Workflow.Domain.Projections.MiniWorkflow workflow;
        
        protected MiniAvailableTaskInstanceWorkflowGroup()
        {
        }
        
        public MiniAvailableTaskInstanceWorkflowGroup(Framework.Workflow.Domain.IMiniAvailableTaskInstanceWorkflowGroup source)
        {
            this.items = Framework.Core.EnumerableExtensions.ToList(source.Items, v => new Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup(v));
            if (!object.ReferenceEquals(source.Source, null))
            {
                this.source = new Framework.Workflow.Domain.Projections.MiniWorkflowSource(source.Source);
            }
            if (!object.ReferenceEquals(source.Workflow, null))
            {
                this.workflow = new Framework.Workflow.Domain.Projections.MiniWorkflow(source.Workflow);
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup> Items
        {
            get
            {
                return this.items;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Items")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.IMiniAvailableTaskInstanceGroup> Framework.Workflow.Domain.IMiniAvailableTaskInstanceWorkflowGroup.Items
        {
            get
            {
                return this.Items;
            }
        }
        
        public virtual Framework.Workflow.Domain.Projections.MiniWorkflowSource Source
        {
            get
            {
                return this.source;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Source")]
        Framework.Workflow.Domain.Definition.IMiniWorkflowSource Framework.Workflow.Domain.IMiniAvailableTaskInstanceWorkflowGroup.Source
        {
            get
            {
                return this.Source;
            }
        }
        
        public virtual Framework.Workflow.Domain.Projections.MiniWorkflow Workflow
        {
            get
            {
                return this.workflow;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Workflow")]
        Framework.Workflow.Domain.Definition.IMiniWorkflow Framework.Workflow.Domain.IMiniAvailableTaskInstanceWorkflowGroup.Workflow
        {
            get
            {
                return this.Workflow;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="Command")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.Command), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniCommand))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.Command))]
    public partial class MiniCommand : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniCommand, Framework.Workflow.Domain.Definition.IMiniObjectMetadatasContainer<Framework.Workflow.Domain.Definition.IMiniCommandMetadata>, Framework.Persistent.IVisualIdentityObject, Framework.Persistent.IDescriptionObject, Framework.Persistent.IOrderObject<int>
    {
        
        private string description;
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniCommandMetadata> metadatas;
        
        private string name;
        
        private int orderIndex;
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniCommandParameter> parameters;
        
        private Framework.Workflow.Domain.Projections.MiniTask task;
        
        protected MiniCommand()
        {
        }
        
        public MiniCommand(Framework.Workflow.Domain.Definition.IMiniCommand source)
        {
            this.description = source.Description;
            this.Id = source.Id;
            this.metadatas = Framework.Core.EnumerableExtensions.ToList(source.Metadatas, v => new Framework.Workflow.Domain.Projections.MiniCommandMetadata(v));
            this.name = source.Name;
            this.orderIndex = source.OrderIndex;
            this.parameters = Framework.Core.EnumerableExtensions.ToList(source.Parameters, v => new Framework.Workflow.Domain.Projections.MiniCommandParameter(v));
            if (!object.ReferenceEquals(source.Task, null))
            {
                this.task = new Framework.Workflow.Domain.Projections.MiniTask(source.Task);
            }
        }
        
        public virtual string Description
        {
            get
            {
                return this.description;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniCommandMetadata> Metadatas
        {
            get
            {
                return this.metadatas;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Metadatas")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.IMiniCommandMetadata> Framework.Workflow.Domain.Definition.IMiniObjectMetadatasContainer<Framework.Workflow.Domain.Definition.IMiniCommandMetadata>.Metadatas
        {
            get
            {
                return this.Metadatas;
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        public virtual int OrderIndex
        {
            get
            {
                return this.orderIndex;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniCommandParameter> Parameters
        {
            get
            {
                return this.parameters;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Parameters")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.IMiniCommandParameter> Framework.Workflow.Domain.Definition.IMiniCommand.Parameters
        {
            get
            {
                return this.Parameters;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniTask Task
        {
            get
            {
                return this.task;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Task")]
        Framework.Workflow.Domain.Definition.IMiniTask Framework.Workflow.Domain.Definition.IMiniCommand.Task
        {
            get
            {
                return this.Task;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="CommandMetadata")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.CommandMetadata), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniCommandMetadata))]
    public partial class MiniCommandMetadata : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniCommandMetadata, Framework.Workflow.Domain.Definition.IMiniObjectMetadata, Framework.Persistent.IVisualIdentityObject
    {
        
        private Framework.Workflow.Domain.Projections.MiniCommand command;
        
        private string name;
        
        private string value;
        
        protected MiniCommandMetadata()
        {
        }
        
        public MiniCommandMetadata(Framework.Workflow.Domain.Definition.IMiniCommandMetadata source)
        {
            if (!object.ReferenceEquals(source.Command, null))
            {
                this.command = new Framework.Workflow.Domain.Projections.MiniCommand(source.Command);
            }
            this.Id = source.Id;
            this.name = source.Name;
            this.value = source.Value;
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniCommand Command
        {
            get
            {
                return this.command;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Command")]
        Framework.Workflow.Domain.Definition.IMiniCommand Framework.Workflow.Domain.Definition.IMiniCommandMetadata.Command
        {
            get
            {
                return this.Command;
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        public virtual string Value
        {
            get
            {
                return this.value;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="CommandParameter")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.CommandParameter), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniCommandParameter))]
    public partial class MiniCommandParameter : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniCommandParameter, Framework.Persistent.IVisualIdentityObject
    {
        
        private Framework.Workflow.Domain.Projections.MiniCommand command;
        
        private bool isReadOnly;
        
        private string name;
        
        protected MiniCommandParameter()
        {
        }
        
        public MiniCommandParameter(Framework.Workflow.Domain.Definition.IMiniCommandParameter source)
        {
            if (!object.ReferenceEquals(source.Command, null))
            {
                this.command = new Framework.Workflow.Domain.Projections.MiniCommand(source.Command);
            }
            this.Id = source.Id;
            this.isReadOnly = source.IsReadOnly;
            this.name = source.Name;
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniCommand Command
        {
            get
            {
                return this.command;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Command")]
        Framework.Workflow.Domain.Definition.IMiniCommand Framework.Workflow.Domain.Definition.IMiniCommandParameter.Command
        {
            get
            {
                return this.Command;
            }
        }
        
        public virtual bool IsReadOnly
        {
            get
            {
                return this.isReadOnly;
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="State")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.State), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniState))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.State))]
    public partial class MiniState : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniState, Framework.Workflow.Domain.Definition.IMiniStateBase, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        protected MiniState()
        {
        }
        
        public MiniState(Framework.Workflow.Domain.Definition.IMiniState source)
        {
            this.Id = source.Id;
            this.name = source.Name;
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="StateBase")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniStateBase))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase))]
    public partial class MiniStateBase : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniStateBase, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        protected MiniStateBase()
        {
        }
        
        public MiniStateBase(Framework.Workflow.Domain.Definition.IMiniStateBase source)
        {
            this.Id = source.Id;
            this.name = source.Name;
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="Task")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.Task), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniTask))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.Task))]
    public partial class MiniTask : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniTask, Framework.Workflow.Domain.Definition.IMiniObjectMetadatasContainer<Framework.Workflow.Domain.Definition.IMiniTaskMetadata>, Framework.Persistent.IVisualIdentityObject, Framework.Persistent.IDescriptionObject
    {
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniCommand> commands;
        
        private string description;
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniTaskMetadata> metadatas;
        
        private string name;
        
        private Framework.Workflow.Domain.Projections.MiniState state;
        
        protected MiniTask()
        {
        }
        
        public MiniTask(Framework.Workflow.Domain.Definition.IMiniTask source)
        {
            this.commands = Framework.Core.EnumerableExtensions.ToList(source.Commands, v => new Framework.Workflow.Domain.Projections.MiniCommand(v));
            this.description = source.Description;
            this.Id = source.Id;
            this.metadatas = Framework.Core.EnumerableExtensions.ToList(source.Metadatas, v => new Framework.Workflow.Domain.Projections.MiniTaskMetadata(v));
            this.name = source.Name;
            if (!object.ReferenceEquals(source.State, null))
            {
                this.state = new Framework.Workflow.Domain.Projections.MiniState(source.State);
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniCommand> Commands
        {
            get
            {
                return this.commands;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Commands")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.IMiniCommand> Framework.Workflow.Domain.Definition.IMiniTask.Commands
        {
            get
            {
                return this.Commands;
            }
        }
        
        public virtual string Description
        {
            get
            {
                return this.description;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniTaskMetadata> Metadatas
        {
            get
            {
                return this.metadatas;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Metadatas")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.IMiniTaskMetadata> Framework.Workflow.Domain.Definition.IMiniObjectMetadatasContainer<Framework.Workflow.Domain.Definition.IMiniTaskMetadata>.Metadatas
        {
            get
            {
                return this.Metadatas;
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniState State
        {
            get
            {
                return this.state;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("State")]
        Framework.Workflow.Domain.Definition.IMiniState Framework.Workflow.Domain.Definition.IMiniTask.State
        {
            get
            {
                return this.State;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("State.Name")]
        public virtual string StateName
        {
            get
            {
                return this.State?.Name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="TaskInstance")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Runtime.IMiniTaskInstance))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance))]
    public partial class MiniTaskInstance : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.IMiniTaskInstance
    {
        
        private Framework.Workflow.Domain.Projections.MiniWorkflowInstance workflow;
        
        protected MiniTaskInstance()
        {
        }
        
        public MiniTaskInstance(Framework.Workflow.Domain.Runtime.IMiniTaskInstance source)
        {
            this.Id = source.Id;
            if (!object.ReferenceEquals(source.Workflow, null))
            {
                this.workflow = new Framework.Workflow.Domain.Projections.MiniWorkflowInstance(source.Workflow);
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniWorkflowInstance Workflow
        {
            get
            {
                return this.workflow;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Workflow")]
        Framework.Workflow.Domain.Runtime.IMiniWorkflowInstance Framework.Workflow.Domain.Runtime.IMiniTaskInstance.Workflow
        {
            get
            {
                return this.Workflow;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Workflow.Name")]
        public virtual string WorkflowInstanceName
        {
            get
            {
                return this.Workflow?.Name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="TaskMetadata")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.TaskMetadata), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniTaskMetadata))]
    public partial class MiniTaskMetadata : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniTaskMetadata, Framework.Workflow.Domain.Definition.IMiniObjectMetadata, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        private Framework.Workflow.Domain.Projections.MiniTask task;
        
        private string value;
        
        protected MiniTaskMetadata()
        {
        }
        
        public MiniTaskMetadata(Framework.Workflow.Domain.Definition.IMiniTaskMetadata source)
        {
            this.Id = source.Id;
            this.name = source.Name;
            if (!object.ReferenceEquals(source.Task, null))
            {
                this.task = new Framework.Workflow.Domain.Projections.MiniTask(source.Task);
            }
            this.value = source.Value;
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniTask Task
        {
            get
            {
                return this.task;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Task")]
        Framework.Workflow.Domain.Definition.IMiniTask Framework.Workflow.Domain.Definition.IMiniTaskMetadata.Task
        {
            get
            {
                return this.Task;
            }
        }
        
        public virtual string Value
        {
            get
            {
                return this.value;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="Workflow")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniWorkflow))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow))]
    public partial class MiniWorkflow : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniWorkflow, Framework.Workflow.Domain.Definition.IMiniObjectMetadatasContainer<Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata>, Framework.Persistent.IVisualIdentityObject, Framework.Persistent.IDescriptionObject
    {
        
        private string description;
        
        private Framework.Workflow.Domain.Projections.VisualDomainType domainType;
        
        private System.Collections.Generic.ICollection<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata> metadatas;
        
        private string name;
        
        private Framework.Workflow.Domain.Projections.VisualWorkflow owner;
        
        protected MiniWorkflow()
        {
        }
        
        public MiniWorkflow(Framework.Workflow.Domain.Definition.IMiniWorkflow source)
        {
            this.description = source.Description;
            if (!object.ReferenceEquals(source.DomainType, null))
            {
                this.domainType = new Framework.Workflow.Domain.Projections.VisualDomainType(source.DomainType);
            }
            this.Id = source.Id;
            this.metadatas = Framework.Core.EnumerableExtensions.ToList(source.Metadatas, v => new Framework.Workflow.Domain.Projections.MiniWorkflowMetadata(v));
            this.name = source.Name;
            if (!object.ReferenceEquals(source.Owner, null))
            {
                this.owner = new Framework.Workflow.Domain.Projections.VisualWorkflow(source.Owner);
            }
        }
        
        public virtual string Description
        {
            get
            {
                return this.description;
            }
        }
        
        public virtual Framework.Workflow.Domain.Projections.VisualDomainType DomainType
        {
            get
            {
                return this.domainType;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("DomainType")]
        Framework.Workflow.Domain.Definition.IVisualDomainType Framework.Workflow.Domain.Definition.IMiniWorkflow.DomainType
        {
            get
            {
                return this.DomainType;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata> Metadatas
        {
            get
            {
                return this.metadatas;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Metadatas")]
        System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata> Framework.Workflow.Domain.Definition.IMiniObjectMetadatasContainer<Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata>.Metadatas
        {
            get
            {
                return this.Metadatas;
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.VisualWorkflow Owner
        {
            get
            {
                return this.owner;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Owner")]
        Framework.Workflow.Domain.Definition.IVisualWorkflow Framework.Workflow.Domain.Definition.IMiniWorkflow.Owner
        {
            get
            {
                return this.Owner;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Owner.Id")]
        public virtual System.Guid? OwnerId
        {
            get
            {
                return this.Owner?.Id;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="WorkflowInstance")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Runtime.IMiniWorkflowInstance))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance))]
    public partial class MiniWorkflowInstance : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.IMiniWorkflowInstance, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        protected MiniWorkflowInstance()
        {
        }
        
        public MiniWorkflowInstance(Framework.Workflow.Domain.Runtime.IMiniWorkflowInstance source)
        {
            this.Id = source.Id;
            this.name = source.Name;
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.ReadOnly)]
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="WorkflowMetadata")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata))]
    public partial class MiniWorkflowMetadata : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata, Framework.Workflow.Domain.Definition.IMiniObjectMetadata, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        private string value;
        
        private Framework.Workflow.Domain.Projections.MiniWorkflow workflow;
        
        protected MiniWorkflowMetadata()
        {
        }
        
        public MiniWorkflowMetadata(Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata source)
        {
            this.Id = source.Id;
            this.name = source.Name;
            this.value = source.Value;
            if (!object.ReferenceEquals(source.Workflow, null))
            {
                this.workflow = new Framework.Workflow.Domain.Projections.MiniWorkflow(source.Workflow);
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        public virtual string Value
        {
            get
            {
                return this.value;
            }
        }
        
        [Framework.DomainDriven.Serialization.CustomSerializationAttribute(Framework.DomainDriven.Serialization.CustomSerializationMode.Ignore)]
        public virtual Framework.Workflow.Domain.Projections.MiniWorkflow Workflow
        {
            get
            {
                return this.workflow;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Workflow")]
        Framework.Workflow.Domain.Definition.IMiniWorkflow Framework.Workflow.Domain.Definition.IMiniWorkflowMetadata.Workflow
        {
            get
            {
                return this.Workflow;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="WorkflowSource")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IMiniWorkflowSource))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource))]
    public partial class MiniWorkflowSource : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IMiniWorkflowSource, Framework.Persistent.IVisualIdentityObject, Framework.Persistent.IDescriptionObject, Framework.Persistent.ITypeObject<Framework.Workflow.Domain.Definition.IVisualDomainType>
    {
        
        private string description;
        
        private string name;
        
        private Framework.Workflow.Domain.Projections.VisualDomainType type;
        
        protected MiniWorkflowSource()
        {
        }
        
        public MiniWorkflowSource(Framework.Workflow.Domain.Definition.IMiniWorkflowSource source)
        {
            this.description = source.Description;
            this.Id = source.Id;
            this.name = source.Name;
            if (!object.ReferenceEquals(source.Type, null))
            {
                this.type = new Framework.Workflow.Domain.Projections.VisualDomainType(source.Type);
            }
        }
        
        public virtual string Description
        {
            get
            {
                return this.description;
            }
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
        
        public virtual Framework.Workflow.Domain.Projections.VisualDomainType Type
        {
            get
            {
                return this.type;
            }
        }
        
        [Framework.Persistent.ExpandPathAttribute("Type")]
        Framework.Workflow.Domain.Definition.IVisualDomainType Framework.Persistent.ITypeObject<Framework.Workflow.Domain.Definition.IVisualDomainType>.Type
        {
            get
            {
                return this.Type;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="DomainType")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IVisualDomainType))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType))]
    public partial class VisualDomainType : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IVisualDomainType, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        protected VisualDomainType()
        {
        }
        
        public VisualDomainType(Framework.Workflow.Domain.Definition.IVisualDomainType source)
        {
            this.Id = source.Id;
            this.name = source.Name;
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
    }
    
    [Framework.Persistent.Mapping.TableAttribute(Name="Workflow")]
    [Framework.Projection.ProjectionAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), Framework.Projection.ProjectionRole.Default, typeof(Framework.Workflow.Domain.Definition.IVisualWorkflow))]
    [Framework.Security.DependencySecurityAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow))]
    public partial class VisualWorkflow : Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.IVisualWorkflow, Framework.Persistent.IVisualIdentityObject
    {
        
        private string name;
        
        protected VisualWorkflow()
        {
        }
        
        public VisualWorkflow(Framework.Workflow.Domain.Definition.IVisualWorkflow source)
        {
            this.Id = source.Id;
            this.name = source.Name;
        }
        
        public virtual string Name
        {
            get
            {
                return this.name;
            }
        }
    }
}
