name: .NET

on:
  push:
    branches: 
      - 'main'
      - 'negorov/**'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:

    #runs-on: windows-latest
    runs-on: ubuntu-latest

    steps:
    - run: git config --global core.autocrlf true
    - uses: actions/checkout@v2

    - uses: aarnott/nbgv@v0.3 # https://github.com/AArnott/nbgv
      id: nbgv

    - name: Versioning
      run: |
        echo ${{ steps.nbgv.outputs.SemVer2 }}
        echo ${{ steps.nbgv.outputs.AssemblyVersion }}
        

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    # - name: Cache SonarCloud scanner
    #   id: cache-sonar-scanner
    #   uses: actions/cache@v1
    #   with:
    #     path: .\.sonar\scanner
    #     key: ${{ runner.os }}-sonar-scanner
    #     restore-keys: ${{ runner.os }}-sonar-scanner

    # - name: Install SonarCloud scanner
    #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    #   shell: powershell
    #   run: |
    #     New-Item -Path .\.sonar\scanner -ItemType Directory
    #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    - name: Set up SqlServer
      run: |
        sudo mkdir -p /var/opt/mssql/data
        sudo docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=P@ssw0rd" -e "MSSQL_PID=Express" -v /var/opt/mssql/data:/var/opt/mssql/data -p 1433:1433 -d --name sqlexpress mcr.microsoft.com/mssql/server:2019-latest;

    - name: Restore dependencies
      working-directory: ./src
      run: |
        dotnet restore

    - name: Build
      working-directory: ./src
      run: |
        dotnet build src/IAD.Framework.sln --no-restore

    # - name: Build and analyze
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   shell: powershell
    #   run: |
    #     .\.sonar\scanner\dotnet-sonarscanner begin /k:"Luxoft_BSSFramework" /o:"luxoft" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    #      dotnet build src/IAD.Framework.sln --no-restore
    #     .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
       

    - name: Integration Tests
      run: |
        dotnet test src/_SampleSystem/_Tests/SampleSystem.IntegrationTests --no-build --verbosity normal

    # - name: Check Generation
    #   run: |
    #     dotnet test src/Framework.Generation.Tests/Framework.Generation.Tests.csproj --no-build --verbosity normal
    
    # - name: Unit tests
    #   run: |
    #     dotnet test src/Framework.Core.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/Framework.OData.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/Framework.SecuritySystem.DiTests --no-build --verbosity normal
    #     dotnet test src/Framework.Validation.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/_Configuration/Framework.Configuration.BLL.Core.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/_Configuration/Framework.Configuration.Core.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/_Configuration/Framework.Configuration.SubscriptionModeling.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/_DomainDriven/Framework.DomainDriven.ServiceModel.Tests.Unit --no-build --verbosity normal
    #     dotnet test src/_DomainDriven/Framework.DomainDriven.DBGenerator.Tests.Unit --no-build --verbosity normal
