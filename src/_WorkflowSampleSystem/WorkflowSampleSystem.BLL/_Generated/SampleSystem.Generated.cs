//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkflowSampleSystem.BLL
{
    
    
    public partial class BusinessUnitBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.BusinessUnit, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IBusinessUnitBLL
    {
        
		partial void Initialize();
        
        public BusinessUnitBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnit> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class BusinessUnitBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IBusinessUnitBLL, WorkflowSampleSystem.BLL.BusinessUnitBLL, WorkflowSampleSystem.Domain.BusinessUnit, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IBusinessUnitBLLFactory
    {
        
        public BusinessUnitBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class BusinessUnitHrDepartmentBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.BusinessUnitHrDepartment, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLL
    {
        
		partial void Initialize();
        
        public BusinessUnitHrDepartmentBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnitHrDepartment> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class BusinessUnitHrDepartmentBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLL, WorkflowSampleSystem.BLL.BusinessUnitHrDepartmentBLL, WorkflowSampleSystem.Domain.BusinessUnitHrDepartment, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLLFactory
    {
        
        public BusinessUnitHrDepartmentBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class BusinessUnitManagerCommissionLinkBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLL
    {
        
		partial void Initialize();
        
        public BusinessUnitManagerCommissionLinkBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class BusinessUnitManagerCommissionLinkBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLL, WorkflowSampleSystem.BLL.BusinessUnitManagerCommissionLinkBLL, WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLLFactory
    {
        
        public BusinessUnitManagerCommissionLinkBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class BusinessUnitTypeBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.BusinessUnitType, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IBusinessUnitTypeBLL
    {
        
		partial void Initialize();
        
        public BusinessUnitTypeBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnitType> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class BusinessUnitTypeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IBusinessUnitTypeBLL, WorkflowSampleSystem.BLL.BusinessUnitTypeBLL, WorkflowSampleSystem.Domain.BusinessUnitType, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IBusinessUnitTypeBLLFactory
    {
        
        public BusinessUnitTypeBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class CompanyLegalEntityBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.CompanyLegalEntity, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ICompanyLegalEntityBLL
    {
        
		partial void Initialize();
        
        public CompanyLegalEntityBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.CompanyLegalEntity> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class CompanyLegalEntityBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ICompanyLegalEntityBLL, WorkflowSampleSystem.BLL.CompanyLegalEntityBLL, WorkflowSampleSystem.Domain.CompanyLegalEntity, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ICompanyLegalEntityBLLFactory
    {
        
        public CompanyLegalEntityBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class CountryBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Country, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ICountryBLL
    {
        
		partial void Initialize();
    }
    
    public partial class CountryBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ICountryBLL, WorkflowSampleSystem.BLL.CountryBLL, WorkflowSampleSystem.Domain.Country, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ICountryBLLFactory
    {
        
        public CountryBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeeBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Employee, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeeBLL
    {
        
		partial void Initialize();
        
        public EmployeeBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Employee> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeeBLL, WorkflowSampleSystem.BLL.EmployeeBLL, WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeeBLLFactory
    {
        
        public EmployeeBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeeInformationBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeeInformation, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeeInformationBLL
    {
        
		partial void Initialize();
        
        public EmployeeInformationBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeInformation> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeeInformationBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeeInformationBLL, WorkflowSampleSystem.BLL.EmployeeInformationBLL, WorkflowSampleSystem.Domain.EmployeeInformation, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeeInformationBLLFactory
    {
        
        public EmployeeInformationBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeePhotoBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeePhoto, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeePhotoBLL
    {
        
		partial void Initialize();
        
        public EmployeePhotoBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeePhoto> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeePhotoBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeePhotoBLL, WorkflowSampleSystem.BLL.EmployeePhotoBLL, WorkflowSampleSystem.Domain.EmployeePhoto, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeePhotoBLLFactory
    {
        
        public EmployeePhotoBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeePositionBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeePosition, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeePositionBLL
    {
        
		partial void Initialize();
        
        public EmployeePositionBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeePosition> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeePositionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeePositionBLL, WorkflowSampleSystem.BLL.EmployeePositionBLL, WorkflowSampleSystem.Domain.EmployeePosition, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeePositionBLLFactory
    {
        
        public EmployeePositionBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeeRegistrationTypeBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeeRegistrationType, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLL
    {
        
		partial void Initialize();
        
        public EmployeeRegistrationTypeBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeRegistrationType> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeeRegistrationTypeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLL, WorkflowSampleSystem.BLL.EmployeeRegistrationTypeBLL, WorkflowSampleSystem.Domain.EmployeeRegistrationType, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLLFactory
    {
        
        public EmployeeRegistrationTypeBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeeRoleBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeeRole, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeeRoleBLL
    {
        
		partial void Initialize();
        
        public EmployeeRoleBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeRole> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeeRoleBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeeRoleBLL, WorkflowSampleSystem.BLL.EmployeeRoleBLL, WorkflowSampleSystem.Domain.EmployeeRole, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeeRoleBLLFactory
    {
        
        public EmployeeRoleBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeeRoleDegreeBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeeRoleDegree, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLL
    {
        
		partial void Initialize();
        
        public EmployeeRoleDegreeBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeRoleDegree> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeeRoleDegreeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLL, WorkflowSampleSystem.BLL.EmployeeRoleDegreeBLL, WorkflowSampleSystem.Domain.EmployeeRoleDegree, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLLFactory
    {
        
        public EmployeeRoleDegreeBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EmployeeSpecializationBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EmployeeSpecialization, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IEmployeeSpecializationBLL
    {
        
		partial void Initialize();
        
        public EmployeeSpecializationBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeSpecialization> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EmployeeSpecializationBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IEmployeeSpecializationBLL, WorkflowSampleSystem.BLL.EmployeeSpecializationBLL, WorkflowSampleSystem.Domain.EmployeeSpecialization, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IEmployeeSpecializationBLLFactory
    {
        
        public EmployeeSpecializationBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class Location1676BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EnversBug1676.Location1676, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ILocation1676BLL
    {
        
		partial void Initialize();
        
        public Location1676BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EnversBug1676.Location1676> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class Location1676BLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ILocation1676BLL, WorkflowSampleSystem.BLL.Location1676BLL, WorkflowSampleSystem.Domain.EnversBug1676.Location1676, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ILocation1676BLLFactory
    {
        
        public Location1676BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkingCalendar1676BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IWorkingCalendar1676BLL
    {
        
		partial void Initialize();
        
        public WorkingCalendar1676BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class WorkingCalendar1676BLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IWorkingCalendar1676BLL, WorkflowSampleSystem.BLL.WorkingCalendar1676BLL, WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IWorkingCalendar1676BLLFactory
    {
        
        public WorkingCalendar1676BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class Example1BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Example1, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IExample1BLL
    {
        
		partial void Initialize();
        
        public Example1BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Example1> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class Example1BLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IExample1BLL, WorkflowSampleSystem.BLL.Example1BLL, WorkflowSampleSystem.Domain.Example1, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IExample1BLLFactory
    {
        
        public Example1BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class HRDepartmentBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.HRDepartment, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IHRDepartmentBLL
    {
        
		partial void Initialize();
        
        public HRDepartmentBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.HRDepartment> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class HRDepartmentBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IHRDepartmentBLL, WorkflowSampleSystem.BLL.HRDepartmentBLL, WorkflowSampleSystem.Domain.HRDepartment, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IHRDepartmentBLLFactory
    {
        
        public HRDepartmentBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class IMRequestBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.IMRequest, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IIMRequestBLL
    {
        
		partial void Initialize();
        
        public IMRequestBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.IMRequest> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class IMRequestBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IIMRequestBLL, WorkflowSampleSystem.BLL.IMRequestBLL, WorkflowSampleSystem.Domain.IMRequest, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IIMRequestBLLFactory
    {
        
        public IMRequestBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class InformationBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Information, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IInformationBLL
    {
        
		partial void Initialize();
        
        public InformationBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Information> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class InformationBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IInformationBLL, WorkflowSampleSystem.BLL.InformationBLL, WorkflowSampleSystem.Domain.Information, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IInformationBLLFactory
    {
        
        public InformationBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class IntegrationVersionContainer1BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLL
    {
        
		partial void Initialize();
        
        public IntegrationVersionContainer1BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class IntegrationVersionContainer1BLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLL, WorkflowSampleSystem.BLL.IntegrationVersionContainer1BLL, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1>, WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLLFactory
    {
        
        public IntegrationVersionContainer1BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class IntegrationVersionContainer2BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLL
    {
        
		partial void Initialize();
        
        public IntegrationVersionContainer2BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class IntegrationVersionContainer2BLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLL, WorkflowSampleSystem.BLL.IntegrationVersionContainer2BLL, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2>, WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLLFactory
    {
        
        public IntegrationVersionContainer2BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class LocationBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Location, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ILocationBLL
    {
        
		partial void Initialize();
        
        public LocationBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Location> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class LocationBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ILocationBLL, WorkflowSampleSystem.BLL.LocationBLL, WorkflowSampleSystem.Domain.Location, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ILocationBLLFactory
    {
        
        public LocationBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ManagementUnitBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.ManagementUnit, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IManagementUnitBLL
    {
        
		partial void Initialize();
        
        public ManagementUnitBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnit> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ManagementUnitBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IManagementUnitBLL, WorkflowSampleSystem.BLL.ManagementUnitBLL, WorkflowSampleSystem.Domain.ManagementUnit, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IManagementUnitBLLFactory
    {
        
        public ManagementUnitBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ManagementUnitAndBusinessUnitLinkBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLL
    {
        
		partial void Initialize();
        
        public ManagementUnitAndBusinessUnitLinkBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ManagementUnitAndBusinessUnitLinkBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLL, WorkflowSampleSystem.BLL.ManagementUnitAndBusinessUnitLinkBLL, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLLFactory
    {
        
        public ManagementUnitAndBusinessUnitLinkBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ManagementUnitAndHRDepartmentLinkBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLL
    {
        
		partial void Initialize();
        
        public ManagementUnitAndHRDepartmentLinkBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ManagementUnitAndHRDepartmentLinkBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLL, WorkflowSampleSystem.BLL.ManagementUnitAndHRDepartmentLinkBLL, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLLFactory
    {
        
        public ManagementUnitAndHRDepartmentLinkBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ManagementUnitFluentMappingBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.ManagementUnitFluentMapping, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLL
    {
        
		partial void Initialize();
        
        public ManagementUnitFluentMappingBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnitFluentMapping> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ManagementUnitFluentMappingBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLL, WorkflowSampleSystem.BLL.ManagementUnitFluentMappingBLL, WorkflowSampleSystem.Domain.ManagementUnitFluentMapping, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLLFactory
    {
        
        public ManagementUnitFluentMappingBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestManualEmployeeProjectionBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLL
    {
        
		partial void Initialize();
        
        public TestManualEmployeeProjectionBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestManualEmployeeProjectionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLL, WorkflowSampleSystem.BLL.TestManualEmployeeProjectionBLL, WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLLFactory
    {
        
        public TestManualEmployeeProjectionBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class NamedLockBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.NamedLock, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.INamedLockBLL
    {
        
		partial void Initialize();
        
        public NamedLockBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.NamedLock> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class NamedLockBLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.INamedLockBLL, WorkflowSampleSystem.BLL.NamedLockBLL, WorkflowSampleSystem.Domain.NamedLock>, WorkflowSampleSystem.BLL.INamedLockBLLFactory
    {
        
        public NamedLockBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PrincipalBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Principal, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IPrincipalBLL
    {
        
		partial void Initialize();
        
        public PrincipalBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Principal> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class PrincipalBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IPrincipalBLL, WorkflowSampleSystem.BLL.PrincipalBLL, WorkflowSampleSystem.Domain.Principal, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IPrincipalBLLFactory
    {
        
        public PrincipalBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class BusinessUnitProgramClassBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLL
    {
        
		partial void Initialize();
        
        public BusinessUnitProgramClassBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class BusinessUnitProgramClassBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLL, WorkflowSampleSystem.BLL.BusinessUnitProgramClassBLL, WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLLFactory
    {
        
        public BusinessUnitProgramClassBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class CustomCompanyLegalEntityBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLL
    {
        
		partial void Initialize();
        
        public CustomCompanyLegalEntityBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class CustomCompanyLegalEntityBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLL, WorkflowSampleSystem.BLL.CustomCompanyLegalEntityBLL, WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLLFactory
    {
        
        public CustomCompanyLegalEntityBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestBusinessUnitBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestBusinessUnit, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestBusinessUnitBLL
    {
        
		partial void Initialize();
        
        public TestBusinessUnitBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestBusinessUnit> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestBusinessUnitBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestBusinessUnitBLL, WorkflowSampleSystem.BLL.TestBusinessUnitBLL, WorkflowSampleSystem.Domain.Projections.TestBusinessUnit, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestBusinessUnitBLLFactory
    {
        
        public TestBusinessUnitBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestCustomContextSecurityObjProjectionBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLL
    {
        
		partial void Initialize();
        
        public TestCustomContextSecurityObjProjectionBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestCustomContextSecurityObjProjectionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLL, WorkflowSampleSystem.BLL.TestCustomContextSecurityObjProjectionBLL, WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLLFactory
    {
        
        public TestCustomContextSecurityObjProjectionBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestDepartmentBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestDepartment, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestDepartmentBLL
    {
        
		partial void Initialize();
        
        public TestDepartmentBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestDepartment> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestDepartmentBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestDepartmentBLL, WorkflowSampleSystem.BLL.TestDepartmentBLL, WorkflowSampleSystem.Domain.Projections.TestDepartment, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestDepartmentBLLFactory
    {
        
        public TestDepartmentBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestEmployeeBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestEmployee, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestEmployeeBLL
    {
        
		partial void Initialize();
        
        public TestEmployeeBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestEmployee> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestEmployeeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestEmployeeBLL, WorkflowSampleSystem.BLL.TestEmployeeBLL, WorkflowSampleSystem.Domain.Projections.TestEmployee, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestEmployeeBLLFactory
    {
        
        public TestEmployeeBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestIMRequestBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestIMRequest, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestIMRequestBLL
    {
        
		partial void Initialize();
        
        public TestIMRequestBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestIMRequest> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestIMRequestBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestIMRequestBLL, WorkflowSampleSystem.BLL.TestIMRequestBLL, WorkflowSampleSystem.Domain.Projections.TestIMRequest, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestIMRequestBLLFactory
    {
        
        public TestIMRequestBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestLegacyEmployeeBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLL
    {
        
		partial void Initialize();
        
        public TestLegacyEmployeeBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestLegacyEmployeeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLL, WorkflowSampleSystem.BLL.TestLegacyEmployeeBLL, WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLLFactory
    {
        
        public TestLegacyEmployeeBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestLocationBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestLocation, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestLocationBLL
    {
        
		partial void Initialize();
        
        public TestLocationBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLocation> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestLocationBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestLocationBLL, WorkflowSampleSystem.BLL.TestLocationBLL, WorkflowSampleSystem.Domain.Projections.TestLocation, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestLocationBLLFactory
    {
        
        public TestLocationBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestLocationCollectionPropertiesBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLL
    {
        
		partial void Initialize();
        
        public TestLocationCollectionPropertiesBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestLocationCollectionPropertiesBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLL, WorkflowSampleSystem.BLL.TestLocationCollectionPropertiesBLL, WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLLFactory
    {
        
        public TestLocationCollectionPropertiesBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestSecurityObjItemProjectionBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLL
    {
        
		partial void Initialize();
        
        public TestSecurityObjItemProjectionBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestSecurityObjItemProjectionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLL, WorkflowSampleSystem.BLL.TestSecurityObjItemProjectionBLL, WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLLFactory
    {
        
        public TestSecurityObjItemProjectionBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class RoleRoleDegreeLinkBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.RoleRoleDegreeLink, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLL
    {
        
		partial void Initialize();
        
        public RoleRoleDegreeLinkBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.RoleRoleDegreeLink> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class RoleRoleDegreeLinkBLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLL, WorkflowSampleSystem.BLL.RoleRoleDegreeLinkBLL, WorkflowSampleSystem.Domain.RoleRoleDegreeLink>, WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLLFactory
    {
        
        public RoleRoleDegreeLinkBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class SqlParserTestObjBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.SqlParserTestObj, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ISqlParserTestObjBLL
    {
        
		partial void Initialize();
        
        public SqlParserTestObjBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.SqlParserTestObj> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class SqlParserTestObjBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ISqlParserTestObjBLL, WorkflowSampleSystem.BLL.SqlParserTestObjBLL, WorkflowSampleSystem.Domain.SqlParserTestObj, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ISqlParserTestObjBLLFactory
    {
        
        public SqlParserTestObjBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class SqlParserTestObjContainerBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.SqlParserTestObjContainer, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLL
    {
        
		partial void Initialize();
        
        public SqlParserTestObjContainerBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.SqlParserTestObjContainer> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class SqlParserTestObjContainerBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLL, WorkflowSampleSystem.BLL.SqlParserTestObjContainerBLL, WorkflowSampleSystem.Domain.SqlParserTestObjContainer, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLLFactory
    {
        
        public SqlParserTestObjContainerBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestCustomContextSecurityObjBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestCustomContextSecurityObj, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLL
    {
        
		partial void Initialize();
        
        public TestCustomContextSecurityObjBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestCustomContextSecurityObj> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestCustomContextSecurityObjBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLL, WorkflowSampleSystem.BLL.TestCustomContextSecurityObjBLL, WorkflowSampleSystem.Domain.TestCustomContextSecurityObj, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLLFactory
    {
        
        public TestCustomContextSecurityObjBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestImmutableObjBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestImmutableObj, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestImmutableObjBLL
    {
        
		partial void Initialize();
        
        public TestImmutableObjBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestImmutableObj> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestImmutableObjBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestImmutableObjBLL, WorkflowSampleSystem.BLL.TestImmutableObjBLL, WorkflowSampleSystem.Domain.TestImmutableObj, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestImmutableObjBLLFactory
    {
        
        public TestImmutableObjBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestRootSecurityObjBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestRootSecurityObj, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestRootSecurityObjBLL
    {
        
		partial void Initialize();
        
        public TestRootSecurityObjBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestRootSecurityObj> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestRootSecurityObjBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestRootSecurityObjBLL, WorkflowSampleSystem.BLL.TestRootSecurityObjBLL, WorkflowSampleSystem.Domain.TestRootSecurityObj, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestRootSecurityObjBLLFactory
    {
        
        public TestRootSecurityObjBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestSecurityObjItemBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestSecurityObjItem, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestSecurityObjItemBLL
    {
        
		partial void Initialize();
        
        public TestSecurityObjItemBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecurityObjItem> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestSecurityObjItemBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestSecurityObjItemBLL, WorkflowSampleSystem.BLL.TestSecurityObjItemBLL, WorkflowSampleSystem.Domain.TestSecurityObjItem, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestSecurityObjItemBLLFactory
    {
        
        public TestSecurityObjItemBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestSecuritySubObjItemBLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestSecuritySubObjItem, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLL
    {
        
		partial void Initialize();
        
        public TestSecuritySubObjItemBLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecuritySubObjItem> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestSecuritySubObjItemBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLL, WorkflowSampleSystem.BLL.TestSecuritySubObjItemBLL, WorkflowSampleSystem.Domain.TestSecuritySubObjItem, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLLFactory
    {
        
        public TestSecuritySubObjItemBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestSecuritySubObjItem2BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestSecuritySubObjItem2, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLL
    {
        
		partial void Initialize();
        
        public TestSecuritySubObjItem2BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecuritySubObjItem2> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestSecuritySubObjItem2BLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLL, WorkflowSampleSystem.BLL.TestSecuritySubObjItem2BLL, WorkflowSampleSystem.Domain.TestSecuritySubObjItem2, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLLFactory
    {
        
        public TestSecuritySubObjItem2BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TestSecuritySubObjItem3BLL : WorkflowSampleSystem.BLL.SecurityDomainBLLBase<WorkflowSampleSystem.Domain.TestSecuritySubObjItem3, Framework.DomainDriven.BLL.BLLBaseOperation>, WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLL
    {
        
		partial void Initialize();
        
        public TestSecuritySubObjItem3BLL(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context, Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecuritySubObjItem3> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TestSecuritySubObjItem3BLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLL, WorkflowSampleSystem.BLL.TestSecuritySubObjItem3BLL, WorkflowSampleSystem.Domain.TestSecuritySubObjItem3, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode>, WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLLFactory
    {
        
        public TestSecuritySubObjItem3BLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkflowSampleSystemBLLFactoryContainer : Framework.DomainDriven.BLL.BLLContextContainer<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext>, WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLFactoryContainer
    {
        
        private WorkflowSampleSystem.BLL.IBusinessUnitBLL businessUnitBLL;
        
        private WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLL businessUnitHrDepartmentBLL;
        
        private WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLL businessUnitManagerCommissionLinkBLL;
        
        private WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLL businessUnitProgramClassBLL;
        
        private WorkflowSampleSystem.BLL.IBusinessUnitTypeBLL businessUnitTypeBLL;
        
        private WorkflowSampleSystem.BLL.ICompanyLegalEntityBLL companyLegalEntityBLL;
        
        private WorkflowSampleSystem.BLL.ICountryBLL countryBLL;
        
        private WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLL customCompanyLegalEntityBLL;
        
        private WorkflowSampleSystem.BLL.WorkflowSampleSystemDefaultBLLFactory defaultBLLFactory;
        
        private WorkflowSampleSystem.BLL.IEmployeeBLL employeeBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeeInformationBLL employeeInformationBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeePhotoBLL employeePhotoBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeePositionBLL employeePositionBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLL employeeRegistrationTypeBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeeRoleBLL employeeRoleBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLL employeeRoleDegreeBLL;
        
        private WorkflowSampleSystem.BLL.IEmployeeSpecializationBLL employeeSpecializationBLL;
        
        private WorkflowSampleSystem.BLL.IExample1BLL example1BLL;
        
        private WorkflowSampleSystem.BLL.IHRDepartmentBLL hRDepartmentBLL;
        
        private WorkflowSampleSystem.BLL.WorkflowSampleSystemImplementedBLLFactory implementedBLLFactory;
        
        private WorkflowSampleSystem.BLL.IIMRequestBLL iMRequestBLL;
        
        private WorkflowSampleSystem.BLL.IInformationBLL informationBLL;
        
        private WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLL integrationVersionContainer1BLL;
        
        private WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLL integrationVersionContainer2BLL;
        
        private WorkflowSampleSystem.BLL.ILocation1676BLL location1676BLL;
        
        private WorkflowSampleSystem.BLL.ILocationBLL locationBLL;
        
        private WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLL managementUnitAndBusinessUnitLinkBLL;
        
        private WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLL managementUnitAndHRDepartmentLinkBLL;
        
        private WorkflowSampleSystem.BLL.IManagementUnitBLL managementUnitBLL;
        
        private WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLL managementUnitFluentMappingBLL;
        
        private WorkflowSampleSystem.BLL.INamedLockBLL namedLockBLL;
        
        private WorkflowSampleSystem.BLL.IPrincipalBLL principalBLL;
        
        private WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLL roleRoleDegreeLinkBLL;
        
        private WorkflowSampleSystem.BLL.ISqlParserTestObjBLL sqlParserTestObjBLL;
        
        private WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLL sqlParserTestObjContainerBLL;
        
        private WorkflowSampleSystem.BLL.ITestBusinessUnitBLL testBusinessUnitBLL;
        
        private WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLL testCustomContextSecurityObjBLL;
        
        private WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLL testCustomContextSecurityObjProjectionBLL;
        
        private WorkflowSampleSystem.BLL.ITestDepartmentBLL testDepartmentBLL;
        
        private WorkflowSampleSystem.BLL.ITestEmployeeBLL testEmployeeBLL;
        
        private WorkflowSampleSystem.BLL.ITestImmutableObjBLL testImmutableObjBLL;
        
        private WorkflowSampleSystem.BLL.ITestIMRequestBLL testIMRequestBLL;
        
        private WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLL testLegacyEmployeeBLL;
        
        private WorkflowSampleSystem.BLL.ITestLocationBLL testLocationBLL;
        
        private WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLL testLocationCollectionPropertiesBLL;
        
        private WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLL testManualEmployeeProjectionBLL;
        
        private WorkflowSampleSystem.BLL.ITestRootSecurityObjBLL testRootSecurityObjBLL;
        
        private WorkflowSampleSystem.BLL.ITestSecurityObjItemBLL testSecurityObjItemBLL;
        
        private WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLL testSecurityObjItemProjectionBLL;
        
        private WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLL testSecuritySubObjItem2BLL;
        
        private WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLL testSecuritySubObjItem3BLL;
        
        private WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLL testSecuritySubObjItemBLL;
        
        private WorkflowSampleSystem.BLL.IWorkingCalendar1676BLL workingCalendar1676BLL;
        
        public WorkflowSampleSystemBLLFactoryContainer(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitBLL BusinessUnit
        {
            get
            {
                if (object.ReferenceEquals(this.businessUnitBLL, null))
                {
                    this.businessUnitBLL = this.BusinessUnitFactory.Create();
                }
                return this.businessUnitBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitBLLFactory BusinessUnitFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IBusinessUnitBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLL BusinessUnitHrDepartment
        {
            get
            {
                if (object.ReferenceEquals(this.businessUnitHrDepartmentBLL, null))
                {
                    this.businessUnitHrDepartmentBLL = this.BusinessUnitHrDepartmentFactory.Create();
                }
                return this.businessUnitHrDepartmentBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLLFactory BusinessUnitHrDepartmentFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLL BusinessUnitManagerCommissionLink
        {
            get
            {
                if (object.ReferenceEquals(this.businessUnitManagerCommissionLinkBLL, null))
                {
                    this.businessUnitManagerCommissionLinkBLL = this.BusinessUnitManagerCommissionLinkFactory.Create();
                }
                return this.businessUnitManagerCommissionLinkBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLLFactory BusinessUnitManagerCommissionLinkFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLL BusinessUnitProgramClass
        {
            get
            {
                if (object.ReferenceEquals(this.businessUnitProgramClassBLL, null))
                {
                    this.businessUnitProgramClassBLL = this.BusinessUnitProgramClassFactory.Create();
                }
                return this.businessUnitProgramClassBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLLFactory BusinessUnitProgramClassFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitTypeBLL BusinessUnitType
        {
            get
            {
                if (object.ReferenceEquals(this.businessUnitTypeBLL, null))
                {
                    this.businessUnitTypeBLL = this.BusinessUnitTypeFactory.Create();
                }
                return this.businessUnitTypeBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IBusinessUnitTypeBLLFactory BusinessUnitTypeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IBusinessUnitTypeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ICompanyLegalEntityBLL CompanyLegalEntity
        {
            get
            {
                if (object.ReferenceEquals(this.companyLegalEntityBLL, null))
                {
                    this.companyLegalEntityBLL = this.CompanyLegalEntityFactory.Create();
                }
                return this.companyLegalEntityBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ICompanyLegalEntityBLLFactory CompanyLegalEntityFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ICompanyLegalEntityBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ICountryBLL Country
        {
            get
            {
                if (object.ReferenceEquals(this.countryBLL, null))
                {
                    this.countryBLL = this.CountryFactory.Create();
                }
                return this.countryBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ICountryBLLFactory CountryFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ICountryBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLL CustomCompanyLegalEntity
        {
            get
            {
                if (object.ReferenceEquals(this.customCompanyLegalEntityBLL, null))
                {
                    this.customCompanyLegalEntityBLL = this.CustomCompanyLegalEntityFactory.Create();
                }
                return this.customCompanyLegalEntityBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLLFactory CustomCompanyLegalEntityFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode, System.Guid> Default
        {
            get
            {
                if (object.ReferenceEquals(this.defaultBLLFactory, null))
                {
                    this.defaultBLLFactory = new WorkflowSampleSystem.BLL.WorkflowSampleSystemDefaultBLLFactory(this.Context);
                }
                return this.defaultBLLFactory;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeBLL Employee
        {
            get
            {
                if (object.ReferenceEquals(this.employeeBLL, null))
                {
                    this.employeeBLL = this.EmployeeFactory.Create();
                }
                return this.employeeBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeBLLFactory EmployeeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeInformationBLL EmployeeInformation
        {
            get
            {
                if (object.ReferenceEquals(this.employeeInformationBLL, null))
                {
                    this.employeeInformationBLL = this.EmployeeInformationFactory.Create();
                }
                return this.employeeInformationBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeInformationBLLFactory EmployeeInformationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeeInformationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeePhotoBLL EmployeePhoto
        {
            get
            {
                if (object.ReferenceEquals(this.employeePhotoBLL, null))
                {
                    this.employeePhotoBLL = this.EmployeePhotoFactory.Create();
                }
                return this.employeePhotoBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeePhotoBLLFactory EmployeePhotoFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeePhotoBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeePositionBLL EmployeePosition
        {
            get
            {
                if (object.ReferenceEquals(this.employeePositionBLL, null))
                {
                    this.employeePositionBLL = this.EmployeePositionFactory.Create();
                }
                return this.employeePositionBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeePositionBLLFactory EmployeePositionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeePositionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLL EmployeeRegistrationType
        {
            get
            {
                if (object.ReferenceEquals(this.employeeRegistrationTypeBLL, null))
                {
                    this.employeeRegistrationTypeBLL = this.EmployeeRegistrationTypeFactory.Create();
                }
                return this.employeeRegistrationTypeBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLLFactory EmployeeRegistrationTypeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeRoleBLL EmployeeRole
        {
            get
            {
                if (object.ReferenceEquals(this.employeeRoleBLL, null))
                {
                    this.employeeRoleBLL = this.EmployeeRoleFactory.Create();
                }
                return this.employeeRoleBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLL EmployeeRoleDegree
        {
            get
            {
                if (object.ReferenceEquals(this.employeeRoleDegreeBLL, null))
                {
                    this.employeeRoleDegreeBLL = this.EmployeeRoleDegreeFactory.Create();
                }
                return this.employeeRoleDegreeBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLLFactory EmployeeRoleDegreeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeRoleBLLFactory EmployeeRoleFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeeRoleBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeSpecializationBLL EmployeeSpecialization
        {
            get
            {
                if (object.ReferenceEquals(this.employeeSpecializationBLL, null))
                {
                    this.employeeSpecializationBLL = this.EmployeeSpecializationFactory.Create();
                }
                return this.employeeSpecializationBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IEmployeeSpecializationBLLFactory EmployeeSpecializationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IEmployeeSpecializationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IExample1BLL Example1
        {
            get
            {
                if (object.ReferenceEquals(this.example1BLL, null))
                {
                    this.example1BLL = this.Example1Factory.Create();
                }
                return this.example1BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IExample1BLLFactory Example1Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IExample1BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IHRDepartmentBLL HRDepartment
        {
            get
            {
                if (object.ReferenceEquals(this.hRDepartmentBLL, null))
                {
                    this.hRDepartmentBLL = this.HRDepartmentFactory.Create();
                }
                return this.hRDepartmentBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IHRDepartmentBLLFactory HRDepartmentFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IHRDepartmentBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode, System.Guid> Implemented
        {
            get
            {
                if (object.ReferenceEquals(this.implementedBLLFactory, null))
                {
                    this.implementedBLLFactory = new WorkflowSampleSystem.BLL.WorkflowSampleSystemImplementedBLLFactory(this.Context);
                }
                return this.implementedBLLFactory;
            }
        }
        
        public WorkflowSampleSystem.BLL.IIMRequestBLL IMRequest
        {
            get
            {
                if (object.ReferenceEquals(this.iMRequestBLL, null))
                {
                    this.iMRequestBLL = this.IMRequestFactory.Create();
                }
                return this.iMRequestBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IIMRequestBLLFactory IMRequestFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IIMRequestBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IInformationBLL Information
        {
            get
            {
                if (object.ReferenceEquals(this.informationBLL, null))
                {
                    this.informationBLL = this.InformationFactory.Create();
                }
                return this.informationBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IInformationBLLFactory InformationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IInformationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLL IntegrationVersionContainer1
        {
            get
            {
                if (object.ReferenceEquals(this.integrationVersionContainer1BLL, null))
                {
                    this.integrationVersionContainer1BLL = this.IntegrationVersionContainer1Factory.Create();
                }
                return this.integrationVersionContainer1BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLLFactory IntegrationVersionContainer1Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLL IntegrationVersionContainer2
        {
            get
            {
                if (object.ReferenceEquals(this.integrationVersionContainer2BLL, null))
                {
                    this.integrationVersionContainer2BLL = this.IntegrationVersionContainer2Factory.Create();
                }
                return this.integrationVersionContainer2BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLLFactory IntegrationVersionContainer2Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ILocationBLL Location
        {
            get
            {
                if (object.ReferenceEquals(this.locationBLL, null))
                {
                    this.locationBLL = this.LocationFactory.Create();
                }
                return this.locationBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ILocation1676BLL Location1676
        {
            get
            {
                if (object.ReferenceEquals(this.location1676BLL, null))
                {
                    this.location1676BLL = this.Location1676Factory.Create();
                }
                return this.location1676BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ILocation1676BLLFactory Location1676Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ILocation1676BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ILocationBLLFactory LocationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ILocationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitBLL ManagementUnit
        {
            get
            {
                if (object.ReferenceEquals(this.managementUnitBLL, null))
                {
                    this.managementUnitBLL = this.ManagementUnitFactory.Create();
                }
                return this.managementUnitBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLL ManagementUnitAndBusinessUnitLink
        {
            get
            {
                if (object.ReferenceEquals(this.managementUnitAndBusinessUnitLinkBLL, null))
                {
                    this.managementUnitAndBusinessUnitLinkBLL = this.ManagementUnitAndBusinessUnitLinkFactory.Create();
                }
                return this.managementUnitAndBusinessUnitLinkBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLLFactory ManagementUnitAndBusinessUnitLinkFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLL ManagementUnitAndHRDepartmentLink
        {
            get
            {
                if (object.ReferenceEquals(this.managementUnitAndHRDepartmentLinkBLL, null))
                {
                    this.managementUnitAndHRDepartmentLinkBLL = this.ManagementUnitAndHRDepartmentLinkFactory.Create();
                }
                return this.managementUnitAndHRDepartmentLinkBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLLFactory ManagementUnitAndHRDepartmentLinkFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitBLLFactory ManagementUnitFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IManagementUnitBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLL ManagementUnitFluentMapping
        {
            get
            {
                if (object.ReferenceEquals(this.managementUnitFluentMappingBLL, null))
                {
                    this.managementUnitFluentMappingBLL = this.ManagementUnitFluentMappingFactory.Create();
                }
                return this.managementUnitFluentMappingBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLLFactory ManagementUnitFluentMappingFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.INamedLockBLL NamedLock
        {
            get
            {
                if (object.ReferenceEquals(this.namedLockBLL, null))
                {
                    this.namedLockBLL = this.NamedLockFactory.Create();
                }
                return this.namedLockBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.INamedLockBLLFactory NamedLockFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.INamedLockBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IPrincipalBLL Principal
        {
            get
            {
                if (object.ReferenceEquals(this.principalBLL, null))
                {
                    this.principalBLL = this.PrincipalFactory.Create();
                }
                return this.principalBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IPrincipalBLLFactory PrincipalFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IPrincipalBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLL RoleRoleDegreeLink
        {
            get
            {
                if (object.ReferenceEquals(this.roleRoleDegreeLinkBLL, null))
                {
                    this.roleRoleDegreeLinkBLL = this.RoleRoleDegreeLinkFactory.Create();
                }
                return this.roleRoleDegreeLinkBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLLFactory RoleRoleDegreeLinkFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ISqlParserTestObjBLL SqlParserTestObj
        {
            get
            {
                if (object.ReferenceEquals(this.sqlParserTestObjBLL, null))
                {
                    this.sqlParserTestObjBLL = this.SqlParserTestObjFactory.Create();
                }
                return this.sqlParserTestObjBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLL SqlParserTestObjContainer
        {
            get
            {
                if (object.ReferenceEquals(this.sqlParserTestObjContainerBLL, null))
                {
                    this.sqlParserTestObjContainerBLL = this.SqlParserTestObjContainerFactory.Create();
                }
                return this.sqlParserTestObjContainerBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLLFactory SqlParserTestObjContainerFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ISqlParserTestObjBLLFactory SqlParserTestObjFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ISqlParserTestObjBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestBusinessUnitBLL TestBusinessUnit
        {
            get
            {
                if (object.ReferenceEquals(this.testBusinessUnitBLL, null))
                {
                    this.testBusinessUnitBLL = this.TestBusinessUnitFactory.Create();
                }
                return this.testBusinessUnitBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestBusinessUnitBLLFactory TestBusinessUnitFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestBusinessUnitBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLL TestCustomContextSecurityObj
        {
            get
            {
                if (object.ReferenceEquals(this.testCustomContextSecurityObjBLL, null))
                {
                    this.testCustomContextSecurityObjBLL = this.TestCustomContextSecurityObjFactory.Create();
                }
                return this.testCustomContextSecurityObjBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLLFactory TestCustomContextSecurityObjFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLL TestCustomContextSecurityObjProjection
        {
            get
            {
                if (object.ReferenceEquals(this.testCustomContextSecurityObjProjectionBLL, null))
                {
                    this.testCustomContextSecurityObjProjectionBLL = this.TestCustomContextSecurityObjProjectionFactory.Create();
                }
                return this.testCustomContextSecurityObjProjectionBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLLFactory TestCustomContextSecurityObjProjectionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestDepartmentBLL TestDepartment
        {
            get
            {
                if (object.ReferenceEquals(this.testDepartmentBLL, null))
                {
                    this.testDepartmentBLL = this.TestDepartmentFactory.Create();
                }
                return this.testDepartmentBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestDepartmentBLLFactory TestDepartmentFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestDepartmentBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestEmployeeBLL TestEmployee
        {
            get
            {
                if (object.ReferenceEquals(this.testEmployeeBLL, null))
                {
                    this.testEmployeeBLL = this.TestEmployeeFactory.Create();
                }
                return this.testEmployeeBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestEmployeeBLLFactory TestEmployeeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestEmployeeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestImmutableObjBLL TestImmutableObj
        {
            get
            {
                if (object.ReferenceEquals(this.testImmutableObjBLL, null))
                {
                    this.testImmutableObjBLL = this.TestImmutableObjFactory.Create();
                }
                return this.testImmutableObjBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestImmutableObjBLLFactory TestImmutableObjFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestImmutableObjBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestIMRequestBLL TestIMRequest
        {
            get
            {
                if (object.ReferenceEquals(this.testIMRequestBLL, null))
                {
                    this.testIMRequestBLL = this.TestIMRequestFactory.Create();
                }
                return this.testIMRequestBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestIMRequestBLLFactory TestIMRequestFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestIMRequestBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLL TestLegacyEmployee
        {
            get
            {
                if (object.ReferenceEquals(this.testLegacyEmployeeBLL, null))
                {
                    this.testLegacyEmployeeBLL = this.TestLegacyEmployeeFactory.Create();
                }
                return this.testLegacyEmployeeBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLLFactory TestLegacyEmployeeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestLocationBLL TestLocation
        {
            get
            {
                if (object.ReferenceEquals(this.testLocationBLL, null))
                {
                    this.testLocationBLL = this.TestLocationFactory.Create();
                }
                return this.testLocationBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLL TestLocationCollectionProperties
        {
            get
            {
                if (object.ReferenceEquals(this.testLocationCollectionPropertiesBLL, null))
                {
                    this.testLocationCollectionPropertiesBLL = this.TestLocationCollectionPropertiesFactory.Create();
                }
                return this.testLocationCollectionPropertiesBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLLFactory TestLocationCollectionPropertiesFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestLocationBLLFactory TestLocationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestLocationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLL TestManualEmployeeProjection
        {
            get
            {
                if (object.ReferenceEquals(this.testManualEmployeeProjectionBLL, null))
                {
                    this.testManualEmployeeProjectionBLL = this.TestManualEmployeeProjectionFactory.Create();
                }
                return this.testManualEmployeeProjectionBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLLFactory TestManualEmployeeProjectionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestRootSecurityObjBLL TestRootSecurityObj
        {
            get
            {
                if (object.ReferenceEquals(this.testRootSecurityObjBLL, null))
                {
                    this.testRootSecurityObjBLL = this.TestRootSecurityObjFactory.Create();
                }
                return this.testRootSecurityObjBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestRootSecurityObjBLLFactory TestRootSecurityObjFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestRootSecurityObjBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecurityObjItemBLL TestSecurityObjItem
        {
            get
            {
                if (object.ReferenceEquals(this.testSecurityObjItemBLL, null))
                {
                    this.testSecurityObjItemBLL = this.TestSecurityObjItemFactory.Create();
                }
                return this.testSecurityObjItemBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecurityObjItemBLLFactory TestSecurityObjItemFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestSecurityObjItemBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLL TestSecurityObjItemProjection
        {
            get
            {
                if (object.ReferenceEquals(this.testSecurityObjItemProjectionBLL, null))
                {
                    this.testSecurityObjItemProjectionBLL = this.TestSecurityObjItemProjectionFactory.Create();
                }
                return this.testSecurityObjItemProjectionBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLLFactory TestSecurityObjItemProjectionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLL TestSecuritySubObjItem
        {
            get
            {
                if (object.ReferenceEquals(this.testSecuritySubObjItemBLL, null))
                {
                    this.testSecuritySubObjItemBLL = this.TestSecuritySubObjItemFactory.Create();
                }
                return this.testSecuritySubObjItemBLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLL TestSecuritySubObjItem2
        {
            get
            {
                if (object.ReferenceEquals(this.testSecuritySubObjItem2BLL, null))
                {
                    this.testSecuritySubObjItem2BLL = this.TestSecuritySubObjItem2Factory.Create();
                }
                return this.testSecuritySubObjItem2BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLLFactory TestSecuritySubObjItem2Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLL TestSecuritySubObjItem3
        {
            get
            {
                if (object.ReferenceEquals(this.testSecuritySubObjItem3BLL, null))
                {
                    this.testSecuritySubObjItem3BLL = this.TestSecuritySubObjItem3Factory.Create();
                }
                return this.testSecuritySubObjItem3BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLLFactory TestSecuritySubObjItem3Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLLFactory TestSecuritySubObjItemFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public WorkflowSampleSystem.BLL.IWorkingCalendar1676BLL WorkingCalendar1676
        {
            get
            {
                if (object.ReferenceEquals(this.workingCalendar1676BLL, null))
                {
                    this.workingCalendar1676BLL = this.WorkingCalendar1676Factory.Create();
                }
                return this.workingCalendar1676BLL;
            }
        }
        
        public WorkflowSampleSystem.BLL.IWorkingCalendar1676BLLFactory WorkingCalendar1676Factory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WorkflowSampleSystem.BLL.IWorkingCalendar1676BLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public static void RegisterBLLFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
        {
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IBusinessUnitBLLFactory, WorkflowSampleSystem.BLL.BusinessUnitBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IBusinessUnitHrDepartmentBLLFactory, WorkflowSampleSystem.BLL.BusinessUnitHrDepartmentBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IBusinessUnitManagerCommissionLinkBLLFactory, WorkflowSampleSystem.BLL.BusinessUnitManagerCommissionLinkBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IBusinessUnitTypeBLLFactory, WorkflowSampleSystem.BLL.BusinessUnitTypeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ICompanyLegalEntityBLLFactory, WorkflowSampleSystem.BLL.CompanyLegalEntityBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ICountryBLLFactory, WorkflowSampleSystem.BLL.CountryBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeeBLLFactory, WorkflowSampleSystem.BLL.EmployeeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeeInformationBLLFactory, WorkflowSampleSystem.BLL.EmployeeInformationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeePhotoBLLFactory, WorkflowSampleSystem.BLL.EmployeePhotoBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeePositionBLLFactory, WorkflowSampleSystem.BLL.EmployeePositionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeeRegistrationTypeBLLFactory, WorkflowSampleSystem.BLL.EmployeeRegistrationTypeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeeRoleBLLFactory, WorkflowSampleSystem.BLL.EmployeeRoleBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeeRoleDegreeBLLFactory, WorkflowSampleSystem.BLL.EmployeeRoleDegreeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IEmployeeSpecializationBLLFactory, WorkflowSampleSystem.BLL.EmployeeSpecializationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ILocation1676BLLFactory, WorkflowSampleSystem.BLL.Location1676BLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IWorkingCalendar1676BLLFactory, WorkflowSampleSystem.BLL.WorkingCalendar1676BLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IExample1BLLFactory, WorkflowSampleSystem.BLL.Example1BLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IHRDepartmentBLLFactory, WorkflowSampleSystem.BLL.HRDepartmentBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IIMRequestBLLFactory, WorkflowSampleSystem.BLL.IMRequestBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IInformationBLLFactory, WorkflowSampleSystem.BLL.InformationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IIntegrationVersionContainer1BLLFactory, WorkflowSampleSystem.BLL.IntegrationVersionContainer1BLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IIntegrationVersionContainer2BLLFactory, WorkflowSampleSystem.BLL.IntegrationVersionContainer2BLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ILocationBLLFactory, WorkflowSampleSystem.BLL.LocationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IManagementUnitBLLFactory, WorkflowSampleSystem.BLL.ManagementUnitBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IManagementUnitAndBusinessUnitLinkBLLFactory, WorkflowSampleSystem.BLL.ManagementUnitAndBusinessUnitLinkBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IManagementUnitAndHRDepartmentLinkBLLFactory, WorkflowSampleSystem.BLL.ManagementUnitAndHRDepartmentLinkBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IManagementUnitFluentMappingBLLFactory, WorkflowSampleSystem.BLL.ManagementUnitFluentMappingBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestManualEmployeeProjectionBLLFactory, WorkflowSampleSystem.BLL.TestManualEmployeeProjectionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.INamedLockBLLFactory, WorkflowSampleSystem.BLL.NamedLockBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IPrincipalBLLFactory, WorkflowSampleSystem.BLL.PrincipalBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IBusinessUnitProgramClassBLLFactory, WorkflowSampleSystem.BLL.BusinessUnitProgramClassBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ICustomCompanyLegalEntityBLLFactory, WorkflowSampleSystem.BLL.CustomCompanyLegalEntityBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestBusinessUnitBLLFactory, WorkflowSampleSystem.BLL.TestBusinessUnitBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjProjectionBLLFactory, WorkflowSampleSystem.BLL.TestCustomContextSecurityObjProjectionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestDepartmentBLLFactory, WorkflowSampleSystem.BLL.TestDepartmentBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestEmployeeBLLFactory, WorkflowSampleSystem.BLL.TestEmployeeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestIMRequestBLLFactory, WorkflowSampleSystem.BLL.TestIMRequestBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestLegacyEmployeeBLLFactory, WorkflowSampleSystem.BLL.TestLegacyEmployeeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestLocationBLLFactory, WorkflowSampleSystem.BLL.TestLocationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestLocationCollectionPropertiesBLLFactory, WorkflowSampleSystem.BLL.TestLocationCollectionPropertiesBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestSecurityObjItemProjectionBLLFactory, WorkflowSampleSystem.BLL.TestSecurityObjItemProjectionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.IRoleRoleDegreeLinkBLLFactory, WorkflowSampleSystem.BLL.RoleRoleDegreeLinkBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ISqlParserTestObjBLLFactory, WorkflowSampleSystem.BLL.SqlParserTestObjBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ISqlParserTestObjContainerBLLFactory, WorkflowSampleSystem.BLL.SqlParserTestObjContainerBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestCustomContextSecurityObjBLLFactory, WorkflowSampleSystem.BLL.TestCustomContextSecurityObjBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestImmutableObjBLLFactory, WorkflowSampleSystem.BLL.TestImmutableObjBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestRootSecurityObjBLLFactory, WorkflowSampleSystem.BLL.TestRootSecurityObjBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestSecurityObjItemBLLFactory, WorkflowSampleSystem.BLL.TestSecurityObjItemBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestSecuritySubObjItemBLLFactory, WorkflowSampleSystem.BLL.TestSecuritySubObjItemBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestSecuritySubObjItem2BLLFactory, WorkflowSampleSystem.BLL.TestSecuritySubObjItem2BLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<WorkflowSampleSystem.BLL.ITestSecuritySubObjItem3BLLFactory, WorkflowSampleSystem.BLL.TestSecuritySubObjItem3BLLFactory>(serviceCollection);
        }
    }
    
    public partial class WorkflowSampleSystemDefaultBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.Domain.DomainObjectBase, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode, System.Guid>
    {
        
        public WorkflowSampleSystemDefaultBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            return new WorkflowSampleSystem.BLL.DomainBLLBase<TDomainObject>(this.Context);
        }
    }
    
    public partial class WorkflowSampleSystemImplementedBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.Domain.DomainObjectBase, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode, System.Guid>
    {
        
        public WorkflowSampleSystemImplementedBLLFactory(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnit));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitHrDepartment));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitManagerCommissionLink));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitType)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitType));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.CompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CompanyLegalEntity));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Country)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Country));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Employee)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Employee));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeInformation)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeInformation));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePhoto)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePhoto));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePosition)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePosition));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRegistrationType)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRegistrationType));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRole)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRole));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRoleDegree)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleDegree));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeSpecialization)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeSpecialization));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.Location1676)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Location1676));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.WorkingCalendar1676));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Example1)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Example1));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.HRDepartment)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.HRDepartment));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IMRequest)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IMRequest));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Information)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Information));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer1));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer2));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Location)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Location));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnit)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnit));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndBusinessUnitLink));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndHRDepartmentLink));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFluentMapping));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestManualEmployeeProjection));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLock));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Principal));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitProgramClass));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CustomCompanyLegalEntity));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestBusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestBusinessUnit));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjProjection));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestDepartment)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestDepartment));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestEmployee)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestEmployee));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestIMRequest)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestIMRequest));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLegacyEmployee));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocation)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocation));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationCollectionProperties));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemProjection));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.RoleRoleDegreeLink)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.RoleRoleDegreeLink));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObj)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObj));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObjContainer)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjContainer));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObj));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestImmutableObj)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestImmutableObj));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestRootSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestRootSecurityObj));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecurityObjItem)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItem));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem2));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem3));
            }
            else
            {
                return new WorkflowSampleSystem.BLL.DomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnit>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitHrDepartmentFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnitHrDepartment>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitManagerCommissionLinkFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitTypeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.BusinessUnitType>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.CompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CompanyLegalEntityFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.CompanyLegalEntity>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Country)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CountryFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Country>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Employee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Employee>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeInformation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeInformationFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeInformation>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePhoto)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePhotoFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeePhoto>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePosition)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePositionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeePosition>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRegistrationType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRegistrationTypeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeRegistrationType>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRole)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeRole>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRoleDegree)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleDegreeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeRoleDegree>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeSpecialization)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeSpecializationFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EmployeeSpecialization>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.Location1676)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Location1676Factory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EnversBug1676.Location1676>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.WorkingCalendar1676Factory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Example1)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Example1Factory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Example1>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.HRDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.HRDepartmentFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.HRDepartment>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IMRequest)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IMRequestFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.IMRequest>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Information)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.InformationFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Information>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer1Factory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer2Factory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Location)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.LocationFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Location>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnit>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndBusinessUnitLinkFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndHRDepartmentLinkFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFluentMappingFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManagementUnitFluentMapping>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestManualEmployeeProjectionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLockFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PrincipalFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Principal>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitProgramClassFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CustomCompanyLegalEntityFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestBusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestBusinessUnitFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestBusinessUnit>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjProjectionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestDepartmentFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestDepartment>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestEmployee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestEmployeeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestEmployee>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestIMRequest)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestIMRequestFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestIMRequest>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLegacyEmployeeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLocation>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationCollectionPropertiesFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemProjectionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.RoleRoleDegreeLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.RoleRoleDegreeLinkFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.SqlParserTestObj>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObjContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjContainerFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.SqlParserTestObjContainer>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestCustomContextSecurityObj>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestImmutableObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestImmutableObjFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestImmutableObj>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestRootSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestRootSecurityObjFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestRootSecurityObj>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecurityObjItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecurityObjItem>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItemFactory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecuritySubObjItem>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem2Factory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecuritySubObjItem2>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem3Factory.Create(((Framework.SecuritySystem.ISecurityProvider<WorkflowSampleSystem.Domain.TestSecuritySubObjItem3>)(securityProvider)))));
            }
            else
            {
                return new WorkflowSampleSystem.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode securityOperation)
        {
            if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitHrDepartmentFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitManagerCommissionLinkFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitTypeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.CompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CompanyLegalEntityFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Country)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CountryFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Employee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeInformation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeInformationFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePhoto)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePhotoFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePosition)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePositionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRegistrationType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRegistrationTypeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRole)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRoleDegree)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleDegreeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeSpecialization)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeSpecializationFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.Location1676)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Location1676Factory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.WorkingCalendar1676Factory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Example1)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Example1Factory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.HRDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.HRDepartmentFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IMRequest)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IMRequestFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Information)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.InformationFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer1Factory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer2Factory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Location)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.LocationFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndBusinessUnitLinkFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndHRDepartmentLinkFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFluentMappingFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestManualEmployeeProjectionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLockFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PrincipalFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitProgramClassFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CustomCompanyLegalEntityFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestBusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestBusinessUnitFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjProjectionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestDepartmentFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestEmployee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestEmployeeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestIMRequest)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestIMRequestFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLegacyEmployeeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationCollectionPropertiesFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemProjectionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.RoleRoleDegreeLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.RoleRoleDegreeLinkFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObjContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjContainerFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestImmutableObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestImmutableObjFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestRootSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestRootSecurityObjFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecurityObjItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItemFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem2Factory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem3Factory.Create(securityOperation)));
            }
            else
            {
                return new WorkflowSampleSystem.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.BLLSecurityMode bllSecurityMode)
        {
            if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitHrDepartmentFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitManagerCommissionLinkFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.BusinessUnitType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitTypeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.CompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CompanyLegalEntityFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Country)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CountryFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Employee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeInformation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeInformationFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePhoto)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePhotoFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeePosition)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeePositionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRegistrationType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRegistrationTypeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRole)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeRoleDegree)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeRoleDegreeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EmployeeSpecialization)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EmployeeSpecializationFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.Location1676)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Location1676Factory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.WorkingCalendar1676Factory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Example1)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Example1Factory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.HRDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.HRDepartmentFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IMRequest)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IMRequestFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Information)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.InformationFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer1Factory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.IntegrationVersionContainer2Factory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Location)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.LocationFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndBusinessUnitLinkFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitAndHRDepartmentLinkFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ManagementUnitFluentMappingFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestManualEmployeeProjectionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLockFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PrincipalFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessUnitProgramClassFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CustomCompanyLegalEntityFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestBusinessUnit)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestBusinessUnitFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjProjectionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestDepartment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestDepartmentFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestEmployee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestEmployeeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestIMRequest)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestIMRequestFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLegacyEmployeeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestLocationCollectionPropertiesFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemProjectionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.RoleRoleDegreeLink)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.RoleRoleDegreeLinkFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.SqlParserTestObjContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SqlParserTestObjContainerFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestCustomContextSecurityObjFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestImmutableObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestImmutableObjFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestRootSecurityObj)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestRootSecurityObjFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecurityObjItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecurityObjItemFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItemFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem2Factory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TestSecuritySubObjItem3Factory.Create(bllSecurityMode)));
            }
            else
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(new WorkflowSampleSystem.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context)));
            }
        }
    }
}
