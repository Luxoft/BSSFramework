//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Workflow.WebApi
{
    
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check Command access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckCommandAccess))]
        public virtual void CheckCommandAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckCommandAccessInternal(commandIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckCommandAccessInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.Command;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Command>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get Command (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommand))]
        public virtual Framework.Workflow.Generated.DTO.CommandFullDTO GetFullCommand([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandInternal(commandIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Command (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandFullDTO GetFullCommandByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandByNameInternal(commandName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandFullDTO GetFullCommandByNameInternal(string commandName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandFullDTO GetFullCommandInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Commands (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommands))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommands()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Commands (FullDTO) by filter (Framework.Workflow.Domain.AvailableCommandFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandsByAvailableCommandFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsByAvailableCommandFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandsByAvailableCommandFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsByAvailableCommandFilterInternal(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.AvailableCommandFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Commands (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO[] commandIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandsByIdentsInternal(commandIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsByIdentsInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO[] commandIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(commandIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Commands (FullDTO) by filter (Framework.Workflow.Domain.CommandRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsByRootFilterInternal(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.CommandRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandFullDTO> GetFullCommandsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Command (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichCommand))]
        public virtual Framework.Workflow.Generated.DTO.CommandRichDTO GetRichCommand([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichCommandInternal(commandIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Command (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichCommandByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandRichDTO GetRichCommandByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichCommandByNameInternal(commandName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandRichDTO GetRichCommandByNameInternal(string commandName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandRichDTO GetRichCommandInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Command (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommand))]
        public virtual Framework.Workflow.Generated.DTO.CommandSimpleDTO GetSimpleCommand([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandInternal(commandIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Command (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandSimpleDTO GetSimpleCommandByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandByNameInternal(commandName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandSimpleDTO GetSimpleCommandByNameInternal(string commandName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandSimpleDTO GetSimpleCommandInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Commands (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommands))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommands()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Commands (SimpleDTO) by filter (Framework.Workflow.Domain.AvailableCommandFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandsByAvailableCommandFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsByAvailableCommandFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandsByAvailableCommandFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsByAvailableCommandFilterInternal(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.AvailableCommandFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Commands (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO[] commandIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandsByIdentsInternal(commandIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsByIdentsInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO[] commandIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(commandIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Commands (SimpleDTO) by filter (Framework.Workflow.Domain.CommandRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsByRootFilterInternal(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.CommandRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandSimpleDTO> GetSimpleCommandsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Command (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommand))]
        public virtual Framework.Workflow.Generated.DTO.CommandVisualDTO GetVisualCommand([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandInternal(commandIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Command (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandVisualDTO GetVisualCommandByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandByNameInternal(commandName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandVisualDTO GetVisualCommandByNameInternal(string commandName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandVisualDTO GetVisualCommandInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Commands (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommands))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommands()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Commands (VisualDTO) by filter (Framework.Workflow.Domain.AvailableCommandFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandsByAvailableCommandFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsByAvailableCommandFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandsByAvailableCommandFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsByAvailableCommandFilterInternal(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.AvailableCommandFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Commands (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO[] commandIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandsByIdentsInternal(commandIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsByIdentsInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO[] commandIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(commandIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Commands (VisualDTO) by filter (Framework.Workflow.Domain.CommandRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsByRootFilterInternal(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.CommandRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandVisualDTO> GetVisualCommandsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Command>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for Command
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasCommandAccess))]
        public virtual bool HasCommandAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasCommandAccessInternal(commandIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasCommandAccessInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.Command;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Command>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove Command
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveCommand))]
        public virtual void RemoveCommand([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveCommandInternal(commandIdent, evaluateData));
        }
        
        protected virtual void RemoveCommandInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveCommandInternal(commandIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveCommandInternal(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ICommandBLL bll)
        {
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save Commands
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveCommand))]
        public virtual Framework.Workflow.Generated.DTO.CommandIdentityDTO SaveCommand([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveCommandInternal(commandStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandIdentityDTO SaveCommandInternal(Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandBLL bll = evaluateData.Context.Logics.CommandFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveCommandInternal(commandStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandIdentityDTO SaveCommandInternal(Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ICommandBLL bll)
        {
            Framework.Workflow.Domain.Definition.Command domainObject = bll.GetById(commandStrict.Id, true);
            commandStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check CommandEvent access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckCommandEventAccess))]
        public virtual void CheckCommandEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckCommandEventAccessInternal(commandEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckCommandEventAccessInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = bll.GetById(commandEventIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.CommandEvent>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get CommandEvent (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandEvent))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventFullDTO GetFullCommandEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandEventInternal(commandEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvent (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandEventByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventFullDTO GetFullCommandEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandEventByNameInternal(commandEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventFullDTO GetFullCommandEventByNameInternal(string commandEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventFullDTO GetFullCommandEventInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = bll.GetById(commandEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of CommandEvents (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventFullDTO> GetFullCommandEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvents (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventFullDTO> GetFullCommandEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO[] commandEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandEventsByIdentsInternal(commandEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventFullDTO> GetFullCommandEventsByIdentsInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO[] commandEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(commandEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get CommandEvents (FullDTO) by filter (Framework.Workflow.Domain.CommandEventRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullCommandEventsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventFullDTO> GetFullCommandEventsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullCommandEventsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventFullDTO> GetFullCommandEventsByRootFilterInternal(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.CommandEventRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventFullDTO> GetFullCommandEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get CommandEvent (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichCommandEvent))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventRichDTO GetRichCommandEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichCommandEventInternal(commandEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvent (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichCommandEventByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventRichDTO GetRichCommandEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichCommandEventByNameInternal(commandEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventRichDTO GetRichCommandEventByNameInternal(string commandEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventRichDTO GetRichCommandEventInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = bll.GetById(commandEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get CommandEvent (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandEvent))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventSimpleDTO GetSimpleCommandEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandEventInternal(commandEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvent (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandEventByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventSimpleDTO GetSimpleCommandEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandEventByNameInternal(commandEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventSimpleDTO GetSimpleCommandEventByNameInternal(string commandEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventSimpleDTO GetSimpleCommandEventInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = bll.GetById(commandEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of CommandEvents (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> GetSimpleCommandEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvents (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> GetSimpleCommandEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO[] commandEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandEventsByIdentsInternal(commandEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> GetSimpleCommandEventsByIdentsInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO[] commandEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(commandEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get CommandEvents (SimpleDTO) by filter (Framework.Workflow.Domain.CommandEventRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleCommandEventsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> GetSimpleCommandEventsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleCommandEventsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> GetSimpleCommandEventsByRootFilterInternal(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.CommandEventRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> GetSimpleCommandEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get CommandEvent (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandEvent))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventVisualDTO GetVisualCommandEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandEventInternal(commandEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvent (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandEventByName))]
        public virtual Framework.Workflow.Generated.DTO.CommandEventVisualDTO GetVisualCommandEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string commandEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandEventByNameInternal(commandEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventVisualDTO GetVisualCommandEventByNameInternal(string commandEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, commandEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.CommandEventVisualDTO GetVisualCommandEventInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = bll.GetById(commandEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of CommandEvents (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> GetVisualCommandEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get CommandEvents (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> GetVisualCommandEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO[] commandEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandEventsByIdentsInternal(commandEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> GetVisualCommandEventsByIdentsInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO[] commandEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(commandEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get CommandEvents (VisualDTO) by filter (Framework.Workflow.Domain.CommandEventRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualCommandEventsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> GetVisualCommandEventsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualCommandEventsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> GetVisualCommandEventsByRootFilterInternal(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.CommandEventRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> GetVisualCommandEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for CommandEvent
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasCommandEventAccess))]
        public virtual bool HasCommandEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasCommandEventAccessInternal(commandEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasCommandEventAccessInternal(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ICommandEventBLL bll = evaluateData.Context.Logics.CommandEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.CommandEvent domainObject = bll.GetById(commandEventIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.CommandEvent>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check ConditionState access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckConditionStateAccess))]
        public virtual void CheckConditionStateAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckConditionStateAccessInternal(conditionStateIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckConditionStateAccessInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionState;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ConditionState>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get ConditionState (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionState))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateFullDTO GetFullConditionState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStateInternal(conditionStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionState (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateFullDTO GetFullConditionStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStateByNameInternal(conditionStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateFullDTO GetFullConditionStateByNameInternal(string conditionStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateFullDTO GetFullConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ConditionStates (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> GetFullConditionStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStates (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> GetFullConditionStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO[] conditionStateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStatesByIdentsInternal(conditionStateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> GetFullConditionStatesByIdentsInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO[] conditionStateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(conditionStateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionStates (FullDTO) by filter (Framework.Workflow.Domain.ConditionStateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> GetFullConditionStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> GetFullConditionStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.ConditionStateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> GetFullConditionStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionState (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichConditionState))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateRichDTO GetRichConditionState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichConditionStateInternal(conditionStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionState (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichConditionStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateRichDTO GetRichConditionStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichConditionStateByNameInternal(conditionStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateRichDTO GetRichConditionStateByNameInternal(string conditionStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateRichDTO GetRichConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionState (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionState))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO GetSimpleConditionState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStateInternal(conditionStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionState (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO GetSimpleConditionStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStateByNameInternal(conditionStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO GetSimpleConditionStateByNameInternal(string conditionStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO GetSimpleConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ConditionStates (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> GetSimpleConditionStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStates (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> GetSimpleConditionStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO[] conditionStateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStatesByIdentsInternal(conditionStateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> GetSimpleConditionStatesByIdentsInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO[] conditionStateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(conditionStateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionStates (SimpleDTO) by filter (Framework.Workflow.Domain.ConditionStateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> GetSimpleConditionStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> GetSimpleConditionStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.ConditionStateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> GetSimpleConditionStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionState (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionState))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateVisualDTO GetVisualConditionState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStateInternal(conditionStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionState (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateVisualDTO GetVisualConditionStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStateByNameInternal(conditionStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateVisualDTO GetVisualConditionStateByNameInternal(string conditionStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateVisualDTO GetVisualConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ConditionStates (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> GetVisualConditionStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStates (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> GetVisualConditionStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO[] conditionStateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStatesByIdentsInternal(conditionStateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> GetVisualConditionStatesByIdentsInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO[] conditionStateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(conditionStateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionStates (VisualDTO) by filter (Framework.Workflow.Domain.ConditionStateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> GetVisualConditionStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> GetVisualConditionStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.ConditionStateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> GetVisualConditionStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionState>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for ConditionState
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasConditionStateAccess))]
        public virtual bool HasConditionStateAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasConditionStateAccessInternal(conditionStateIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasConditionStateAccessInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionState;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ConditionState>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove ConditionState
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveConditionState))]
        public virtual void RemoveConditionState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveConditionStateInternal(conditionStateIdent, evaluateData));
        }
        
        protected virtual void RemoveConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveConditionStateInternal(conditionStateIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IConditionStateBLL bll)
        {
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save ConditionStates
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveConditionState))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO SaveConditionState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveConditionStateInternal(conditionStateStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO SaveConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateBLL bll = evaluateData.Context.Logics.ConditionStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveConditionStateInternal(conditionStateStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO SaveConditionStateInternal(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IConditionStateBLL bll)
        {
            Framework.Workflow.Domain.Definition.ConditionState domainObject = bll.GetById(conditionStateStrict.Id, true);
            conditionStateStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check ConditionStateEvent access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckConditionStateEventAccess))]
        public virtual void CheckConditionStateEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckConditionStateEventAccessInternal(conditionStateEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckConditionStateEventAccessInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = bll.GetById(conditionStateEventIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ConditionStateEvent>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get ConditionStateEvent (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStateEvent))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO GetFullConditionStateEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStateEventInternal(conditionStateEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvent (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStateEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO GetFullConditionStateEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStateEventByNameInternal(conditionStateEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO GetFullConditionStateEventByNameInternal(string conditionStateEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO GetFullConditionStateEventInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = bll.GetById(conditionStateEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ConditionStateEvents (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStateEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO> GetFullConditionStateEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStateEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvents (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullConditionStateEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO> GetFullConditionStateEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO[] conditionStateEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullConditionStateEventsByIdentsInternal(conditionStateEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO> GetFullConditionStateEventsByIdentsInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO[] conditionStateEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(conditionStateEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO> GetFullConditionStateEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionStateEvent (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichConditionStateEvent))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO GetRichConditionStateEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichConditionStateEventInternal(conditionStateEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvent (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichConditionStateEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO GetRichConditionStateEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichConditionStateEventByNameInternal(conditionStateEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO GetRichConditionStateEventByNameInternal(string conditionStateEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO GetRichConditionStateEventInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = bll.GetById(conditionStateEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionStateEvent (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStateEvent))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO GetSimpleConditionStateEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStateEventInternal(conditionStateEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvent (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStateEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO GetSimpleConditionStateEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStateEventByNameInternal(conditionStateEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO GetSimpleConditionStateEventByNameInternal(string conditionStateEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO GetSimpleConditionStateEventInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = bll.GetById(conditionStateEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ConditionStateEvents (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStateEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO> GetSimpleConditionStateEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStateEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvents (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleConditionStateEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO> GetSimpleConditionStateEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO[] conditionStateEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleConditionStateEventsByIdentsInternal(conditionStateEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO> GetSimpleConditionStateEventsByIdentsInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO[] conditionStateEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(conditionStateEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO> GetSimpleConditionStateEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ConditionStateEvent (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStateEvent))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO GetVisualConditionStateEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStateEventInternal(conditionStateEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvent (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStateEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO GetVisualConditionStateEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string conditionStateEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStateEventByNameInternal(conditionStateEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO GetVisualConditionStateEventByNameInternal(string conditionStateEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, conditionStateEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO GetVisualConditionStateEventInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = bll.GetById(conditionStateEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ConditionStateEvents (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStateEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO> GetVisualConditionStateEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStateEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ConditionStateEvents (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualConditionStateEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO> GetVisualConditionStateEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO[] conditionStateEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualConditionStateEventsByIdentsInternal(conditionStateEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO> GetVisualConditionStateEventsByIdentsInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO[] conditionStateEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(conditionStateEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO> GetVisualConditionStateEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for ConditionStateEvent
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasConditionStateEventAccess))]
        public virtual bool HasConditionStateEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasConditionStateEventAccessInternal(conditionStateEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasConditionStateEventAccessInternal(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IConditionStateEventBLL bll = evaluateData.Context.Logics.ConditionStateEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject = bll.GetById(conditionStateEventIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ConditionStateEvent>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check DomainType access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckDomainTypeAccess))]
        public virtual void CheckDomainTypeAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckDomainTypeAccessInternal(domainTypeIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckDomainTypeAccessInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainType;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.DomainType domainObject = bll.GetById(domainTypeIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.DomainType>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get DomainType (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullDomainType))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeFullDTO GetFullDomainType([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullDomainTypeInternal(domainTypeIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get DomainType (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullDomainTypeByName))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeFullDTO GetFullDomainTypeByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string domainTypeName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullDomainTypeByNameInternal(domainTypeName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeFullDTO GetFullDomainTypeByNameInternal(string domainTypeName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, domainTypeName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeFullDTO GetFullDomainTypeInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = bll.GetById(domainTypeIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of DomainTypes (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullDomainTypes))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> GetFullDomainTypes()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullDomainTypesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get DomainTypes (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullDomainTypesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> GetFullDomainTypesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO[] domainTypeIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullDomainTypesByIdentsInternal(domainTypeIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> GetFullDomainTypesByIdentsInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO[] domainTypeIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(domainTypeIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get DomainTypes (FullDTO) by filter (Framework.Workflow.Domain.DomainTypeRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullDomainTypesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> GetFullDomainTypesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullDomainTypesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> GetFullDomainTypesByRootFilterInternal(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.DomainTypeRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> GetFullDomainTypesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get DomainType (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichDomainType))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeRichDTO GetRichDomainType([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichDomainTypeInternal(domainTypeIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get DomainType (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichDomainTypeByName))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeRichDTO GetRichDomainTypeByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string domainTypeName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichDomainTypeByNameInternal(domainTypeName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeRichDTO GetRichDomainTypeByNameInternal(string domainTypeName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, domainTypeName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeRichDTO GetRichDomainTypeInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = bll.GetById(domainTypeIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get DomainType (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleDomainType))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO GetSimpleDomainType([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleDomainTypeInternal(domainTypeIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get DomainType (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleDomainTypeByName))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO GetSimpleDomainTypeByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string domainTypeName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleDomainTypeByNameInternal(domainTypeName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO GetSimpleDomainTypeByNameInternal(string domainTypeName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, domainTypeName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO GetSimpleDomainTypeInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = bll.GetById(domainTypeIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of DomainTypes (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleDomainTypes))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> GetSimpleDomainTypes()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleDomainTypesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get DomainTypes (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleDomainTypesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> GetSimpleDomainTypesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO[] domainTypeIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleDomainTypesByIdentsInternal(domainTypeIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> GetSimpleDomainTypesByIdentsInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO[] domainTypeIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(domainTypeIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get DomainTypes (SimpleDTO) by filter (Framework.Workflow.Domain.DomainTypeRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleDomainTypesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> GetSimpleDomainTypesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleDomainTypesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> GetSimpleDomainTypesByRootFilterInternal(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.DomainTypeRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> GetSimpleDomainTypesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get DomainType (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualDomainType))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeVisualDTO GetVisualDomainType([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualDomainTypeInternal(domainTypeIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get DomainType (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualDomainTypeByName))]
        public virtual Framework.Workflow.Generated.DTO.DomainTypeVisualDTO GetVisualDomainTypeByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string domainTypeName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualDomainTypeByNameInternal(domainTypeName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeVisualDTO GetVisualDomainTypeByNameInternal(string domainTypeName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, domainTypeName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.DomainTypeVisualDTO GetVisualDomainTypeInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.DomainType domainObject = bll.GetById(domainTypeIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of DomainTypes (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualDomainTypes))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> GetVisualDomainTypes()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualDomainTypesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get DomainTypes (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualDomainTypesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> GetVisualDomainTypesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO[] domainTypeIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualDomainTypesByIdentsInternal(domainTypeIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> GetVisualDomainTypesByIdentsInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO[] domainTypeIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(domainTypeIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get DomainTypes (VisualDTO) by filter (Framework.Workflow.Domain.DomainTypeRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualDomainTypesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> GetVisualDomainTypesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualDomainTypesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> GetVisualDomainTypesByRootFilterInternal(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.DomainTypeRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> GetVisualDomainTypesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainTypeFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.DomainType>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for DomainType
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasDomainTypeAccess))]
        public virtual bool HasDomainTypeAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasDomainTypeAccessInternal(domainTypeIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasDomainTypeAccessInternal(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IDomainTypeBLL bll = evaluateData.Context.Logics.DomainType;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.DomainType domainObject = bll.GetById(domainTypeIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.DomainType>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check Event access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckEventAccess))]
        public virtual void CheckEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckEventAccessInternal(eventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckEventAccessInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.Event;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Event domainObject = bll.GetById(eventIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Event>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get Event (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullEvent))]
        public virtual Framework.Workflow.Generated.DTO.EventFullDTO GetFullEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullEventInternal(eventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Event (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullEventByName))]
        public virtual Framework.Workflow.Generated.DTO.EventFullDTO GetFullEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string eventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullEventByNameInternal(eventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventFullDTO GetFullEventByNameInternal(string eventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, eventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventFullDTO GetFullEventInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = bll.GetById(eventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Events (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventFullDTO> GetFullEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Events (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventFullDTO> GetFullEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO[] eventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullEventsByIdentsInternal(eventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventFullDTO> GetFullEventsByIdentsInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO[] eventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(eventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Events (FullDTO) by filter (Framework.Workflow.Domain.EventRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullEventsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventFullDTO> GetFullEventsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullEventsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventFullDTO> GetFullEventsByRootFilterInternal(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.EventRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventFullDTO> GetFullEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Event (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichEvent))]
        public virtual Framework.Workflow.Generated.DTO.EventRichDTO GetRichEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichEventInternal(eventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Event (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichEventByName))]
        public virtual Framework.Workflow.Generated.DTO.EventRichDTO GetRichEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string eventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichEventByNameInternal(eventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventRichDTO GetRichEventByNameInternal(string eventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, eventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventRichDTO GetRichEventInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = bll.GetById(eventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Event (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleEvent))]
        public virtual Framework.Workflow.Generated.DTO.EventSimpleDTO GetSimpleEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleEventInternal(eventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Event (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleEventByName))]
        public virtual Framework.Workflow.Generated.DTO.EventSimpleDTO GetSimpleEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string eventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleEventByNameInternal(eventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventSimpleDTO GetSimpleEventByNameInternal(string eventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, eventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventSimpleDTO GetSimpleEventInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = bll.GetById(eventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Events (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventSimpleDTO> GetSimpleEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Events (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventSimpleDTO> GetSimpleEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO[] eventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleEventsByIdentsInternal(eventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventSimpleDTO> GetSimpleEventsByIdentsInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO[] eventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(eventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Events (SimpleDTO) by filter (Framework.Workflow.Domain.EventRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleEventsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventSimpleDTO> GetSimpleEventsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleEventsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventSimpleDTO> GetSimpleEventsByRootFilterInternal(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.EventRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventSimpleDTO> GetSimpleEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Event (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualEvent))]
        public virtual Framework.Workflow.Generated.DTO.EventVisualDTO GetVisualEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualEventInternal(eventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Event (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualEventByName))]
        public virtual Framework.Workflow.Generated.DTO.EventVisualDTO GetVisualEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string eventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualEventByNameInternal(eventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventVisualDTO GetVisualEventByNameInternal(string eventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, eventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.EventVisualDTO GetVisualEventInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Event domainObject = bll.GetById(eventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Events (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventVisualDTO> GetVisualEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Events (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventVisualDTO> GetVisualEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO[] eventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualEventsByIdentsInternal(eventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventVisualDTO> GetVisualEventsByIdentsInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO[] eventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(eventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Events (VisualDTO) by filter (Framework.Workflow.Domain.EventRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualEventsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventVisualDTO> GetVisualEventsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualEventsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventVisualDTO> GetVisualEventsByRootFilterInternal(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.EventRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.EventVisualDTO> GetVisualEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.EventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Event>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for Event
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasEventAccess))]
        public virtual bool HasEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasEventAccessInternal(eventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasEventAccessInternal(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IEventBLL bll = evaluateData.Context.Logics.Event;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Event domainObject = bll.GetById(eventIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Event>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check ParallelState access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckParallelStateAccess))]
        public virtual void CheckParallelStateAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckParallelStateAccessInternal(parallelStateIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckParallelStateAccessInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelState;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ParallelState>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get ParallelState (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelState))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFullDTO GetFullParallelState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStateInternal(parallelStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelState (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFullDTO GetFullParallelStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStateByNameInternal(parallelStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFullDTO GetFullParallelStateByNameInternal(string parallelStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFullDTO GetFullParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ParallelStates (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> GetFullParallelStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStates (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> GetFullParallelStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO[] parallelStateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStatesByIdentsInternal(parallelStateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> GetFullParallelStatesByIdentsInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO[] parallelStateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(parallelStateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelStates (FullDTO) by filter (Framework.Workflow.Domain.ParallelStateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> GetFullParallelStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> GetFullParallelStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.ParallelStateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> GetFullParallelStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelState (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichParallelState))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateRichDTO GetRichParallelState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichParallelStateInternal(parallelStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelState (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichParallelStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateRichDTO GetRichParallelStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichParallelStateByNameInternal(parallelStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateRichDTO GetRichParallelStateByNameInternal(string parallelStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateRichDTO GetRichParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelState (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelState))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO GetSimpleParallelState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStateInternal(parallelStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelState (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO GetSimpleParallelStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStateByNameInternal(parallelStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO GetSimpleParallelStateByNameInternal(string parallelStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO GetSimpleParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ParallelStates (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> GetSimpleParallelStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStates (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> GetSimpleParallelStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO[] parallelStateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStatesByIdentsInternal(parallelStateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> GetSimpleParallelStatesByIdentsInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO[] parallelStateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(parallelStateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelStates (SimpleDTO) by filter (Framework.Workflow.Domain.ParallelStateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> GetSimpleParallelStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> GetSimpleParallelStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.ParallelStateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> GetSimpleParallelStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelState (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelState))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateVisualDTO GetVisualParallelState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStateInternal(parallelStateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelState (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStateByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateVisualDTO GetVisualParallelStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStateByNameInternal(parallelStateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateVisualDTO GetVisualParallelStateByNameInternal(string parallelStateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateVisualDTO GetVisualParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ParallelStates (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> GetVisualParallelStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStates (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> GetVisualParallelStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO[] parallelStateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStatesByIdentsInternal(parallelStateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> GetVisualParallelStatesByIdentsInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO[] parallelStateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(parallelStateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelStates (VisualDTO) by filter (Framework.Workflow.Domain.ParallelStateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> GetVisualParallelStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> GetVisualParallelStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.ParallelStateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> GetVisualParallelStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelState>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for ParallelState
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasParallelStateAccess))]
        public virtual bool HasParallelStateAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasParallelStateAccessInternal(parallelStateIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasParallelStateAccessInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelState;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ParallelState>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove ParallelState
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveParallelState))]
        public virtual void RemoveParallelState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveParallelStateInternal(parallelStateIdent, evaluateData));
        }
        
        protected virtual void RemoveParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveParallelStateInternal(parallelStateIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IParallelStateBLL bll)
        {
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save ParallelStates
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveParallelState))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO SaveParallelState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveParallelStateInternal(parallelStateStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO SaveParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateBLL bll = evaluateData.Context.Logics.ParallelStateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveParallelStateInternal(parallelStateStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO SaveParallelStateInternal(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IParallelStateBLL bll)
        {
            Framework.Workflow.Domain.Definition.ParallelState domainObject = bll.GetById(parallelStateStrict.Id, true);
            parallelStateStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check ParallelStateFinalEvent access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckParallelStateFinalEventAccess))]
        public virtual void CheckParallelStateFinalEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckParallelStateFinalEventAccessInternal(parallelStateFinalEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckParallelStateFinalEventAccessInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = bll.GetById(parallelStateFinalEventIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStateFinalEvent))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO GetFullParallelStateFinalEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStateFinalEventInternal(parallelStateFinalEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStateFinalEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO GetFullParallelStateFinalEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateFinalEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStateFinalEventByNameInternal(parallelStateFinalEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO GetFullParallelStateFinalEventByNameInternal(string parallelStateFinalEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateFinalEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO GetFullParallelStateFinalEventInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = bll.GetById(parallelStateFinalEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ParallelStateFinalEvents (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStateFinalEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO> GetFullParallelStateFinalEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStateFinalEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvents (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullParallelStateFinalEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO> GetFullParallelStateFinalEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO[] parallelStateFinalEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullParallelStateFinalEventsByIdentsInternal(parallelStateFinalEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO> GetFullParallelStateFinalEventsByIdentsInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO[] parallelStateFinalEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(parallelStateFinalEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO> GetFullParallelStateFinalEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichParallelStateFinalEvent))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO GetRichParallelStateFinalEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichParallelStateFinalEventInternal(parallelStateFinalEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichParallelStateFinalEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO GetRichParallelStateFinalEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateFinalEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichParallelStateFinalEventByNameInternal(parallelStateFinalEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO GetRichParallelStateFinalEventByNameInternal(string parallelStateFinalEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateFinalEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO GetRichParallelStateFinalEventInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = bll.GetById(parallelStateFinalEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStateFinalEvent))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO GetSimpleParallelStateFinalEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStateFinalEventInternal(parallelStateFinalEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStateFinalEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO GetSimpleParallelStateFinalEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateFinalEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStateFinalEventByNameInternal(parallelStateFinalEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO GetSimpleParallelStateFinalEventByNameInternal(string parallelStateFinalEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateFinalEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO GetSimpleParallelStateFinalEventInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = bll.GetById(parallelStateFinalEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ParallelStateFinalEvents (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStateFinalEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO> GetSimpleParallelStateFinalEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStateFinalEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvents (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleParallelStateFinalEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO> GetSimpleParallelStateFinalEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO[] parallelStateFinalEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleParallelStateFinalEventsByIdentsInternal(parallelStateFinalEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO> GetSimpleParallelStateFinalEventsByIdentsInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO[] parallelStateFinalEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(parallelStateFinalEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO> GetSimpleParallelStateFinalEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStateFinalEvent))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO GetVisualParallelStateFinalEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStateFinalEventInternal(parallelStateFinalEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvent (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStateFinalEventByName))]
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO GetVisualParallelStateFinalEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string parallelStateFinalEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStateFinalEventByNameInternal(parallelStateFinalEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO GetVisualParallelStateFinalEventByNameInternal(string parallelStateFinalEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, parallelStateFinalEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO GetVisualParallelStateFinalEventInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = bll.GetById(parallelStateFinalEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of ParallelStateFinalEvents (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStateFinalEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO> GetVisualParallelStateFinalEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStateFinalEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get ParallelStateFinalEvents (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualParallelStateFinalEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO> GetVisualParallelStateFinalEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO[] parallelStateFinalEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualParallelStateFinalEventsByIdentsInternal(parallelStateFinalEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO> GetVisualParallelStateFinalEventsByIdentsInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO[] parallelStateFinalEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(parallelStateFinalEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO> GetVisualParallelStateFinalEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for ParallelStateFinalEvent
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasParallelStateFinalEventAccess))]
        public virtual bool HasParallelStateFinalEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasParallelStateFinalEventAccessInternal(parallelStateFinalEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasParallelStateFinalEventAccessInternal(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IParallelStateFinalEventBLL bll = evaluateData.Context.Logics.ParallelStateFinalEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject = bll.GetById(parallelStateFinalEventIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check Role access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckRoleAccess))]
        public virtual void CheckRoleAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckRoleAccessInternal(roleIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckRoleAccessInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.Role;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Role domainObject = bll.GetById(roleIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Role>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get Role (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullRole))]
        public virtual Framework.Workflow.Generated.DTO.RoleFullDTO GetFullRole([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullRoleInternal(roleIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Role (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullRoleByName))]
        public virtual Framework.Workflow.Generated.DTO.RoleFullDTO GetFullRoleByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string roleName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullRoleByNameInternal(roleName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleFullDTO GetFullRoleByNameInternal(string roleName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, roleName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleFullDTO GetFullRoleInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = bll.GetById(roleIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Roles (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullRoles))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleFullDTO> GetFullRoles()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullRolesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Roles (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullRolesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleFullDTO> GetFullRolesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullRolesByIdentsInternal(roleIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleFullDTO> GetFullRolesByIdentsInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(roleIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Roles (FullDTO) by filter (Framework.Workflow.Domain.RoleRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullRolesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleFullDTO> GetFullRolesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullRolesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleFullDTO> GetFullRolesByRootFilterInternal(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.RoleRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleFullDTO> GetFullRolesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Role (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichRole))]
        public virtual Framework.Workflow.Generated.DTO.RoleRichDTO GetRichRole([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichRoleInternal(roleIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Role (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichRoleByName))]
        public virtual Framework.Workflow.Generated.DTO.RoleRichDTO GetRichRoleByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string roleName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichRoleByNameInternal(roleName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleRichDTO GetRichRoleByNameInternal(string roleName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, roleName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleRichDTO GetRichRoleInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = bll.GetById(roleIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Roles (RichDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichRoles))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleRichDTO> GetRichRoles()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichRolesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Roles (RichDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichRolesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleRichDTO> GetRichRolesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichRolesByIdentsInternal(roleIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleRichDTO> GetRichRolesByIdentsInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(bll.GetListByIdents(roleIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Roles (RichDTO) by filter (Framework.Workflow.Domain.RoleRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichRolesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleRichDTO> GetRichRolesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichRolesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleRichDTO> GetRichRolesByRootFilterInternal(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.RoleRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleRichDTO> GetRichRolesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Role (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleRole))]
        public virtual Framework.Workflow.Generated.DTO.RoleSimpleDTO GetSimpleRole([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleRoleInternal(roleIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Role (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleRoleByName))]
        public virtual Framework.Workflow.Generated.DTO.RoleSimpleDTO GetSimpleRoleByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string roleName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleRoleByNameInternal(roleName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleSimpleDTO GetSimpleRoleByNameInternal(string roleName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, roleName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleSimpleDTO GetSimpleRoleInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = bll.GetById(roleIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Roles (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleRoles))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleSimpleDTO> GetSimpleRoles()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleRolesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Roles (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleRolesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleSimpleDTO> GetSimpleRolesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleRolesByIdentsInternal(roleIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleSimpleDTO> GetSimpleRolesByIdentsInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(roleIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Roles (SimpleDTO) by filter (Framework.Workflow.Domain.RoleRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleRolesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleSimpleDTO> GetSimpleRolesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleRolesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleSimpleDTO> GetSimpleRolesByRootFilterInternal(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.RoleRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleSimpleDTO> GetSimpleRolesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Role (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualRole))]
        public virtual Framework.Workflow.Generated.DTO.RoleVisualDTO GetVisualRole([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualRoleInternal(roleIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Role (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualRoleByName))]
        public virtual Framework.Workflow.Generated.DTO.RoleVisualDTO GetVisualRoleByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string roleName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualRoleByNameInternal(roleName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleVisualDTO GetVisualRoleByNameInternal(string roleName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, roleName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.RoleVisualDTO GetVisualRoleInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Role domainObject = bll.GetById(roleIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Roles (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualRoles))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleVisualDTO> GetVisualRoles()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualRolesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Roles (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualRolesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleVisualDTO> GetVisualRolesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualRolesByIdentsInternal(roleIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleVisualDTO> GetVisualRolesByIdentsInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO[] roleIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(roleIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Roles (VisualDTO) by filter (Framework.Workflow.Domain.RoleRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualRolesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleVisualDTO> GetVisualRolesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualRolesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleVisualDTO> GetVisualRolesByRootFilterInternal(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.RoleRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.RoleVisualDTO> GetVisualRolesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.RoleFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Role>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for Role
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasRoleAccess))]
        public virtual bool HasRoleAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasRoleAccessInternal(roleIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasRoleAccessInternal(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IRoleBLL bll = evaluateData.Context.Logics.Role;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Role domainObject = bll.GetById(roleIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Role>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check StartWorkflowDomainObjectCondition access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckStartWorkflowDomainObjectConditionAccess))]
        public virtual void CheckStartWorkflowDomainObjectConditionAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckStartWorkflowDomainObjectConditionAccessInternal(startWorkflowDomainObjectConditionIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckStartWorkflowDomainObjectConditionAccessInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectCondition;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectCondition (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStartWorkflowDomainObjectCondition))]
        public virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO GetFullStartWorkflowDomainObjectCondition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO GetFullStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StartWorkflowDomainObjectConditions (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStartWorkflowDomainObjectConditions))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> GetFullStartWorkflowDomainObjectConditions()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStartWorkflowDomainObjectConditionsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectConditions (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStartWorkflowDomainObjectConditionsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> GetFullStartWorkflowDomainObjectConditionsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO[] startWorkflowDomainObjectConditionIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStartWorkflowDomainObjectConditionsByIdentsInternal(startWorkflowDomainObjectConditionIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> GetFullStartWorkflowDomainObjectConditionsByIdentsInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO[] startWorkflowDomainObjectConditionIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(startWorkflowDomainObjectConditionIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectConditions (FullDTO) by filter (Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStartWorkflowDomainObjectConditionsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> GetFullStartWorkflowDomainObjectConditionsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStartWorkflowDomainObjectConditionsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> GetFullStartWorkflowDomainObjectConditionsByRootFilterInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> GetFullStartWorkflowDomainObjectConditionsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectCondition (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStartWorkflowDomainObjectCondition))]
        public virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO GetRichStartWorkflowDomainObjectCondition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO GetRichStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectCondition (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStartWorkflowDomainObjectCondition))]
        public virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO GetSimpleStartWorkflowDomainObjectCondition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO GetSimpleStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StartWorkflowDomainObjectConditions (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStartWorkflowDomainObjectConditions))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> GetSimpleStartWorkflowDomainObjectConditions()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStartWorkflowDomainObjectConditionsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectConditions (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStartWorkflowDomainObjectConditionsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> GetSimpleStartWorkflowDomainObjectConditionsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO[] startWorkflowDomainObjectConditionIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStartWorkflowDomainObjectConditionsByIdentsInternal(startWorkflowDomainObjectConditionIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> GetSimpleStartWorkflowDomainObjectConditionsByIdentsInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO[] startWorkflowDomainObjectConditionIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(startWorkflowDomainObjectConditionIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StartWorkflowDomainObjectConditions (SimpleDTO) by filter (Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStartWorkflowDomainObjectConditionsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> GetSimpleStartWorkflowDomainObjectConditionsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStartWorkflowDomainObjectConditionsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> GetSimpleStartWorkflowDomainObjectConditionsByRootFilterInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> GetSimpleStartWorkflowDomainObjectConditionsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for StartWorkflowDomainObjectCondition
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasStartWorkflowDomainObjectConditionAccess))]
        public virtual bool HasStartWorkflowDomainObjectConditionAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasStartWorkflowDomainObjectConditionAccessInternal(startWorkflowDomainObjectConditionIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasStartWorkflowDomainObjectConditionAccessInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectCondition;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove StartWorkflowDomainObjectCondition
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveStartWorkflowDomainObjectCondition))]
        public virtual void RemoveStartWorkflowDomainObjectCondition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionIdent, evaluateData));
        }
        
        protected virtual void RemoveStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll)
        {
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save StartWorkflowDomainObjectConditions
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveStartWorkflowDomainObjectCondition))]
        public virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO SaveStartWorkflowDomainObjectCondition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO SaveStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll = evaluateData.Context.Logics.StartWorkflowDomainObjectConditionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveStartWorkflowDomainObjectConditionInternal(startWorkflowDomainObjectConditionStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO SaveStartWorkflowDomainObjectConditionInternal(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL bll)
        {
            Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject = bll.GetById(startWorkflowDomainObjectConditionStrict.Id, true);
            startWorkflowDomainObjectConditionStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check State access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckStateAccess))]
        public virtual void CheckStateAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckStateAccessInternal(stateIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckStateAccessInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.State;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.State>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get State (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullState))]
        public virtual Framework.Workflow.Generated.DTO.StateFullDTO GetFullState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateInternal(stateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get State (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateByName))]
        public virtual Framework.Workflow.Generated.DTO.StateFullDTO GetFullStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateByNameInternal(stateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateFullDTO GetFullStateByNameInternal(string stateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateFullDTO GetFullStateInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of States (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateFullDTO> GetFullStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get States (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateFullDTO> GetFullStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO[] stateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStatesByIdentsInternal(stateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateFullDTO> GetFullStatesByIdentsInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO[] stateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(stateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get States (FullDTO) by filter (Framework.Workflow.Domain.StateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateFullDTO> GetFullStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateFullDTO> GetFullStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateFullDTO> GetFullStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get State (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichState))]
        public virtual Framework.Workflow.Generated.DTO.StateRichDTO GetRichState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateInternal(stateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get State (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateByName))]
        public virtual Framework.Workflow.Generated.DTO.StateRichDTO GetRichStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateByNameInternal(stateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateRichDTO GetRichStateByNameInternal(string stateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateRichDTO GetRichStateInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get State (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleState))]
        public virtual Framework.Workflow.Generated.DTO.StateSimpleDTO GetSimpleState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateInternal(stateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get State (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateByName))]
        public virtual Framework.Workflow.Generated.DTO.StateSimpleDTO GetSimpleStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateByNameInternal(stateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateSimpleDTO GetSimpleStateByNameInternal(string stateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateSimpleDTO GetSimpleStateInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of States (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateSimpleDTO> GetSimpleStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get States (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateSimpleDTO> GetSimpleStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO[] stateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStatesByIdentsInternal(stateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateSimpleDTO> GetSimpleStatesByIdentsInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO[] stateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(stateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get States (SimpleDTO) by filter (Framework.Workflow.Domain.StateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateSimpleDTO> GetSimpleStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateSimpleDTO> GetSimpleStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateSimpleDTO> GetSimpleStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get State (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualState))]
        public virtual Framework.Workflow.Generated.DTO.StateVisualDTO GetVisualState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateInternal(stateIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get State (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateByName))]
        public virtual Framework.Workflow.Generated.DTO.StateVisualDTO GetVisualStateByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateByNameInternal(stateName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateVisualDTO GetVisualStateByNameInternal(string stateName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateVisualDTO GetVisualStateInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of States (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStates))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateVisualDTO> GetVisualStates()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStatesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get States (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStatesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateVisualDTO> GetVisualStatesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO[] stateIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStatesByIdentsInternal(stateIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateVisualDTO> GetVisualStatesByIdentsInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO[] stateIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(stateIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get States (VisualDTO) by filter (Framework.Workflow.Domain.StateRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStatesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateVisualDTO> GetVisualStatesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStatesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateVisualDTO> GetVisualStatesByRootFilterInternal(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StateRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateVisualDTO> GetVisualStatesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.State>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for State
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasStateAccess))]
        public virtual bool HasStateAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasStateAccessInternal(stateIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasStateAccessInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.State;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.State>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove State
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveState))]
        public virtual void RemoveState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveStateInternal(stateIdent, evaluateData));
        }
        
        protected virtual void RemoveStateInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveStateInternal(stateIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveStateInternal(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IStateBLL bll)
        {
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save States
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveState))]
        public virtual Framework.Workflow.Generated.DTO.StateIdentityDTO SaveState([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateStrictDTO stateStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveStateInternal(stateStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateIdentityDTO SaveStateInternal(Framework.Workflow.Generated.DTO.StateStrictDTO stateStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBLL bll = evaluateData.Context.Logics.StateFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveStateInternal(stateStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateIdentityDTO SaveStateInternal(Framework.Workflow.Generated.DTO.StateStrictDTO stateStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IStateBLL bll)
        {
            Framework.Workflow.Domain.Definition.State domainObject = bll.GetById(stateStrict.Id, true);
            stateStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check StateBase access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckStateBaseAccess))]
        public virtual void CheckStateBaseAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckStateBaseAccessInternal(stateBaseIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckStateBaseAccessInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBase;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StateBase>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get StateBase (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateBase))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseFullDTO GetFullStateBase([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateBaseInternal(stateBaseIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateBase (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateBaseByName))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseFullDTO GetFullStateBaseByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateBaseName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateBaseByNameInternal(stateBaseName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseFullDTO GetFullStateBaseByNameInternal(string stateBaseName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateBaseName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseFullDTO GetFullStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateBases (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateBases))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseFullDTO> GetFullStateBases()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateBasesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateBases (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateBasesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseFullDTO> GetFullStateBasesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO[] stateBaseIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateBasesByIdentsInternal(stateBaseIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseFullDTO> GetFullStateBasesByIdentsInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO[] stateBaseIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(stateBaseIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateBases (FullDTO) by filter (Framework.Workflow.Domain.StateBaseRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateBasesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseFullDTO> GetFullStateBasesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateBasesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseFullDTO> GetFullStateBasesByRootFilterInternal(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StateBaseRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseFullDTO> GetFullStateBasesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateBase (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateBase))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseRichDTO GetRichStateBase([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateBaseInternal(stateBaseIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateBase (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateBaseByName))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseRichDTO GetRichStateBaseByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateBaseName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateBaseByNameInternal(stateBaseName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseRichDTO GetRichStateBaseByNameInternal(string stateBaseName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateBaseName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseRichDTO GetRichStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateBase (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateBase))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseSimpleDTO GetSimpleStateBase([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateBaseInternal(stateBaseIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateBase (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateBaseByName))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseSimpleDTO GetSimpleStateBaseByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateBaseName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateBaseByNameInternal(stateBaseName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseSimpleDTO GetSimpleStateBaseByNameInternal(string stateBaseName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateBaseName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseSimpleDTO GetSimpleStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateBases (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateBases))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> GetSimpleStateBases()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateBasesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateBases (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateBasesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> GetSimpleStateBasesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO[] stateBaseIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateBasesByIdentsInternal(stateBaseIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> GetSimpleStateBasesByIdentsInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO[] stateBaseIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(stateBaseIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateBases (SimpleDTO) by filter (Framework.Workflow.Domain.StateBaseRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateBasesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> GetSimpleStateBasesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateBasesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> GetSimpleStateBasesByRootFilterInternal(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StateBaseRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> GetSimpleStateBasesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateBase (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateBase))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseVisualDTO GetVisualStateBase([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateBaseInternal(stateBaseIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateBase (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateBaseByName))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseVisualDTO GetVisualStateBaseByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateBaseName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateBaseByNameInternal(stateBaseName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseVisualDTO GetVisualStateBaseByNameInternal(string stateBaseName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateBaseName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseVisualDTO GetVisualStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateBases (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateBases))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> GetVisualStateBases()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateBasesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateBases (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateBasesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> GetVisualStateBasesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO[] stateBaseIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateBasesByIdentsInternal(stateBaseIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> GetVisualStateBasesByIdentsInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO[] stateBaseIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(stateBaseIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateBases (VisualDTO) by filter (Framework.Workflow.Domain.StateBaseRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateBasesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> GetVisualStateBasesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateBasesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> GetVisualStateBasesByRootFilterInternal(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.StateBaseRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> GetVisualStateBasesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateBase>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for StateBase
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasStateBaseAccess))]
        public virtual bool HasStateBaseAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasStateBaseAccessInternal(stateBaseIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasStateBaseAccessInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBase;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StateBase>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove StateBase
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveStateBase))]
        public virtual void RemoveStateBase([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveStateBaseInternal(stateBaseIdent, evaluateData));
        }
        
        protected virtual void RemoveStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveStateBaseInternal(stateBaseIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IStateBaseBLL bll)
        {
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save StateBases
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveStateBase))]
        public virtual Framework.Workflow.Generated.DTO.StateBaseIdentityDTO SaveStateBase([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateBaseStrictDTO stateBaseStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveStateBaseInternal(stateBaseStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseIdentityDTO SaveStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseStrictDTO stateBaseStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateBaseBLL bll = evaluateData.Context.Logics.StateBaseFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveStateBaseInternal(stateBaseStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateBaseIdentityDTO SaveStateBaseInternal(Framework.Workflow.Generated.DTO.StateBaseStrictDTO stateBaseStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IStateBaseBLL bll)
        {
            Framework.Workflow.Domain.Definition.StateBase domainObject = bll.GetById(stateBaseStrict.Id, true);
            stateBaseStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check StateDomainObjectEvent access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckStateDomainObjectEventAccess))]
        public virtual void CheckStateDomainObjectEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckStateDomainObjectEventAccessInternal(stateDomainObjectEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckStateDomainObjectEventAccessInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = bll.GetById(stateDomainObjectEventIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateDomainObjectEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO GetFullStateDomainObjectEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateDomainObjectEventInternal(stateDomainObjectEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateDomainObjectEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO GetFullStateDomainObjectEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateDomainObjectEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateDomainObjectEventByNameInternal(stateDomainObjectEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO GetFullStateDomainObjectEventByNameInternal(string stateDomainObjectEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateDomainObjectEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO GetFullStateDomainObjectEventInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = bll.GetById(stateDomainObjectEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateDomainObjectEvents (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateDomainObjectEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO> GetFullStateDomainObjectEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateDomainObjectEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvents (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateDomainObjectEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO> GetFullStateDomainObjectEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO[] stateDomainObjectEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateDomainObjectEventsByIdentsInternal(stateDomainObjectEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO> GetFullStateDomainObjectEventsByIdentsInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO[] stateDomainObjectEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(stateDomainObjectEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO> GetFullStateDomainObjectEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateDomainObjectEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO GetRichStateDomainObjectEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateDomainObjectEventInternal(stateDomainObjectEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateDomainObjectEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO GetRichStateDomainObjectEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateDomainObjectEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateDomainObjectEventByNameInternal(stateDomainObjectEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO GetRichStateDomainObjectEventByNameInternal(string stateDomainObjectEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateDomainObjectEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO GetRichStateDomainObjectEventInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = bll.GetById(stateDomainObjectEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateDomainObjectEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO GetSimpleStateDomainObjectEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateDomainObjectEventInternal(stateDomainObjectEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateDomainObjectEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO GetSimpleStateDomainObjectEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateDomainObjectEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateDomainObjectEventByNameInternal(stateDomainObjectEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO GetSimpleStateDomainObjectEventByNameInternal(string stateDomainObjectEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateDomainObjectEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO GetSimpleStateDomainObjectEventInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = bll.GetById(stateDomainObjectEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateDomainObjectEvents (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateDomainObjectEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO> GetSimpleStateDomainObjectEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateDomainObjectEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvents (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateDomainObjectEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO> GetSimpleStateDomainObjectEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO[] stateDomainObjectEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateDomainObjectEventsByIdentsInternal(stateDomainObjectEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO> GetSimpleStateDomainObjectEventsByIdentsInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO[] stateDomainObjectEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(stateDomainObjectEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO> GetSimpleStateDomainObjectEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateDomainObjectEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO GetVisualStateDomainObjectEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateDomainObjectEventInternal(stateDomainObjectEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvent (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateDomainObjectEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO GetVisualStateDomainObjectEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateDomainObjectEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateDomainObjectEventByNameInternal(stateDomainObjectEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO GetVisualStateDomainObjectEventByNameInternal(string stateDomainObjectEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateDomainObjectEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO GetVisualStateDomainObjectEventInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = bll.GetById(stateDomainObjectEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateDomainObjectEvents (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateDomainObjectEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO> GetVisualStateDomainObjectEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateDomainObjectEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateDomainObjectEvents (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateDomainObjectEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO> GetVisualStateDomainObjectEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO[] stateDomainObjectEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateDomainObjectEventsByIdentsInternal(stateDomainObjectEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO> GetVisualStateDomainObjectEventsByIdentsInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO[] stateDomainObjectEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(stateDomainObjectEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO> GetVisualStateDomainObjectEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for StateDomainObjectEvent
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasStateDomainObjectEventAccess))]
        public virtual bool HasStateDomainObjectEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasStateDomainObjectEventAccessInternal(stateDomainObjectEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasStateDomainObjectEventAccessInternal(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateDomainObjectEventBLL bll = evaluateData.Context.Logics.StateDomainObjectEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject = bll.GetById(stateDomainObjectEventIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check StateTimeoutEvent access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckStateTimeoutEventAccess))]
        public virtual void CheckStateTimeoutEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckStateTimeoutEventAccessInternal(stateTimeoutEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckStateTimeoutEventAccessInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = bll.GetById(stateTimeoutEventIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateTimeoutEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO GetFullStateTimeoutEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateTimeoutEventInternal(stateTimeoutEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateTimeoutEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO GetFullStateTimeoutEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateTimeoutEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateTimeoutEventByNameInternal(stateTimeoutEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO GetFullStateTimeoutEventByNameInternal(string stateTimeoutEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateTimeoutEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO GetFullStateTimeoutEventInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = bll.GetById(stateTimeoutEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateTimeoutEvents (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateTimeoutEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO> GetFullStateTimeoutEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateTimeoutEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvents (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateTimeoutEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO> GetFullStateTimeoutEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO[] stateTimeoutEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateTimeoutEventsByIdentsInternal(stateTimeoutEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO> GetFullStateTimeoutEventsByIdentsInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO[] stateTimeoutEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(stateTimeoutEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO> GetFullStateTimeoutEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateTimeoutEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO GetRichStateTimeoutEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateTimeoutEventInternal(stateTimeoutEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateTimeoutEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO GetRichStateTimeoutEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateTimeoutEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateTimeoutEventByNameInternal(stateTimeoutEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO GetRichStateTimeoutEventByNameInternal(string stateTimeoutEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateTimeoutEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO GetRichStateTimeoutEventInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = bll.GetById(stateTimeoutEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateTimeoutEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO GetSimpleStateTimeoutEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateTimeoutEventInternal(stateTimeoutEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateTimeoutEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO GetSimpleStateTimeoutEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateTimeoutEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateTimeoutEventByNameInternal(stateTimeoutEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO GetSimpleStateTimeoutEventByNameInternal(string stateTimeoutEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateTimeoutEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO GetSimpleStateTimeoutEventInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = bll.GetById(stateTimeoutEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateTimeoutEvents (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateTimeoutEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO> GetSimpleStateTimeoutEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateTimeoutEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvents (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateTimeoutEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO> GetSimpleStateTimeoutEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO[] stateTimeoutEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateTimeoutEventsByIdentsInternal(stateTimeoutEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO> GetSimpleStateTimeoutEventsByIdentsInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO[] stateTimeoutEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(stateTimeoutEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO> GetSimpleStateTimeoutEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateTimeoutEvent))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO GetVisualStateTimeoutEvent([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateTimeoutEventInternal(stateTimeoutEventIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvent (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateTimeoutEventByName))]
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO GetVisualStateTimeoutEventByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string stateTimeoutEventName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateTimeoutEventByNameInternal(stateTimeoutEventName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO GetVisualStateTimeoutEventByNameInternal(string stateTimeoutEventName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, stateTimeoutEventName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO GetVisualStateTimeoutEventInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = bll.GetById(stateTimeoutEventIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateTimeoutEvents (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateTimeoutEvents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO> GetVisualStateTimeoutEvents()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateTimeoutEventsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateTimeoutEvents (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualStateTimeoutEventsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO> GetVisualStateTimeoutEventsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO[] stateTimeoutEventIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualStateTimeoutEventsByIdentsInternal(stateTimeoutEventIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO> GetVisualStateTimeoutEventsByIdentsInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO[] stateTimeoutEventIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(stateTimeoutEventIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO> GetVisualStateTimeoutEventsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEventFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for StateTimeoutEvent
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasStateTimeoutEventAccess))]
        public virtual bool HasStateTimeoutEventAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasStateTimeoutEventAccessInternal(stateTimeoutEventIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasStateTimeoutEventAccessInternal(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateTimeoutEventBLL bll = evaluateData.Context.Logics.StateTimeoutEvent;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject = bll.GetById(stateTimeoutEventIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check TargetSystem access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckTargetSystemAccess))]
        public virtual void CheckTargetSystemAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckTargetSystemAccessInternal(targetSystemIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckTargetSystemAccessInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystem;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = bll.GetById(targetSystemIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.TargetSystem>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get TargetSystem (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTargetSystem))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemFullDTO GetFullTargetSystem([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTargetSystemInternal(targetSystemIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystem (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTargetSystemByName))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemFullDTO GetFullTargetSystemByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string targetSystemName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTargetSystemByNameInternal(targetSystemName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemFullDTO GetFullTargetSystemByNameInternal(string targetSystemName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, targetSystemName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemFullDTO GetFullTargetSystemInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = bll.GetById(targetSystemIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TargetSystems (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTargetSystems))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemFullDTO> GetFullTargetSystems()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTargetSystemsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystems (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTargetSystemsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemFullDTO> GetFullTargetSystemsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO[] targetSystemIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTargetSystemsByIdentsInternal(targetSystemIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemFullDTO> GetFullTargetSystemsByIdentsInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO[] targetSystemIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(targetSystemIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemFullDTO> GetFullTargetSystemsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TargetSystem (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTargetSystem))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemRichDTO GetRichTargetSystem([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTargetSystemInternal(targetSystemIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystem (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTargetSystemByName))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemRichDTO GetRichTargetSystemByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string targetSystemName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTargetSystemByNameInternal(targetSystemName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemRichDTO GetRichTargetSystemByNameInternal(string targetSystemName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, targetSystemName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemRichDTO GetRichTargetSystemInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = bll.GetById(targetSystemIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TargetSystem (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTargetSystem))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO GetSimpleTargetSystem([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTargetSystemInternal(targetSystemIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystem (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTargetSystemByName))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO GetSimpleTargetSystemByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string targetSystemName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTargetSystemByNameInternal(targetSystemName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO GetSimpleTargetSystemByNameInternal(string targetSystemName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, targetSystemName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO GetSimpleTargetSystemInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = bll.GetById(targetSystemIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TargetSystems (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTargetSystems))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO> GetSimpleTargetSystems()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTargetSystemsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystems (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTargetSystemsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO> GetSimpleTargetSystemsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO[] targetSystemIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTargetSystemsByIdentsInternal(targetSystemIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO> GetSimpleTargetSystemsByIdentsInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO[] targetSystemIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(targetSystemIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO> GetSimpleTargetSystemsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TargetSystem (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTargetSystem))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemVisualDTO GetVisualTargetSystem([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTargetSystemInternal(targetSystemIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystem (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTargetSystemByName))]
        public virtual Framework.Workflow.Generated.DTO.TargetSystemVisualDTO GetVisualTargetSystemByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string targetSystemName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTargetSystemByNameInternal(targetSystemName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemVisualDTO GetVisualTargetSystemByNameInternal(string targetSystemName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, targetSystemName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TargetSystemVisualDTO GetVisualTargetSystemInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = bll.GetById(targetSystemIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TargetSystems (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTargetSystems))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemVisualDTO> GetVisualTargetSystems()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTargetSystemsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TargetSystems (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTargetSystemsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemVisualDTO> GetVisualTargetSystemsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO[] targetSystemIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTargetSystemsByIdentsInternal(targetSystemIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemVisualDTO> GetVisualTargetSystemsByIdentsInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO[] targetSystemIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(targetSystemIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TargetSystemVisualDTO> GetVisualTargetSystemsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystemFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.TargetSystem>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for TargetSystem
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasTargetSystemAccess))]
        public virtual bool HasTargetSystemAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasTargetSystemAccessInternal(targetSystemIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasTargetSystemAccessInternal(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITargetSystemBLL bll = evaluateData.Context.Logics.TargetSystem;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.TargetSystem domainObject = bll.GetById(targetSystemIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.TargetSystem>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check Task access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckTaskAccess))]
        public virtual void CheckTaskAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckTaskAccessInternal(taskIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckTaskAccessInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.Task;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Task>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get Task (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTask))]
        public virtual Framework.Workflow.Generated.DTO.TaskFullDTO GetFullTask([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTaskInternal(taskIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Task (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTaskByName))]
        public virtual Framework.Workflow.Generated.DTO.TaskFullDTO GetFullTaskByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string taskName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTaskByNameInternal(taskName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskFullDTO GetFullTaskByNameInternal(string taskName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, taskName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskFullDTO GetFullTaskInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Tasks (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTasks))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskFullDTO> GetFullTasks()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTasksInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Tasks (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTasksByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskFullDTO> GetFullTasksByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO[] taskIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTasksByIdentsInternal(taskIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskFullDTO> GetFullTasksByIdentsInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO[] taskIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(taskIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Tasks (FullDTO) by filter (Framework.Workflow.Domain.TaskRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTasksByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskFullDTO> GetFullTasksByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTasksByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskFullDTO> GetFullTasksByRootFilterInternal(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TaskRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskFullDTO> GetFullTasksInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Task (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTask))]
        public virtual Framework.Workflow.Generated.DTO.TaskRichDTO GetRichTask([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTaskInternal(taskIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Task (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTaskByName))]
        public virtual Framework.Workflow.Generated.DTO.TaskRichDTO GetRichTaskByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string taskName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTaskByNameInternal(taskName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskRichDTO GetRichTaskByNameInternal(string taskName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, taskName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskRichDTO GetRichTaskInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Task (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTask))]
        public virtual Framework.Workflow.Generated.DTO.TaskSimpleDTO GetSimpleTask([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTaskInternal(taskIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Task (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTaskByName))]
        public virtual Framework.Workflow.Generated.DTO.TaskSimpleDTO GetSimpleTaskByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string taskName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTaskByNameInternal(taskName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskSimpleDTO GetSimpleTaskByNameInternal(string taskName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, taskName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskSimpleDTO GetSimpleTaskInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Tasks (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTasks))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskSimpleDTO> GetSimpleTasks()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTasksInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Tasks (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTasksByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskSimpleDTO> GetSimpleTasksByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO[] taskIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTasksByIdentsInternal(taskIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskSimpleDTO> GetSimpleTasksByIdentsInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO[] taskIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(taskIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Tasks (SimpleDTO) by filter (Framework.Workflow.Domain.TaskRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTasksByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskSimpleDTO> GetSimpleTasksByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTasksByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskSimpleDTO> GetSimpleTasksByRootFilterInternal(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TaskRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskSimpleDTO> GetSimpleTasksInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Task (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTask))]
        public virtual Framework.Workflow.Generated.DTO.TaskVisualDTO GetVisualTask([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTaskInternal(taskIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Task (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTaskByName))]
        public virtual Framework.Workflow.Generated.DTO.TaskVisualDTO GetVisualTaskByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string taskName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTaskByNameInternal(taskName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskVisualDTO GetVisualTaskByNameInternal(string taskName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, taskName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskVisualDTO GetVisualTaskInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Tasks (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTasks))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskVisualDTO> GetVisualTasks()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTasksInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Tasks (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTasksByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskVisualDTO> GetVisualTasksByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO[] taskIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTasksByIdentsInternal(taskIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskVisualDTO> GetVisualTasksByIdentsInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO[] taskIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(taskIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Tasks (VisualDTO) by filter (Framework.Workflow.Domain.TaskRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTasksByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskVisualDTO> GetVisualTasksByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTasksByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskVisualDTO> GetVisualTasksByRootFilterInternal(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TaskRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskVisualDTO> GetVisualTasksInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Task>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for Task
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasTaskAccess))]
        public virtual bool HasTaskAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasTaskAccessInternal(taskIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasTaskAccessInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.Task;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Task>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove Task
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveTask))]
        public virtual void RemoveTask([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveTaskInternal(taskIdent, evaluateData));
        }
        
        protected virtual void RemoveTaskInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveTaskInternal(taskIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveTaskInternal(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ITaskBLL bll)
        {
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save Tasks
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveTask))]
        public virtual Framework.Workflow.Generated.DTO.TaskIdentityDTO SaveTask([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveTaskInternal(taskStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskIdentityDTO SaveTaskInternal(Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskBLL bll = evaluateData.Context.Logics.TaskFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveTaskInternal(taskStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskIdentityDTO SaveTaskInternal(Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ITaskBLL bll)
        {
            Framework.Workflow.Domain.Definition.Task domainObject = bll.GetById(taskStrict.Id, true);
            taskStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check Transition access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckTransitionAccess))]
        public virtual void CheckTransitionAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckTransitionAccessInternal(transitionIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckTransitionAccessInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.Transition;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Transition>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get Transition (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransition))]
        public virtual Framework.Workflow.Generated.DTO.TransitionFullDTO GetFullTransition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionInternal(transitionIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Transition (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitionByName))]
        public virtual Framework.Workflow.Generated.DTO.TransitionFullDTO GetFullTransitionByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string transitionName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionByNameInternal(transitionName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionFullDTO GetFullTransitionByNameInternal(string transitionName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, transitionName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionFullDTO GetFullTransitionInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Transitions (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitions))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionFullDTO> GetFullTransitions()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Transitions (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitionsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionFullDTO> GetFullTransitionsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO[] transitionIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionsByIdentsInternal(transitionIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionFullDTO> GetFullTransitionsByIdentsInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO[] transitionIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(transitionIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Transitions (FullDTO) by filter (Framework.Workflow.Domain.TransitionRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitionsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionFullDTO> GetFullTransitionsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionFullDTO> GetFullTransitionsByRootFilterInternal(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TransitionRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionFullDTO> GetFullTransitionsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Transition (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTransition))]
        public virtual Framework.Workflow.Generated.DTO.TransitionRichDTO GetRichTransition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTransitionInternal(transitionIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Transition (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTransitionByName))]
        public virtual Framework.Workflow.Generated.DTO.TransitionRichDTO GetRichTransitionByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string transitionName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTransitionByNameInternal(transitionName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionRichDTO GetRichTransitionByNameInternal(string transitionName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, transitionName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionRichDTO GetRichTransitionInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Transition (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransition))]
        public virtual Framework.Workflow.Generated.DTO.TransitionSimpleDTO GetSimpleTransition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionInternal(transitionIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Transition (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitionByName))]
        public virtual Framework.Workflow.Generated.DTO.TransitionSimpleDTO GetSimpleTransitionByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string transitionName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionByNameInternal(transitionName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionSimpleDTO GetSimpleTransitionByNameInternal(string transitionName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, transitionName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionSimpleDTO GetSimpleTransitionInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Transitions (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitions))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> GetSimpleTransitions()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Transitions (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitionsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> GetSimpleTransitionsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO[] transitionIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionsByIdentsInternal(transitionIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> GetSimpleTransitionsByIdentsInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO[] transitionIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(transitionIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Transitions (SimpleDTO) by filter (Framework.Workflow.Domain.TransitionRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitionsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> GetSimpleTransitionsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> GetSimpleTransitionsByRootFilterInternal(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TransitionRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> GetSimpleTransitionsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Transition (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTransition))]
        public virtual Framework.Workflow.Generated.DTO.TransitionVisualDTO GetVisualTransition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTransitionInternal(transitionIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Transition (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTransitionByName))]
        public virtual Framework.Workflow.Generated.DTO.TransitionVisualDTO GetVisualTransitionByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string transitionName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTransitionByNameInternal(transitionName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionVisualDTO GetVisualTransitionByNameInternal(string transitionName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, transitionName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionVisualDTO GetVisualTransitionInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Transitions (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTransitions))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionVisualDTO> GetVisualTransitions()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTransitionsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Transitions (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTransitionsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionVisualDTO> GetVisualTransitionsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO[] transitionIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTransitionsByIdentsInternal(transitionIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionVisualDTO> GetVisualTransitionsByIdentsInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO[] transitionIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(transitionIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Transitions (VisualDTO) by filter (Framework.Workflow.Domain.TransitionRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualTransitionsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionVisualDTO> GetVisualTransitionsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualTransitionsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionVisualDTO> GetVisualTransitionsByRootFilterInternal(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TransitionRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionVisualDTO> GetVisualTransitionsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Transition>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for Transition
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasTransitionAccess))]
        public virtual bool HasTransitionAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasTransitionAccessInternal(transitionIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasTransitionAccessInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.Transition;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Transition>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove Transition
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveTransition))]
        public virtual void RemoveTransition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveTransitionInternal(transitionIdent, evaluateData));
        }
        
        protected virtual void RemoveTransitionInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveTransitionInternal(transitionIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveTransitionInternal(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ITransitionBLL bll)
        {
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save Transitions
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveTransition))]
        public virtual Framework.Workflow.Generated.DTO.TransitionIdentityDTO SaveTransition([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveTransitionInternal(transitionStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionIdentityDTO SaveTransitionInternal(Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionBLL bll = evaluateData.Context.Logics.TransitionFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveTransitionInternal(transitionStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionIdentityDTO SaveTransitionInternal(Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ITransitionBLL bll)
        {
            Framework.Workflow.Domain.Definition.Transition domainObject = bll.GetById(transitionStrict.Id, true);
            transitionStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check Workflow access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckWorkflowAccess))]
        public virtual void CheckWorkflowAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckWorkflowAccessInternal(workflowIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckWorkflowAccessInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.Workflow;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Workflow>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Create Workflow by model (WorkflowCreateModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CreateWorkflow))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowRichDTO CreateWorkflow([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO workflowCreateModel)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CreateWorkflowInternal(workflowCreateModel, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowRichDTO CreateWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO workflowCreateModel, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            Framework.Workflow.Domain.WorkflowCreateModel createModel = workflowCreateModel.ToDomainObject(evaluateData.MappingService);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.Create(createModel);
            bll.CheckAccess(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflow (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflow))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowFullDTO GetFullWorkflow([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowInternal(workflowIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Workflow (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowFullDTO GetFullWorkflowByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowByNameInternal(workflowName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowFullDTO GetFullWorkflowByNameInternal(string workflowName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowFullDTO GetFullWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Workflows (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflows))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowFullDTO> GetFullWorkflows()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Workflows (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowFullDTO> GetFullWorkflowsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO[] workflowIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowsByIdentsInternal(workflowIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowFullDTO> GetFullWorkflowsByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO[] workflowIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(workflowIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflows (FullDTO) by filter (Framework.Workflow.Domain.WorkflowRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowFullDTO> GetFullWorkflowsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowFullDTO> GetFullWorkflowsByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowFullDTO> GetFullWorkflowsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflow (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflow))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowRichDTO GetRichWorkflow([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowInternal(workflowIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Workflow (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowRichDTO GetRichWorkflowByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowByNameInternal(workflowName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowRichDTO GetRichWorkflowByNameInternal(string workflowName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowRichDTO GetRichWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflow (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflow))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSimpleDTO GetSimpleWorkflow([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowInternal(workflowIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Workflow (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSimpleDTO GetSimpleWorkflowByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowByNameInternal(workflowName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSimpleDTO GetSimpleWorkflowByNameInternal(string workflowName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSimpleDTO GetSimpleWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Workflows (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflows))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> GetSimpleWorkflows()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Workflows (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> GetSimpleWorkflowsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO[] workflowIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowsByIdentsInternal(workflowIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> GetSimpleWorkflowsByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO[] workflowIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(workflowIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflows (SimpleDTO) by filter (Framework.Workflow.Domain.WorkflowRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> GetSimpleWorkflowsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> GetSimpleWorkflowsByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> GetSimpleWorkflowsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflow (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflow))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowVisualDTO GetVisualWorkflow([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowInternal(workflowIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get Workflow (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowVisualDTO GetVisualWorkflowByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowByNameInternal(workflowName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowVisualDTO GetVisualWorkflowByNameInternal(string workflowName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowVisualDTO GetVisualWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of Workflows (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflows))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> GetVisualWorkflows()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowsInternal(evaluateData));
        }
        
        /// <summary>
        /// Get Workflows (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowsByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> GetVisualWorkflowsByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO[] workflowIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowsByIdentsInternal(workflowIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> GetVisualWorkflowsByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO[] workflowIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(workflowIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get Workflows (VisualDTO) by filter (Framework.Workflow.Domain.WorkflowRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowsByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> GetVisualWorkflowsByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowsByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> GetVisualWorkflowsByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> GetVisualWorkflowsInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.Workflow>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for Workflow
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasWorkflowAccess))]
        public virtual bool HasWorkflowAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasWorkflowAccessInternal(workflowIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasWorkflowAccessInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.Workflow;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.Workflow>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove Workflow
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveWorkflow))]
        public virtual void RemoveWorkflow([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveWorkflowInternal(workflowIdent, evaluateData));
        }
        
        protected virtual void RemoveWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowBLL bll = evaluateData.Context.Logics.WorkflowFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveWorkflowInternal(workflowIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IWorkflowBLL bll)
        {
            Framework.Workflow.Domain.Definition.Workflow domainObject = bll.GetById(workflowIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowIdentityDTO SaveWorkflowInternal(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IWorkflowBLL bll)
        {
            Framework.Workflow.Domain.Definition.Workflow domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByIdOrCreate(bll, workflowStrict.Id);
            workflowStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check WorkflowLambda access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckWorkflowLambdaAccess))]
        public virtual void CheckWorkflowLambdaAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckWorkflowLambdaAccessInternal(workflowLambdaIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckWorkflowLambdaAccessInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambda;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.WorkflowLambda>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get WorkflowLambda (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowLambda))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO GetFullWorkflowLambda([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowLambdaInternal(workflowLambdaIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambda (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowLambdaByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO GetFullWorkflowLambdaByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowLambdaName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowLambdaByNameInternal(workflowLambdaName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO GetFullWorkflowLambdaByNameInternal(string workflowLambdaName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowLambdaName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO GetFullWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowLambdas (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowLambdas))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> GetFullWorkflowLambdas()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowLambdasInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambdas (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowLambdasByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> GetFullWorkflowLambdasByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO[] workflowLambdaIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowLambdasByIdentsInternal(workflowLambdaIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> GetFullWorkflowLambdasByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO[] workflowLambdaIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(workflowLambdaIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowLambdas (FullDTO) by filter (Framework.Workflow.Domain.WorkflowLambdaRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowLambdasByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> GetFullWorkflowLambdasByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowLambdasByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> GetFullWorkflowLambdasByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowLambdaRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> GetFullWorkflowLambdasInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowLambda (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowLambda))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO GetRichWorkflowLambda([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowLambdaInternal(workflowLambdaIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambda (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowLambdaByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO GetRichWorkflowLambdaByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowLambdaName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowLambdaByNameInternal(workflowLambdaName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO GetRichWorkflowLambdaByNameInternal(string workflowLambdaName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowLambdaName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO GetRichWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowLambda (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowLambda))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO GetSimpleWorkflowLambda([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowLambdaInternal(workflowLambdaIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambda (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowLambdaByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO GetSimpleWorkflowLambdaByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowLambdaName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowLambdaByNameInternal(workflowLambdaName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO GetSimpleWorkflowLambdaByNameInternal(string workflowLambdaName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowLambdaName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO GetSimpleWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowLambdas (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowLambdas))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> GetSimpleWorkflowLambdas()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowLambdasInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambdas (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowLambdasByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> GetSimpleWorkflowLambdasByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO[] workflowLambdaIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowLambdasByIdentsInternal(workflowLambdaIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> GetSimpleWorkflowLambdasByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO[] workflowLambdaIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(workflowLambdaIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowLambdas (SimpleDTO) by filter (Framework.Workflow.Domain.WorkflowLambdaRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowLambdasByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> GetSimpleWorkflowLambdasByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowLambdasByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> GetSimpleWorkflowLambdasByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowLambdaRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> GetSimpleWorkflowLambdasInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowLambda (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowLambda))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO GetVisualWorkflowLambda([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowLambdaInternal(workflowLambdaIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambda (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowLambdaByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO GetVisualWorkflowLambdaByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowLambdaName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowLambdaByNameInternal(workflowLambdaName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO GetVisualWorkflowLambdaByNameInternal(string workflowLambdaName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowLambdaName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO GetVisualWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowLambdas (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowLambdas))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> GetVisualWorkflowLambdas()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowLambdasInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowLambdas (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowLambdasByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> GetVisualWorkflowLambdasByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO[] workflowLambdaIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowLambdasByIdentsInternal(workflowLambdaIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> GetVisualWorkflowLambdasByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO[] workflowLambdaIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(workflowLambdaIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowLambdas (VisualDTO) by filter (Framework.Workflow.Domain.WorkflowLambdaRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowLambdasByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> GetVisualWorkflowLambdasByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowLambdasByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> GetVisualWorkflowLambdasByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowLambdaRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> GetVisualWorkflowLambdasInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for WorkflowLambda
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasWorkflowLambdaAccess))]
        public virtual bool HasWorkflowLambdaAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasWorkflowLambdaAccessInternal(workflowLambdaIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasWorkflowLambdaAccessInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambda;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.WorkflowLambda>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove WorkflowLambda
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveWorkflowLambda))]
        public virtual void RemoveWorkflowLambda([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveWorkflowLambdaInternal(workflowLambdaIdent, evaluateData));
        }
        
        protected virtual void RemoveWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveWorkflowLambdaInternal(workflowLambdaIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IWorkflowLambdaBLL bll)
        {
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Save WorkflowLambdas
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveWorkflowLambda))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO SaveWorkflowLambda([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveWorkflowLambdaInternal(workflowLambdaStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO SaveWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowLambdaBLL bll = evaluateData.Context.Logics.WorkflowLambdaFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveWorkflowLambdaInternal(workflowLambdaStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO SaveWorkflowLambdaInternal(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IWorkflowLambdaBLL bll)
        {
            Framework.Workflow.Domain.Definition.WorkflowLambda domainObject = bll.GetById(workflowLambdaStrict.Id, true);
            workflowLambdaStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check WorkflowSource access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckWorkflowSourceAccess))]
        public virtual void CheckWorkflowSourceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckWorkflowSourceAccessInternal(workflowSourceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckWorkflowSourceAccessInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSource;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = bll.GetById(workflowSourceIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.WorkflowSource>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get WorkflowSource (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowSource))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO GetFullWorkflowSource([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowSourceInternal(workflowSourceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSource (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowSourceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO GetFullWorkflowSourceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowSourceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowSourceByNameInternal(workflowSourceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO GetFullWorkflowSourceByNameInternal(string workflowSourceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowSourceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO GetFullWorkflowSourceInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = bll.GetById(workflowSourceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowSources (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowSources))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> GetFullWorkflowSources()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowSourcesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSources (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowSourcesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> GetFullWorkflowSourcesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO[] workflowSourceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowSourcesByIdentsInternal(workflowSourceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> GetFullWorkflowSourcesByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO[] workflowSourceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(workflowSourceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowSources (FullDTO) by filter (Framework.Workflow.Domain.WorkflowSourceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowSourcesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> GetFullWorkflowSourcesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowSourcesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> GetFullWorkflowSourcesByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowSourceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> GetFullWorkflowSourcesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowSource (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowSource))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO GetRichWorkflowSource([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowSourceInternal(workflowSourceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSource (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowSourceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO GetRichWorkflowSourceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowSourceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowSourceByNameInternal(workflowSourceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO GetRichWorkflowSourceByNameInternal(string workflowSourceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowSourceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO GetRichWorkflowSourceInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = bll.GetById(workflowSourceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowSource (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowSource))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO GetSimpleWorkflowSource([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowSourceInternal(workflowSourceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSource (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowSourceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO GetSimpleWorkflowSourceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowSourceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowSourceByNameInternal(workflowSourceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO GetSimpleWorkflowSourceByNameInternal(string workflowSourceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowSourceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO GetSimpleWorkflowSourceInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = bll.GetById(workflowSourceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowSources (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowSources))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> GetSimpleWorkflowSources()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowSourcesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSources (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowSourcesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> GetSimpleWorkflowSourcesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO[] workflowSourceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowSourcesByIdentsInternal(workflowSourceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> GetSimpleWorkflowSourcesByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO[] workflowSourceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(workflowSourceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowSources (SimpleDTO) by filter (Framework.Workflow.Domain.WorkflowSourceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowSourcesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> GetSimpleWorkflowSourcesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowSourcesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> GetSimpleWorkflowSourcesByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowSourceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> GetSimpleWorkflowSourcesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowSource (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowSource))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO GetVisualWorkflowSource([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowSourceInternal(workflowSourceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSource (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowSourceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO GetVisualWorkflowSourceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowSourceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowSourceByNameInternal(workflowSourceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO GetVisualWorkflowSourceByNameInternal(string workflowSourceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowSourceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO GetVisualWorkflowSourceInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = bll.GetById(workflowSourceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowSources (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowSources))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> GetVisualWorkflowSources()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowSourcesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowSources (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowSourcesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> GetVisualWorkflowSourcesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO[] workflowSourceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowSourcesByIdentsInternal(workflowSourceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> GetVisualWorkflowSourcesByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO[] workflowSourceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(workflowSourceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowSources (VisualDTO) by filter (Framework.Workflow.Domain.WorkflowSourceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowSourcesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> GetVisualWorkflowSourcesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowSourcesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> GetVisualWorkflowSourcesByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowSourceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> GetVisualWorkflowSourcesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSourceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Definition.WorkflowSource>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for WorkflowSource
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasWorkflowSourceAccess))]
        public virtual bool HasWorkflowSourceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasWorkflowSourceAccessInternal(workflowSourceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasWorkflowSourceAccessInternal(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowSourceBLL bll = evaluateData.Context.Logics.WorkflowSource;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Definition.WorkflowSource domainObject = bll.GetById(workflowSourceIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Definition.WorkflowSource>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check StateInstance access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckStateInstanceAccess))]
        public virtual void CheckStateInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckStateInstanceAccessInternal(stateInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckStateInstanceAccessInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.StateInstance domainObject = bll.GetById(stateInstanceIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.StateInstance>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get StateInstance (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateInstance))]
        public virtual Framework.Workflow.Generated.DTO.StateInstanceFullDTO GetFullStateInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateInstanceInternal(stateInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateInstanceFullDTO GetFullStateInstanceInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.StateInstance domainObject = bll.GetById(stateInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateInstances (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceFullDTO> GetFullStateInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateInstances (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullStateInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceFullDTO> GetFullStateInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO[] stateInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullStateInstancesByIdentsInternal(stateInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceFullDTO> GetFullStateInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO[] stateInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(stateInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceFullDTO> GetFullStateInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateInstance (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichStateInstance))]
        public virtual Framework.Workflow.Generated.DTO.StateInstanceRichDTO GetRichStateInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichStateInstanceInternal(stateInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateInstanceRichDTO GetRichStateInstanceInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.StateInstance domainObject = bll.GetById(stateInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get StateInstance (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateInstance))]
        public virtual Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO GetSimpleStateInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateInstanceInternal(stateInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO GetSimpleStateInstanceInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.StateInstance domainObject = bll.GetById(stateInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of StateInstances (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO> GetSimpleStateInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get StateInstances (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleStateInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO> GetSimpleStateInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO[] stateInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleStateInstancesByIdentsInternal(stateInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO> GetSimpleStateInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO[] stateInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(stateInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO> GetSimpleStateInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for StateInstance
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasStateInstanceAccess))]
        public virtual bool HasStateInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasStateInstanceAccessInternal(stateInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasStateInstanceAccessInternal(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IStateInstanceBLL bll = evaluateData.Context.Logics.StateInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.StateInstance domainObject = bll.GetById(stateInstanceIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.StateInstance>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check TaskInstance access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckTaskInstanceAccess))]
        public virtual void CheckTaskInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckTaskInstanceAccessInternal(taskInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckTaskInstanceAccessInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.TaskInstance domainObject = bll.GetById(taskInstanceIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.TaskInstance>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get TaskInstance (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTaskInstance))]
        public virtual Framework.Workflow.Generated.DTO.TaskInstanceFullDTO GetFullTaskInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTaskInstanceInternal(taskInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskInstanceFullDTO GetFullTaskInstanceInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.TaskInstance domainObject = bll.GetById(taskInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TaskInstances (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTaskInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> GetFullTaskInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTaskInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TaskInstances (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTaskInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> GetFullTaskInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO[] taskInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTaskInstancesByIdentsInternal(taskInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> GetFullTaskInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO[] taskInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(taskInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TaskInstances (FullDTO) by filter (Framework.Workflow.Domain.TaskInstanceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTaskInstancesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> GetFullTaskInstancesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTaskInstancesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> GetFullTaskInstancesByRootFilterInternal(Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TaskInstanceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> GetFullTaskInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TaskInstance (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTaskInstance))]
        public virtual Framework.Workflow.Generated.DTO.TaskInstanceRichDTO GetRichTaskInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTaskInstanceInternal(taskInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskInstanceRichDTO GetRichTaskInstanceInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.TaskInstance domainObject = bll.GetById(taskInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TaskInstance (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTaskInstance))]
        public virtual Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO GetSimpleTaskInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTaskInstanceInternal(taskInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO GetSimpleTaskInstanceInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.TaskInstance domainObject = bll.GetById(taskInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TaskInstances (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTaskInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> GetSimpleTaskInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTaskInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TaskInstances (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTaskInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> GetSimpleTaskInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO[] taskInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTaskInstancesByIdentsInternal(taskInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> GetSimpleTaskInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO[] taskInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(taskInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TaskInstances (SimpleDTO) by filter (Framework.Workflow.Domain.TaskInstanceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTaskInstancesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> GetSimpleTaskInstancesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTaskInstancesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> GetSimpleTaskInstancesByRootFilterInternal(Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.TaskInstanceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> GetSimpleTaskInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for TaskInstance
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasTaskInstanceAccess))]
        public virtual bool HasTaskInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasTaskInstanceAccessInternal(taskInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasTaskInstanceAccessInternal(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.TaskInstance domainObject = bll.GetById(taskInstanceIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.TaskInstance>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Save TaskInstances
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveTaskInstance))]
        public virtual Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO SaveTaskInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO taskInstanceStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveTaskInstanceInternal(taskInstanceStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO SaveTaskInstanceInternal(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO taskInstanceStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITaskInstanceBLL bll = evaluateData.Context.Logics.TaskInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveTaskInstanceInternal(taskInstanceStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO SaveTaskInstanceInternal(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO taskInstanceStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.ITaskInstanceBLL bll)
        {
            Framework.Workflow.Domain.Runtime.TaskInstance domainObject = bll.GetById(taskInstanceStrict.Id, true);
            taskInstanceStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check TransitionInstance access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckTransitionInstanceAccess))]
        public virtual void CheckTransitionInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckTransitionInstanceAccessInternal(transitionInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckTransitionInstanceAccessInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.TransitionInstance domainObject = bll.GetById(transitionInstanceIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.TransitionInstance>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get TransitionInstance (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitionInstance))]
        public virtual Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO GetFullTransitionInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionInstanceInternal(transitionInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO GetFullTransitionInstanceInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.TransitionInstance domainObject = bll.GetById(transitionInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TransitionInstances (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitionInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO> GetFullTransitionInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TransitionInstances (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullTransitionInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO> GetFullTransitionInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO[] transitionInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullTransitionInstancesByIdentsInternal(transitionInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO> GetFullTransitionInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO[] transitionInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(transitionInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO> GetFullTransitionInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TransitionInstance (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichTransitionInstance))]
        public virtual Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO GetRichTransitionInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichTransitionInstanceInternal(transitionInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO GetRichTransitionInstanceInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.TransitionInstance domainObject = bll.GetById(transitionInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get TransitionInstance (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitionInstance))]
        public virtual Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO GetSimpleTransitionInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionInstanceInternal(transitionInstanceIdentity, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO GetSimpleTransitionInstanceInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.TransitionInstance domainObject = bll.GetById(transitionInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of TransitionInstances (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitionInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO> GetSimpleTransitionInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get TransitionInstances (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleTransitionInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO> GetSimpleTransitionInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO[] transitionInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleTransitionInstancesByIdentsInternal(transitionInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO> GetSimpleTransitionInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO[] transitionInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(transitionInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO> GetSimpleTransitionInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.TransitionInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for TransitionInstance
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasTransitionInstanceAccess))]
        public virtual bool HasTransitionInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasTransitionInstanceAccessInternal(transitionInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasTransitionInstanceAccessInternal(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.ITransitionInstanceBLL bll = evaluateData.Context.Logics.TransitionInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.TransitionInstance domainObject = bll.GetById(transitionInstanceIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.TransitionInstance>(securityOperationCode).HasAccess(domainObject);
        }
    }
    
    public partial class WorkflowSLJsonController
    {
        
        /// <summary>
        /// Check WorkflowInstance access
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(CheckWorkflowInstanceAccess))]
        public virtual void CheckWorkflowInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.CheckWorkflowInstanceAccessInternal(workflowInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual void CheckWorkflowInstanceAccessInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdent.Id, true);
            Framework.SecuritySystem.SecurityProviderExtensions.CheckAccess(evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.WorkflowInstance>(securityOperationCode), domainObject);
        }
        
        /// <summary>
        /// Get WorkflowInstance (FullDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowInstance))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO GetFullWorkflowInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowInstanceInternal(workflowInstanceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstance (FullDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowInstanceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO GetFullWorkflowInstanceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowInstanceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowInstanceByNameInternal(workflowInstanceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO GetFullWorkflowInstanceByNameInternal(string workflowInstanceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowInstanceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO GetFullWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowInstances (FullDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> GetFullWorkflowInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstances (FullDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> GetFullWorkflowInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] workflowInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowInstancesByIdentsInternal(workflowInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> GetFullWorkflowInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] workflowInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListByIdents(workflowInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowInstances (FullDTO) by filter (Framework.Workflow.Domain.WorkflowInstanceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetFullWorkflowInstancesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> GetFullWorkflowInstancesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetFullWorkflowInstancesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> GetFullWorkflowInstancesByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowInstanceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> GetFullWorkflowInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowInstance (RichDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowInstance))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO GetRichWorkflowInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowInstanceInternal(workflowInstanceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstance (RichDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetRichWorkflowInstanceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO GetRichWorkflowInstanceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowInstanceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetRichWorkflowInstanceByNameInternal(workflowInstanceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO GetRichWorkflowInstanceByNameInternal(string workflowInstanceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowInstanceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO GetRichWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.FullDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowInstance (SimpleDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowInstance))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO GetSimpleWorkflowInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowInstanceInternal(workflowInstanceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstance (SimpleDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowInstanceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO GetSimpleWorkflowInstanceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowInstanceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowInstanceByNameInternal(workflowInstanceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO GetSimpleWorkflowInstanceByNameInternal(string workflowInstanceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowInstanceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO GetSimpleWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.SimpleDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowInstances (SimpleDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> GetSimpleWorkflowInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstances (SimpleDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> GetSimpleWorkflowInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] workflowInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowInstancesByIdentsInternal(workflowInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> GetSimpleWorkflowInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] workflowInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListByIdents(workflowInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowInstances (SimpleDTO) by filter (Framework.Workflow.Domain.WorkflowInstanceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetSimpleWorkflowInstancesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> GetSimpleWorkflowInstancesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetSimpleWorkflowInstancesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> GetSimpleWorkflowInstancesByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowInstanceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> GetSimpleWorkflowInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.SimpleDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowInstance (VisualDTO) by identity
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowInstance))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO GetVisualWorkflowInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowInstanceInternal(workflowInstanceIdentity, evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstance (VisualDTO) by name
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowInstanceByName))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO GetVisualWorkflowInstanceByName([Microsoft.AspNetCore.Mvc.FromFormAttribute()] string workflowInstanceName)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowInstanceByNameInternal(workflowInstanceName, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO GetVisualWorkflowInstanceByNameInternal(string workflowInstanceName, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = Framework.DomainDriven.BLL.DefaultDomainBLLBaseExtensions.GetByName(bll, workflowInstanceName, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO GetVisualWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentity, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdentity.Id, true, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.VisualDTO));
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get full list of WorkflowInstances (VisualDTO)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowInstances))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> GetVisualWorkflowInstances()
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowInstancesInternal(evaluateData));
        }
        
        /// <summary>
        /// Get WorkflowInstances (VisualDTO) by idents
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowInstancesByIdents))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> GetVisualWorkflowInstancesByIdents([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] workflowInstanceIdents)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowInstancesByIdentsInternal(workflowInstanceIdents, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> GetVisualWorkflowInstancesByIdentsInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] workflowInstanceIdents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListByIdents(workflowInstanceIdents, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Get WorkflowInstances (VisualDTO) by filter (Framework.Workflow.Domain.WorkflowInstanceRootFilterModel)
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(GetVisualWorkflowInstancesByRootFilter))]
        public virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> GetVisualWorkflowInstancesByRootFilter([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO filter)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.GetVisualWorkflowInstancesByRootFilterInternal(filter, evaluateData));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> GetVisualWorkflowInstancesByRootFilterInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO filter, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            Framework.Workflow.Domain.WorkflowInstanceRootFilterModel typedFilter = filter.ToDomainObject(evaluateData.MappingService);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetListBy(typedFilter, evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> GetVisualWorkflowInstancesInternal(Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.View);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTOList(bll.GetFullList(evaluateData.Context.FetchService.GetContainer<Framework.Workflow.Domain.Runtime.WorkflowInstance>(Framework.Transfering.ViewDTOType.VisualDTO)), evaluateData.MappingService);
        }
        
        /// <summary>
        /// Check access for WorkflowInstance
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(HasWorkflowInstanceAccess))]
        public virtual bool HasWorkflowInstanceAccess([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent, [Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Read, evaluateData => this.HasWorkflowInstanceAccessInternal(workflowInstanceIdent, securityOperationCode, evaluateData));
        }
        
        protected virtual bool HasWorkflowInstanceAccessInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent, Framework.Workflow.WorkflowSecurityOperationCode securityOperationCode, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstance;
            Framework.Security.TransferEnumHelper.Check(securityOperationCode);
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdent.Id, true);
            return evaluateData.Context.SecurityService.GetSecurityProvider<Framework.Workflow.Domain.Runtime.WorkflowInstance>(securityOperationCode).HasAccess(domainObject);
        }
        
        /// <summary>
        /// Remove WorkflowInstance
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveWorkflowInstance))]
        public virtual void RemoveWorkflowInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveWorkflowInstanceInternal(workflowInstanceIdent, evaluateData));
        }
        
        protected virtual void RemoveWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            this.RemoveWorkflowInstanceInternal(workflowInstanceIdent, evaluateData, bll);
        }
        
        protected virtual void RemoveWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdent, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IWorkflowInstanceBLL bll)
        {
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceIdent.Id, true);
            bll.Remove(domainObject);
        }
        
        /// <summary>
        /// Remove WorkflowInstances
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(RemoveWorkflowInstances))]
        public virtual void RemoveWorkflowInstances([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] idents)
        {
            this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.RemoveWorkflowInstancesInternal(idents, evaluateData));
        }
        
        protected virtual void RemoveWorkflowInstancesInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO[] idents, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            Framework.Core.EnumerableExtensions.Foreach(idents, workflowInstance => this.RemoveWorkflowInstanceInternal(workflowInstance, evaluateData, bll));
        }
        
        /// <summary>
        /// Save WorkflowInstances
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPostAttribute(nameof(SaveWorkflowInstance))]
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO SaveWorkflowInstance([Microsoft.AspNetCore.Mvc.FromFormAttribute()] Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO workflowInstanceStrict)
        {
            return this.Evaluate(Framework.DomainDriven.BLL.DBSessionMode.Write, evaluateData => this.SaveWorkflowInstanceInternal(workflowInstanceStrict, evaluateData));
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO SaveWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO workflowInstanceStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData)
        {
            Framework.Workflow.BLL.IWorkflowInstanceBLL bll = evaluateData.Context.Logics.WorkflowInstanceFactory.Create(Framework.SecuritySystem.BLLSecurityMode.Edit);
            return this.SaveWorkflowInstanceInternal(workflowInstanceStrict, evaluateData, bll);
        }
        
        protected virtual Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO SaveWorkflowInstanceInternal(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO workflowInstanceStrict, Framework.DomainDriven.ServiceModel.Service.EvaluatedData<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService> evaluateData, Framework.Workflow.BLL.IWorkflowInstanceBLL bll)
        {
            Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject = bll.GetById(workflowInstanceStrict.Id, true);
            workflowInstanceStrict.MapToDomainObject(evaluateData.MappingService, domainObject);
            bll.Save(domainObject);
            return Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject);
        }
    }
}
