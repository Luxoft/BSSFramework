//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Authorization.BLL
{
    
    
    public partial class BusinessRoleBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.BusinessRole, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IBusinessRoleBLL
    {
        
		partial void Initialize();
        
        public BusinessRoleBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.BusinessRole> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class BusinessRoleBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IBusinessRoleBLL, Framework.Authorization.BLL.BusinessRoleBLL, Framework.Authorization.Domain.BusinessRole>, Framework.Authorization.BLL.IBusinessRoleBLLFactory
    {
        
        public BusinessRoleBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EntityTypeBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.EntityType, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IEntityTypeBLL
    {
        
		partial void Initialize();
        
        public EntityTypeBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.EntityType> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EntityTypeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IEntityTypeBLL, Framework.Authorization.BLL.EntityTypeBLL, Framework.Authorization.Domain.EntityType>, Framework.Authorization.BLL.IEntityTypeBLLFactory
    {
        
        public EntityTypeBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class OperationBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.Operation, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IOperationBLL
    {
        
		partial void Initialize();
        
        public OperationBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Operation> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class OperationBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IOperationBLL, Framework.Authorization.BLL.OperationBLL, Framework.Authorization.Domain.Operation>, Framework.Authorization.BLL.IOperationBLLFactory
    {
        
        public OperationBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PermissionBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.Permission, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IPermissionBLL
    {
        
		partial void Initialize();
        
        public PermissionBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Permission> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class PermissionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPermissionBLL, Framework.Authorization.BLL.PermissionBLL, Framework.Authorization.Domain.Permission>, Framework.Authorization.BLL.IPermissionBLLFactory
    {
        
        public PermissionBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PermissionFilterEntityBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.PermissionFilterEntity, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IPermissionFilterEntityBLL
    {
        
		partial void Initialize();
        
        public PermissionFilterEntityBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.PermissionFilterEntity> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class PermissionFilterEntityBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPermissionFilterEntityBLL, Framework.Authorization.BLL.PermissionFilterEntityBLL, Framework.Authorization.Domain.PermissionFilterEntity>, Framework.Authorization.BLL.IPermissionFilterEntityBLLFactory
    {
        
        public PermissionFilterEntityBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PermissionFilterItemBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.PermissionFilterItem, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IPermissionFilterItemBLL
    {
        
		partial void Initialize();
        
        public PermissionFilterItemBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.PermissionFilterItem> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class PermissionFilterItemBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPermissionFilterItemBLL, Framework.Authorization.BLL.PermissionFilterItemBLL, Framework.Authorization.Domain.PermissionFilterItem>, Framework.Authorization.BLL.IPermissionFilterItemBLLFactory
    {
        
        public PermissionFilterItemBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PrincipalBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.Principal, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Authorization.BLL.IPrincipalBLL
    {
        
		partial void Initialize();
        
        public PrincipalBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Principal> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class PrincipalBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPrincipalBLL, Framework.Authorization.BLL.PrincipalBLL, Framework.Authorization.Domain.Principal>, Framework.Authorization.BLL.IPrincipalBLLFactory
    {
        
        public PrincipalBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class AuthorizationBLLFactoryContainer : Framework.DomainDriven.BLL.BLLContextContainer<Framework.Authorization.BLL.IAuthorizationBLLContext>, Framework.Authorization.BLL.IAuthorizationBLLFactoryContainer
    {
        
        private Framework.Authorization.BLL.IBusinessRoleBLL businessRoleBLL;
        
        private Framework.Authorization.BLL.AuthorizationDefaultBLLFactory defaultBLLFactory;
        
        private Framework.Authorization.BLL.IEntityTypeBLL entityTypeBLL;
        
        private Framework.Authorization.BLL.AuthorizationImplementedBLLFactory implementedBLLFactory;
        
        private Framework.Authorization.BLL.IOperationBLL operationBLL;
        
        private Framework.Authorization.BLL.IPermissionBLL permissionBLL;
        
        private Framework.Authorization.BLL.IPermissionFilterEntityBLL permissionFilterEntityBLL;
        
        private Framework.Authorization.BLL.IPermissionFilterItemBLL permissionFilterItemBLL;
        
        private Framework.Authorization.BLL.IPrincipalBLL principalBLL;
        
        public AuthorizationBLLFactoryContainer(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        public Framework.Authorization.BLL.IBusinessRoleBLL BusinessRole
        {
            get
            {
                if (object.ReferenceEquals(this.businessRoleBLL, null))
                {
                    this.businessRoleBLL = this.BusinessRoleFactory.Create();
                }
                return this.businessRoleBLL;
            }
        }
        
        public Framework.Authorization.BLL.IBusinessRoleBLLFactory BusinessRoleFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IBusinessRoleBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid> Default
        {
            get
            {
                if (object.ReferenceEquals(this.defaultBLLFactory, null))
                {
                    this.defaultBLLFactory = new Framework.Authorization.BLL.AuthorizationDefaultBLLFactory(this.Context);
                }
                return this.defaultBLLFactory;
            }
        }
        
        public Framework.Authorization.BLL.IEntityTypeBLL EntityType
        {
            get
            {
                if (object.ReferenceEquals(this.entityTypeBLL, null))
                {
                    this.entityTypeBLL = this.EntityTypeFactory.Create();
                }
                return this.entityTypeBLL;
            }
        }
        
        public Framework.Authorization.BLL.IEntityTypeBLLFactory EntityTypeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IEntityTypeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid> Implemented
        {
            get
            {
                if (object.ReferenceEquals(this.implementedBLLFactory, null))
                {
                    this.implementedBLLFactory = new Framework.Authorization.BLL.AuthorizationImplementedBLLFactory(this.Context);
                }
                return this.implementedBLLFactory;
            }
        }
        
        public Framework.Authorization.BLL.IOperationBLL Operation
        {
            get
            {
                if (object.ReferenceEquals(this.operationBLL, null))
                {
                    this.operationBLL = this.OperationFactory.Create();
                }
                return this.operationBLL;
            }
        }
        
        public Framework.Authorization.BLL.IOperationBLLFactory OperationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IOperationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.IPermissionBLL Permission
        {
            get
            {
                if (object.ReferenceEquals(this.permissionBLL, null))
                {
                    this.permissionBLL = this.PermissionFactory.Create();
                }
                return this.permissionBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPermissionBLLFactory PermissionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPermissionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.IPermissionFilterEntityBLL PermissionFilterEntity
        {
            get
            {
                if (object.ReferenceEquals(this.permissionFilterEntityBLL, null))
                {
                    this.permissionFilterEntityBLL = this.PermissionFilterEntityFactory.Create();
                }
                return this.permissionFilterEntityBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPermissionFilterEntityBLLFactory PermissionFilterEntityFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPermissionFilterEntityBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.IPermissionFilterItemBLL PermissionFilterItem
        {
            get
            {
                if (object.ReferenceEquals(this.permissionFilterItemBLL, null))
                {
                    this.permissionFilterItemBLL = this.PermissionFilterItemFactory.Create();
                }
                return this.permissionFilterItemBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPermissionFilterItemBLLFactory PermissionFilterItemFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPermissionFilterItemBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.IPrincipalBLL Principal
        {
            get
            {
                if (object.ReferenceEquals(this.principalBLL, null))
                {
                    this.principalBLL = this.PrincipalFactory.Create();
                }
                return this.principalBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPrincipalBLLFactory PrincipalFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPrincipalBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public static void RegisterBLLFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
        {
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IBusinessRoleBLLFactory, Framework.Authorization.BLL.BusinessRoleBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IBusinessRoleBLL, Framework.Authorization.Domain.BusinessRole>, Framework.Authorization.BLL.IBusinessRoleBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IBusinessRoleBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IBusinessRoleBLL, Framework.Authorization.Domain.BusinessRole>>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IEntityTypeBLLFactory, Framework.Authorization.BLL.EntityTypeBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IEntityTypeBLL, Framework.Authorization.Domain.EntityType>, Framework.Authorization.BLL.IEntityTypeBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IEntityTypeBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IEntityTypeBLL, Framework.Authorization.Domain.EntityType>>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IOperationBLLFactory, Framework.Authorization.BLL.OperationBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IOperationBLL, Framework.Authorization.Domain.Operation>, Framework.Authorization.BLL.IOperationBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IOperationBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IOperationBLL, Framework.Authorization.Domain.Operation>>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPermissionBLLFactory, Framework.Authorization.BLL.PermissionBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionBLL, Framework.Authorization.Domain.Permission>, Framework.Authorization.BLL.IPermissionBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionBLL, Framework.Authorization.Domain.Permission>>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPermissionFilterEntityBLLFactory, Framework.Authorization.BLL.PermissionFilterEntityBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionFilterEntityBLL, Framework.Authorization.Domain.PermissionFilterEntity>, Framework.Authorization.BLL.IPermissionFilterEntityBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionFilterEntityBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionFilterEntityBLL, Framework.Authorization.Domain.PermissionFilterEntity>>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPermissionFilterItemBLLFactory, Framework.Authorization.BLL.PermissionFilterItemBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionFilterItemBLL, Framework.Authorization.Domain.PermissionFilterItem>, Framework.Authorization.BLL.IPermissionFilterItemBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionFilterItemBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionFilterItemBLL, Framework.Authorization.Domain.PermissionFilterItem>>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPrincipalBLLFactory, Framework.Authorization.BLL.PrincipalBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPrincipalBLL, Framework.Authorization.Domain.Principal>, Framework.Authorization.BLL.IPrincipalBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPrincipalBLL>, Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPrincipalBLL, Framework.Authorization.Domain.Principal>>(serviceCollection);
        }
    }
    
    public partial class AuthorizationDefaultBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        public AuthorizationDefaultBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            return new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
        }
    }
    
    public partial class AuthorizationImplementedBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        public AuthorizationImplementedBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.BusinessRole)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessRole));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.EntityType)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EntityType));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Operation)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Operation));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Permission)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Permission));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterEntity)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterEntity));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterItem)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterItem));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Principal));
            }
            else
            {
                return new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.BusinessRole)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessRoleFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.BusinessRole>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.EntityType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EntityTypeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.EntityType>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Operation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.OperationFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Operation>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Permission)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Permission>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterEntityFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.PermissionFilterEntity>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterItemFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.PermissionFilterItem>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PrincipalFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Principal>)(securityProvider)))));
            }
            else
            {
                return new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.SecurityOperation securityOperation)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.BusinessRole)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessRoleFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.EntityType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EntityTypeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Operation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.OperationFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Permission)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterEntityFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterItemFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PrincipalFactory.Create(securityOperation)));
            }
            else
            {
                return new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.BLLSecurityMode bllSecurityMode)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.BusinessRole)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.BusinessRoleFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.EntityType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.EntityTypeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Operation)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.OperationFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Permission)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterEntity)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterEntityFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterItem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PermissionFilterItemFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Principal)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.PrincipalFactory.Create(bllSecurityMode)));
            }
            else
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context)));
            }
        }
    }
}
