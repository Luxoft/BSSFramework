//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkflowSampleSystem.Generated.DTO
{
    
    
    public partial interface IWorkflowSampleSystemDTOMappingService : Framework.DomainDriven.IDTOMappingService<WorkflowSampleSystem.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressSimpleDTO mappingObject);
        
        void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressFullDTO mappingObject);
        
        void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressRichDTO mappingObject);
        
        void MapAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO mappingObject, WorkflowSampleSystem.Domain.Address domainObject);
        
        void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressEventRichDTO mappingObject);
        
        void MapAnotherSqlParserTestObj(WorkflowSampleSystem.Domain.AnotherSqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.AnotherSqlParserTestObjEventRichDTO mappingObject);
        
        void MapAuditPersistentDomainObjectBase(WorkflowSampleSystem.Domain.AuditPersistentDomainObjectBase domainObject, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitVisualDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitSimpleDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitFullDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitRichDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnit domainObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitIntegrationSimpleDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnit domainObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEventRichDTO mappingObject);
        
        void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEventSimpleDTO mappingObject);
        
        void MapBusinessUnitAncestorLink(WorkflowSampleSystem.Domain.BusinessUnitAncestorLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitAncestorLinkEventRichDTO mappingObject);
        
        void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleSimpleDTO mappingObject);
        
        void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleFullDTO mappingObject);
        
        void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleRichDTO mappingObject);
        
        void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject);
        
        void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleEventRichDTO mappingObject);
        
        void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentSimpleDTO mappingObject);
        
        void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentFullDTO mappingObject);
        
        void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentRichDTO mappingObject);
        
        void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject);
        
        void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentEventRichDTO mappingObject);
        
        void MapBusinessUnitIdentity(WorkflowSampleSystem.Domain.Projections.BusinessUnitIdentity domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityProjectionDTO mappingObject);
        
        void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkSimpleDTO mappingObject);
        
        void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkFullDTO mappingObject);
        
        void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkRichDTO mappingObject);
        
        void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject);
        
        void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkEventRichDTO mappingObject);
        
        void MapBusinessUnitProgramClass(WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassProjectionDTO mappingObject);
        
        void MapBusinessUnitProgramClassFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel domainObject);
        
        void MapBusinessUnitProgramClassFilterModel(WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelEventRichDTO mappingObject);
        
        void MapBusinessUnitRootFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel domainObject);
        
        void MapBusinessUnitRootFilterModel(WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelEventRichDTO mappingObject);
        
        void MapBusinessUnitToAncestorChildView(WorkflowSampleSystem.Domain.BusinessUnitToAncestorChildView domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitToAncestorChildViewEventRichDTO mappingObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeVisualDTO mappingObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeSimpleDTO mappingObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeFullDTO mappingObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeRichDTO mappingObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitType domainObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeEventRichDTO mappingObject);
        
        void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeEventSimpleDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject);
        
        void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeEventRichDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentSimpleDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentFullDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentRichDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject);
        
        void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentEventRichDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToSimpleDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToFullDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToRichDTO mappingObject);
        
        void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject);
        
        void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToEventRichDTO mappingObject);
        
        void MapChildEntity(WorkflowSampleSystem.Domain.UniqueByParent.ChildEntity domainObject, WorkflowSampleSystem.Generated.DTO.ChildEntityEventRichDTO mappingObject);
        
        void MapClassA(WorkflowSampleSystem.Domain.TestForceAbstract.ClassA domainObject, WorkflowSampleSystem.Generated.DTO.ClassAEventRichDTO mappingObject);
        
        void MapClassA(WorkflowSampleSystem.Domain.TestForceAbstract.ClassA domainObject, WorkflowSampleSystem.Generated.DTO.ClassAEventSimpleDTO mappingObject);
        
        void MapClassAChild(WorkflowSampleSystem.Domain.TestForceAbstract.ClassAChild domainObject, WorkflowSampleSystem.Generated.DTO.ClassAChildEventRichDTO mappingObject);
        
        void MapCoefficient1676(WorkflowSampleSystem.Domain.EnversBug1676.Coefficient1676 domainObject, WorkflowSampleSystem.Generated.DTO.Coefficient1676EventRichDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityVisualDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityFullDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityRichDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO mappingObject, WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIntegrationSimpleDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityEventRichDTO mappingObject);
        
        void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityEventSimpleDTO mappingObject);
        
        void MapConcreteClassA(WorkflowSampleSystem.Domain.TestForceAbstract.ConcreteClassA domainObject, WorkflowSampleSystem.Generated.DTO.ConcreteClassAEventRichDTO mappingObject);
        
        void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryVisualDTO mappingObject);
        
        void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountrySimpleDTO mappingObject);
        
        void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryFullDTO mappingObject);
        
        void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryRichDTO mappingObject);
        
        void MapCountry(WorkflowSampleSystem.Generated.DTO.CountryStrictDTO mappingObject, WorkflowSampleSystem.Domain.Country domainObject);
        
        void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryEventRichDTO mappingObject);
        
        void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryEventSimpleDTO mappingObject);
        
        void MapCustomCompanyLegalEntity(WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CustomCompanyLegalEntityProjectionDTO mappingObject);
        
        void MapCustomTestObjForNested(WorkflowSampleSystem.Domain.Projections.CustomTestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.CustomTestObjForNestedProjectionDTO mappingObject);
        
        void MapDateModel(WorkflowSampleSystem.Domain.Models.Custom.DateModel domainObject, WorkflowSampleSystem.Generated.DTO.DateModelEventRichDTO mappingObject);
        
        void MapDomainObjectBase(WorkflowSampleSystem.Domain.DomainObjectBase domainObject, WorkflowSampleSystem.Generated.DTO.BaseAbstractDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSimpleDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeFullDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRichDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject);
        
        void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEventRichDTO mappingObject);
        
        void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEventSimpleDTO mappingObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkSimpleDTO mappingObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkFullDTO mappingObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkRichDTO mappingObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO mappingObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject);
        
        void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkEventRichDTO mappingObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneSimpleDTO mappingObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneFullDTO mappingObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneRichDTO mappingObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO mappingObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject);
        
        void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneEventRichDTO mappingObject);
        
        void MapEmployeeCellPhoneBase(WorkflowSampleSystem.Domain.EmployeeCellPhoneBase domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneBaseEventRichDTO mappingObject);
        
        void MapEmployeeComplexChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeComplexChangeModel domainObject);
        
        void MapEmployeeComplexChangeModel(WorkflowSampleSystem.Domain.EmployeeComplexChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelEventRichDTO mappingObject);
        
        void MapEmployeeCustomEventModel(WorkflowSampleSystem.Domain.EmployeeCustomEventModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCustomEventModelEventRichDTO mappingObject);
        
        void MapEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO mappingObject);
        
        void MapEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel domainObject);
        
        void MapEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelEventRichDTO mappingObject);
        
        void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelSimpleDTO mappingObject);
        
        void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelFullDTO mappingObject);
        
        void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelRichDTO mappingObject);
        
        void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject);
        
        void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelEventRichDTO mappingObject);
        
        void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelSimpleDTO mappingObject);
        
        void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelFullDTO mappingObject);
        
        void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelRichDTO mappingObject);
        
        void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject);
        
        void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelEventRichDTO mappingObject);
        
        void MapEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel domainObject);
        
        void MapEmployeeFilterModel(WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelEventRichDTO mappingObject);
        
        void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationVisualDTO mappingObject);
        
        void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationSimpleDTO mappingObject);
        
        void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationFullDTO mappingObject);
        
        void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationRichDTO mappingObject);
        
        void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationEventRichDTO mappingObject);
        
        void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneSimpleDTO mappingObject);
        
        void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneFullDTO mappingObject);
        
        void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO mappingObject);
        
        void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject);
        
        void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject);
        
        void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneEventRichDTO mappingObject);
        
        void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoSimpleDTO mappingObject);
        
        void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoFullDTO mappingObject);
        
        void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoRichDTO mappingObject);
        
        void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoEventRichDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionVisualDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionSimpleDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionFullDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionRichDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeePosition domainObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionEventRichDTO mappingObject);
        
        void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionEventSimpleDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeVisualDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeSimpleDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeFullDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeRichDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeEventRichDTO mappingObject);
        
        void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeEventSimpleDTO mappingObject);
        
        void MapEmployeeReportParameter(WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterStrictDTO mappingObject, WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter domainObject);
        
        void MapEmployeeReportParameter(WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterEventRichDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleVisualDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleSimpleDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleFullDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleRichDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRole domainObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleEventRichDTO mappingObject);
        
        void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleEventSimpleDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeVisualDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeSimpleDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeFullDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeRichDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeEventRichDTO mappingObject);
        
        void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeEventSimpleDTO mappingObject);
        
        void MapEmployeeRootFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRootFilterModel domainObject);
        
        void MapEmployeeRootFilterModel(WorkflowSampleSystem.Domain.EmployeeRootFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelEventRichDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationVisualDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationSimpleDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationFullDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationRichDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationEventRichDTO mappingObject);
        
        void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationEventSimpleDTO mappingObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkSimpleDTO mappingObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkFullDTO mappingObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkRichDTO mappingObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO mappingObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject);
        
        void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkEventRichDTO mappingObject);
        
        void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1SimpleDTO mappingObject);
        
        void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1FullDTO mappingObject);
        
        void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1RichDTO mappingObject);
        
        void MapExample1(WorkflowSampleSystem.Generated.DTO.Example1StrictDTO mappingObject, WorkflowSampleSystem.Domain.Example1 domainObject);
        
        void MapExample1(WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO mappingObject, WorkflowSampleSystem.Domain.Example1 domainObject);
        
        void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1EventRichDTO mappingObject);
        
        void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1EventSimpleDTO mappingObject);
        
        void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2SimpleDTO mappingObject);
        
        void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2FullDTO mappingObject);
        
        void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2RichDTO mappingObject);
        
        void MapExample2(WorkflowSampleSystem.Generated.DTO.Example2StrictDTO mappingObject, WorkflowSampleSystem.Domain.Example2 domainObject);
        
        void MapExample2(WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO mappingObject, WorkflowSampleSystem.Domain.Example2 domainObject);
        
        void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2EventRichDTO mappingObject);
        
        void MapGuidBasedFilterModel(WorkflowSampleSystem.Domain.Models.Filters.GuidBasedFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.GuidBasedFilterModelEventRichDTO mappingObject);
        
        void MapHerBusinessUnit(WorkflowSampleSystem.Domain.Projections.HerBusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.HerBusinessUnitProjectionDTO mappingObject);
        
        void MapHierarchicalBusinessUnitFilterModel(WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel domainObject);
        
        void MapHierarchicalBusinessUnitFilterModel(WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelEventRichDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentVisualDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentSimpleDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentFullDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRichDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartment domainObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentIntegrationSimpleDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartment domainObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEventRichDTO mappingObject);
        
        void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEventSimpleDTO mappingObject);
        
        void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionSimpleDTO mappingObject);
        
        void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionFullDTO mappingObject);
        
        void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionRichDTO mappingObject);
        
        void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject);
        
        void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionEventRichDTO mappingObject);
        
        void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeSimpleDTO mappingObject);
        
        void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeFullDTO mappingObject);
        
        void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeRichDTO mappingObject);
        
        void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject);
        
        void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeEventRichDTO mappingObject);
        
        void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestVisualDTO mappingObject);
        
        void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestSimpleDTO mappingObject);
        
        void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestFullDTO mappingObject);
        
        void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestRichDTO mappingObject);
        
        void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestEventRichDTO mappingObject);
        
        void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestEventSimpleDTO mappingObject);
        
        void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailSimpleDTO mappingObject);
        
        void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailFullDTO mappingObject);
        
        void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailRichDTO mappingObject);
        
        void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailEventRichDTO mappingObject);
        
        void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationVisualDTO mappingObject);
        
        void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationSimpleDTO mappingObject);
        
        void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationFullDTO mappingObject);
        
        void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationRichDTO mappingObject);
        
        void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationEventRichDTO mappingObject);
        
        void MapInsurance(WorkflowSampleSystem.Domain.Insurance domainObject, WorkflowSampleSystem.Generated.DTO.InsuranceEventRichDTO mappingObject);
        
        void MapInsurance(WorkflowSampleSystem.Domain.Insurance domainObject, WorkflowSampleSystem.Generated.DTO.InsuranceEventSimpleDTO mappingObject);
        
        void MapInsuranceDetail(WorkflowSampleSystem.Domain.InsuranceDetail domainObject, WorkflowSampleSystem.Generated.DTO.InsuranceDetailEventRichDTO mappingObject);
        
        void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO mappingObject);
        
        void MapIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject);
        
        void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO mappingObject);
        
        void MapIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject);
        
        void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1EventRichDTO mappingObject);
        
        void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1EventSimpleDTO mappingObject);
        
        void MapIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO mappingObject);
        
        void MapIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel domainObject);
        
        void MapIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelEventRichDTO mappingObject);
        
        void MapIntegrationVersionContainer2(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO mappingObject);
        
        void MapIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 domainObject);
        
        void MapIntegrationVersionContainer2(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2EventRichDTO mappingObject);
        
        void MapLegalEntityBase(WorkflowSampleSystem.Domain.LegalEntityBase domainObject, WorkflowSampleSystem.Generated.DTO.LegalEntityBaseSimpleDTO mappingObject);
        
        void MapLegalEntityBase(WorkflowSampleSystem.Domain.LegalEntityBase domainObject, WorkflowSampleSystem.Generated.DTO.LegalEntityBaseEventRichDTO mappingObject);
        
        void MapLegalEntityBase(WorkflowSampleSystem.Domain.LegalEntityBase domainObject, WorkflowSampleSystem.Generated.DTO.LegalEntityBaseEventSimpleDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationVisualDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationSimpleDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationFullDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationRichDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO mappingObject, WorkflowSampleSystem.Domain.Location domainObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationIntegrationSimpleDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Generated.DTO.LocationIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.Location domainObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationEventRichDTO mappingObject);
        
        void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationEventSimpleDTO mappingObject);
        
        void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676VisualDTO mappingObject);
        
        void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676SimpleDTO mappingObject);
        
        void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676FullDTO mappingObject);
        
        void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676RichDTO mappingObject);
        
        void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676EventRichDTO mappingObject);
        
        void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676EventSimpleDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitVisualDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitSimpleDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFullDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitRichDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnit domainObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitIntegrationSimpleDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnit domainObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitEventRichDTO mappingObject);
        
        void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitEventSimpleDTO mappingObject);
        
        void MapManagementUnitAncestorLink(WorkflowSampleSystem.Domain.ManagementUnitAncestorLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAncestorLinkEventRichDTO mappingObject);
        
        void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkSimpleDTO mappingObject);
        
        void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkFullDTO mappingObject);
        
        void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkRichDTO mappingObject);
        
        void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject);
        
        void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkEventRichDTO mappingObject);
        
        void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkSimpleDTO mappingObject);
        
        void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkFullDTO mappingObject);
        
        void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkRichDTO mappingObject);
        
        void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject);
        
        void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkEventRichDTO mappingObject);
        
        void MapManagementUnitFluentMapping(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingSimpleDTO mappingObject);
        
        void MapManagementUnitFluentMapping(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingEventRichDTO mappingObject);
        
        void MapManagementUnitFluentMapping(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingEventSimpleDTO mappingObject);
        
        void MapManagementUnitToAncestorChildView(WorkflowSampleSystem.Domain.ManagementUnitToAncestorChildView domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitToAncestorChildViewEventRichDTO mappingObject);
        
        void MapMiniBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.MiniBusinessUnitEmployeeRoleProjectionDTO mappingObject);
        
        void MapNamedLock(WorkflowSampleSystem.Domain.NamedLock domainObject, WorkflowSampleSystem.Generated.DTO.NamedLockEventRichDTO mappingObject);
        
        void MapParentEntity(WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity domainObject, WorkflowSampleSystem.Generated.DTO.ParentEntityEventRichDTO mappingObject);
        
        void MapParentEntity(WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity domainObject, WorkflowSampleSystem.Generated.DTO.ParentEntityEventSimpleDTO mappingObject);
        
        void MapPersistentDomainObjectBase(WorkflowSampleSystem.Domain.PersistentDomainObjectBase domainObject, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO mappingObject);
        
        void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalSimpleDTO mappingObject);
        
        void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalFullDTO mappingObject);
        
        void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalRichDTO mappingObject);
        
        void MapPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO mappingObject, WorkflowSampleSystem.Domain.Principal domainObject);
        
        void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalEventRichDTO mappingObject);
        
        void MapProject(WorkflowSampleSystem.Domain.Project domainObject, WorkflowSampleSystem.Generated.DTO.ProjectEventRichDTO mappingObject);
        
        void MapRoleRoleDegreeLink(WorkflowSampleSystem.Domain.RoleRoleDegreeLink domainObject, WorkflowSampleSystem.Generated.DTO.RoleRoleDegreeLinkEventRichDTO mappingObject);
        
        void MapSingleEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel domainObject);
        
        void MapSingleEmployeeFilterModel(WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelEventRichDTO mappingObject);
        
        void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjSimpleDTO mappingObject);
        
        void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjFullDTO mappingObject);
        
        void MapSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO mappingObject, WorkflowSampleSystem.Domain.SqlParserTestObj domainObject);
        
        void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjEventRichDTO mappingObject);
        
        void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjEventSimpleDTO mappingObject);
        
        void MapSqlParserTestObjContainer(WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerSimpleDTO mappingObject);
        
        void MapSqlParserTestObjContainer(WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerFullDTO mappingObject);
        
        void MapSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO mappingObject, WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject);
        
        void MapSqlParserTestObjContainer(WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerEventRichDTO mappingObject);
        
        void MapTestBusinessUnit(WorkflowSampleSystem.Domain.Projections.TestBusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.TestBusinessUnitProjectionDTO mappingObject);
        
        void MapTestBusinessUnitType(WorkflowSampleSystem.Domain.Projections.TestBusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.TestBusinessUnitTypeProjectionDTO mappingObject);
        
        void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjVisualDTO mappingObject);
        
        void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjSimpleDTO mappingObject);
        
        void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjFullDTO mappingObject);
        
        void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjRichDTO mappingObject);
        
        void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjEventRichDTO mappingObject);
        
        void MapTestCustomContextSecurityObjProjection(WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjProjectionDTO mappingObject);
        
        void MapTestDefaultFieldsMappingObj(WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj domainObject, WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjSimpleDTO mappingObject);
        
        void MapTestDefaultFieldsMappingObj(WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO mappingObject, WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj domainObject);
        
        void MapTestDefaultFieldsMappingObj(WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj domainObject, WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjEventRichDTO mappingObject);
        
        void MapTestDepartment(WorkflowSampleSystem.Domain.Projections.TestDepartment domainObject, WorkflowSampleSystem.Generated.DTO.TestDepartmentProjectionDTO mappingObject);
        
        void MapTestEmployee(WorkflowSampleSystem.Domain.Projections.TestEmployee domainObject, WorkflowSampleSystem.Generated.DTO.TestEmployeeProjectionDTO mappingObject);
        
        void MapTestEmployeeFilter(WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterStrictDTO mappingObject, WorkflowSampleSystem.Domain.TestEmployeeFilter domainObject);
        
        void MapTestEmployeeFilter(WorkflowSampleSystem.Domain.TestEmployeeFilter domainObject, WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterEventRichDTO mappingObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjSimpleDTO mappingObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjFullDTO mappingObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjRichDTO mappingObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO mappingObject, WorkflowSampleSystem.Domain.TestImmutableObj domainObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO mappingObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.TestImmutableObj domainObject);
        
        void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjEventRichDTO mappingObject);
        
        void MapTestIMRequest(WorkflowSampleSystem.Domain.Projections.TestIMRequest domainObject, WorkflowSampleSystem.Generated.DTO.TestIMRequestProjectionDTO mappingObject);
        
        void MapTestIMRequestDetail(WorkflowSampleSystem.Domain.Projections.TestIMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.TestIMRequestDetailProjectionDTO mappingObject);
        
        void MapTestLegacyEmployee(WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee domainObject, WorkflowSampleSystem.Generated.DTO.TestLegacyEmployeeProjectionDTO mappingObject);
        
        void MapTestLocation(WorkflowSampleSystem.Domain.Projections.TestLocation domainObject, WorkflowSampleSystem.Generated.DTO.TestLocationProjectionDTO mappingObject);
        
        void MapTestLocationCollectionProperties(WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties domainObject, WorkflowSampleSystem.Generated.DTO.TestLocationCollectionPropertiesProjectionDTO mappingObject);
        
        void MapTestManualEmployeeProjection(WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection domainObject, WorkflowSampleSystem.Generated.DTO.TestManualEmployeeProjectionDTO mappingObject);
        
        void MapTestObj(WorkflowSampleSystem.Domain.TestObj domainObject, WorkflowSampleSystem.Generated.DTO.TestObjEventRichDTO mappingObject);
        
        void MapTestObjForNested(WorkflowSampleSystem.Domain.TestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedSimpleDTO mappingObject);
        
        void MapTestObjForNested(WorkflowSampleSystem.Domain.TestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedEventRichDTO mappingObject);
        
        void MapTestObjForNested(WorkflowSampleSystem.Domain.TestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedEventSimpleDTO mappingObject);
        
        void MapTestObjForNestedBase(WorkflowSampleSystem.Domain.TestObjForNestedBase domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedBaseEventRichDTO mappingObject);
        
        void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjVisualDTO mappingObject);
        
        void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjSimpleDTO mappingObject);
        
        void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjFullDTO mappingObject);
        
        void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjRichDTO mappingObject);
        
        void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjEventRichDTO mappingObject);
        
        void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjEventSimpleDTO mappingObject);
        
        void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemVisualDTO mappingObject);
        
        void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemSimpleDTO mappingObject);
        
        void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemFullDTO mappingObject);
        
        void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemRichDTO mappingObject);
        
        void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemEventRichDTO mappingObject);
        
        void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemEventSimpleDTO mappingObject);
        
        void MapTestSecurityObjItemProjection(WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemProjectionDTO mappingObject);
        
        void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemVisualDTO mappingObject);
        
        void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemSimpleDTO mappingObject);
        
        void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemFullDTO mappingObject);
        
        void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemRichDTO mappingObject);
        
        void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemEventRichDTO mappingObject);
        
        void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2VisualDTO mappingObject);
        
        void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2SimpleDTO mappingObject);
        
        void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2FullDTO mappingObject);
        
        void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2RichDTO mappingObject);
        
        void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2EventRichDTO mappingObject);
        
        void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3VisualDTO mappingObject);
        
        void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3SimpleDTO mappingObject);
        
        void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3FullDTO mappingObject);
        
        void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3RichDTO mappingObject);
        
        void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3EventRichDTO mappingObject);
        
        void MapTestUnpersistentObject(WorkflowSampleSystem.Domain.TestUnpersistentObject domainObject, WorkflowSampleSystem.Generated.DTO.TestUnpersistentObjectEventRichDTO mappingObject);
        
        void MapUnpersitentContainer(WorkflowSampleSystem.Domain.Projections.UnpersitentContainer domainObject, WorkflowSampleSystem.Generated.DTO.UnpersitentContainerProjectionDTO mappingObject);
        
        void MapVisualEmployee(WorkflowSampleSystem.Domain.Projections.VisualEmployee domainObject, WorkflowSampleSystem.Generated.DTO.VisualEmployeeProjectionDTO mappingObject);
        
        void MapVisualProject(WorkflowSampleSystem.Domain.Projections.VisualProject domainObject, WorkflowSampleSystem.Generated.DTO.VisualProjectProjectionDTO mappingObject);
        
        void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676VisualDTO mappingObject);
        
        void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676SimpleDTO mappingObject);
        
        void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676FullDTO mappingObject);
        
        void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676RichDTO mappingObject);
        
        void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676EventRichDTO mappingObject);
        
        WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressIdentityDTO addressIdentityDTO);
        
        WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO addressStrictDTO);
        
        WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO addressStrictDTO, WorkflowSampleSystem.Domain.CompanyLegalEntity master);
        
        WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO addressStrictDTO, WorkflowSampleSystem.Domain.LegalEntityBase master);
        
        WorkflowSampleSystem.Domain.AnotherSqlParserTestObj ToAnotherSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.AnotherSqlParserTestObjIdentityDTO anotherSqlParserTestObjIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO businessUnitIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO businessUnitStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO businessUnitStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitIntegrationSimpleDTO businessUnitSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitAncestorLink ToBusinessUnitAncestorLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitAncestorLinkIdentityDTO businessUnitAncestorLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole ToBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleIdentityDTO businessUnitEmployeeRoleIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole ToBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO businessUnitEmployeeRoleStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole ToBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO businessUnitEmployeeRoleStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit master);
        
        WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentIdentityDTO businessUnitHrDepartmentIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO businessUnitHrDepartmentStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO businessUnitHrDepartmentStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO businessUnitHrDepartmentStrictDTO, WorkflowSampleSystem.Domain.HRDepartment master);
        
        WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkIdentityDTO businessUnitManagerCommissionLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO businessUnitManagerCommissionLinkStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO businessUnitManagerCommissionLinkStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO businessUnitManagerCommissionLinkStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit master);
        
        WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel ToBusinessUnitProgramClassFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelStrictDTO businessUnitProgramClassFilterModelStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel ToBusinessUnitRootFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelStrictDTO businessUnitRootFilterModelStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitToAncestorChildView ToBusinessUnitToAncestorChildView(WorkflowSampleSystem.Generated.DTO.BusinessUnitToAncestorChildViewIdentityDTO businessUnitToAncestorChildViewIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitType ToBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO businessUnitTypeIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitType ToBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO businessUnitTypeStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitType ToBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO businessUnitTypeStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeIdentityDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType master);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentIdentityDTO businessUnitTypeLinkWithPossibleParentIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO businessUnitTypeLinkWithPossibleParentStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO businessUnitTypeLinkWithPossibleParentStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO businessUnitTypeLinkWithPossibleParentStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType master);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToIdentityDTO businessUnitTypeLinkWithTransferToIdentityDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO businessUnitTypeLinkWithTransferToStrictDTO);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO businessUnitTypeLinkWithTransferToStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO businessUnitTypeLinkWithTransferToStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType master);
        
        WorkflowSampleSystem.Domain.UniqueByParent.ChildEntity ToChildEntity(WorkflowSampleSystem.Generated.DTO.ChildEntityIdentityDTO childEntityIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestForceAbstract.ClassA ToClassA(WorkflowSampleSystem.Generated.DTO.ClassAIdentityDTO classAIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestForceAbstract.ClassAChild ToClassAChild(WorkflowSampleSystem.Generated.DTO.ClassAChildIdentityDTO classAChildIdentityDTO);
        
        WorkflowSampleSystem.Domain.EnversBug1676.Coefficient1676 ToCoefficient1676(WorkflowSampleSystem.Generated.DTO.Coefficient1676IdentityDTO coefficient1676IdentityDTO);
        
        WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO companyLegalEntityIdentityDTO);
        
        WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO companyLegalEntityStrictDTO);
        
        WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO companyLegalEntityStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIntegrationSimpleDTO companyLegalEntitySimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.TestForceAbstract.ConcreteClassA ToConcreteClassA(WorkflowSampleSystem.Generated.DTO.ConcreteClassAIdentityDTO concreteClassAIdentityDTO);
        
        WorkflowSampleSystem.Domain.Country ToCountry(WorkflowSampleSystem.Generated.DTO.CountryIdentityDTO countryIdentityDTO);
        
        WorkflowSampleSystem.Domain.Country ToCountry(WorkflowSampleSystem.Generated.DTO.CountryStrictDTO countryStrictDTO);
        
        WorkflowSampleSystem.Domain.Country ToCountry(WorkflowSampleSystem.Generated.DTO.CountryStrictDTO countryStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO employeeIdentityDTO);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO employeeStrictDTO);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO employeeStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO employeeUpdateDTO);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO employeeUpdateDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO employeeRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO employeeRichIntegrationDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO employeeSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIdentityDTO employeeAndEmployeeSpecializationLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO employeeAndEmployeeSpecializationLinkStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO employeeAndEmployeeSpecializationLinkStrictDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO employeeAndEmployeeSpecializationLinkUpdateDTO);
        
        WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO employeeAndEmployeeSpecializationLinkUpdateDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO employeeAndEmployeeSpecializationLinkRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIdentityDTO employeeCellPhoneIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO employeeCellPhoneStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO employeeCellPhoneStrictDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO employeeCellPhoneUpdateDTO);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO employeeCellPhoneUpdateDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO employeeCellPhoneRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeCellPhoneBase ToEmployeeCellPhoneBase(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneBaseIdentityDTO employeeCellPhoneBaseIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeComplexChangeModel ToEmployeeComplexChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelStrictDTO employeeComplexChangeModelStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel ToEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO employeeCustomIntegrationSaveModelRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeEmailChangeModel ToEmployeeEmailChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO employeeEmailChangeModelStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel ToEmployeeEmailMassChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO employeeEmailMassChangeModelStrictDTO);
        
        WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel ToEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelStrictDTO employeeFilterModelStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeInformation ToEmployeeInformation(WorkflowSampleSystem.Generated.DTO.EmployeeInformationIdentityDTO employeeInformationIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneIdentityDTO employeePersonalCellPhoneIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO employeePersonalCellPhoneStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO employeePersonalCellPhoneStrictDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO employeePersonalCellPhoneUpdateDTO);
        
        WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO employeePersonalCellPhoneUpdateDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeePhoto ToEmployeePhoto(WorkflowSampleSystem.Generated.DTO.EmployeePhotoIdentityDTO employeePhotoIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeePosition ToEmployeePosition(WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO employeePositionIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeePosition ToEmployeePosition(WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO employeePositionSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRegistrationType ToEmployeeRegistrationType(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO employeeRegistrationTypeIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRegistrationType ToEmployeeRegistrationType(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO employeeRegistrationTypeSimpleIntegrationDTO);
        
        WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter ToEmployeeReportParameter(WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterStrictDTO employeeReportParameterStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRole ToEmployeeRole(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIdentityDTO employeeRoleIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRole ToEmployeeRole(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO employeeRoleSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRoleDegree ToEmployeeRoleDegree(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO employeeRoleDegreeIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRoleDegree ToEmployeeRoleDegree(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO employeeRoleDegreeSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeRootFilterModel ToEmployeeRootFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelStrictDTO employeeRootFilterModelStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeSpecialization ToEmployeeSpecialization(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO employeeSpecializationIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeSpecialization ToEmployeeSpecialization(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO employeeSpecializationSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIdentityDTO employeeToEmployeeLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO employeeToEmployeeLinkStrictDTO);
        
        WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO employeeToEmployeeLinkStrictDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO employeeToEmployeeLinkUpdateDTO);
        
        WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO employeeToEmployeeLinkUpdateDTO, WorkflowSampleSystem.Domain.Employee master);
        
        WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO employeeToEmployeeLinkRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1IdentityDTO example1IdentityDTO);
        
        WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1StrictDTO example1StrictDTO);
        
        WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1StrictDTO example1StrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO example1UpdateDTO);
        
        WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO example1UpdateDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2IdentityDTO example2IdentityDTO);
        
        WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2StrictDTO example2StrictDTO);
        
        WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2StrictDTO example2StrictDTO, WorkflowSampleSystem.Domain.Example1 master);
        
        WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO example2UpdateDTO);
        
        WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO example2UpdateDTO, WorkflowSampleSystem.Domain.Example1 master);
        
        WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel ToHierarchicalBusinessUnitFilterModel(WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelStrictDTO hierarchicalBusinessUnitFilterModelStrictDTO);
        
        WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO hRDepartmentIdentityDTO);
        
        WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO hRDepartmentStrictDTO);
        
        WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO hRDepartmentStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentIntegrationSimpleDTO hRDepartmentSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionIdentityDTO hRDepartmentEmployeePositionIdentityDTO);
        
        WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO hRDepartmentEmployeePositionStrictDTO);
        
        WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO hRDepartmentEmployeePositionStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO hRDepartmentEmployeePositionStrictDTO, WorkflowSampleSystem.Domain.HRDepartment master);
        
        WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee ToHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeIdentityDTO hRDepartmentRoleEmployeeIdentityDTO);
        
        WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee ToHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO hRDepartmentRoleEmployeeStrictDTO);
        
        WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee ToHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO hRDepartmentRoleEmployeeStrictDTO, WorkflowSampleSystem.Domain.HRDepartment master);
        
        WorkflowSampleSystem.Domain.IMRequest ToIMRequest(WorkflowSampleSystem.Generated.DTO.IMRequestIdentityDTO iMRequestIdentityDTO);
        
        WorkflowSampleSystem.Domain.IMRequestDetail ToIMRequestDetail(WorkflowSampleSystem.Generated.DTO.IMRequestDetailIdentityDTO iMRequestDetailIdentityDTO);
        
        WorkflowSampleSystem.Domain.Information ToInformation(WorkflowSampleSystem.Generated.DTO.InformationIdentityDTO informationIdentityDTO);
        
        WorkflowSampleSystem.Domain.InsuranceDetail ToInsuranceDetail(WorkflowSampleSystem.Generated.DTO.InsuranceDetailIdentityDTO insuranceDetailIdentityDTO);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IdentityDTO integrationVersionContainer1IdentityDTO);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO integrationVersionContainer1RichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO integrationVersionContainer1RichIntegrationDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO integrationVersionContainer1SimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel ToIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO integrationVersionContainer1CustomIntegrationSaveModelRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 ToIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IdentityDTO integrationVersionContainer2IdentityDTO);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 ToIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO integrationVersionContainer2RichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 ToIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO integrationVersionContainer2RichIntegrationDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.LegalEntityBase ToLegalEntityBase(WorkflowSampleSystem.Generated.DTO.LegalEntityBaseIdentityDTO legalEntityBaseIdentityDTO);
        
        WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationIdentityDTO locationIdentityDTO);
        
        WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO locationStrictDTO);
        
        WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO locationStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationIntegrationSimpleDTO locationSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.EnversBug1676.Location1676 ToLocation1676(WorkflowSampleSystem.Generated.DTO.Location1676IdentityDTO location1676IdentityDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitIdentityDTO managementUnitIdentityDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO managementUnitStrictDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO managementUnitStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitIntegrationSimpleDTO managementUnitSimpleIntegrationDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitAncestorLink ToManagementUnitAncestorLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAncestorLinkIdentityDTO managementUnitAncestorLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkIdentityDTO managementUnitAndBusinessUnitLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit master);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnit master);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkIdentityDTO managementUnitAndHRDepartmentLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.HRDepartment master);
        
        WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnit master);
        
        WorkflowSampleSystem.Domain.ManagementUnitFluentMapping ToManagementUnitFluentMapping(WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingIdentityDTO managementUnitFluentMappingIdentityDTO);
        
        WorkflowSampleSystem.Domain.ManagementUnitToAncestorChildView ToManagementUnitToAncestorChildView(WorkflowSampleSystem.Generated.DTO.ManagementUnitToAncestorChildViewIdentityDTO managementUnitToAncestorChildViewIdentityDTO);
        
        WorkflowSampleSystem.Domain.NamedLock ToNamedLock(WorkflowSampleSystem.Generated.DTO.NamedLockIdentityDTO namedLockIdentityDTO);
        
        WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity ToParentEntity(WorkflowSampleSystem.Generated.DTO.ParentEntityIdentityDTO parentEntityIdentityDTO);
        
        WorkflowSampleSystem.Domain.Principal ToPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalIdentityDTO principalIdentityDTO);
        
        WorkflowSampleSystem.Domain.Principal ToPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO principalStrictDTO);
        
        WorkflowSampleSystem.Domain.Principal ToPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO principalStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.Project ToProject(WorkflowSampleSystem.Generated.DTO.ProjectIdentityDTO projectIdentityDTO);
        
        WorkflowSampleSystem.Domain.RoleRoleDegreeLink ToRoleRoleDegreeLink(WorkflowSampleSystem.Generated.DTO.RoleRoleDegreeLinkIdentityDTO roleRoleDegreeLinkIdentityDTO);
        
        WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel ToSingleEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelStrictDTO singleEmployeeFilterModelStrictDTO);
        
        WorkflowSampleSystem.Domain.SqlParserTestObj ToSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjIdentityDTO sqlParserTestObjIdentityDTO);
        
        WorkflowSampleSystem.Domain.SqlParserTestObj ToSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO sqlParserTestObjStrictDTO);
        
        WorkflowSampleSystem.Domain.SqlParserTestObj ToSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO sqlParserTestObjStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.SqlParserTestObjContainer ToSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerIdentityDTO sqlParserTestObjContainerIdentityDTO);
        
        WorkflowSampleSystem.Domain.SqlParserTestObjContainer ToSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO sqlParserTestObjContainerStrictDTO);
        
        WorkflowSampleSystem.Domain.SqlParserTestObjContainer ToSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO sqlParserTestObjContainerStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.TestCustomContextSecurityObj ToTestCustomContextSecurityObj(WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjIdentityDTO testCustomContextSecurityObjIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj ToTestDefaultFieldsMappingObj(WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO testDefaultFieldsMappingObjStrictDTO);
        
        WorkflowSampleSystem.Domain.TestEmployeeFilter ToTestEmployeeFilter(WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterStrictDTO testEmployeeFilterStrictDTO);
        
        WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIdentityDTO testImmutableObjIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO testImmutableObjStrictDTO);
        
        WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO testImmutableObjStrictDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO testImmutableObjRichIntegrationDTO);
        
        WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO testImmutableObjRichIntegrationDTO, bool allowCreate);
        
        WorkflowSampleSystem.Domain.TestObjForNested ToTestObjForNested(WorkflowSampleSystem.Generated.DTO.TestObjForNestedIdentityDTO testObjForNestedIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestObjForNestedBase ToTestObjForNestedBase(WorkflowSampleSystem.Generated.DTO.TestObjForNestedBaseIdentityDTO testObjForNestedBaseIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestRootSecurityObj ToTestRootSecurityObj(WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjIdentityDTO testRootSecurityObjIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestSecurityObjItem ToTestSecurityObjItem(WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemIdentityDTO testSecurityObjItemIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestSecuritySubObjItem ToTestSecuritySubObjItem(WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemIdentityDTO testSecuritySubObjItemIdentityDTO);
        
        WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 ToTestSecuritySubObjItem2(WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2IdentityDTO testSecuritySubObjItem2IdentityDTO);
        
        WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 ToTestSecuritySubObjItem3(WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3IdentityDTO testSecuritySubObjItem3IdentityDTO);
        
        WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 ToWorkingCalendar1676(WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676IdentityDTO workingCalendar1676IdentityDTO);
    }
    
    public abstract partial class WorkflowSampleSystemServerPrimitiveDTOMappingServiceBase : Framework.DomainDriven.DTOMappingService<WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext, WorkflowSampleSystem.Domain.PersistentDomainObjectBase, WorkflowSampleSystem.Domain.AuditPersistentDomainObjectBase, System.Guid, long>, WorkflowSampleSystem.Generated.DTO.IWorkflowSampleSystemDTOMappingService
    {
        
        protected WorkflowSampleSystemServerPrimitiveDTOMappingServiceBase(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
        
        public virtual void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressSimpleDTO mappingObject)
        {
            mappingObject.AddressType = domainObject.AddressType;
            mappingObject.CityName = domainObject.CityName;
            mappingObject.RegionName = domainObject.RegionName;
            mappingObject.Street = domainObject.Street;
            mappingObject.Zip = domainObject.Zip;
        }
        
        public virtual void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.CountryName, null))
            {
                mappingObject.CountryName = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CountryName, this);
            }
            else
            {
                mappingObject.CountryName = null;
            }
            if (!object.ReferenceEquals(domainObject.LegalEntity, null))
            {
                mappingObject.LegalEntity = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.LegalEntity, this);
            }
            else
            {
                mappingObject.LegalEntity = null;
            }
        }
        
        public virtual void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressRichDTO mappingObject)
        {
        }
        
        public virtual void MapAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO mappingObject, WorkflowSampleSystem.Domain.Address domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AddressType = mappingObject.AddressType;
            domainObject.CityName = mappingObject.CityName;
            if (!object.Equals(mappingObject.CountryName, default(WorkflowSampleSystem.Generated.DTO.CountryIdentityDTO)))
            {
                domainObject.CountryName = this.ToCountry(mappingObject.CountryName);
            }
            else
            {
                domainObject.CountryName = null;
            }
            domainObject.RegionName = mappingObject.RegionName;
            domainObject.Street = mappingObject.Street;
            domainObject.Zip = mappingObject.Zip;
        }
        
        public virtual void MapAddress(WorkflowSampleSystem.Domain.Address domainObject, WorkflowSampleSystem.Generated.DTO.AddressEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.AddressType = domainObject.AddressType;
            mappingObject.CityName = domainObject.CityName;
            if (!object.ReferenceEquals(domainObject.CountryName, null))
            {
                mappingObject.CountryName = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.CountryName, this);
            }
            else
            {
                mappingObject.CountryName = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.LegalEntity, null))
            {
                mappingObject.LegalEntity = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.LegalEntity, this);
            }
            else
            {
                mappingObject.LegalEntity = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.RegionName = domainObject.RegionName;
            mappingObject.Street = domainObject.Street;
            mappingObject.Version = domainObject.Version;
            mappingObject.Zip = domainObject.Zip;
        }
        
        public virtual void MapAnotherSqlParserTestObj(WorkflowSampleSystem.Domain.AnotherSqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.AnotherSqlParserTestObjEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NotNullColumn = domainObject.NotNullColumn;
            mappingObject.UniqueColumn = domainObject.UniqueColumn;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapAuditPersistentDomainObjectBase(WorkflowSampleSystem.Domain.AuditPersistentDomainObjectBase domainObject, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitSimpleDTO mappingObject)
        {
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.BusinessUnitTypeName = domainObject.BusinessUnitTypeName;
            mappingObject.Commission = domainObject.Commission;
            mappingObject.FirstNewBusinessStatusMonth = domainObject.FirstNewBusinessStatusMonth;
            mappingObject.IsNewBusiness = domainObject.IsNewBusiness;
            mappingObject.IsPool = domainObject.IsPool;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.IsSpecialCommission = domainObject.IsSpecialCommission;
            mappingObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = domainObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate;
            mappingObject.LastNewBusinessStatusMonth = domainObject.LastNewBusinessStatusMonth;
            mappingObject.LeastProjectStartDate = domainObject.LeastProjectStartDate;
            mappingObject.LobName = domainObject.LobName;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning = domainObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning;
            mappingObject.NewBusinessStatusLeft = domainObject.NewBusinessStatusLeft;
            mappingObject.Options = domainObject.Options;
            mappingObject.Period = domainObject.Period;
            mappingObject.ProjectStartMailList = domainObject.ProjectStartMailList;
            mappingObject.Rank = domainObject.Rank;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnitForRent, null))
            {
                mappingObject.BusinessUnitForRent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnitForRent, this);
            }
            else
            {
                mappingObject.BusinessUnitForRent = null;
            }
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitRichDTO mappingObject)
        {
            mappingObject.BusinessUnitEmployeeRoles = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.BusinessUnitEmployeeRoles, this);
            mappingObject.Children = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Children, this);
            mappingObject.ManagementUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.ManagementUnits, this);
            mappingObject.ManagerCommissions = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.ManagerCommissions, this);
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnit domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.BusinessUnitEmployeeRoles, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole>(detailDTO => this.ToBusinessUnitEmployeeRole(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.BusinessUnit, WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole>(domainObject, detail)).Map(mappingObject.BusinessUnitEmployeeRoles, domainObject.BusinessUnitEmployeeRoles);
            }
            if (!object.Equals(mappingObject.BusinessUnitForRent, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO)))
            {
                domainObject.BusinessUnitForRent = this.ToBusinessUnit(mappingObject.BusinessUnitForRent);
            }
            else
            {
                domainObject.BusinessUnitForRent = null;
            }
            domainObject.BusinessUnitStatus = mappingObject.BusinessUnitStatus;
            domainObject.Commission = mappingObject.Commission;
            domainObject.FirstNewBusinessStatusMonth = mappingObject.FirstNewBusinessStatusMonth;
            domainObject.IsNewBusiness = mappingObject.IsNewBusiness;
            domainObject.IsPool = mappingObject.IsPool;
            domainObject.IsProduction = mappingObject.IsProduction;
            domainObject.IsSpecialCommission = mappingObject.IsSpecialCommission;
            domainObject.LeastProjectStartDate = mappingObject.LeastProjectStartDate;
            if (!object.ReferenceEquals(mappingObject.ManagementUnits, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(detailDTO => this.ToManagementUnitAndBusinessUnitLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.BusinessUnit, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(domainObject, detail)).Map(mappingObject.ManagementUnits, domainObject.ManagementUnits);
            }
            if (!object.ReferenceEquals(mappingObject.ManagerCommissions, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink>(detailDTO => this.ToBusinessUnitManagerCommissionLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.BusinessUnit, WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink>(domainObject, detail)).Map(mappingObject.ManagerCommissions, domainObject.ManagerCommissions);
            }
            domainObject.Name = mappingObject.Name;
            domainObject.NewBusinessStatusLeft = mappingObject.NewBusinessStatusLeft;
            domainObject.Options = mappingObject.Options;
            domainObject.ProjectStartMailList = mappingObject.ProjectStartMailList;
            domainObject.Rank = mappingObject.Rank;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.BusinessUnitTypeName = domainObject.BusinessUnitTypeName;
            mappingObject.Commission = domainObject.Commission;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FirstNewBusinessStatusMonth = domainObject.FirstNewBusinessStatusMonth;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsNewBusiness = domainObject.IsNewBusiness;
            mappingObject.IsPool = domainObject.IsPool;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.IsSpecialCommission = domainObject.IsSpecialCommission;
            mappingObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = domainObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate;
            mappingObject.LastNewBusinessStatusMonth = domainObject.LastNewBusinessStatusMonth;
            mappingObject.LeastProjectStartDate = domainObject.LeastProjectStartDate;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning = domainObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning;
            mappingObject.NewBusinessStatusLeft = domainObject.NewBusinessStatusLeft;
            mappingObject.Options = domainObject.Options;
            mappingObject.Period = domainObject.Period;
            mappingObject.ProjectStartMailList = domainObject.ProjectStartMailList;
            mappingObject.Rank = domainObject.Rank;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnit domainObject)
        {
            domainObject.BusinessUnitStatus = mappingObject.BusinessUnitStatus;
            domainObject.Commission = mappingObject.Commission;
            domainObject.FirstNewBusinessStatusMonth = mappingObject.FirstNewBusinessStatusMonth;
            domainObject.IsNewBusiness = mappingObject.IsNewBusiness;
            domainObject.IsPool = mappingObject.IsPool;
            domainObject.IsProduction = mappingObject.IsProduction;
            domainObject.IsSpecialCommission = mappingObject.IsSpecialCommission;
            domainObject.LeastProjectStartDate = mappingObject.LeastProjectStartDate;
            domainObject.Name = mappingObject.Name;
            domainObject.NewBusinessStatusLeft = mappingObject.NewBusinessStatusLeft;
            domainObject.Options = mappingObject.Options;
            domainObject.ProjectStartMailList = mappingObject.ProjectStartMailList;
            domainObject.Rank = mappingObject.Rank;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Account, null))
            {
                mappingObject.Account = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Account, this);
            }
            else
            {
                mappingObject.Account = null;
            }
            mappingObject.AccountId = domainObject.AccountId;
            mappingObject.AccountName = domainObject.AccountName;
            if (!object.ReferenceEquals(domainObject.AccountOrDivision, null))
            {
                mappingObject.AccountOrDivision = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.AccountOrDivision, this);
            }
            else
            {
                mappingObject.AccountOrDivision = null;
            }
            mappingObject.AccountOrDivisionId = domainObject.AccountOrDivisionId;
            mappingObject.AccountOrDivisionName = domainObject.AccountOrDivisionName;
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitEmployeeRoles = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.BusinessUnitEmployeeRoles, this);
            if (!object.ReferenceEquals(domainObject.BusinessUnitForRent, null))
            {
                mappingObject.BusinessUnitForRent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnitForRent, this);
            }
            else
            {
                mappingObject.BusinessUnitForRent = null;
            }
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            mappingObject.BusinessUnitTypeName = domainObject.BusinessUnitTypeName;
            mappingObject.Commission = domainObject.Commission;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FirstNewBusinessStatusMonth = domainObject.FirstNewBusinessStatusMonth;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsNewBusiness = domainObject.IsNewBusiness;
            mappingObject.IsPool = domainObject.IsPool;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.IsSpecialCommission = domainObject.IsSpecialCommission;
            mappingObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = domainObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate;
            mappingObject.LastNewBusinessStatusMonth = domainObject.LastNewBusinessStatusMonth;
            mappingObject.LeastProjectStartDate = domainObject.LeastProjectStartDate;
            if (!object.ReferenceEquals(domainObject.Lob, null))
            {
                mappingObject.Lob = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Lob, this);
            }
            else
            {
                mappingObject.Lob = null;
            }
            mappingObject.LobId = domainObject.LobId;
            mappingObject.LobName = domainObject.LobName;
            if (!object.ReferenceEquals(domainObject.LobOrService, null))
            {
                mappingObject.LobOrService = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.LobOrService, this);
            }
            else
            {
                mappingObject.LobOrService = null;
            }
            mappingObject.LobOrServiceId = domainObject.LobOrServiceId;
            mappingObject.LobOrServiceName = domainObject.LobOrServiceName;
            mappingObject.ManagementUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.ManagementUnits, this);
            mappingObject.ManagerCommissions = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.ManagerCommissions, this);
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning = domainObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning;
            mappingObject.NewBusinessStatusLeft = domainObject.NewBusinessStatusLeft;
            mappingObject.Options = domainObject.Options;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Period = domainObject.Period;
            if (!object.ReferenceEquals(domainObject.Program, null))
            {
                mappingObject.Program = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Program, this);
            }
            else
            {
                mappingObject.Program = null;
            }
            mappingObject.ProgramName = domainObject.ProgramName;
            mappingObject.ProjectStartMailList = domainObject.ProjectStartMailList;
            mappingObject.Rank = domainObject.Rank;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnit(WorkflowSampleSystem.Domain.BusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEventSimpleDTO mappingObject)
        {
            mappingObject.AccountId = domainObject.AccountId;
            mappingObject.AccountName = domainObject.AccountName;
            mappingObject.AccountOrDivisionId = domainObject.AccountOrDivisionId;
            mappingObject.AccountOrDivisionName = domainObject.AccountOrDivisionName;
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.BusinessUnitTypeName = domainObject.BusinessUnitTypeName;
            mappingObject.Commission = domainObject.Commission;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FirstNewBusinessStatusMonth = domainObject.FirstNewBusinessStatusMonth;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsNewBusiness = domainObject.IsNewBusiness;
            mappingObject.IsPool = domainObject.IsPool;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.IsSpecialCommission = domainObject.IsSpecialCommission;
            mappingObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = domainObject.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate;
            mappingObject.LastNewBusinessStatusMonth = domainObject.LastNewBusinessStatusMonth;
            mappingObject.LeastProjectStartDate = domainObject.LeastProjectStartDate;
            mappingObject.LobId = domainObject.LobId;
            mappingObject.LobName = domainObject.LobName;
            mappingObject.LobOrServiceId = domainObject.LobOrServiceId;
            mappingObject.LobOrServiceName = domainObject.LobOrServiceName;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning = domainObject.NeedSendBusinessUnitHasNoLinkedProjectsWarning;
            mappingObject.NewBusinessStatusLeft = domainObject.NewBusinessStatusLeft;
            mappingObject.Options = domainObject.Options;
            mappingObject.Period = domainObject.Period;
            mappingObject.ProgramName = domainObject.ProgramName;
            mappingObject.ProjectStartMailList = domainObject.ProjectStartMailList;
            mappingObject.Rank = domainObject.Rank;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitAncestorLink(WorkflowSampleSystem.Domain.BusinessUnitAncestorLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitAncestorLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.Ancestor, null))
            {
                mappingObject.Ancestor = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Ancestor, this);
            }
            else
            {
                mappingObject.Ancestor = null;
            }
            if (!object.ReferenceEquals(domainObject.Child, null))
            {
                mappingObject.Child = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Child, this);
            }
            else
            {
                mappingObject.Child = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleSimpleDTO mappingObject)
        {
            mappingObject.Role = domainObject.Role;
        }
        
        public virtual void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
        }
        
        public virtual void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Employee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Employee = this.ToEmployee(mappingObject.Employee);
            }
            else
            {
                domainObject.Employee = null;
            }
            domainObject.Role = mappingObject.Role;
        }
        
        public virtual void MapBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Role = domainObject.Role;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
        }
        
        public virtual void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.BusinessUnit, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO)))
            {
                domainObject.BusinessUnit = this.ToBusinessUnit(mappingObject.BusinessUnit);
            }
            else
            {
                domainObject.BusinessUnit = null;
            }
            if (!object.Equals(mappingObject.HRDepartment, default(WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO)))
            {
                domainObject.HRDepartment = this.ToHRDepartment(mappingObject.HRDepartment);
            }
            else
            {
                domainObject.HRDepartment = null;
            }
        }
        
        public virtual void MapBusinessUnitHrDepartment(WorkflowSampleSystem.Domain.BusinessUnitHrDepartment domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitIdentity(WorkflowSampleSystem.Domain.Projections.BusinessUnitIdentity domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityProjectionDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkSimpleDTO mappingObject)
        {
            mappingObject.Commission = domainObject.Commission;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.Manager, null))
            {
                mappingObject.Manager = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Manager, this);
            }
            else
            {
                mappingObject.Manager = null;
            }
        }
        
        public virtual void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.BusinessUnit, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO)))
            {
                domainObject.BusinessUnit = this.ToBusinessUnit(mappingObject.BusinessUnit);
            }
            else
            {
                domainObject.BusinessUnit = null;
            }
            domainObject.Commission = mappingObject.Commission;
            if (!object.Equals(mappingObject.Manager, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Manager = this.ToEmployee(mappingObject.Manager);
            }
            else
            {
                domainObject.Manager = null;
            }
            domainObject.Period = mappingObject.Period;
        }
        
        public virtual void MapBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.Commission = domainObject.Commission;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.Manager, null))
            {
                mappingObject.Manager = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Manager, this);
            }
            else
            {
                mappingObject.Manager = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitProgramClass(WorkflowSampleSystem.Domain.Projections.BusinessUnitProgramClass domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassProjectionDTO mappingObject)
        {
            mappingObject.IsNewBusiness = domainObject.IsNewBusiness;
            mappingObject.Name = domainObject.Name;
            mappingObject.VirtualName = domainObject.VirtualName;
            mappingObject.VirtualValue = domainObject.VirtualValue;
        }
        
        public virtual void MapBusinessUnitProgramClassFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel domainObject)
        {
            domainObject.AncestorIdent = mappingObject.AncestorIdent;
            domainObject.FilterVirtualName = mappingObject.FilterVirtualName;
        }
        
        public virtual void MapBusinessUnitProgramClassFilterModel(WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelEventRichDTO mappingObject)
        {
            mappingObject.AncestorIdent = domainObject.AncestorIdent;
            mappingObject.FilterVirtualName = domainObject.FilterVirtualName;
        }
        
        public virtual void MapBusinessUnitRootFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel domainObject)
        {
            domainObject.ArrayDays = mappingObject.ArrayDays;
            domainObject.ArrayPeriods = mappingObject.ArrayPeriods;
            if (!object.Equals(mappingObject.Employee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Employee = this.ToEmployee(mappingObject.Employee);
            }
            else
            {
                domainObject.Employee = null;
            }
            domainObject.ListDays = mappingObject.ListDays;
            domainObject.ListPeriods = mappingObject.ListPeriods;
        }
        
        public virtual void MapBusinessUnitRootFilterModel(WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelEventRichDTO mappingObject)
        {
            mappingObject.ArrayDays = domainObject.ArrayDays;
            mappingObject.ArrayPeriods = domainObject.ArrayPeriods;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.ListDays = domainObject.ListDays;
            mappingObject.ListPeriods = domainObject.ListPeriods;
        }
        
        public virtual void MapBusinessUnitToAncestorChildView(WorkflowSampleSystem.Domain.BusinessUnitToAncestorChildView domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitToAncestorChildViewEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.ChildOrAncestor, null))
            {
                mappingObject.ChildOrAncestor = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ChildOrAncestor, this);
            }
            else
            {
                mappingObject.ChildOrAncestor = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Source, null))
            {
                mappingObject.Source = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Source, this);
            }
            else
            {
                mappingObject.Source = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeSimpleDTO mappingObject)
        {
            mappingObject.AdditionalStartConfirm = domainObject.AdditionalStartConfirm;
            mappingObject.AdditionalTransferConfirm = domainObject.AdditionalTransferConfirm;
            mappingObject.BillingProjectAreNotAllowed = domainObject.BillingProjectAreNotAllowed;
            mappingObject.CanBeIsSpecialCommission = domainObject.CanBeIsSpecialCommission;
            mappingObject.CanBeLinkedToClient = domainObject.CanBeLinkedToClient;
            mappingObject.CanBeLinkedToDepartment = domainObject.CanBeLinkedToDepartment;
            mappingObject.CanBeNewBusiness = domainObject.CanBeNewBusiness;
            mappingObject.CanBeResourcePool = domainObject.CanBeResourcePool;
            mappingObject.IsAdministrative = domainObject.IsAdministrative;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedVertical = domainObject.NeedVertical;
            mappingObject.PossibleStartDate = domainObject.PossibleStartDate;
            mappingObject.PossibleTransferDate = domainObject.PossibleTransferDate;
            mappingObject.PracticeAllowed = domainObject.PracticeAllowed;
            mappingObject.ProjectStartAllowed = domainObject.ProjectStartAllowed;
            mappingObject.StartBOConfirm = domainObject.StartBOConfirm;
            mappingObject.TransferBOConfirm = domainObject.TransferBOConfirm;
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeFullDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeRichDTO mappingObject)
        {
            mappingObject.PossibleFinancialProjectTypes = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.PossibleFinancialProjectTypes, this);
            mappingObject.PossibleParents = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.PossibleParents, this);
            mappingObject.TransferTo = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.TransferTo, this);
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitType domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AdditionalStartConfirm = mappingObject.AdditionalStartConfirm;
            domainObject.AdditionalTransferConfirm = mappingObject.AdditionalTransferConfirm;
            domainObject.BillingProjectAreNotAllowed = mappingObject.BillingProjectAreNotAllowed;
            domainObject.CanBeIsSpecialCommission = mappingObject.CanBeIsSpecialCommission;
            domainObject.CanBeLinkedToClient = mappingObject.CanBeLinkedToClient;
            domainObject.CanBeLinkedToDepartment = mappingObject.CanBeLinkedToDepartment;
            domainObject.CanBeNewBusiness = mappingObject.CanBeNewBusiness;
            domainObject.CanBeResourcePool = mappingObject.CanBeResourcePool;
            domainObject.IsAdministrative = mappingObject.IsAdministrative;
            domainObject.Name = mappingObject.Name;
            domainObject.NeedVertical = mappingObject.NeedVertical;
            if (!object.ReferenceEquals(mappingObject.PossibleFinancialProjectTypes, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>(detailDTO => this.ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.BusinessUnitType, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>(domainObject, detail)).Map(mappingObject.PossibleFinancialProjectTypes, domainObject.PossibleFinancialProjectTypes);
            }
            if (!object.ReferenceEquals(mappingObject.PossibleParents, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>(detailDTO => this.ToBusinessUnitTypeLinkWithPossibleParent(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.BusinessUnitType, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>(domainObject, detail)).Map(mappingObject.PossibleParents, domainObject.PossibleParents);
            }
            domainObject.PossibleStartDate = mappingObject.PossibleStartDate;
            domainObject.PossibleTransferDate = mappingObject.PossibleTransferDate;
            domainObject.PracticeAllowed = mappingObject.PracticeAllowed;
            domainObject.ProjectStartAllowed = mappingObject.ProjectStartAllowed;
            domainObject.StartBOConfirm = mappingObject.StartBOConfirm;
            domainObject.TransferBOConfirm = mappingObject.TransferBOConfirm;
            if (!object.ReferenceEquals(mappingObject.TransferTo, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>(detailDTO => this.ToBusinessUnitTypeLinkWithTransferTo(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.BusinessUnitType, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>(domainObject, detail)).Map(mappingObject.TransferTo, domainObject.TransferTo);
            }
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.AdditionalStartConfirm = domainObject.AdditionalStartConfirm;
            mappingObject.AdditionalTransferConfirm = domainObject.AdditionalTransferConfirm;
            mappingObject.BillingProjectAreNotAllowed = domainObject.BillingProjectAreNotAllowed;
            mappingObject.CanBeIsSpecialCommission = domainObject.CanBeIsSpecialCommission;
            mappingObject.CanBeLinkedToClient = domainObject.CanBeLinkedToClient;
            mappingObject.CanBeLinkedToDepartment = domainObject.CanBeLinkedToDepartment;
            mappingObject.CanBeNewBusiness = domainObject.CanBeNewBusiness;
            mappingObject.CanBeResourcePool = domainObject.CanBeResourcePool;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsAdministrative = domainObject.IsAdministrative;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedVertical = domainObject.NeedVertical;
            mappingObject.PossibleFinancialProjectTypes = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.PossibleFinancialProjectTypes, this);
            mappingObject.PossibleParents = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.PossibleParents, this);
            mappingObject.PossibleStartDate = domainObject.PossibleStartDate;
            mappingObject.PossibleTransferDate = domainObject.PossibleTransferDate;
            mappingObject.PracticeAllowed = domainObject.PracticeAllowed;
            mappingObject.ProjectStartAllowed = domainObject.ProjectStartAllowed;
            mappingObject.StartBOConfirm = domainObject.StartBOConfirm;
            mappingObject.TransferBOConfirm = domainObject.TransferBOConfirm;
            mappingObject.TransferTo = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.TransferTo, this);
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitType(WorkflowSampleSystem.Domain.BusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.AdditionalStartConfirm = domainObject.AdditionalStartConfirm;
            mappingObject.AdditionalTransferConfirm = domainObject.AdditionalTransferConfirm;
            mappingObject.BillingProjectAreNotAllowed = domainObject.BillingProjectAreNotAllowed;
            mappingObject.CanBeIsSpecialCommission = domainObject.CanBeIsSpecialCommission;
            mappingObject.CanBeLinkedToClient = domainObject.CanBeLinkedToClient;
            mappingObject.CanBeLinkedToDepartment = domainObject.CanBeLinkedToDepartment;
            mappingObject.CanBeNewBusiness = domainObject.CanBeNewBusiness;
            mappingObject.CanBeResourcePool = domainObject.CanBeResourcePool;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsAdministrative = domainObject.IsAdministrative;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NeedVertical = domainObject.NeedVertical;
            mappingObject.PossibleStartDate = domainObject.PossibleStartDate;
            mappingObject.PossibleTransferDate = domainObject.PossibleTransferDate;
            mappingObject.PracticeAllowed = domainObject.PracticeAllowed;
            mappingObject.ProjectStartAllowed = domainObject.ProjectStartAllowed;
            mappingObject.StartBOConfirm = domainObject.StartBOConfirm;
            mappingObject.TransferBOConfirm = domainObject.TransferBOConfirm;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO mappingObject)
        {
            mappingObject.FinancialProjectType = domainObject.FinancialProjectType;
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.BusinessUnitType, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO)))
            {
                domainObject.BusinessUnitType = this.ToBusinessUnitType(mappingObject.BusinessUnitType);
            }
            else
            {
                domainObject.BusinessUnitType = null;
            }
            domainObject.FinancialProjectType = mappingObject.FinancialProjectType;
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FinancialProjectType = domainObject.FinancialProjectType;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            if (!object.ReferenceEquals(domainObject.PossibleParent, null))
            {
                mappingObject.PossibleParent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.PossibleParent, this);
            }
            else
            {
                mappingObject.PossibleParent = null;
            }
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.BusinessUnitType, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO)))
            {
                domainObject.BusinessUnitType = this.ToBusinessUnitType(mappingObject.BusinessUnitType);
            }
            else
            {
                domainObject.BusinessUnitType = null;
            }
            if (!object.Equals(mappingObject.PossibleParent, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO)))
            {
                domainObject.PossibleParent = this.ToBusinessUnitType(mappingObject.PossibleParent);
            }
            else
            {
                domainObject.PossibleParent = null;
            }
        }
        
        public virtual void MapBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.PossibleParent, null))
            {
                mappingObject.PossibleParent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.PossibleParent, this);
            }
            else
            {
                mappingObject.PossibleParent = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            if (!object.ReferenceEquals(domainObject.TransferTo, null))
            {
                mappingObject.TransferTo = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TransferTo, this);
            }
            else
            {
                mappingObject.TransferTo = null;
            }
        }
        
        public virtual void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToRichDTO mappingObject)
        {
        }
        
        public virtual void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO mappingObject, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.BusinessUnitType, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO)))
            {
                domainObject.BusinessUnitType = this.ToBusinessUnitType(mappingObject.BusinessUnitType);
            }
            else
            {
                domainObject.BusinessUnitType = null;
            }
            if (!object.Equals(mappingObject.TransferTo, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO)))
            {
                domainObject.TransferTo = this.ToBusinessUnitType(mappingObject.TransferTo);
            }
            else
            {
                domainObject.TransferTo = null;
            }
        }
        
        public virtual void MapBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo domainObject, WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnitType, null))
            {
                mappingObject.BusinessUnitType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnitType, this);
            }
            else
            {
                mappingObject.BusinessUnitType = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.TransferTo, null))
            {
                mappingObject.TransferTo = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.TransferTo, this);
            }
            else
            {
                mappingObject.TransferTo = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapChildEntity(WorkflowSampleSystem.Domain.UniqueByParent.ChildEntity domainObject, WorkflowSampleSystem.Generated.DTO.ChildEntityEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapClassA(WorkflowSampleSystem.Domain.TestForceAbstract.ClassA domainObject, WorkflowSampleSystem.Generated.DTO.ClassAEventRichDTO mappingObject)
        {
            mappingObject.Child = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Child, this);
            mappingObject.Id = domainObject.Id;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapClassA(WorkflowSampleSystem.Domain.TestForceAbstract.ClassA domainObject, WorkflowSampleSystem.Generated.DTO.ClassAEventSimpleDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapClassAChild(WorkflowSampleSystem.Domain.TestForceAbstract.ClassAChild domainObject, WorkflowSampleSystem.Generated.DTO.ClassAChildEventRichDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
            mappingObject.IsFake = domainObject.IsFake;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapCoefficient1676(WorkflowSampleSystem.Domain.EnversBug1676.Coefficient1676 domainObject, WorkflowSampleSystem.Generated.DTO.Coefficient1676EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NormCoefficient = domainObject.NormCoefficient;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO mappingObject)
        {
            mappingObject.AribaStatus = domainObject.AribaStatus;
            mappingObject.Code = domainObject.Code;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BaseObj, null))
            {
                mappingObject.BaseObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BaseObj, this);
            }
            else
            {
                mappingObject.BaseObj = null;
            }
            if (!object.ReferenceEquals(domainObject.CurrentObj, null))
            {
                mappingObject.CurrentObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CurrentObj, this);
            }
            else
            {
                mappingObject.CurrentObj = null;
            }
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityRichDTO mappingObject)
        {
            mappingObject.Addresses = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Addresses, this);
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO mappingObject, WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Active = mappingObject.Active;
            if (!object.ReferenceEquals(mappingObject.Addresses, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.AddressStrictDTO, WorkflowSampleSystem.Domain.Address>(detailDTO => this.ToAddress(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.LegalEntityBase, WorkflowSampleSystem.Domain.Address>(domainObject, detail)).Map(mappingObject.Addresses, domainObject.Addresses);
            }
            if (!object.Equals(mappingObject.BaseObj, default(WorkflowSampleSystem.Generated.DTO.TestObjForNestedIdentityDTO)))
            {
                domainObject.BaseObj = this.ToTestObjForNested(mappingObject.BaseObj);
            }
            else
            {
                domainObject.BaseObj = null;
            }
            domainObject.Code = mappingObject.Code;
            if (!object.Equals(mappingObject.CurrentObj, default(WorkflowSampleSystem.Generated.DTO.TestObjForNestedIdentityDTO)))
            {
                domainObject.CurrentObj = this.ToTestObjForNested(mappingObject.CurrentObj);
            }
            else
            {
                domainObject.CurrentObj = null;
            }
            domainObject.Name = mappingObject.Name;
            domainObject.NameEnglish = mappingObject.NameEnglish;
            if (!object.Equals(mappingObject.Parent, default(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO)))
            {
                domainObject.Parent = this.ToCompanyLegalEntity(mappingObject.Parent);
            }
            else
            {
                domainObject.Parent = null;
            }
            domainObject.Type = mappingObject.Type;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.AribaStatus = domainObject.AribaStatus;
            mappingObject.Code = domainObject.Code;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject)
        {
            domainObject.Active = mappingObject.Active;
            domainObject.Code = mappingObject.Code;
            domainObject.Name = mappingObject.Name;
            domainObject.NameEnglish = mappingObject.NameEnglish;
            domainObject.Type = mappingObject.Type;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Addresses = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Addresses, this);
            mappingObject.AribaStatus = domainObject.AribaStatus;
            if (!object.ReferenceEquals(domainObject.BaseObj, null))
            {
                mappingObject.BaseObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BaseObj, this);
            }
            else
            {
                mappingObject.BaseObj = null;
            }
            mappingObject.Code = domainObject.Code;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.CurrentObj, null))
            {
                mappingObject.CurrentObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.CurrentObj, this);
            }
            else
            {
                mappingObject.CurrentObj = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Type = domainObject.Type;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapCompanyLegalEntity(WorkflowSampleSystem.Domain.CompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.AribaStatus = domainObject.AribaStatus;
            mappingObject.Code = domainObject.Code;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
            mappingObject.Type = domainObject.Type;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapConcreteClassA(WorkflowSampleSystem.Domain.TestForceAbstract.ConcreteClassA domainObject, WorkflowSampleSystem.Generated.DTO.ConcreteClassAEventRichDTO mappingObject)
        {
            mappingObject.Age = domainObject.Age;
            mappingObject.Child = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Child, this);
            mappingObject.Id = domainObject.Id;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountrySimpleDTO mappingObject)
        {
            mappingObject.Code = domainObject.Code;
            mappingObject.Culture = domainObject.Culture;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryFullDTO mappingObject)
        {
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryRichDTO mappingObject)
        {
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Generated.DTO.CountryStrictDTO mappingObject, WorkflowSampleSystem.Domain.Country domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Code = mappingObject.Code;
            domainObject.Culture = mappingObject.Culture;
            domainObject.Name = mappingObject.Name;
            domainObject.NameNative = mappingObject.NameNative;
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Code = domainObject.Code;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Culture = domainObject.Culture;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapCountry(WorkflowSampleSystem.Domain.Country domainObject, WorkflowSampleSystem.Generated.DTO.CountryEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Code = domainObject.Code;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Culture = domainObject.Culture;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapCustomCompanyLegalEntity(WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity domainObject, WorkflowSampleSystem.Generated.DTO.CustomCompanyLegalEntityProjectionDTO mappingObject)
        {
            mappingObject.AribaStatusDescription = domainObject.AribaStatusDescription;
            mappingObject.AribaStatusType = domainObject.AribaStatusType;
            if (!object.ReferenceEquals(domainObject.BaseObj, null))
            {
                mappingObject.BaseObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.BaseObj, this);
            }
            else
            {
                mappingObject.BaseObj = null;
            }
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Projections.CustomCompanyLegalEntity>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.CompanyLegalEntityView).HasAccess(domainObject))
            {
                string resultCode;
                resultCode = domainObject.Code;
                mappingObject.Code = new Framework.Core.Just<string>(resultCode);
            }
            else
            {
                mappingObject.Code = Framework.Core.Maybe<string>.Nothing;
            }
            if (!object.ReferenceEquals(domainObject.CurrentObj, null))
            {
                mappingObject.CurrentObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.CurrentObj, this);
            }
            else
            {
                mappingObject.CurrentObj = null;
            }
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
        }
        
        public virtual void MapCustomTestObjForNested(WorkflowSampleSystem.Domain.Projections.CustomTestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.CustomTestObjForNestedProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.PeriodStartDateXXX = domainObject.PeriodStartDateXXX;
        }
        
        public virtual void MapDateModel(WorkflowSampleSystem.Domain.Models.Custom.DateModel domainObject, WorkflowSampleSystem.Generated.DTO.DateModelEventRichDTO mappingObject)
        {
            mappingObject.Day = domainObject.Day;
            mappingObject.Month = domainObject.Month;
            mappingObject.Year = domainObject.Year;
        }
        
        public virtual void MapDomainObjectBase(WorkflowSampleSystem.Domain.DomainObjectBase domainObject, WorkflowSampleSystem.Generated.DTO.BaseAbstractDTO mappingObject)
        {
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSimpleDTO mappingObject)
        {
            mappingObject.AccountName = domainObject.AccountName;
            mappingObject.Age = domainObject.Age;
            mappingObject.BirthDate = domainObject.BirthDate;
            mappingObject.CanBePPM = domainObject.CanBePPM;
            mappingObject.CellPhone = domainObject.CellPhone;
            mappingObject.CoreBusinessUnitPeriod = domainObject.CoreBusinessUnitPeriod;
            mappingObject.DismissDate = domainObject.DismissDate;
            mappingObject.EducationDuration = domainObject.EducationDuration;
            mappingObject.Email = domainObject.Email;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Gender = domainObject.Gender;
            mappingObject.HireDate = domainObject.HireDate;
            mappingObject.Interphone = domainObject.Interphone;
            mappingObject.IsCandidate = domainObject.IsCandidate;
            mappingObject.Landlinephone = domainObject.Landlinephone;
            mappingObject.LastActionDate = domainObject.LastActionDate;
            mappingObject.LocationCode = domainObject.LocationCode;
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeeView).HasAccess(domainObject))
            {
                string resultLogin;
                resultLogin = domainObject.Login;
                mappingObject.Login = new Framework.Core.Just<string>(resultLogin);
            }
            else
            {
                mappingObject.Login = Framework.Core.Maybe<string>.Nothing;
            }
            mappingObject.MailAccountName = domainObject.MailAccountName;
            mappingObject.NameEng = domainObject.NameEng;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.NameRussian = domainObject.NameRussian;
            mappingObject.NonValidateVirtualProp = domainObject.NonValidateVirtualProp;
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePersonalCellPhoneView).HasAccess(domainObject))
            {
                string resultPersonalCellPhone;
                resultPersonalCellPhone = domainObject.PersonalCellPhone;
                mappingObject.PersonalCellPhone = new Framework.Core.Just<string>(resultPersonalCellPhone);
            }
            else
            {
                mappingObject.PersonalCellPhone = Framework.Core.Maybe<string>.Nothing;
            }
            mappingObject.Pin = domainObject.Pin;
            mappingObject.PlannedHireDate = domainObject.PlannedHireDate;
            mappingObject.ValidateVirtualProp = domainObject.ValidateVirtualProp;
            mappingObject.WorkPeriod = domainObject.WorkPeriod;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.CoreBusinessUnit, null))
            {
                mappingObject.CoreBusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CoreBusinessUnit, this);
            }
            else
            {
                mappingObject.CoreBusinessUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.PersonalAssistant, null))
            {
                mappingObject.PersonalAssistant = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.PersonalAssistant, this);
            }
            else
            {
                mappingObject.PersonalAssistant = null;
            }
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePositionView).HasAccess(domainObject))
            {
                WorkflowSampleSystem.Generated.DTO.EmployeePositionSimpleDTO resultPosition;
                if (!object.ReferenceEquals(domainObject.Position, null))
                {
                    resultPosition = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Position, this);
                }
                else
                {
                    resultPosition = null;
                }
                mappingObject.Position = new Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeePositionSimpleDTO>(resultPosition);
            }
            else
            {
                mappingObject.Position = Framework.Core.Maybe<WorkflowSampleSystem.Generated.DTO.EmployeePositionSimpleDTO>.Nothing;
            }
            if (!object.ReferenceEquals(domainObject.Ppm, null))
            {
                mappingObject.Ppm = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Ppm, this);
            }
            else
            {
                mappingObject.Ppm = null;
            }
            if (!object.ReferenceEquals(domainObject.RegistrationType, null))
            {
                mappingObject.RegistrationType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.RegistrationType, this);
            }
            else
            {
                mappingObject.RegistrationType = null;
            }
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
            if (!object.ReferenceEquals(domainObject.RoleDegree, null))
            {
                mappingObject.RoleDegree = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.RoleDegree, this);
            }
            else
            {
                mappingObject.RoleDegree = null;
            }
            if (!object.ReferenceEquals(domainObject.VacationApprover, null))
            {
                mappingObject.VacationApprover = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.VacationApprover, this);
            }
            else
            {
                mappingObject.VacationApprover = null;
            }
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRichDTO mappingObject)
        {
            mappingObject.CellPhones = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.CellPhones, this);
            mappingObject.EmployeeToEmployeeLinks = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.EmployeeToEmployeeLinks, this);
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePersonalCellPhoneView).HasAccess(domainObject))
            {
                System.Collections.Generic.List<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO> resultPersonalCellPhones;
                resultPersonalCellPhones = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.PersonalCellPhones, this);
                mappingObject.PersonalCellPhones = new Framework.Core.Just<System.Collections.Generic.List<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO>>(resultPersonalCellPhones);
            }
            else
            {
                mappingObject.PersonalCellPhones = Framework.Core.Maybe<System.Collections.Generic.List<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO>>.Nothing;
            }
            mappingObject.Specializations = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Specializations, this);
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Age = mappingObject.Age;
            domainObject.BirthDate = mappingObject.BirthDate;
            domainObject.CanBePPM = mappingObject.CanBePPM;
            if (!object.ReferenceEquals(mappingObject.CellPhones, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO, WorkflowSampleSystem.Domain.EmployeeCellPhone>(detailDTO => this.ToEmployeeCellPhone(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeCellPhone>(domainObject, detail)).Map(mappingObject.CellPhones, domainObject.CellPhones);
            }
            domainObject.EducationDuration = mappingObject.EducationDuration;
            domainObject.Email = mappingObject.Email;
            if (!object.ReferenceEquals(mappingObject.EmployeeToEmployeeLinks, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(detailDTO => this.ToEmployeeToEmployeeLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(domainObject, detail)).Map(mappingObject.EmployeeToEmployeeLinks, domainObject.EmployeeToEmployeeLinks);
            }
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.Gender = mappingObject.Gender;
            domainObject.Interphone = mappingObject.Interphone;
            domainObject.Landlinephone = mappingObject.Landlinephone;
            domainObject.LastActionDate = mappingObject.LastActionDate;
            domainObject.NameEng = mappingObject.NameEng;
            domainObject.NameNative = mappingObject.NameNative;
            domainObject.NameRussian = mappingObject.NameRussian;
            domainObject.NonValidateVirtualProp = mappingObject.NonValidateVirtualProp;
            domainObject.Pin = mappingObject.Pin;
            domainObject.PlannedHireDate = mappingObject.PlannedHireDate;
            if (!object.Equals(mappingObject.Ppm, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Ppm = this.ToEmployee(mappingObject.Ppm);
            }
            else
            {
                domainObject.Ppm = null;
            }
            if (!object.Equals(mappingObject.RegistrationType, default(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO)))
            {
                domainObject.RegistrationType = this.ToEmployeeRegistrationType(mappingObject.RegistrationType);
            }
            else
            {
                domainObject.RegistrationType = null;
            }
            if (!object.Equals(mappingObject.Role, default(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIdentityDTO)))
            {
                domainObject.Role = this.ToEmployeeRole(mappingObject.Role);
            }
            else
            {
                domainObject.Role = null;
            }
            if (!object.Equals(mappingObject.RoleDegree, default(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO)))
            {
                domainObject.RoleDegree = this.ToEmployeeRoleDegree(mappingObject.RoleDegree);
            }
            else
            {
                domainObject.RoleDegree = null;
            }
            if (!object.ReferenceEquals(mappingObject.Specializations, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(detailDTO => this.ToEmployeeAndEmployeeSpecializationLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(domainObject, detail)).Map(mappingObject.Specializations, domainObject.Specializations);
            }
            if (!object.Equals(mappingObject.VacationApprover, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.VacationApprover = this.ToEmployee(mappingObject.VacationApprover);
            }
            else
            {
                domainObject.VacationApprover = null;
            }
            domainObject.ValidateVirtualProp = mappingObject.ValidateVirtualProp;
            domainObject.WorkPeriod = mappingObject.WorkPeriod;
            Framework.Core.Just<string> justLogin = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Login);
            if (!object.ReferenceEquals(justLogin, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeeEdit).HasAccess(domainObject))
                {
                    domainObject.Login = justLogin.Value;
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"Login\" denied");
                }
            }
            Framework.Core.Just<System.Collections.Generic.List<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO>> justPersonalCellPhones = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Collections.Generic.List<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO>>>(mappingObject.PersonalCellPhones);
            if (!object.ReferenceEquals(justPersonalCellPhones, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePersonalCellPhoneEdit).HasAccess(domainObject))
                {
                    if (!object.ReferenceEquals(justPersonalCellPhones.Value, null))
                    {
                        this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(detailDTO => this.ToEmployeePersonalCellPhone(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(domainObject, detail)).Map(justPersonalCellPhones.Value, domainObject.PersonalCellPhones);
                    }
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"PersonalCellPhones\" denied");
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO> justPosition = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO>>(mappingObject.Position);
            if (!object.ReferenceEquals(justPosition, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePositionEdit).HasAccess(domainObject))
                {
                    if (!object.Equals(justPosition.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO)))
                    {
                        domainObject.Position = this.ToEmployeePosition(justPosition.Value);
                    }
                    else
                    {
                        domainObject.Position = null;
                    }
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"Position\" denied");
                }
            }
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.CellPhones, null))
            {
                this.GetUpdateCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIdentityDTO, WorkflowSampleSystem.Domain.EmployeeCellPhone>(detailDTO => this.ToEmployeeCellPhone(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeCellPhone>(domainObject, detail)).Map(mappingObject.CellPhones, domainObject.CellPhones);
            }
            if (!object.ReferenceEquals(mappingObject.EmployeeToEmployeeLinks, null))
            {
                this.GetUpdateCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIdentityDTO, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(detailDTO => this.ToEmployeeToEmployeeLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(domainObject, detail)).Map(mappingObject.EmployeeToEmployeeLinks, domainObject.EmployeeToEmployeeLinks);
            }
            if (!object.ReferenceEquals(mappingObject.PersonalCellPhones, null))
            {
                this.GetUpdateCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneIdentityDTO, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(detailDTO => this.ToEmployeePersonalCellPhone(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(domainObject, detail)).Map(mappingObject.PersonalCellPhones, domainObject.PersonalCellPhones);
            }
            if (!object.ReferenceEquals(mappingObject.Specializations, null))
            {
                this.GetUpdateCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIdentityDTO, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(detailDTO => this.ToEmployeeAndEmployeeSpecializationLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(domainObject, detail)).Map(mappingObject.Specializations, domainObject.Specializations);
            }
            Framework.Core.Just<int> justAge = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<int>>(mappingObject.Age);
            if (!object.ReferenceEquals(justAge, null))
            {
                domainObject.Age = justAge.Value;
            }
            Framework.Core.Just<System.DateTime?> justBirthDate = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.DateTime?>>(mappingObject.BirthDate);
            if (!object.ReferenceEquals(justBirthDate, null))
            {
                domainObject.BirthDate = justBirthDate.Value;
            }
            Framework.Core.Just<bool> justCanBePPM = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<bool>>(mappingObject.CanBePPM);
            if (!object.ReferenceEquals(justCanBePPM, null))
            {
                domainObject.CanBePPM = justCanBePPM.Value;
            }
            Framework.Core.Just<Framework.Core.Period> justEducationDuration = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<Framework.Core.Period>>(mappingObject.EducationDuration);
            if (!object.ReferenceEquals(justEducationDuration, null))
            {
                domainObject.EducationDuration = justEducationDuration.Value;
            }
            Framework.Core.Just<string> justEmail = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Email);
            if (!object.ReferenceEquals(justEmail, null))
            {
                domainObject.Email = justEmail.Value;
            }
            Framework.Core.Just<long> justExternalId = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<long>>(mappingObject.ExternalId);
            if (!object.ReferenceEquals(justExternalId, null))
            {
                domainObject.ExternalId = justExternalId.Value;
            }
            Framework.Core.Just<WorkflowSampleSystem.Domain.Enums.Gender> justGender = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Domain.Enums.Gender>>(mappingObject.Gender);
            if (!object.ReferenceEquals(justGender, null))
            {
                domainObject.Gender = justGender.Value;
            }
            Framework.Core.Just<string> justInterphone = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Interphone);
            if (!object.ReferenceEquals(justInterphone, null))
            {
                domainObject.Interphone = justInterphone.Value;
            }
            Framework.Core.Just<string> justLandlinephone = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Landlinephone);
            if (!object.ReferenceEquals(justLandlinephone, null))
            {
                domainObject.Landlinephone = justLandlinephone.Value;
            }
            Framework.Core.Just<System.DateTime?> justLastActionDate = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.DateTime?>>(mappingObject.LastActionDate);
            if (!object.ReferenceEquals(justLastActionDate, null))
            {
                domainObject.LastActionDate = justLastActionDate.Value;
            }
            Framework.Core.Just<string> justLogin = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Login);
            if (!object.ReferenceEquals(justLogin, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeeEdit).HasAccess(domainObject))
                {
                    domainObject.Login = justLogin.Value;
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"Login\" denied");
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Domain.Inline.FioShort> justNameEng = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Domain.Inline.FioShort>>(mappingObject.NameEng);
            if (!object.ReferenceEquals(justNameEng, null))
            {
                domainObject.NameEng = justNameEng.Value;
            }
            Framework.Core.Just<WorkflowSampleSystem.Domain.Inline.Fio> justNameNative = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Domain.Inline.Fio>>(mappingObject.NameNative);
            if (!object.ReferenceEquals(justNameNative, null))
            {
                domainObject.NameNative = justNameNative.Value;
            }
            Framework.Core.Just<WorkflowSampleSystem.Domain.Inline.Fio> justNameRussian = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Domain.Inline.Fio>>(mappingObject.NameRussian);
            if (!object.ReferenceEquals(justNameRussian, null))
            {
                domainObject.NameRussian = justNameRussian.Value;
            }
            Framework.Core.Just<System.DateTime> justNonValidateVirtualProp = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.DateTime>>(mappingObject.NonValidateVirtualProp);
            if (!object.ReferenceEquals(justNonValidateVirtualProp, null))
            {
                domainObject.NonValidateVirtualProp = justNonValidateVirtualProp.Value;
            }
            Framework.Core.Just<int?> justPin = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<int?>>(mappingObject.Pin);
            if (!object.ReferenceEquals(justPin, null))
            {
                domainObject.Pin = justPin.Value;
            }
            Framework.Core.Just<System.DateTime?> justPlannedHireDate = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.DateTime?>>(mappingObject.PlannedHireDate);
            if (!object.ReferenceEquals(justPlannedHireDate, null))
            {
                domainObject.PlannedHireDate = justPlannedHireDate.Value;
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO> justPosition = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO>>(mappingObject.Position);
            if (!object.ReferenceEquals(justPosition, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Employee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePositionEdit).HasAccess(domainObject))
                {
                    if (!object.Equals(justPosition.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO)))
                    {
                        domainObject.Position = this.ToEmployeePosition(justPosition.Value);
                    }
                    else
                    {
                        domainObject.Position = null;
                    }
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"Position\" denied");
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO> justPpm = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO>>(mappingObject.Ppm);
            if (!object.ReferenceEquals(justPpm, null))
            {
                if (!object.Equals(justPpm.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
                {
                    domainObject.Ppm = this.ToEmployee(justPpm.Value);
                }
                else
                {
                    domainObject.Ppm = null;
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO> justRegistrationType = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO>>(mappingObject.RegistrationType);
            if (!object.ReferenceEquals(justRegistrationType, null))
            {
                if (!object.Equals(justRegistrationType.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO)))
                {
                    domainObject.RegistrationType = this.ToEmployeeRegistrationType(justRegistrationType.Value);
                }
                else
                {
                    domainObject.RegistrationType = null;
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeRoleIdentityDTO> justRole = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeRoleIdentityDTO>>(mappingObject.Role);
            if (!object.ReferenceEquals(justRole, null))
            {
                if (!object.Equals(justRole.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIdentityDTO)))
                {
                    domainObject.Role = this.ToEmployeeRole(justRole.Value);
                }
                else
                {
                    domainObject.Role = null;
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO> justRoleDegree = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO>>(mappingObject.RoleDegree);
            if (!object.ReferenceEquals(justRoleDegree, null))
            {
                if (!object.Equals(justRoleDegree.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO)))
                {
                    domainObject.RoleDegree = this.ToEmployeeRoleDegree(justRoleDegree.Value);
                }
                else
                {
                    domainObject.RoleDegree = null;
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO> justVacationApprover = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO>>(mappingObject.VacationApprover);
            if (!object.ReferenceEquals(justVacationApprover, null))
            {
                if (!object.Equals(justVacationApprover.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
                {
                    domainObject.VacationApprover = this.ToEmployee(justVacationApprover.Value);
                }
                else
                {
                    domainObject.VacationApprover = null;
                }
            }
            Framework.Core.Just<System.DateTime> justValidateVirtualProp = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.DateTime>>(mappingObject.ValidateVirtualProp);
            if (!object.ReferenceEquals(justValidateVirtualProp, null))
            {
                domainObject.ValidateVirtualProp = justValidateVirtualProp.Value;
            }
            Framework.Core.Just<Framework.Core.Period> justWorkPeriod = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<Framework.Core.Period>>(mappingObject.WorkPeriod);
            if (!object.ReferenceEquals(justWorkPeriod, null))
            {
                domainObject.WorkPeriod = justWorkPeriod.Value;
            }
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO mappingObject)
        {
            mappingObject.AccountName = domainObject.AccountName;
            mappingObject.Active = domainObject.Active;
            mappingObject.Age = domainObject.Age;
            mappingObject.BirthDate = domainObject.BirthDate;
            mappingObject.CanBePPM = domainObject.CanBePPM;
            mappingObject.CellPhone = domainObject.CellPhone;
            mappingObject.CellPhones = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichIntegrationDTOList(domainObject.CellPhones, this);
            if (!object.ReferenceEquals(domainObject.CompanyLegalEntity, null))
            {
                mappingObject.CompanyLegalEntity = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.CompanyLegalEntity, this);
            }
            else
            {
                mappingObject.CompanyLegalEntity = null;
            }
            if (!object.ReferenceEquals(domainObject.CoreBusinessUnit, null))
            {
                mappingObject.CoreBusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.CoreBusinessUnit, this);
            }
            else
            {
                mappingObject.CoreBusinessUnit = null;
            }
            mappingObject.CoreBusinessUnitPeriod = domainObject.CoreBusinessUnitPeriod;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.DismissDate = domainObject.DismissDate;
            mappingObject.EducationDuration = domainObject.EducationDuration;
            mappingObject.Email = domainObject.Email;
            mappingObject.EmployeeToEmployeeLinks = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichIntegrationDTOList(domainObject.EmployeeToEmployeeLinks, this);
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Gender = domainObject.Gender;
            mappingObject.HireDate = domainObject.HireDate;
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.Interphone = domainObject.Interphone;
            mappingObject.IsCandidate = domainObject.IsCandidate;
            mappingObject.Landlinephone = domainObject.Landlinephone;
            mappingObject.LastActionDate = domainObject.LastActionDate;
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.LocationCode = domainObject.LocationCode;
            mappingObject.Login = domainObject.Login;
            mappingObject.LogonName = domainObject.LogonName;
            mappingObject.MailAccountName = domainObject.MailAccountName;
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NameEng = domainObject.NameEng;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.NameRussian = domainObject.NameRussian;
            mappingObject.NonValidateVirtualProp = domainObject.NonValidateVirtualProp;
            if (!object.ReferenceEquals(domainObject.PersonalAssistant, null))
            {
                mappingObject.PersonalAssistant = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.PersonalAssistant, this);
            }
            else
            {
                mappingObject.PersonalAssistant = null;
            }
            mappingObject.Pin = domainObject.Pin;
            mappingObject.PlannedHireDate = domainObject.PlannedHireDate;
            if (!object.ReferenceEquals(domainObject.Position, null))
            {
                mappingObject.Position = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Position, this);
            }
            else
            {
                mappingObject.Position = null;
            }
            if (!object.ReferenceEquals(domainObject.Ppm, null))
            {
                mappingObject.Ppm = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Ppm, this);
            }
            else
            {
                mappingObject.Ppm = null;
            }
            if (!object.ReferenceEquals(domainObject.RegistrationType, null))
            {
                mappingObject.RegistrationType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.RegistrationType, this);
            }
            else
            {
                mappingObject.RegistrationType = null;
            }
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
            if (!object.ReferenceEquals(domainObject.RoleDegree, null))
            {
                mappingObject.RoleDegree = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.RoleDegree, this);
            }
            else
            {
                mappingObject.RoleDegree = null;
            }
            mappingObject.Specializations = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichIntegrationDTOList(domainObject.Specializations, this);
            if (!object.ReferenceEquals(domainObject.VacationApprover, null))
            {
                mappingObject.VacationApprover = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.VacationApprover, this);
            }
            else
            {
                mappingObject.VacationApprover = null;
            }
            mappingObject.ValidateVirtualProp = domainObject.ValidateVirtualProp;
            mappingObject.WorkPeriod = domainObject.WorkPeriod;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject)
        {
            domainObject.Age = mappingObject.Age;
            domainObject.BirthDate = mappingObject.BirthDate;
            domainObject.CanBePPM = mappingObject.CanBePPM;
            if (!object.ReferenceEquals(mappingObject.CellPhones, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeCellPhone>(detailDTO => this.ToEmployeeCellPhone(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeCellPhone>(domainObject, detail)).Map(mappingObject.CellPhones, domainObject.CellPhones);
            }
            domainObject.EducationDuration = mappingObject.EducationDuration;
            domainObject.Email = mappingObject.Email;
            if (!object.ReferenceEquals(mappingObject.EmployeeToEmployeeLinks, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(detailDTO => this.ToEmployeeToEmployeeLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(domainObject, detail)).Map(mappingObject.EmployeeToEmployeeLinks, domainObject.EmployeeToEmployeeLinks);
            }
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.Gender = mappingObject.Gender;
            domainObject.Interphone = mappingObject.Interphone;
            domainObject.Landlinephone = mappingObject.Landlinephone;
            domainObject.LastActionDate = mappingObject.LastActionDate;
            domainObject.Login = mappingObject.Login;
            domainObject.NameEng = mappingObject.NameEng;
            domainObject.NameNative = mappingObject.NameNative;
            domainObject.NameRussian = mappingObject.NameRussian;
            domainObject.NonValidateVirtualProp = mappingObject.NonValidateVirtualProp;
            domainObject.Pin = mappingObject.Pin;
            domainObject.PlannedHireDate = mappingObject.PlannedHireDate;
            if (!object.Equals(mappingObject.Position, default(WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO)))
            {
                domainObject.Position = this.ToEmployeePosition(mappingObject.Position);
            }
            else
            {
                domainObject.Position = null;
            }
            if (!object.Equals(mappingObject.Ppm, default(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO)))
            {
                domainObject.Ppm = this.ToEmployee(mappingObject.Ppm);
            }
            else
            {
                domainObject.Ppm = null;
            }
            if (!object.Equals(mappingObject.RegistrationType, default(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO)))
            {
                domainObject.RegistrationType = this.ToEmployeeRegistrationType(mappingObject.RegistrationType);
            }
            else
            {
                domainObject.RegistrationType = null;
            }
            if (!object.Equals(mappingObject.Role, default(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO)))
            {
                domainObject.Role = this.ToEmployeeRole(mappingObject.Role);
            }
            else
            {
                domainObject.Role = null;
            }
            if (!object.Equals(mappingObject.RoleDegree, default(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO)))
            {
                domainObject.RoleDegree = this.ToEmployeeRoleDegree(mappingObject.RoleDegree);
            }
            else
            {
                domainObject.RoleDegree = null;
            }
            if (!object.ReferenceEquals(mappingObject.Specializations, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(detailDTO => this.ToEmployeeAndEmployeeSpecializationLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Employee, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(domainObject, detail)).Map(mappingObject.Specializations, domainObject.Specializations);
            }
            if (!object.Equals(mappingObject.VacationApprover, default(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO)))
            {
                domainObject.VacationApprover = this.ToEmployee(mappingObject.VacationApprover);
            }
            else
            {
                domainObject.VacationApprover = null;
            }
            domainObject.ValidateVirtualProp = mappingObject.ValidateVirtualProp;
            domainObject.WorkPeriod = mappingObject.WorkPeriod;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO mappingObject)
        {
            mappingObject.AccountName = domainObject.AccountName;
            mappingObject.Active = domainObject.Active;
            mappingObject.Age = domainObject.Age;
            mappingObject.BirthDate = domainObject.BirthDate;
            mappingObject.CanBePPM = domainObject.CanBePPM;
            mappingObject.CellPhone = domainObject.CellPhone;
            mappingObject.CoreBusinessUnitPeriod = domainObject.CoreBusinessUnitPeriod;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.DismissDate = domainObject.DismissDate;
            mappingObject.EducationDuration = domainObject.EducationDuration;
            mappingObject.Email = domainObject.Email;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Gender = domainObject.Gender;
            mappingObject.HireDate = domainObject.HireDate;
            mappingObject.Id = domainObject.Id;
            mappingObject.Interphone = domainObject.Interphone;
            mappingObject.IsCandidate = domainObject.IsCandidate;
            mappingObject.Landlinephone = domainObject.Landlinephone;
            mappingObject.LastActionDate = domainObject.LastActionDate;
            mappingObject.LocationCode = domainObject.LocationCode;
            mappingObject.Login = domainObject.Login;
            mappingObject.LogonName = domainObject.LogonName;
            mappingObject.MailAccountName = domainObject.MailAccountName;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NameEng = domainObject.NameEng;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.NameRussian = domainObject.NameRussian;
            mappingObject.NonValidateVirtualProp = domainObject.NonValidateVirtualProp;
            mappingObject.Pin = domainObject.Pin;
            mappingObject.PlannedHireDate = domainObject.PlannedHireDate;
            mappingObject.ValidateVirtualProp = domainObject.ValidateVirtualProp;
            mappingObject.WorkPeriod = domainObject.WorkPeriod;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.Employee domainObject)
        {
            domainObject.Age = mappingObject.Age;
            domainObject.BirthDate = mappingObject.BirthDate;
            domainObject.CanBePPM = mappingObject.CanBePPM;
            domainObject.EducationDuration = mappingObject.EducationDuration;
            domainObject.Email = mappingObject.Email;
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.Gender = mappingObject.Gender;
            domainObject.Interphone = mappingObject.Interphone;
            domainObject.Landlinephone = mappingObject.Landlinephone;
            domainObject.LastActionDate = mappingObject.LastActionDate;
            domainObject.Login = mappingObject.Login;
            domainObject.NameEng = mappingObject.NameEng;
            domainObject.NameNative = mappingObject.NameNative;
            domainObject.NameRussian = mappingObject.NameRussian;
            domainObject.NonValidateVirtualProp = mappingObject.NonValidateVirtualProp;
            domainObject.Pin = mappingObject.Pin;
            domainObject.PlannedHireDate = mappingObject.PlannedHireDate;
            domainObject.ValidateVirtualProp = mappingObject.ValidateVirtualProp;
            domainObject.WorkPeriod = mappingObject.WorkPeriod;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEventRichDTO mappingObject)
        {
            mappingObject.AccountName = domainObject.AccountName;
            mappingObject.Active = domainObject.Active;
            mappingObject.Age = domainObject.Age;
            mappingObject.BirthDate = domainObject.BirthDate;
            mappingObject.CanBePPM = domainObject.CanBePPM;
            mappingObject.CellPhone = domainObject.CellPhone;
            mappingObject.CellPhones = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.CellPhones, this);
            if (!object.ReferenceEquals(domainObject.CompanyLegalEntity, null))
            {
                mappingObject.CompanyLegalEntity = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.CompanyLegalEntity, this);
            }
            else
            {
                mappingObject.CompanyLegalEntity = null;
            }
            if (!object.ReferenceEquals(domainObject.CoreBusinessUnit, null))
            {
                mappingObject.CoreBusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.CoreBusinessUnit, this);
            }
            else
            {
                mappingObject.CoreBusinessUnit = null;
            }
            mappingObject.CoreBusinessUnitPeriod = domainObject.CoreBusinessUnitPeriod;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.DismissDate = domainObject.DismissDate;
            mappingObject.EducationDuration = domainObject.EducationDuration;
            mappingObject.Email = domainObject.Email;
            mappingObject.EmployeeToEmployeeLinks = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.EmployeeToEmployeeLinks, this);
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Gender = domainObject.Gender;
            mappingObject.HireDate = domainObject.HireDate;
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.Interphone = domainObject.Interphone;
            mappingObject.IsCandidate = domainObject.IsCandidate;
            mappingObject.Landlinephone = domainObject.Landlinephone;
            mappingObject.LastActionDate = domainObject.LastActionDate;
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.LocationCode = domainObject.LocationCode;
            mappingObject.Login = domainObject.Login;
            mappingObject.LogonName = domainObject.LogonName;
            mappingObject.MailAccountName = domainObject.MailAccountName;
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NameEng = domainObject.NameEng;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.NameRussian = domainObject.NameRussian;
            mappingObject.NonValidateVirtualProp = domainObject.NonValidateVirtualProp;
            if (!object.ReferenceEquals(domainObject.PersonalAssistant, null))
            {
                mappingObject.PersonalAssistant = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.PersonalAssistant, this);
            }
            else
            {
                mappingObject.PersonalAssistant = null;
            }
            mappingObject.Pin = domainObject.Pin;
            mappingObject.PlannedHireDate = domainObject.PlannedHireDate;
            if (!object.ReferenceEquals(domainObject.Position, null))
            {
                mappingObject.Position = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Position, this);
            }
            else
            {
                mappingObject.Position = null;
            }
            if (!object.ReferenceEquals(domainObject.Ppm, null))
            {
                mappingObject.Ppm = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Ppm, this);
            }
            else
            {
                mappingObject.Ppm = null;
            }
            if (!object.ReferenceEquals(domainObject.RegistrationType, null))
            {
                mappingObject.RegistrationType = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.RegistrationType, this);
            }
            else
            {
                mappingObject.RegistrationType = null;
            }
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
            if (!object.ReferenceEquals(domainObject.RoleDegree, null))
            {
                mappingObject.RoleDegree = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.RoleDegree, this);
            }
            else
            {
                mappingObject.RoleDegree = null;
            }
            mappingObject.Specializations = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Specializations, this);
            if (!object.ReferenceEquals(domainObject.VacationApprover, null))
            {
                mappingObject.VacationApprover = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.VacationApprover, this);
            }
            else
            {
                mappingObject.VacationApprover = null;
            }
            mappingObject.ValidateVirtualProp = domainObject.ValidateVirtualProp;
            mappingObject.Version = domainObject.Version;
            mappingObject.WorkPeriod = domainObject.WorkPeriod;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Domain.Employee domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEventSimpleDTO mappingObject)
        {
            mappingObject.AccountName = domainObject.AccountName;
            mappingObject.Active = domainObject.Active;
            mappingObject.Age = domainObject.Age;
            mappingObject.BirthDate = domainObject.BirthDate;
            mappingObject.CanBePPM = domainObject.CanBePPM;
            mappingObject.CellPhone = domainObject.CellPhone;
            mappingObject.CoreBusinessUnitPeriod = domainObject.CoreBusinessUnitPeriod;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.DismissDate = domainObject.DismissDate;
            mappingObject.EducationDuration = domainObject.EducationDuration;
            mappingObject.Email = domainObject.Email;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Gender = domainObject.Gender;
            mappingObject.HireDate = domainObject.HireDate;
            mappingObject.Id = domainObject.Id;
            mappingObject.Interphone = domainObject.Interphone;
            mappingObject.IsCandidate = domainObject.IsCandidate;
            mappingObject.Landlinephone = domainObject.Landlinephone;
            mappingObject.LastActionDate = domainObject.LastActionDate;
            mappingObject.LocationCode = domainObject.LocationCode;
            mappingObject.Login = domainObject.Login;
            mappingObject.LogonName = domainObject.LogonName;
            mappingObject.MailAccountName = domainObject.MailAccountName;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NameEng = domainObject.NameEng;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.NameRussian = domainObject.NameRussian;
            mappingObject.NonValidateVirtualProp = domainObject.NonValidateVirtualProp;
            mappingObject.Pin = domainObject.Pin;
            mappingObject.PlannedHireDate = domainObject.PlannedHireDate;
            mappingObject.ValidateVirtualProp = domainObject.ValidateVirtualProp;
            mappingObject.Version = domainObject.Version;
            mappingObject.WorkPeriod = domainObject.WorkPeriod;
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            if (!object.ReferenceEquals(domainObject.Specialization, null))
            {
                mappingObject.Specialization = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Specialization, this);
            }
            else
            {
                mappingObject.Specialization = null;
            }
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Employee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Employee = this.ToEmployee(mappingObject.Employee);
            }
            else
            {
                domainObject.Employee = null;
            }
            if (!object.Equals(mappingObject.Specialization, default(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO)))
            {
                domainObject.Specialization = this.ToEmployeeSpecialization(mappingObject.Specialization);
            }
            else
            {
                domainObject.Specialization = null;
            }
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO> justEmployee = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO>>(mappingObject.Employee);
            if (!object.ReferenceEquals(justEmployee, null))
            {
                if (!object.Equals(justEmployee.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
                {
                    domainObject.Employee = this.ToEmployee(justEmployee.Value);
                }
                else
                {
                    domainObject.Employee = null;
                }
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO> justSpecialization = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO>>(mappingObject.Specialization);
            if (!object.ReferenceEquals(justSpecialization, null))
            {
                if (!object.Equals(justSpecialization.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO)))
                {
                    domainObject.Specialization = this.ToEmployeeSpecialization(justSpecialization.Value);
                }
                else
                {
                    domainObject.Specialization = null;
                }
            }
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Specialization, null))
            {
                mappingObject.Specialization = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Specialization, this);
            }
            else
            {
                mappingObject.Specialization = null;
            }
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject)
        {
            if (!object.Equals(mappingObject.Employee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO)))
            {
                domainObject.Employee = this.ToEmployee(mappingObject.Employee);
            }
            else
            {
                domainObject.Employee = null;
            }
            if (!object.Equals(mappingObject.Specialization, default(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO)))
            {
                domainObject.Specialization = this.ToEmployeeSpecialization(mappingObject.Specialization);
            }
            else
            {
                domainObject.Specialization = null;
            }
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Specialization, null))
            {
                mappingObject.Specialization = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Specialization, this);
            }
            else
            {
                mappingObject.Specialization = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneSimpleDTO mappingObject)
        {
            mappingObject.CityCode = domainObject.CityCode;
            mappingObject.CountryCode = domainObject.CountryCode;
            mappingObject.FullNumber = domainObject.FullNumber;
            mappingObject.Number = domainObject.Number;
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.CityCode = mappingObject.CityCode;
            domainObject.CountryCode = mappingObject.CountryCode;
            domainObject.Number = mappingObject.Number;
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            Framework.Core.Just<string> justCityCode = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.CityCode);
            if (!object.ReferenceEquals(justCityCode, null))
            {
                domainObject.CityCode = justCityCode.Value;
            }
            Framework.Core.Just<string> justCountryCode = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.CountryCode);
            if (!object.ReferenceEquals(justCountryCode, null))
            {
                domainObject.CountryCode = justCountryCode.Value;
            }
            Framework.Core.Just<string> justNumber = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Number);
            if (!object.ReferenceEquals(justNumber, null))
            {
                domainObject.Number = justNumber.Value;
            }
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CityCode = domainObject.CityCode;
            mappingObject.CountryCode = domainObject.CountryCode;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.FullNumber = domainObject.FullNumber;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Number = domainObject.Number;
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject)
        {
            domainObject.CityCode = mappingObject.CityCode;
            domainObject.CountryCode = mappingObject.CountryCode;
            domainObject.Number = mappingObject.Number;
        }
        
        public virtual void MapEmployeeCellPhone(WorkflowSampleSystem.Domain.EmployeeCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CityCode = domainObject.CityCode;
            mappingObject.CountryCode = domainObject.CountryCode;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.FullNumber = domainObject.FullNumber;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Number = domainObject.Number;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeCellPhoneBase(WorkflowSampleSystem.Domain.EmployeeCellPhoneBase domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneBaseEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CityCode = domainObject.CityCode;
            mappingObject.CountryCode = domainObject.CountryCode;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.FullNumber = domainObject.FullNumber;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Number = domainObject.Number;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeComplexChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeComplexChangeModel domainObject)
        {
            domainObject.Email = mappingObject.Email;
            if (!object.Equals(mappingObject.PrimaryChangingObject, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.PrimaryChangingObject = this.ToEmployee(mappingObject.PrimaryChangingObject);
            }
            else
            {
                domainObject.PrimaryChangingObject = null;
            }
            if (!object.ReferenceEquals(mappingObject.SecondaryChangingObjects, null))
            {
                domainObject.SecondaryChangingObjects = Framework.Core.EnumerableExtensions.ToList(mappingObject.SecondaryChangingObjects, v => this.ToEmployee(v));
            }
        }
        
        public virtual void MapEmployeeComplexChangeModel(WorkflowSampleSystem.Domain.EmployeeComplexChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelEventRichDTO mappingObject)
        {
            mappingObject.Email = domainObject.Email;
            if (!object.ReferenceEquals(domainObject.PrimaryChangingObject, null))
            {
                mappingObject.PrimaryChangingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.PrimaryChangingObject, this);
            }
            else
            {
                mappingObject.PrimaryChangingObject = null;
            }
            mappingObject.SecondaryChangingObjects = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTOList(domainObject.SecondaryChangingObjects, this);
        }
        
        public virtual void MapEmployeeCustomEventModel(WorkflowSampleSystem.Domain.EmployeeCustomEventModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCustomEventModelEventRichDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
            mappingObject.Login = domainObject.Login;
        }
        
        public virtual void MapEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.SavingObject, null))
            {
                mappingObject.SavingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject.SavingObject, this);
            }
            else
            {
                mappingObject.SavingObject = null;
            }
        }
        
        public virtual void MapEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel domainObject)
        {
            if (!object.Equals(mappingObject.SavingObject, default(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO)))
            {
                domainObject.SavingObject = this.ToEmployee(mappingObject.SavingObject, true);
            }
            else
            {
                domainObject.SavingObject = null;
            }
        }
        
        public virtual void MapEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.SavingObject, null))
            {
                mappingObject.SavingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject.SavingObject, this);
            }
            else
            {
                mappingObject.SavingObject = null;
            }
        }
        
        public virtual void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelSimpleDTO mappingObject)
        {
            mappingObject.Email = domainObject.Email;
        }
        
        public virtual void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.ChangingObject, null))
            {
                mappingObject.ChangingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ChangingObject, this);
            }
            else
            {
                mappingObject.ChangingObject = null;
            }
        }
        
        public virtual void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject)
        {
            if (!object.Equals(mappingObject.ChangingObject, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.ChangingObject = this.ToEmployee(mappingObject.ChangingObject);
            }
            else
            {
                domainObject.ChangingObject = null;
            }
            domainObject.Email = mappingObject.Email;
        }
        
        public virtual void MapEmployeeEmailChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.ChangingObject, null))
            {
                mappingObject.ChangingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ChangingObject, this);
            }
            else
            {
                mappingObject.ChangingObject = null;
            }
            mappingObject.Email = domainObject.Email;
        }
        
        public virtual void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelSimpleDTO mappingObject)
        {
            mappingObject.Email = domainObject.Email;
        }
        
        public virtual void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelFullDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelRichDTO mappingObject)
        {
            mappingObject.ChangingObjects = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTOList(domainObject.ChangingObjects, this);
        }
        
        public virtual void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.ChangingObjects, null))
            {
                domainObject.ChangingObjects = Framework.Core.EnumerableExtensions.ToList(mappingObject.ChangingObjects, v => this.ToEmployee(v));
            }
            domainObject.Email = mappingObject.Email;
        }
        
        public virtual void MapEmployeeEmailMassChangeModel(WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelEventRichDTO mappingObject)
        {
            mappingObject.ChangingObjects = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTOList(domainObject.ChangingObjects, this);
            mappingObject.Email = domainObject.Email;
        }
        
        public virtual void MapEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel domainObject)
        {
        }
        
        public virtual void MapEmployeeFilterModel(WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationSimpleDTO mappingObject)
        {
            mappingObject.Email = domainObject.Email;
            mappingObject.Name = domainObject.Name;
            mappingObject.PersonalEmail = domainObject.PersonalEmail;
        }
        
        public virtual void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationFullDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeInformation(WorkflowSampleSystem.Domain.EmployeeInformation domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeInformationEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Email = domainObject.Email;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.PersonalEmail = domainObject.PersonalEmail;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneSimpleDTO mappingObject)
        {
            mappingObject.CityCode = domainObject.CityCode;
            mappingObject.CountryCode = domainObject.CountryCode;
            mappingObject.FullNumber = domainObject.FullNumber;
            mappingObject.Number = domainObject.Number;
        }
        
        public virtual void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
        }
        
        public virtual void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.CityCode = mappingObject.CityCode;
            domainObject.CountryCode = mappingObject.CountryCode;
            domainObject.Number = mappingObject.Number;
        }
        
        public virtual void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            Framework.Core.Just<string> justCityCode = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.CityCode);
            if (!object.ReferenceEquals(justCityCode, null))
            {
                domainObject.CityCode = justCityCode.Value;
            }
            Framework.Core.Just<string> justCountryCode = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.CountryCode);
            if (!object.ReferenceEquals(justCountryCode, null))
            {
                domainObject.CountryCode = justCountryCode.Value;
            }
            Framework.Core.Just<string> justNumber = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(mappingObject.Number);
            if (!object.ReferenceEquals(justNumber, null))
            {
                domainObject.Number = justNumber.Value;
            }
        }
        
        public virtual void MapEmployeePersonalCellPhone(WorkflowSampleSystem.Domain.EmployeePersonalCellPhone domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CityCode = domainObject.CityCode;
            mappingObject.CountryCode = domainObject.CountryCode;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.FullNumber = domainObject.FullNumber;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Number = domainObject.Number;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoSimpleDTO mappingObject)
        {
            mappingObject.ContentType = domainObject.ContentType;
            mappingObject.IsDefault = domainObject.IsDefault;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
        }
        
        public virtual void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoRichDTO mappingObject)
        {
            mappingObject.Data = domainObject.Data;
        }
        
        public virtual void MapEmployeePhoto(WorkflowSampleSystem.Domain.EmployeePhoto domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePhotoEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.ContentType = domainObject.ContentType;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Data = domainObject.Data;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.IsDefault = domainObject.IsDefault;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Type = domainObject.Type;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionSimpleDTO mappingObject)
        {
            mappingObject.EnglishName = domainObject.EnglishName;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EnglishName = domainObject.EnglishName;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeePosition domainObject)
        {
            domainObject.EnglishName = mappingObject.EnglishName;
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EnglishName = domainObject.EnglishName;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeePosition(WorkflowSampleSystem.Domain.EmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.EmployeePositionEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EnglishName = domainObject.EnglishName;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeSimpleDTO mappingObject)
        {
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeFullDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject)
        {
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeRegistrationType(WorkflowSampleSystem.Domain.EmployeeRegistrationType domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeReportParameter(WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterStrictDTO mappingObject, WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter domainObject)
        {
            if (!object.Equals(mappingObject.Position, default(WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO)))
            {
                domainObject.Position = this.ToEmployeePosition(mappingObject.Position);
            }
            else
            {
                domainObject.Position = null;
            }
            domainObject.ReportId = mappingObject.ReportId;
        }
        
        public virtual void MapEmployeeReportParameter(WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Position, null))
            {
                mappingObject.Position = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Position, this);
            }
            else
            {
                mappingObject.Position = null;
            }
            mappingObject.ReportId = domainObject.ReportId;
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleFullDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRole domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeRole(WorkflowSampleSystem.Domain.EmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeFullDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeRoleDegree(WorkflowSampleSystem.Domain.EmployeeRoleDegree domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeRootFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeRootFilterModel domainObject)
        {
        }
        
        public virtual void MapEmployeeRootFilterModel(WorkflowSampleSystem.Domain.EmployeeRootFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationFullDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeSpecialization(WorkflowSampleSystem.Domain.EmployeeSpecialization domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkSimpleDTO mappingObject)
        {
            mappingObject.EmployeeLinkType = domainObject.EmployeeLinkType;
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.LinkedEmployee, null))
            {
                mappingObject.LinkedEmployee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.LinkedEmployee, this);
            }
            else
            {
                mappingObject.LinkedEmployee = null;
            }
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkRichDTO mappingObject)
        {
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.EmployeeLinkType = mappingObject.EmployeeLinkType;
            if (!object.Equals(mappingObject.LinkedEmployee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.LinkedEmployee = this.ToEmployee(mappingObject.LinkedEmployee);
            }
            else
            {
                domainObject.LinkedEmployee = null;
            }
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            Framework.Core.Just<WorkflowSampleSystem.Domain.EmployeeLinkType> justEmployeeLinkType = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Domain.EmployeeLinkType>>(mappingObject.EmployeeLinkType);
            if (!object.ReferenceEquals(justEmployeeLinkType, null))
            {
                domainObject.EmployeeLinkType = justEmployeeLinkType.Value;
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO> justLinkedEmployee = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO>>(mappingObject.LinkedEmployee);
            if (!object.ReferenceEquals(justLinkedEmployee, null))
            {
                if (!object.Equals(justLinkedEmployee.Value, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
                {
                    domainObject.LinkedEmployee = this.ToEmployee(justLinkedEmployee.Value);
                }
                else
                {
                    domainObject.LinkedEmployee = null;
                }
            }
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EmployeeLinkType = domainObject.EmployeeLinkType;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.LinkedEmployee, null))
            {
                mappingObject.LinkedEmployee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.LinkedEmployee, this);
            }
            else
            {
                mappingObject.LinkedEmployee = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject)
        {
            domainObject.EmployeeLinkType = mappingObject.EmployeeLinkType;
            if (!object.Equals(mappingObject.LinkedEmployee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO)))
            {
                domainObject.LinkedEmployee = this.ToEmployee(mappingObject.LinkedEmployee);
            }
            else
            {
                domainObject.LinkedEmployee = null;
            }
        }
        
        public virtual void MapEmployeeToEmployeeLink(WorkflowSampleSystem.Domain.EmployeeToEmployeeLink domainObject, WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EmployeeLinkType = domainObject.EmployeeLinkType;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.LinkedEmployee, null))
            {
                mappingObject.LinkedEmployee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.LinkedEmployee, this);
            }
            else
            {
                mappingObject.LinkedEmployee = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1SimpleDTO mappingObject)
        {
            mappingObject.Field1 = domainObject.Field1;
            mappingObject.Field2 = domainObject.Field2;
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Example1>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.SystemIntegration).HasAccess(domainObject))
            {
                System.Guid resultField3;
                resultField3 = domainObject.Field3;
                mappingObject.Field3 = new Framework.Core.Just<System.Guid>(resultField3);
            }
            else
            {
                mappingObject.Field3 = Framework.Core.Maybe<System.Guid>.Nothing;
            }
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1FullDTO mappingObject)
        {
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1RichDTO mappingObject)
        {
            mappingObject.Items2 = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Items2, this);
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Generated.DTO.Example1StrictDTO mappingObject, WorkflowSampleSystem.Domain.Example1 domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Field1 = mappingObject.Field1;
            domainObject.Field2 = mappingObject.Field2;
            if (!object.ReferenceEquals(mappingObject.Items2, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.Example2StrictDTO, WorkflowSampleSystem.Domain.Example2>(detailDTO => this.ToExample2(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Example1, WorkflowSampleSystem.Domain.Example2>(domainObject, detail)).Map(mappingObject.Items2, domainObject.Items2);
            }
            Framework.Core.Just<System.Guid> justField3 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(mappingObject.Field3);
            if (!object.ReferenceEquals(justField3, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Example1>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.SystemIntegration).HasAccess(domainObject))
                {
                    domainObject.Field3 = justField3.Value;
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"Field3\" denied");
                }
            }
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO mappingObject, WorkflowSampleSystem.Domain.Example1 domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.Items2, null))
            {
                this.GetUpdateCollectionMappingService<WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO, WorkflowSampleSystem.Generated.DTO.Example2IdentityDTO, WorkflowSampleSystem.Domain.Example2>(detailDTO => this.ToExample2(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.Example1, WorkflowSampleSystem.Domain.Example2>(domainObject, detail)).Map(mappingObject.Items2, domainObject.Items2);
            }
            Framework.Core.Just<System.Guid> justField1 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(mappingObject.Field1);
            if (!object.ReferenceEquals(justField1, null))
            {
                domainObject.Field1 = justField1.Value;
            }
            Framework.Core.Just<System.Guid> justField2 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(mappingObject.Field2);
            if (!object.ReferenceEquals(justField2, null))
            {
                domainObject.Field2 = justField2.Value;
            }
            Framework.Core.Just<System.Guid> justField3 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(mappingObject.Field3);
            if (!object.ReferenceEquals(justField3, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Example1>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.SystemIntegration).HasAccess(domainObject))
                {
                    domainObject.Field3 = justField3.Value;
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"Field3\" denied");
                }
            }
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Field1 = domainObject.Field1;
            mappingObject.Field2 = domainObject.Field2;
            mappingObject.Field3 = domainObject.Field3;
            mappingObject.Id = domainObject.Id;
            mappingObject.Items2 = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Items2, this);
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapExample1(WorkflowSampleSystem.Domain.Example1 domainObject, WorkflowSampleSystem.Generated.DTO.Example1EventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Field1 = domainObject.Field1;
            mappingObject.Field2 = domainObject.Field2;
            mappingObject.Field3 = domainObject.Field3;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2SimpleDTO mappingObject)
        {
            mappingObject.Field1 = domainObject.Field1;
            mappingObject.Field2 = domainObject.Field2;
        }
        
        public virtual void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2FullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2RichDTO mappingObject)
        {
        }
        
        public virtual void MapExample2(WorkflowSampleSystem.Generated.DTO.Example2StrictDTO mappingObject, WorkflowSampleSystem.Domain.Example2 domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Field1 = mappingObject.Field1;
            domainObject.Field2 = mappingObject.Field2;
        }
        
        public virtual void MapExample2(WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO mappingObject, WorkflowSampleSystem.Domain.Example2 domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            Framework.Core.Just<System.Guid> justField1 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(mappingObject.Field1);
            if (!object.ReferenceEquals(justField1, null))
            {
                domainObject.Field1 = justField1.Value;
            }
            Framework.Core.Just<System.Guid> justField2 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(mappingObject.Field2);
            if (!object.ReferenceEquals(justField2, null))
            {
                domainObject.Field2 = justField2.Value;
            }
        }
        
        public virtual void MapExample2(WorkflowSampleSystem.Domain.Example2 domainObject, WorkflowSampleSystem.Generated.DTO.Example2EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Field1 = domainObject.Field1;
            mappingObject.Field2 = domainObject.Field2;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapGuidBasedFilterModel(WorkflowSampleSystem.Domain.Models.Filters.GuidBasedFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.GuidBasedFilterModelEventRichDTO mappingObject)
        {
            mappingObject.BusinessUnits = domainObject.BusinessUnits;
            mappingObject.EmployeeIdent = domainObject.EmployeeIdent;
            mappingObject.EmployeeLocations = domainObject.EmployeeLocations;
            mappingObject.SearchFilter = domainObject.SearchFilter;
        }
        
        public virtual void MapHerBusinessUnit(WorkflowSampleSystem.Domain.Projections.HerBusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.HerBusinessUnitProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapHierarchicalBusinessUnitFilterModel(WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel domainObject)
        {
        }
        
        public virtual void MapHierarchicalBusinessUnitFilterModel(WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentSimpleDTO mappingObject)
        {
            mappingObject.Code = domainObject.Code;
            mappingObject.CodeNative = domainObject.CodeNative;
            mappingObject.CompanyLegalEntityName = domainObject.CompanyLegalEntityName;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.IsLegal = domainObject.IsLegal;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.LocationName = domainObject.LocationName;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.ApprovedBy, null))
            {
                mappingObject.ApprovedBy = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ApprovedBy, this);
            }
            else
            {
                mappingObject.ApprovedBy = null;
            }
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.HRDepartment>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.CompanyLegalEntityView).HasAccess(domainObject))
            {
                WorkflowSampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO resultCompanyLegalEntity;
                if (!object.ReferenceEquals(domainObject.CompanyLegalEntity, null))
                {
                    resultCompanyLegalEntity = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CompanyLegalEntity, this);
                }
                else
                {
                    resultCompanyLegalEntity = null;
                }
                mappingObject.CompanyLegalEntity = new Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO>(resultCompanyLegalEntity);
            }
            else
            {
                mappingObject.CompanyLegalEntity = Framework.Core.Maybe<WorkflowSampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO>.Nothing;
            }
            if (!object.ReferenceEquals(domainObject.Head, null))
            {
                mappingObject.Head = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Head, this);
            }
            else
            {
                mappingObject.Head = null;
            }
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRichDTO mappingObject)
        {
            mappingObject.BusinessUnitHrDepartments = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.BusinessUnitHrDepartments, this);
            mappingObject.Children = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Children, this);
            mappingObject.EmployeePositions = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.EmployeePositions, this);
            mappingObject.HrDepartmentRoleEmployees = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.HrDepartmentRoleEmployees, this);
            mappingObject.ManagementUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.ManagementUnits, this);
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartment domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Active = mappingObject.Active;
            if (!object.Equals(mappingObject.ApprovedBy, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.ApprovedBy = this.ToEmployee(mappingObject.ApprovedBy);
            }
            else
            {
                domainObject.ApprovedBy = null;
            }
            if (!object.ReferenceEquals(mappingObject.BusinessUnitHrDepartments, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitHrDepartment>(detailDTO => this.ToBusinessUnitHrDepartment(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.HRDepartment, WorkflowSampleSystem.Domain.BusinessUnitHrDepartment>(domainObject, detail)).Map(mappingObject.BusinessUnitHrDepartments, domainObject.BusinessUnitHrDepartments);
            }
            domainObject.Code = mappingObject.Code;
            domainObject.CodeNative = mappingObject.CodeNative;
            if (!object.ReferenceEquals(mappingObject.EmployeePositions, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO, WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition>(detailDTO => this.ToHRDepartmentEmployeePosition(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.HRDepartment, WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition>(domainObject, detail)).Map(mappingObject.EmployeePositions, domainObject.EmployeePositions);
            }
            domainObject.ExternalId = mappingObject.ExternalId;
            if (!object.Equals(mappingObject.Head, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Head = this.ToEmployee(mappingObject.Head);
            }
            else
            {
                domainObject.Head = null;
            }
            if (!object.ReferenceEquals(mappingObject.HrDepartmentRoleEmployees, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO, WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee>(detailDTO => this.ToHRDepartmentRoleEmployee(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.HRDepartment, WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee>(domainObject, detail)).Map(mappingObject.HrDepartmentRoleEmployees, domainObject.HrDepartmentRoleEmployees);
            }
            domainObject.IsLegal = mappingObject.IsLegal;
            domainObject.IsProduction = mappingObject.IsProduction;
            if (!object.ReferenceEquals(mappingObject.ManagementUnits, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(detailDTO => this.ToManagementUnitAndHRDepartmentLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.HRDepartment, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(domainObject, detail)).Map(mappingObject.ManagementUnits, domainObject.ManagementUnits);
            }
            domainObject.Name = mappingObject.Name;
            domainObject.NameNative = mappingObject.NameNative;
            if (!object.Equals(mappingObject.Parent, default(WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO)))
            {
                domainObject.Parent = this.ToHRDepartment(mappingObject.Parent);
            }
            else
            {
                domainObject.Parent = null;
            }
            Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO> justCompanyLegalEntity = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO>>(mappingObject.CompanyLegalEntity);
            if (!object.ReferenceEquals(justCompanyLegalEntity, null))
            {
                if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.HRDepartment>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.CompanyLegalEntityEdit).HasAccess(domainObject))
                {
                    if (!object.Equals(justCompanyLegalEntity.Value, default(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO)))
                    {
                        domainObject.CompanyLegalEntity = this.ToCompanyLegalEntity(justCompanyLegalEntity.Value);
                    }
                    else
                    {
                        domainObject.CompanyLegalEntity = null;
                    }
                }
                else
                {
                    throw new Framework.Exceptions.BusinessLogicException("Access for write to field \"CompanyLegalEntity\" denied");
                }
            }
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Code = domainObject.Code;
            mappingObject.CodeNative = domainObject.CodeNative;
            mappingObject.CompanyLegalEntityName = domainObject.CompanyLegalEntityName;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsLegal = domainObject.IsLegal;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.LocationName = domainObject.LocationName;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartment domainObject)
        {
            domainObject.Active = mappingObject.Active;
            domainObject.Code = mappingObject.Code;
            domainObject.CodeNative = mappingObject.CodeNative;
            domainObject.ExternalId = mappingObject.ExternalId;
            domainObject.IsLegal = mappingObject.IsLegal;
            domainObject.IsProduction = mappingObject.IsProduction;
            domainObject.Name = mappingObject.Name;
            domainObject.NameNative = mappingObject.NameNative;
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.ApprovedBy, null))
            {
                mappingObject.ApprovedBy = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ApprovedBy, this);
            }
            else
            {
                mappingObject.ApprovedBy = null;
            }
            mappingObject.BusinessUnitHrDepartments = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.BusinessUnitHrDepartments, this);
            mappingObject.Code = domainObject.Code;
            mappingObject.CodeNative = domainObject.CodeNative;
            if (!object.ReferenceEquals(domainObject.CompanyLegalEntity, null))
            {
                mappingObject.CompanyLegalEntity = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.CompanyLegalEntity, this);
            }
            else
            {
                mappingObject.CompanyLegalEntity = null;
            }
            mappingObject.CompanyLegalEntityName = domainObject.CompanyLegalEntityName;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EmployeePositions = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.EmployeePositions, this);
            mappingObject.ExternalId = domainObject.ExternalId;
            if (!object.ReferenceEquals(domainObject.Head, null))
            {
                mappingObject.Head = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Head, this);
            }
            else
            {
                mappingObject.Head = null;
            }
            mappingObject.HrDepartmentRoleEmployees = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.HrDepartmentRoleEmployees, this);
            mappingObject.Id = domainObject.Id;
            mappingObject.IsLegal = domainObject.IsLegal;
            mappingObject.IsProduction = domainObject.IsProduction;
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.LocationName = domainObject.LocationName;
            mappingObject.ManagementUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.ManagementUnits, this);
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapHRDepartment(WorkflowSampleSystem.Domain.HRDepartment domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Code = domainObject.Code;
            mappingObject.CodeNative = domainObject.CodeNative;
            mappingObject.CompanyLegalEntityName = domainObject.CompanyLegalEntityName;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsLegal = domainObject.IsLegal;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.LocationName = domainObject.LocationName;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameNative = domainObject.NameNative;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.EmployeePosition, null))
            {
                mappingObject.EmployeePosition = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.EmployeePosition, this);
            }
            else
            {
                mappingObject.EmployeePosition = null;
            }
            if (!object.ReferenceEquals(domainObject.HrDepartment, null))
            {
                mappingObject.HrDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.HrDepartment, this);
            }
            else
            {
                mappingObject.HrDepartment = null;
            }
        }
        
        public virtual void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionRichDTO mappingObject)
        {
        }
        
        public virtual void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.EmployeePosition, default(WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO)))
            {
                domainObject.EmployeePosition = this.ToEmployeePosition(mappingObject.EmployeePosition);
            }
            else
            {
                domainObject.EmployeePosition = null;
            }
            if (!object.Equals(mappingObject.HrDepartment, default(WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO)))
            {
                domainObject.HrDepartment = this.ToHRDepartment(mappingObject.HrDepartment);
            }
            else
            {
                domainObject.HrDepartment = null;
            }
        }
        
        public virtual void MapHRDepartmentEmployeePosition(WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.EmployeePosition, null))
            {
                mappingObject.EmployeePosition = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.EmployeePosition, this);
            }
            else
            {
                mappingObject.EmployeePosition = null;
            }
            if (!object.ReferenceEquals(domainObject.HrDepartment, null))
            {
                mappingObject.HrDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.HrDepartment, this);
            }
            else
            {
                mappingObject.HrDepartment = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeSimpleDTO mappingObject)
        {
            mappingObject.HRDepartmentEmployeeRoleType = domainObject.HRDepartmentEmployeeRoleType;
        }
        
        public virtual void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
        }
        
        public virtual void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeRichDTO mappingObject)
        {
        }
        
        public virtual void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO mappingObject, WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Employee, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.Employee = this.ToEmployee(mappingObject.Employee);
            }
            else
            {
                domainObject.Employee = null;
            }
            domainObject.HRDepartmentEmployeeRoleType = mappingObject.HRDepartmentEmployeeRoleType;
        }
        
        public virtual void MapHRDepartmentRoleEmployee(WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee domainObject, WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            mappingObject.HRDepartmentEmployeeRoleType = domainObject.HRDepartmentEmployeeRoleType;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestSimpleDTO mappingObject)
        {
            mappingObject.Email = domainObject.Email;
            mappingObject.Message = domainObject.Message;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestFullDTO mappingObject)
        {
        }
        
        public virtual void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.OneToOneDetail, null))
            {
                mappingObject.OneToOneDetail = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTO(domainObject.OneToOneDetail, this);
            }
            else
            {
                mappingObject.OneToOneDetail = null;
            }
        }
        
        public virtual void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Email = domainObject.Email;
            mappingObject.Id = domainObject.Id;
            mappingObject.Message = domainObject.Message;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.OneToOneDetail, null))
            {
                mappingObject.OneToOneDetail = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject.OneToOneDetail, this);
            }
            else
            {
                mappingObject.OneToOneDetail = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapIMRequest(WorkflowSampleSystem.Domain.IMRequest domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Email = domainObject.Email;
            mappingObject.Id = domainObject.Id;
            mappingObject.Message = domainObject.Message;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Request, null))
            {
                mappingObject.Request = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Request, this);
            }
            else
            {
                mappingObject.Request = null;
            }
        }
        
        public virtual void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailRichDTO mappingObject)
        {
        }
        
        public virtual void MapIMRequestDetail(WorkflowSampleSystem.Domain.IMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.IMRequestDetailEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Request, null))
            {
                mappingObject.Request = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Request, this);
            }
            else
            {
                mappingObject.Request = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationSimpleDTO mappingObject)
        {
            mappingObject.Email = domainObject.Email;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationFullDTO mappingObject)
        {
        }
        
        public virtual void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationRichDTO mappingObject)
        {
        }
        
        public virtual void MapInformation(WorkflowSampleSystem.Domain.Information domainObject, WorkflowSampleSystem.Generated.DTO.InformationEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Email = domainObject.Email;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapInsurance(WorkflowSampleSystem.Domain.Insurance domainObject, WorkflowSampleSystem.Generated.DTO.InsuranceEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Details, null))
            {
                mappingObject.Details = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject.Details, this);
            }
            else
            {
                mappingObject.Details = null;
            }
            mappingObject.DurationMonths = domainObject.DurationMonths;
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
            if (!object.ReferenceEquals(domainObject.Self, null))
            {
                mappingObject.Self = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Self, this);
            }
            else
            {
                mappingObject.Self = null;
            }
            mappingObject.TotalIncome = domainObject.TotalIncome;
            mappingObject.UseFullAnnualRemainder = domainObject.UseFullAnnualRemainder;
            mappingObject.WorkExperience = domainObject.WorkExperience;
        }
        
        public virtual void MapInsurance(WorkflowSampleSystem.Domain.Insurance domainObject, WorkflowSampleSystem.Generated.DTO.InsuranceEventSimpleDTO mappingObject)
        {
            mappingObject.DurationMonths = domainObject.DurationMonths;
            mappingObject.TotalIncome = domainObject.TotalIncome;
            mappingObject.UseFullAnnualRemainder = domainObject.UseFullAnnualRemainder;
            mappingObject.WorkExperience = domainObject.WorkExperience;
        }
        
        public virtual void MapInsuranceDetail(WorkflowSampleSystem.Domain.InsuranceDetail domainObject, WorkflowSampleSystem.Generated.DTO.InsuranceDetailEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Age = domainObject.Age;
            mappingObject.BirthDate = domainObject.BirthDate;
            mappingObject.CellPhone = domainObject.CellPhone;
            mappingObject.Cost = domainObject.Cost;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Fio = domainObject.Fio;
            mappingObject.Id = domainObject.Id;
            mappingObject.LandlinePhone = domainObject.LandlinePhone;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.RegistrationAddress = domainObject.RegistrationAddress;
            mappingObject.ResidentalAddress = domainObject.ResidentalAddress;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IntegrationVersion = domainObject.IntegrationVersion;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject)
        {
            domainObject.IntegrationVersion = mappingObject.IntegrationVersion;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IntegrationVersion = domainObject.IntegrationVersion;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject)
        {
            domainObject.IntegrationVersion = mappingObject.IntegrationVersion;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapIntegrationVersionContainer1(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1EventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO mappingObject)
        {
            mappingObject.CustomName = domainObject.CustomName;
            if (!object.ReferenceEquals(domainObject.SavingObject, null))
            {
                mappingObject.SavingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.SavingObject, this);
            }
            else
            {
                mappingObject.SavingObject = null;
            }
        }
        
        public virtual void MapIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel domainObject)
        {
            domainObject.CustomName = mappingObject.CustomName;
            if (!object.Equals(mappingObject.SavingObject, default(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO)))
            {
                domainObject.SavingObject = this.ToIntegrationVersionContainer1(mappingObject.SavingObject);
            }
            else
            {
                domainObject.SavingObject = null;
            }
        }
        
        public virtual void MapIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelEventRichDTO mappingObject)
        {
            mappingObject.CustomName = domainObject.CustomName;
            if (!object.ReferenceEquals(domainObject.SavingObject, null))
            {
                mappingObject.SavingObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.SavingObject, this);
            }
            else
            {
                mappingObject.SavingObject = null;
            }
        }
        
        public virtual void MapIntegrationVersionContainer2(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IntegrationVersion = domainObject.IntegrationVersion;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 domainObject)
        {
            domainObject.IntegrationVersion = mappingObject.IntegrationVersion;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapIntegrationVersionContainer2(WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 domainObject, WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapLegalEntityBase(WorkflowSampleSystem.Domain.LegalEntityBase domainObject, WorkflowSampleSystem.Generated.DTO.LegalEntityBaseSimpleDTO mappingObject)
        {
            mappingObject.AribaStatus = domainObject.AribaStatus;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
        }
        
        public virtual void MapLegalEntityBase(WorkflowSampleSystem.Domain.LegalEntityBase domainObject, WorkflowSampleSystem.Generated.DTO.LegalEntityBaseEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Addresses = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Addresses, this);
            mappingObject.AribaStatus = domainObject.AribaStatus;
            if (!object.ReferenceEquals(domainObject.BaseObj, null))
            {
                mappingObject.BaseObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BaseObj, this);
            }
            else
            {
                mappingObject.BaseObj = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapLegalEntityBase(WorkflowSampleSystem.Domain.LegalEntityBase domainObject, WorkflowSampleSystem.Generated.DTO.LegalEntityBaseEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.AribaStatus = domainObject.AribaStatus;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameEnglish = domainObject.NameEnglish;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationSimpleDTO mappingObject)
        {
            mappingObject.CloseDate = domainObject.CloseDate;
            mappingObject.Code = domainObject.Code;
            mappingObject.ContainsOnlyInactiveChildren = domainObject.ContainsOnlyInactiveChildren;
            mappingObject.IsFinancial = domainObject.IsFinancial;
            mappingObject.IsLeaf = domainObject.IsLeaf;
            mappingObject.LocationType = domainObject.LocationType;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Country, null))
            {
                mappingObject.Country = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Country, this);
            }
            else
            {
                mappingObject.Country = null;
            }
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationRichDTO mappingObject)
        {
            mappingObject.BinaryData = domainObject.BinaryData;
            mappingObject.Children = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Children, this);
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO mappingObject, WorkflowSampleSystem.Domain.Location domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Active = mappingObject.Active;
            domainObject.BinaryData = mappingObject.BinaryData;
            domainObject.CloseDate = mappingObject.CloseDate;
            domainObject.Code = mappingObject.Code;
            if (!object.Equals(mappingObject.Country, default(WorkflowSampleSystem.Generated.DTO.CountryIdentityDTO)))
            {
                domainObject.Country = this.ToCountry(mappingObject.Country);
            }
            else
            {
                domainObject.Country = null;
            }
            domainObject.IsFinancial = mappingObject.IsFinancial;
            domainObject.LocationType = mappingObject.LocationType;
            domainObject.Name = mappingObject.Name;
            if (!object.Equals(mappingObject.Parent, default(WorkflowSampleSystem.Generated.DTO.LocationIdentityDTO)))
            {
                domainObject.Parent = this.ToLocation(mappingObject.Parent);
            }
            else
            {
                domainObject.Parent = null;
            }
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CloseDate = domainObject.CloseDate;
            mappingObject.Code = domainObject.Code;
            mappingObject.ContainsOnlyInactiveChildren = domainObject.ContainsOnlyInactiveChildren;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsFinancial = domainObject.IsFinancial;
            mappingObject.IsLeaf = domainObject.IsLeaf;
            mappingObject.LocationType = domainObject.LocationType;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Generated.DTO.LocationIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.Location domainObject)
        {
            domainObject.Active = mappingObject.Active;
            domainObject.CloseDate = mappingObject.CloseDate;
            domainObject.Code = mappingObject.Code;
            domainObject.IsFinancial = mappingObject.IsFinancial;
            domainObject.LocationType = mappingObject.LocationType;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BinaryData = domainObject.BinaryData;
            mappingObject.Children = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Children, this);
            mappingObject.CloseDate = domainObject.CloseDate;
            mappingObject.Code = domainObject.Code;
            mappingObject.ContainsOnlyInactiveChildren = domainObject.ContainsOnlyInactiveChildren;
            if (!object.ReferenceEquals(domainObject.Country, null))
            {
                mappingObject.Country = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Country, this);
            }
            else
            {
                mappingObject.Country = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsFinancial = domainObject.IsFinancial;
            mappingObject.IsLeaf = domainObject.IsLeaf;
            mappingObject.LocationType = domainObject.LocationType;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapLocation(WorkflowSampleSystem.Domain.Location domainObject, WorkflowSampleSystem.Generated.DTO.LocationEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CloseDate = domainObject.CloseDate;
            mappingObject.Code = domainObject.Code;
            mappingObject.ContainsOnlyInactiveChildren = domainObject.ContainsOnlyInactiveChildren;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsFinancial = domainObject.IsFinancial;
            mappingObject.IsLeaf = domainObject.IsLeaf;
            mappingObject.LocationType = domainObject.LocationType;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676VisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676SimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676FullDTO mappingObject)
        {
        }
        
        public virtual void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676RichDTO mappingObject)
        {
            mappingObject.Calendar = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Calendar, this);
        }
        
        public virtual void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Calendar = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Calendar, this);
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapLocation1676(WorkflowSampleSystem.Domain.EnversBug1676.Location1676 domainObject, WorkflowSampleSystem.Generated.DTO.Location1676EventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitSimpleDTO mappingObject)
        {
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitRichDTO mappingObject)
        {
            mappingObject.BusinessUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.BusinessUnits, this);
            mappingObject.Children = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Children, this);
            mappingObject.HRDepartments = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.HRDepartments, this);
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnit domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.BusinessUnits, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(detailDTO => this.ToManagementUnitAndBusinessUnitLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.ManagementUnit, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(domainObject, detail)).Map(mappingObject.BusinessUnits, domainObject.BusinessUnits);
            }
            domainObject.BusinessUnitStatus = mappingObject.BusinessUnitStatus;
            if (!object.ReferenceEquals(mappingObject.HRDepartments, null))
            {
                this.GetCollectionMappingService<WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(detailDTO => this.ToManagementUnitAndHRDepartmentLink(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<WorkflowSampleSystem.Domain.ManagementUnit, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(domainObject, detail)).Map(mappingObject.HRDepartments, domainObject.HRDepartments);
            }
            domainObject.IsProduction = mappingObject.IsProduction;
            domainObject.Name = mappingObject.Name;
            domainObject.Period = mappingObject.Period;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitIntegrationSimpleDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnit domainObject)
        {
            domainObject.BusinessUnitStatus = mappingObject.BusinessUnitStatus;
            domainObject.IsProduction = mappingObject.IsProduction;
            domainObject.Name = mappingObject.Name;
            domainObject.Period = mappingObject.Period;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.BusinessUnits, this);
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.HRDepartments = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.HRDepartments, this);
            mappingObject.Id = domainObject.Id;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnit(WorkflowSampleSystem.Domain.ManagementUnit domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnitAncestorLink(WorkflowSampleSystem.Domain.ManagementUnitAncestorLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAncestorLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.Ancestor, null))
            {
                mappingObject.Ancestor = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Ancestor, this);
            }
            else
            {
                mappingObject.Ancestor = null;
            }
            if (!object.ReferenceEquals(domainObject.Child, null))
            {
                mappingObject.Child = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Child, this);
            }
            else
            {
                mappingObject.Child = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkSimpleDTO mappingObject)
        {
            mappingObject.EqualBU = domainObject.EqualBU;
        }
        
        public virtual void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
        }
        
        public virtual void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkRichDTO mappingObject)
        {
        }
        
        public virtual void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.BusinessUnit, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO)))
            {
                domainObject.BusinessUnit = this.ToBusinessUnit(mappingObject.BusinessUnit);
            }
            else
            {
                domainObject.BusinessUnit = null;
            }
            domainObject.EqualBU = mappingObject.EqualBU;
            if (!object.Equals(mappingObject.ManagementUnit, default(WorkflowSampleSystem.Generated.DTO.ManagementUnitIdentityDTO)))
            {
                domainObject.ManagementUnit = this.ToManagementUnit(mappingObject.ManagementUnit);
            }
            else
            {
                domainObject.ManagementUnit = null;
            }
        }
        
        public virtual void MapManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EqualBU = domainObject.EqualBU;
            mappingObject.Id = domainObject.Id;
            mappingObject.LinkedHRDepartments = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTOList(domainObject.LinkedHRDepartments, this);
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
        }
        
        public virtual void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkRichDTO mappingObject)
        {
        }
        
        public virtual void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO mappingObject, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.HRDepartment, default(WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO)))
            {
                domainObject.HRDepartment = this.ToHRDepartment(mappingObject.HRDepartment);
            }
            else
            {
                domainObject.HRDepartment = null;
            }
            if (!object.Equals(mappingObject.ManagementUnit, default(WorkflowSampleSystem.Generated.DTO.ManagementUnitIdentityDTO)))
            {
                domainObject.ManagementUnit = this.ToManagementUnit(mappingObject.ManagementUnit);
            }
            else
            {
                domainObject.ManagementUnit = null;
            }
        }
        
        public virtual void MapManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.HRDepartment, null))
            {
                mappingObject.HRDepartment = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.HRDepartment, this);
            }
            else
            {
                mappingObject.HRDepartment = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.LinkedBusinessUnits = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTOList(domainObject.LinkedBusinessUnits, this);
            if (!object.ReferenceEquals(domainObject.ManagementUnit, null))
            {
                mappingObject.ManagementUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ManagementUnit, this);
            }
            else
            {
                mappingObject.ManagementUnit = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnitFluentMapping(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingSimpleDTO mappingObject)
        {
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.MuComponent = domainObject.MuComponent;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapManagementUnitFluentMapping(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.MuComponent = domainObject.MuComponent;
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.Parent, null))
            {
                mappingObject.Parent = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Parent, this);
            }
            else
            {
                mappingObject.Parent = null;
            }
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnitFluentMapping(WorkflowSampleSystem.Domain.ManagementUnitFluentMapping domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.BusinessUnitStatus = domainObject.BusinessUnitStatus;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsProduction = domainObject.IsProduction;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.MuComponent = domainObject.MuComponent;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapManagementUnitToAncestorChildView(WorkflowSampleSystem.Domain.ManagementUnitToAncestorChildView domainObject, WorkflowSampleSystem.Generated.DTO.ManagementUnitToAncestorChildViewEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.ChildOrAncestor, null))
            {
                mappingObject.ChildOrAncestor = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ChildOrAncestor, this);
            }
            else
            {
                mappingObject.ChildOrAncestor = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Source, null))
            {
                mappingObject.Source = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Source, this);
            }
            else
            {
                mappingObject.Source = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapMiniBusinessUnitEmployeeRole(WorkflowSampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole domainObject, WorkflowSampleSystem.Generated.DTO.MiniBusinessUnitEmployeeRoleProjectionDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Employee, null))
            {
                mappingObject.Employee = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Employee, this);
            }
            else
            {
                mappingObject.Employee = null;
            }
        }
        
        public virtual void MapNamedLock(WorkflowSampleSystem.Domain.NamedLock domainObject, WorkflowSampleSystem.Generated.DTO.NamedLockEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.LockOperation = domainObject.LockOperation;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapParentEntity(WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity domainObject, WorkflowSampleSystem.Generated.DTO.ParentEntityEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapParentEntity(WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity domainObject, WorkflowSampleSystem.Generated.DTO.ParentEntityEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapPersistentDomainObjectBase(WorkflowSampleSystem.Domain.PersistentDomainObjectBase domainObject, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
        }
        
        public virtual void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalSimpleDTO mappingObject)
        {
            mappingObject.ExternalId = domainObject.ExternalId;
        }
        
        public virtual void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalFullDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalRichDTO mappingObject)
        {
        }
        
        public virtual void MapPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO mappingObject, WorkflowSampleSystem.Domain.Principal domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.ExternalId = mappingObject.ExternalId;
        }
        
        public virtual void MapPrincipal(WorkflowSampleSystem.Domain.Principal domainObject, WorkflowSampleSystem.Generated.DTO.PrincipalEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ExternalId = domainObject.ExternalId;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapProject(WorkflowSampleSystem.Domain.Project domainObject, WorkflowSampleSystem.Generated.DTO.ProjectEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.Code = domainObject.Code;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.EndDate = domainObject.EndDate;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.PlannedEndDate = domainObject.PlannedEndDate;
            mappingObject.ProjectStatus = domainObject.ProjectStatus;
            mappingObject.StartDate = domainObject.StartDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapRoleRoleDegreeLink(WorkflowSampleSystem.Domain.RoleRoleDegreeLink domainObject, WorkflowSampleSystem.Generated.DTO.RoleRoleDegreeLinkEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.AnotherRole, null))
            {
                mappingObject.AnotherRole = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.AnotherRole, this);
            }
            else
            {
                mappingObject.AnotherRole = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
            if (!object.ReferenceEquals(domainObject.RoleDegree, null))
            {
                mappingObject.RoleDegree = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.RoleDegree, this);
            }
            else
            {
                mappingObject.RoleDegree = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapSingleEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelStrictDTO mappingObject, WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel domainObject)
        {
        }
        
        public virtual void MapSingleEmployeeFilterModel(WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel domainObject, WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjSimpleDTO mappingObject)
        {
            mappingObject.NotNullColumn = domainObject.NotNullColumn;
            mappingObject.UniqueColumn = domainObject.UniqueColumn;
        }
        
        public virtual void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjFullDTO mappingObject)
        {
        }
        
        public virtual void MapSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO mappingObject, WorkflowSampleSystem.Domain.SqlParserTestObj domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.NotNullColumn = mappingObject.NotNullColumn;
            domainObject.UniqueColumn = mappingObject.UniqueColumn;
        }
        
        public virtual void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NotNullColumn = domainObject.NotNullColumn;
            mappingObject.UniqueColumn = domainObject.UniqueColumn;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapSqlParserTestObj(WorkflowSampleSystem.Domain.SqlParserTestObj domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.NotNullColumn = domainObject.NotNullColumn;
            mappingObject.UniqueColumn = domainObject.UniqueColumn;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapSqlParserTestObjContainer(WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapSqlParserTestObjContainer(WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.IncludedObject, null))
            {
                mappingObject.IncludedObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.IncludedObject, this);
            }
            else
            {
                mappingObject.IncludedObject = null;
            }
        }
        
        public virtual void MapSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO mappingObject, WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.IncludedObject, default(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjIdentityDTO)))
            {
                domainObject.IncludedObject = this.ToSqlParserTestObj(mappingObject.IncludedObject);
            }
            else
            {
                domainObject.IncludedObject = null;
            }
        }
        
        public virtual void MapSqlParserTestObjContainer(WorkflowSampleSystem.Domain.SqlParserTestObjContainer domainObject, WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.IncludedObject, null))
            {
                mappingObject.IncludedObject = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.IncludedObject, this);
            }
            else
            {
                mappingObject.IncludedObject = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestBusinessUnit(WorkflowSampleSystem.Domain.Projections.TestBusinessUnit domainObject, WorkflowSampleSystem.Generated.DTO.TestBusinessUnitProjectionDTO mappingObject)
        {
            mappingObject.CalcMatrix = domainObject.CalcMatrix;
            if (!object.ReferenceEquals(domainObject.CalcProjectionProp, null))
            {
                mappingObject.CalcProjectionProp = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.CalcProjectionProp, this);
            }
            else
            {
                mappingObject.CalcProjectionProp = null;
            }
            mappingObject.CalcProp = domainObject.CalcProp;
            mappingObject.Employees = domainObject.Employees;
            mappingObject.HerBusinessUnit_Full = domainObject.HerBusinessUnit_Full;
            mappingObject.Name = domainObject.Name;
            mappingObject.ParentPeriodStartDate = domainObject.ParentPeriodStartDate;
            mappingObject.PeriodEndDate = domainObject.PeriodEndDate;
        }
        
        public virtual void MapTestBusinessUnitType(WorkflowSampleSystem.Domain.Projections.TestBusinessUnitType domainObject, WorkflowSampleSystem.Generated.DTO.TestBusinessUnitTypeProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjFullDTO mappingObject)
        {
        }
        
        public virtual void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjRichDTO mappingObject)
        {
        }
        
        public virtual void MapTestCustomContextSecurityObj(WorkflowSampleSystem.Domain.TestCustomContextSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestCustomContextSecurityObjProjection(WorkflowSampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection domainObject, WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestDefaultFieldsMappingObj(WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj domainObject, WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjSimpleDTO mappingObject)
        {
            mappingObject.EnumVal = domainObject.EnumVal;
            mappingObject.IntVal = domainObject.IntVal;
            mappingObject.StrVal = domainObject.StrVal;
        }
        
        public virtual void MapTestDefaultFieldsMappingObj(WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO mappingObject, WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj domainObject)
        {
            domainObject.EnumVal = mappingObject.EnumVal;
            domainObject.IntVal = mappingObject.IntVal;
            domainObject.StrVal = mappingObject.StrVal;
        }
        
        public virtual void MapTestDefaultFieldsMappingObj(WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj domainObject, WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjEventRichDTO mappingObject)
        {
            mappingObject.EnumVal = domainObject.EnumVal;
            mappingObject.IntVal = domainObject.IntVal;
            mappingObject.StrVal = domainObject.StrVal;
        }
        
        public virtual void MapTestDepartment(WorkflowSampleSystem.Domain.Projections.TestDepartment domainObject, WorkflowSampleSystem.Generated.DTO.TestDepartmentProjectionDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.LocationBinaryData = domainObject.LocationBinaryData;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestEmployee(WorkflowSampleSystem.Domain.Projections.TestEmployee domainObject, WorkflowSampleSystem.Generated.DTO.TestEmployeeProjectionDTO mappingObject)
        {
            mappingObject.BuEndDate = domainObject.BuEndDate;
            if (!object.ReferenceEquals(domainObject.CoreBusinessUnit, null))
            {
                mappingObject.CoreBusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.CoreBusinessUnit, this);
            }
            else
            {
                mappingObject.CoreBusinessUnit = null;
            }
            mappingObject.CoreBusinessUnitName = domainObject.CoreBusinessUnitName;
            mappingObject.CoreBusinessUnitProjects = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.CoreBusinessUnitProjects, this);
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Projections.TestEmployee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeeView).HasAccess(domainObject))
            {
                string resultLogin;
                resultLogin = domainObject.Login;
                mappingObject.Login = new Framework.Core.Just<string>(resultLogin);
            }
            else
            {
                mappingObject.Login = Framework.Core.Maybe<string>.Nothing;
            }
            mappingObject.NameEngFirstName = domainObject.NameEngFirstName;
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Projections.TestEmployee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeePositionView).HasAccess(domainObject))
            {
                string resultPositionName;
                resultPositionName = domainObject.PositionName;
                mappingObject.PositionName = new Framework.Core.Just<string>(resultPositionName);
            }
            else
            {
                mappingObject.PositionName = Framework.Core.Maybe<string>.Nothing;
            }
            mappingObject.PpmNameNativeMiddleName = domainObject.PpmNameNativeMiddleName;
            mappingObject.RoleId = domainObject.RoleId;
            mappingObject.RoleName = domainObject.RoleName;
        }
        
        public virtual void MapTestEmployeeFilter(WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterStrictDTO mappingObject, WorkflowSampleSystem.Domain.TestEmployeeFilter domainObject)
        {
            if (!object.Equals(mappingObject.BusinessUnit, default(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO)))
            {
                domainObject.BusinessUnit = this.ToBusinessUnit(mappingObject.BusinessUnit);
            }
            else
            {
                domainObject.BusinessUnit = null;
            }
            domainObject.SampleStruct = mappingObject.SampleStruct;
            domainObject.TestValue = mappingObject.TestValue;
        }
        
        public virtual void MapTestEmployeeFilter(WorkflowSampleSystem.Domain.TestEmployeeFilter domainObject, WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.SampleStruct = domainObject.SampleStruct;
            mappingObject.TestValue = domainObject.TestValue;
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjSimpleDTO mappingObject)
        {
            mappingObject.TestImmutablePrimitiveProperty = domainObject.TestImmutablePrimitiveProperty;
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.TestImmutableRefProperty, null))
            {
                mappingObject.TestImmutableRefProperty = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TestImmutableRefProperty, this);
            }
            else
            {
                mappingObject.TestImmutableRefProperty = null;
            }
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjRichDTO mappingObject)
        {
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO mappingObject, WorkflowSampleSystem.Domain.TestImmutableObj domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.TestImmutablePrimitiveProperty = mappingObject.TestImmutablePrimitiveProperty;
            if (!object.Equals(mappingObject.TestImmutableRefProperty, default(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO)))
            {
                domainObject.TestImmutableRefProperty = this.ToEmployee(mappingObject.TestImmutableRefProperty);
            }
            else
            {
                domainObject.TestImmutableRefProperty = null;
            }
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.TestImmutablePrimitiveProperty = domainObject.TestImmutablePrimitiveProperty;
            if (!object.ReferenceEquals(domainObject.TestImmutableRefProperty, null))
            {
                mappingObject.TestImmutableRefProperty = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.TestImmutableRefProperty, this);
            }
            else
            {
                mappingObject.TestImmutableRefProperty = null;
            }
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO mappingObject, WorkflowSampleSystem.Domain.TestImmutableObj domainObject)
        {
            domainObject.TestImmutablePrimitiveProperty = mappingObject.TestImmutablePrimitiveProperty;
            if (!object.Equals(mappingObject.TestImmutableRefProperty, default(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO)))
            {
                domainObject.TestImmutableRefProperty = this.ToEmployee(mappingObject.TestImmutableRefProperty);
            }
            else
            {
                domainObject.TestImmutableRefProperty = null;
            }
        }
        
        public virtual void MapTestImmutableObj(WorkflowSampleSystem.Domain.TestImmutableObj domainObject, WorkflowSampleSystem.Generated.DTO.TestImmutableObjEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.TestImmutablePrimitiveProperty = domainObject.TestImmutablePrimitiveProperty;
            if (!object.ReferenceEquals(domainObject.TestImmutableRefProperty, null))
            {
                mappingObject.TestImmutableRefProperty = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.TestImmutableRefProperty, this);
            }
            else
            {
                mappingObject.TestImmutableRefProperty = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestIMRequest(WorkflowSampleSystem.Domain.Projections.TestIMRequest domainObject, WorkflowSampleSystem.Generated.DTO.TestIMRequestProjectionDTO mappingObject)
        {
            mappingObject.Message = domainObject.Message;
            if (!object.ReferenceEquals(domainObject.OneToOneDetail, null))
            {
                mappingObject.OneToOneDetail = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.OneToOneDetail, this);
            }
            else
            {
                mappingObject.OneToOneDetail = null;
            }
        }
        
        public virtual void MapTestIMRequestDetail(WorkflowSampleSystem.Domain.Projections.TestIMRequestDetail domainObject, WorkflowSampleSystem.Generated.DTO.TestIMRequestDetailProjectionDTO mappingObject)
        {
        }
        
        public virtual void MapTestLegacyEmployee(WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee domainObject, WorkflowSampleSystem.Generated.DTO.TestLegacyEmployeeProjectionDTO mappingObject)
        {
            if (this.Context.SecurityService.GetSecurityProvider<WorkflowSampleSystem.Domain.Projections.TestLegacyEmployee>(WorkflowSampleSystem.WorkflowSampleSystemSecurityOperationCode.EmployeeView).HasAccess(domainObject))
            {
                string resultLogin;
                resultLogin = domainObject.Login;
                mappingObject.Login = new Framework.Core.Just<string>(resultLogin);
            }
            else
            {
                mappingObject.Login = Framework.Core.Maybe<string>.Nothing;
            }
            mappingObject.RoleId = domainObject.RoleId;
            mappingObject.RoleName = domainObject.RoleName;
        }
        
        public virtual void MapTestLocation(WorkflowSampleSystem.Domain.Projections.TestLocation domainObject, WorkflowSampleSystem.Generated.DTO.TestLocationProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestLocationCollectionProperties(WorkflowSampleSystem.Domain.Projections.TestLocationCollectionProperties domainObject, WorkflowSampleSystem.Generated.DTO.TestLocationCollectionPropertiesProjectionDTO mappingObject)
        {
            mappingObject.Child_Identities = domainObject.Child_Identities;
            mappingObject.Child_Periods = domainObject.Child_Periods;
            mappingObject.Children = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Children, this);
            mappingObject.Date_Intervals = domainObject.Date_Intervals;
            mappingObject.Name = domainObject.Name;
            mappingObject.Security_Codes = domainObject.Security_Codes;
        }
        
        public virtual void MapTestManualEmployeeProjection(WorkflowSampleSystem.Domain.ManualProjections.TestManualEmployeeProjection domainObject, WorkflowSampleSystem.Generated.DTO.TestManualEmployeeProjectionDTO mappingObject)
        {
            mappingObject.Login = domainObject.Login;
        }
        
        public virtual void MapTestObj(WorkflowSampleSystem.Domain.TestObj domainObject, WorkflowSampleSystem.Generated.DTO.TestObjEventRichDTO mappingObject)
        {
            mappingObject.FS = domainObject.FS;
        }
        
        public virtual void MapTestObjForNested(WorkflowSampleSystem.Domain.TestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
        }
        
        public virtual void MapTestObjForNested(WorkflowSampleSystem.Domain.TestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestObjForNested(WorkflowSampleSystem.Domain.TestObjForNested domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestObjForNestedBase(WorkflowSampleSystem.Domain.TestObjForNestedBase domainObject, WorkflowSampleSystem.Generated.DTO.TestObjForNestedBaseEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Period = domainObject.Period;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            if (!object.ReferenceEquals(domainObject.ManagementUnitFluentMapping, null))
            {
                mappingObject.ManagementUnitFluentMapping = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ManagementUnitFluentMapping, this);
            }
            else
            {
                mappingObject.ManagementUnitFluentMapping = null;
            }
        }
        
        public virtual void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjRichDTO mappingObject)
        {
            mappingObject.Items = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Items, this);
        }
        
        public virtual void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.Items = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Items, this);
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            if (!object.ReferenceEquals(domainObject.ManagementUnitFluentMapping, null))
            {
                mappingObject.ManagementUnitFluentMapping = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.ManagementUnitFluentMapping, this);
            }
            else
            {
                mappingObject.ManagementUnitFluentMapping = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestRootSecurityObj(WorkflowSampleSystem.Domain.TestRootSecurityObj domainObject, WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.FirstMaster, null))
            {
                mappingObject.FirstMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.FirstMaster, this);
            }
            else
            {
                mappingObject.FirstMaster = null;
            }
        }
        
        public virtual void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemRichDTO mappingObject)
        {
            mappingObject.Items = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Items, this);
            mappingObject.Items2 = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Items2, this);
            mappingObject.Items3 = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Items3, this);
        }
        
        public virtual void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.FirstMaster, null))
            {
                mappingObject.FirstMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.FirstMaster, this);
            }
            else
            {
                mappingObject.FirstMaster = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.Items = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Items, this);
            mappingObject.Items2 = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Items2, this);
            mappingObject.Items3 = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Items3, this);
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestSecurityObjItem(WorkflowSampleSystem.Domain.TestSecurityObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestSecurityObjItemProjection(WorkflowSampleSystem.Domain.Projections.TestSecurityObjItemProjection domainObject, WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.InnerMaster, null))
            {
                mappingObject.InnerMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.InnerMaster, this);
            }
            else
            {
                mappingObject.InnerMaster = null;
            }
        }
        
        public virtual void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemRichDTO mappingObject)
        {
        }
        
        public virtual void MapTestSecuritySubObjItem(WorkflowSampleSystem.Domain.TestSecuritySubObjItem domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.InnerMaster, null))
            {
                mappingObject.InnerMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.InnerMaster, this);
            }
            else
            {
                mappingObject.InnerMaster = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2VisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2SimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2FullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.InnerMaster, null))
            {
                mappingObject.InnerMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.InnerMaster, this);
            }
            else
            {
                mappingObject.InnerMaster = null;
            }
            if (!object.ReferenceEquals(domainObject.RootSecurityObj, null))
            {
                mappingObject.RootSecurityObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.RootSecurityObj, this);
            }
            else
            {
                mappingObject.RootSecurityObj = null;
            }
        }
        
        public virtual void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2RichDTO mappingObject)
        {
        }
        
        public virtual void MapTestSecuritySubObjItem2(WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.InnerMaster, null))
            {
                mappingObject.InnerMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.InnerMaster, this);
            }
            else
            {
                mappingObject.InnerMaster = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.RootSecurityObj, null))
            {
                mappingObject.RootSecurityObj = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.RootSecurityObj, this);
            }
            else
            {
                mappingObject.RootSecurityObj = null;
            }
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3VisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3SimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3FullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.InnerMaster, null))
            {
                mappingObject.InnerMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.InnerMaster, this);
            }
            else
            {
                mappingObject.InnerMaster = null;
            }
        }
        
        public virtual void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3RichDTO mappingObject)
        {
        }
        
        public virtual void MapTestSecuritySubObjItem3(WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 domainObject, WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.InnerMaster, null))
            {
                mappingObject.InnerMaster = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.InnerMaster, this);
            }
            else
            {
                mappingObject.InnerMaster = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapTestUnpersistentObject(WorkflowSampleSystem.Domain.TestUnpersistentObject domainObject, WorkflowSampleSystem.Generated.DTO.TestUnpersistentObjectEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.BusinessUnit, null))
            {
                mappingObject.BusinessUnit = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.BusinessUnit, this);
            }
            else
            {
                mappingObject.BusinessUnit = null;
            }
            mappingObject.Value1 = domainObject.Value1;
            mappingObject.Value2 = domainObject.Value2;
        }
        
        protected virtual void MapToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, TDomainObject domainObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<WorkflowSampleSystem.Generated.DTO.IWorkflowSampleSystemDTOMappingService, TDomainObject>
            where TDomainObject : WorkflowSampleSystem.Domain.DomainObjectBase
        {
            mappingObject.MapToDomainObject(this, domainObject);
        }
        
        public virtual void MapUnpersitentContainer(WorkflowSampleSystem.Domain.Projections.UnpersitentContainer domainObject, WorkflowSampleSystem.Generated.DTO.UnpersitentContainerProjectionDTO mappingObject)
        {
            mappingObject.Locations = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Locations, this);
            mappingObject.PeriodArray = domainObject.PeriodArray;
            if (!object.ReferenceEquals(domainObject.TestBU, null))
            {
                mappingObject.TestBU = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.TestBU, this);
            }
            else
            {
                mappingObject.TestBU = null;
            }
            mappingObject.TestString = domainObject.TestString;
        }
        
        public virtual void MapVisualEmployee(WorkflowSampleSystem.Domain.Projections.VisualEmployee domainObject, WorkflowSampleSystem.Generated.DTO.VisualEmployeeProjectionDTO mappingObject)
        {
            mappingObject.NameEngFirstName = domainObject.NameEngFirstName;
        }
        
        public virtual void MapVisualProject(WorkflowSampleSystem.Domain.Projections.VisualProject domainObject, WorkflowSampleSystem.Generated.DTO.VisualProjectProjectionDTO mappingObject)
        {
            mappingObject.Code = domainObject.Code;
        }
        
        public virtual void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676VisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676SimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676FullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
        }
        
        public virtual void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676RichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkingCalendar1676(WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 domainObject, WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676EventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            if (!object.ReferenceEquals(domainObject.Location, null))
            {
                mappingObject.Location = WorkflowSampleSystem.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Location, this);
            }
            else
            {
                mappingObject.Location = null;
            }
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressIdentityDTO addressIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Address>(addressIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO addressStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.AddressStrictDTO, WorkflowSampleSystem.Domain.Address>(addressStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO addressStrictDTO, WorkflowSampleSystem.Domain.CompanyLegalEntity companyLegalEntity)
        {
            return this.ToDomainObject(addressStrictDTO, () => new WorkflowSampleSystem.Domain.Address(companyLegalEntity));
        }
        
        public virtual WorkflowSampleSystem.Domain.Address ToAddress(WorkflowSampleSystem.Generated.DTO.AddressStrictDTO addressStrictDTO, WorkflowSampleSystem.Domain.LegalEntityBase legalEntityBase)
        {
            return this.ToDomainObject(addressStrictDTO, () => new WorkflowSampleSystem.Domain.Address(legalEntityBase));
        }
        
        public virtual WorkflowSampleSystem.Domain.AnotherSqlParserTestObj ToAnotherSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.AnotherSqlParserTestObjIdentityDTO anotherSqlParserTestObjIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.AnotherSqlParserTestObj>(anotherSqlParserTestObjIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitIdentityDTO businessUnitIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnit>(businessUnitIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO businessUnitStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit>(businessUnitStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO businessUnitStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnit());
            }
            else
            {
                return this.ToBusinessUnit(businessUnitStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnit ToBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitIntegrationSimpleDTO businessUnitSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnit>(businessUnitSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitAncestorLink ToBusinessUnitAncestorLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitAncestorLinkIdentityDTO businessUnitAncestorLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitAncestorLink>(businessUnitAncestorLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole ToBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleIdentityDTO businessUnitEmployeeRoleIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole>(businessUnitEmployeeRoleIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole ToBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO businessUnitEmployeeRoleStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole>(businessUnitEmployeeRoleStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole ToBusinessUnitEmployeeRole(WorkflowSampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO businessUnitEmployeeRoleStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit businessUnit)
        {
            return this.ToDomainObject(businessUnitEmployeeRoleStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitEmployeeRole(businessUnit));
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentIdentityDTO businessUnitHrDepartmentIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitHrDepartment>(businessUnitHrDepartmentIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO businessUnitHrDepartmentStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitHrDepartment>(businessUnitHrDepartmentStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO businessUnitHrDepartmentStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitHrDepartmentStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitHrDepartment());
            }
            else
            {
                return this.ToBusinessUnitHrDepartment(businessUnitHrDepartmentStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitHrDepartment ToBusinessUnitHrDepartment(WorkflowSampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO businessUnitHrDepartmentStrictDTO, WorkflowSampleSystem.Domain.HRDepartment hRDepartment)
        {
            return this.ToDomainObject(businessUnitHrDepartmentStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitHrDepartment(hRDepartment));
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkIdentityDTO businessUnitManagerCommissionLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink>(businessUnitManagerCommissionLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO businessUnitManagerCommissionLinkStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink>(businessUnitManagerCommissionLinkStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO businessUnitManagerCommissionLinkStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitManagerCommissionLinkStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink());
            }
            else
            {
                return this.ToBusinessUnitManagerCommissionLink(businessUnitManagerCommissionLinkStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink ToBusinessUnitManagerCommissionLink(WorkflowSampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO businessUnitManagerCommissionLinkStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit businessUnit)
        {
            return this.ToDomainObject(businessUnitManagerCommissionLinkStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitManagerCommissionLink(businessUnit));
        }
        
        public virtual WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel ToBusinessUnitProgramClassFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelStrictDTO businessUnitProgramClassFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.BusinessUnitProgramClassFilterModelStrictDTO, WorkflowSampleSystem.Domain.Models.Filters.BusinessUnitProgramClassFilterModel>(businessUnitProgramClassFilterModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel ToBusinessUnitRootFilterModel(WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelStrictDTO businessUnitRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.BusinessUnitRootFilterModelStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitRootFilterModel>(businessUnitRootFilterModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitToAncestorChildView ToBusinessUnitToAncestorChildView(WorkflowSampleSystem.Generated.DTO.BusinessUnitToAncestorChildViewIdentityDTO businessUnitToAncestorChildViewIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitToAncestorChildView>(businessUnitToAncestorChildViewIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitType ToBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO businessUnitTypeIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitType>(businessUnitTypeIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitType ToBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO businessUnitTypeStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType>(businessUnitTypeStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitType ToBusinessUnitType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO businessUnitTypeStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitTypeStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitType());
            }
            else
            {
                return this.ToBusinessUnitType(businessUnitTypeStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeIdentityDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>(businessUnitTypeLinkWithPossibleFinancialProjectTypeIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>(businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType());
            }
            else
            {
                return this.ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType ToBusinessUnitTypeLinkWithPossibleFinancialProjectType(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType businessUnitType)
        {
            return this.ToDomainObject(businessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType(businessUnitType));
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentIdentityDTO businessUnitTypeLinkWithPossibleParentIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>(businessUnitTypeLinkWithPossibleParentIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO businessUnitTypeLinkWithPossibleParentStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>(businessUnitTypeLinkWithPossibleParentStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO businessUnitTypeLinkWithPossibleParentStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitTypeLinkWithPossibleParentStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent());
            }
            else
            {
                return this.ToBusinessUnitTypeLinkWithPossibleParent(businessUnitTypeLinkWithPossibleParentStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent ToBusinessUnitTypeLinkWithPossibleParent(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO businessUnitTypeLinkWithPossibleParentStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType businessUnitType)
        {
            return this.ToDomainObject(businessUnitTypeLinkWithPossibleParentStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent(businessUnitType));
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToIdentityDTO businessUnitTypeLinkWithTransferToIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>(businessUnitTypeLinkWithTransferToIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO businessUnitTypeLinkWithTransferToStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>(businessUnitTypeLinkWithTransferToStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO businessUnitTypeLinkWithTransferToStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(businessUnitTypeLinkWithTransferToStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo());
            }
            else
            {
                return this.ToBusinessUnitTypeLinkWithTransferTo(businessUnitTypeLinkWithTransferToStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo ToBusinessUnitTypeLinkWithTransferTo(WorkflowSampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO businessUnitTypeLinkWithTransferToStrictDTO, WorkflowSampleSystem.Domain.BusinessUnitType businessUnitType)
        {
            return this.ToDomainObject(businessUnitTypeLinkWithTransferToStrictDTO, () => new WorkflowSampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo(businessUnitType));
        }
        
        public virtual WorkflowSampleSystem.Domain.UniqueByParent.ChildEntity ToChildEntity(WorkflowSampleSystem.Generated.DTO.ChildEntityIdentityDTO childEntityIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.UniqueByParent.ChildEntity>(childEntityIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestForceAbstract.ClassA ToClassA(WorkflowSampleSystem.Generated.DTO.ClassAIdentityDTO classAIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestForceAbstract.ClassA>(classAIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestForceAbstract.ClassAChild ToClassAChild(WorkflowSampleSystem.Generated.DTO.ClassAChildIdentityDTO classAChildIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestForceAbstract.ClassAChild>(classAChildIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EnversBug1676.Coefficient1676 ToCoefficient1676(WorkflowSampleSystem.Generated.DTO.Coefficient1676IdentityDTO coefficient1676IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EnversBug1676.Coefficient1676>(coefficient1676IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO companyLegalEntityIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.CompanyLegalEntity>(companyLegalEntityIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO companyLegalEntityStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO, WorkflowSampleSystem.Domain.CompanyLegalEntity>(companyLegalEntityStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO companyLegalEntityStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(companyLegalEntityStrictDTO, () => new WorkflowSampleSystem.Domain.CompanyLegalEntity());
            }
            else
            {
                return this.ToCompanyLegalEntity(companyLegalEntityStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.CompanyLegalEntity ToCompanyLegalEntity(WorkflowSampleSystem.Generated.DTO.CompanyLegalEntityIntegrationSimpleDTO companyLegalEntitySimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.CompanyLegalEntity>(companyLegalEntitySimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestForceAbstract.ConcreteClassA ToConcreteClassA(WorkflowSampleSystem.Generated.DTO.ConcreteClassAIdentityDTO concreteClassAIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestForceAbstract.ConcreteClassA>(concreteClassAIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Country ToCountry(WorkflowSampleSystem.Generated.DTO.CountryIdentityDTO countryIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Country>(countryIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Country ToCountry(WorkflowSampleSystem.Generated.DTO.CountryStrictDTO countryStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.CountryStrictDTO, WorkflowSampleSystem.Domain.Country>(countryStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Country ToCountry(WorkflowSampleSystem.Generated.DTO.CountryStrictDTO countryStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(countryStrictDTO, () => new WorkflowSampleSystem.Domain.Country());
            }
            else
            {
                return this.ToCountry(countryStrictDTO);
            }
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<WorkflowSampleSystem.Generated.DTO.IWorkflowSampleSystemDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : WorkflowSampleSystem.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetById<TDomainObject>(mappingObject.Id, Framework.DomainDriven.BLL.IdCheckMode.CheckAll);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, System.Func<TDomainObject> createFunc)
            where TMappingObject : Framework.DomainDriven.IMappingObject<WorkflowSampleSystem.Generated.DTO.IWorkflowSampleSystemDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : WorkflowSampleSystem.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetByIdOrCreate<TDomainObject>(mappingObject.Id, createFunc);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObjectBase<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<WorkflowSampleSystem.Generated.DTO.IWorkflowSampleSystemDTOMappingService, TDomainObject>
            where TDomainObject : WorkflowSampleSystem.Domain.DomainObjectBase, new ()
        {
            TDomainObject domainObject = new TDomainObject();
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO employeeIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Employee>(employeeIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO employeeStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO, WorkflowSampleSystem.Domain.Employee>(employeeStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO employeeStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(employeeStrictDTO, () => new WorkflowSampleSystem.Domain.Employee());
            }
            else
            {
                return this.ToEmployee(employeeStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO employeeUpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO, WorkflowSampleSystem.Domain.Employee>(employeeUpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO employeeUpdateDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(employeeUpdateDTO, () => new WorkflowSampleSystem.Domain.Employee());
            }
            else
            {
                return this.ToEmployee(employeeUpdateDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO employeeRichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO, WorkflowSampleSystem.Domain.Employee>(employeeRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationRichDTO employeeRichIntegrationDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(employeeRichIntegrationDTO, () => new WorkflowSampleSystem.Domain.Employee());
            }
            else
            {
                return this.ToEmployee(employeeRichIntegrationDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Employee ToEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeIntegrationSimpleDTO employeeSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Employee>(employeeSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIdentityDTO employeeAndEmployeeSpecializationLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(employeeAndEmployeeSpecializationLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO employeeAndEmployeeSpecializationLinkStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(employeeAndEmployeeSpecializationLinkStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO employeeAndEmployeeSpecializationLinkStrictDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeAndEmployeeSpecializationLinkStrictDTO, () => new WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO employeeAndEmployeeSpecializationLinkUpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(employeeAndEmployeeSpecializationLinkUpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO employeeAndEmployeeSpecializationLinkUpdateDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeAndEmployeeSpecializationLinkUpdateDTO, () => new WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO employeeAndEmployeeSpecializationLinkRichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(employeeAndEmployeeSpecializationLinkRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink ToEmployeeAndEmployeeSpecializationLink(WorkflowSampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIntegrationRichDTO employeeAndEmployeeSpecializationLinkRichIntegrationDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeAndEmployeeSpecializationLinkRichIntegrationDTO, () => new WorkflowSampleSystem.Domain.EmployeeAndEmployeeSpecializationLink(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIdentityDTO employeeCellPhoneIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeCellPhone>(employeeCellPhoneIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO employeeCellPhoneStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO, WorkflowSampleSystem.Domain.EmployeeCellPhone>(employeeCellPhoneStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO employeeCellPhoneStrictDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeCellPhoneStrictDTO, () => new WorkflowSampleSystem.Domain.EmployeeCellPhone(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO employeeCellPhoneUpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO, WorkflowSampleSystem.Domain.EmployeeCellPhone>(employeeCellPhoneUpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO employeeCellPhoneUpdateDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeCellPhoneUpdateDTO, () => new WorkflowSampleSystem.Domain.EmployeeCellPhone(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO employeeCellPhoneRichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeCellPhone>(employeeCellPhoneRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhone ToEmployeeCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneIntegrationRichDTO employeeCellPhoneRichIntegrationDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeCellPhoneRichIntegrationDTO, () => new WorkflowSampleSystem.Domain.EmployeeCellPhone(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCellPhoneBase ToEmployeeCellPhoneBase(WorkflowSampleSystem.Generated.DTO.EmployeeCellPhoneBaseIdentityDTO employeeCellPhoneBaseIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeCellPhoneBase>(employeeCellPhoneBaseIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeComplexChangeModel ToEmployeeComplexChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelStrictDTO employeeComplexChangeModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeComplexChangeModelStrictDTO, WorkflowSampleSystem.Domain.EmployeeComplexChangeModel>(employeeComplexChangeModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel ToEmployeeCustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO employeeCustomIntegrationSaveModelRichIntegrationDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeCustomIntegrationSaveModelIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeCustomIntegrationSaveModel>(employeeCustomIntegrationSaveModelRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeEmailChangeModel ToEmployeeEmailChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO employeeEmailChangeModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO, WorkflowSampleSystem.Domain.EmployeeEmailChangeModel>(employeeEmailChangeModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel ToEmployeeEmailMassChangeModel(WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO employeeEmailMassChangeModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO, WorkflowSampleSystem.Domain.EmployeeEmailMassChangeModel>(employeeEmailMassChangeModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel ToEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelStrictDTO employeeFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeFilterModelStrictDTO, WorkflowSampleSystem.Domain.Models.Filters.EmployeeFilterModel>(employeeFilterModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeInformation ToEmployeeInformation(WorkflowSampleSystem.Generated.DTO.EmployeeInformationIdentityDTO employeeInformationIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeInformation>(employeeInformationIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneIdentityDTO employeePersonalCellPhoneIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(employeePersonalCellPhoneIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO employeePersonalCellPhoneStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(employeePersonalCellPhoneStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO employeePersonalCellPhoneStrictDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeePersonalCellPhoneStrictDTO, () => new WorkflowSampleSystem.Domain.EmployeePersonalCellPhone(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO employeePersonalCellPhoneUpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO, WorkflowSampleSystem.Domain.EmployeePersonalCellPhone>(employeePersonalCellPhoneUpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePersonalCellPhone ToEmployeePersonalCellPhone(WorkflowSampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO employeePersonalCellPhoneUpdateDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeePersonalCellPhoneUpdateDTO, () => new WorkflowSampleSystem.Domain.EmployeePersonalCellPhone(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePhoto ToEmployeePhoto(WorkflowSampleSystem.Generated.DTO.EmployeePhotoIdentityDTO employeePhotoIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeePhoto>(employeePhotoIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePosition ToEmployeePosition(WorkflowSampleSystem.Generated.DTO.EmployeePositionIdentityDTO employeePositionIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeePosition>(employeePositionIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeePosition ToEmployeePosition(WorkflowSampleSystem.Generated.DTO.EmployeePositionIntegrationSimpleDTO employeePositionSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeePosition>(employeePositionSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRegistrationType ToEmployeeRegistrationType(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO employeeRegistrationTypeIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeRegistrationType>(employeeRegistrationTypeIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRegistrationType ToEmployeeRegistrationType(WorkflowSampleSystem.Generated.DTO.EmployeeRegistrationTypeIntegrationSimpleDTO employeeRegistrationTypeSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeRegistrationType>(employeeRegistrationTypeSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter ToEmployeeReportParameter(WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterStrictDTO employeeReportParameterStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeReportParameterStrictDTO, WorkflowSampleSystem.CustomReports.Employee.EmployeeReportParameter>(employeeReportParameterStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRole ToEmployeeRole(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIdentityDTO employeeRoleIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeRole>(employeeRoleIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRole ToEmployeeRole(WorkflowSampleSystem.Generated.DTO.EmployeeRoleIntegrationSimpleDTO employeeRoleSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeRole>(employeeRoleSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRoleDegree ToEmployeeRoleDegree(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO employeeRoleDegreeIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeRoleDegree>(employeeRoleDegreeIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRoleDegree ToEmployeeRoleDegree(WorkflowSampleSystem.Generated.DTO.EmployeeRoleDegreeIntegrationSimpleDTO employeeRoleDegreeSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeRoleDegree>(employeeRoleDegreeSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeRootFilterModel ToEmployeeRootFilterModel(WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelStrictDTO employeeRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.EmployeeRootFilterModelStrictDTO, WorkflowSampleSystem.Domain.EmployeeRootFilterModel>(employeeRootFilterModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeSpecialization ToEmployeeSpecialization(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO employeeSpecializationIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeSpecialization>(employeeSpecializationIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeSpecialization ToEmployeeSpecialization(WorkflowSampleSystem.Generated.DTO.EmployeeSpecializationIntegrationSimpleDTO employeeSpecializationSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeSpecialization>(employeeSpecializationSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIdentityDTO employeeToEmployeeLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(employeeToEmployeeLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO employeeToEmployeeLinkStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(employeeToEmployeeLinkStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO employeeToEmployeeLinkStrictDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeToEmployeeLinkStrictDTO, () => new WorkflowSampleSystem.Domain.EmployeeToEmployeeLink(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO employeeToEmployeeLinkUpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(employeeToEmployeeLinkUpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO employeeToEmployeeLinkUpdateDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeToEmployeeLinkUpdateDTO, () => new WorkflowSampleSystem.Domain.EmployeeToEmployeeLink(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO employeeToEmployeeLinkRichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO, WorkflowSampleSystem.Domain.EmployeeToEmployeeLink>(employeeToEmployeeLinkRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.EmployeeToEmployeeLink ToEmployeeToEmployeeLink(WorkflowSampleSystem.Generated.DTO.EmployeeToEmployeeLinkIntegrationRichDTO employeeToEmployeeLinkRichIntegrationDTO, WorkflowSampleSystem.Domain.Employee employee)
        {
            return this.ToDomainObject(employeeToEmployeeLinkRichIntegrationDTO, () => new WorkflowSampleSystem.Domain.EmployeeToEmployeeLink(employee));
        }
        
        public virtual WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1IdentityDTO example1IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Example1>(example1IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1StrictDTO example1StrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.Example1StrictDTO, WorkflowSampleSystem.Domain.Example1>(example1StrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1StrictDTO example1StrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(example1StrictDTO, () => new WorkflowSampleSystem.Domain.Example1());
            }
            else
            {
                return this.ToExample1(example1StrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO example1UpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO, WorkflowSampleSystem.Domain.Example1>(example1UpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Example1 ToExample1(WorkflowSampleSystem.Generated.DTO.Example1UpdateDTO example1UpdateDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(example1UpdateDTO, () => new WorkflowSampleSystem.Domain.Example1());
            }
            else
            {
                return this.ToExample1(example1UpdateDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2IdentityDTO example2IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Example2>(example2IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2StrictDTO example2StrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.Example2StrictDTO, WorkflowSampleSystem.Domain.Example2>(example2StrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2StrictDTO example2StrictDTO, WorkflowSampleSystem.Domain.Example1 example1)
        {
            return this.ToDomainObject(example2StrictDTO, () => new WorkflowSampleSystem.Domain.Example2(example1));
        }
        
        public virtual WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO example2UpdateDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO, WorkflowSampleSystem.Domain.Example2>(example2UpdateDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Example2 ToExample2(WorkflowSampleSystem.Generated.DTO.Example2UpdateDTO example2UpdateDTO, WorkflowSampleSystem.Domain.Example1 example1)
        {
            return this.ToDomainObject(example2UpdateDTO, () => new WorkflowSampleSystem.Domain.Example2(example1));
        }
        
        public virtual WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel ToHierarchicalBusinessUnitFilterModel(WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelStrictDTO hierarchicalBusinessUnitFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.HierarchicalBusinessUnitFilterModelStrictDTO, WorkflowSampleSystem.Domain.Models.Filters.HierarchicalBusinessUnitFilterModel>(hierarchicalBusinessUnitFilterModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO hRDepartmentIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.HRDepartment>(hRDepartmentIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO hRDepartmentStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO, WorkflowSampleSystem.Domain.HRDepartment>(hRDepartmentStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO hRDepartmentStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(hRDepartmentStrictDTO, () => new WorkflowSampleSystem.Domain.HRDepartment());
            }
            else
            {
                return this.ToHRDepartment(hRDepartmentStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartment ToHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentIntegrationSimpleDTO hRDepartmentSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.HRDepartment>(hRDepartmentSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionIdentityDTO hRDepartmentEmployeePositionIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition>(hRDepartmentEmployeePositionIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO hRDepartmentEmployeePositionStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO, WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition>(hRDepartmentEmployeePositionStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO hRDepartmentEmployeePositionStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(hRDepartmentEmployeePositionStrictDTO, () => new WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition());
            }
            else
            {
                return this.ToHRDepartmentEmployeePosition(hRDepartmentEmployeePositionStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition ToHRDepartmentEmployeePosition(WorkflowSampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO hRDepartmentEmployeePositionStrictDTO, WorkflowSampleSystem.Domain.HRDepartment hRDepartment)
        {
            return this.ToDomainObject(hRDepartmentEmployeePositionStrictDTO, () => new WorkflowSampleSystem.Domain.HRDepartmentEmployeePosition(hRDepartment));
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee ToHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeIdentityDTO hRDepartmentRoleEmployeeIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee>(hRDepartmentRoleEmployeeIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee ToHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO hRDepartmentRoleEmployeeStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO, WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee>(hRDepartmentRoleEmployeeStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee ToHRDepartmentRoleEmployee(WorkflowSampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO hRDepartmentRoleEmployeeStrictDTO, WorkflowSampleSystem.Domain.HRDepartment hRDepartment)
        {
            return this.ToDomainObject(hRDepartmentRoleEmployeeStrictDTO, () => new WorkflowSampleSystem.Domain.HRDepartmentRoleEmployee(hRDepartment));
        }
        
        public virtual WorkflowSampleSystem.Domain.IMRequest ToIMRequest(WorkflowSampleSystem.Generated.DTO.IMRequestIdentityDTO iMRequestIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.IMRequest>(iMRequestIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.IMRequestDetail ToIMRequestDetail(WorkflowSampleSystem.Generated.DTO.IMRequestDetailIdentityDTO iMRequestDetailIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.IMRequestDetail>(iMRequestDetailIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Information ToInformation(WorkflowSampleSystem.Generated.DTO.InformationIdentityDTO informationIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Information>(informationIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.InsuranceDetail ToInsuranceDetail(WorkflowSampleSystem.Generated.DTO.InsuranceDetailIdentityDTO insuranceDetailIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.InsuranceDetail>(insuranceDetailIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IdentityDTO integrationVersionContainer1IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1>(integrationVersionContainer1IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO integrationVersionContainer1RichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1>(integrationVersionContainer1RichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationRichDTO integrationVersionContainer1RichIntegrationDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(integrationVersionContainer1RichIntegrationDTO, () => new WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1());
            }
            else
            {
                return this.ToIntegrationVersionContainer1(integrationVersionContainer1RichIntegrationDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1 ToIntegrationVersionContainer1(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1IntegrationSimpleDTO integrationVersionContainer1SimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer1>(integrationVersionContainer1SimpleIntegrationDTO.Id, Framework.DomainDriven.BLL.IdCheckMode.SkipEmpty, Framework.DomainDriven.LockRole.Update);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel ToIntegrationVersionContainer1CustomIntegrationSaveModel(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO integrationVersionContainer1CustomIntegrationSaveModelRichIntegrationDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer1CustomIntegrationSaveModelIntegrationRichDTO, WorkflowSampleSystem.Domain.IntegrationVersionContainer1CustomIntegrationSaveModel>(integrationVersionContainer1CustomIntegrationSaveModelRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 ToIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IdentityDTO integrationVersionContainer2IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2>(integrationVersionContainer2IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 ToIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO integrationVersionContainer2RichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO, WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2>(integrationVersionContainer2RichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2 ToIntegrationVersionContainer2(WorkflowSampleSystem.Generated.DTO.IntegrationVersionContainer2IntegrationRichDTO integrationVersionContainer2RichIntegrationDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(integrationVersionContainer2RichIntegrationDTO, () => new WorkflowSampleSystem.Domain.IntergrationVersions.IntegrationVersionContainer2());
            }
            else
            {
                return this.ToIntegrationVersionContainer2(integrationVersionContainer2RichIntegrationDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.LegalEntityBase ToLegalEntityBase(WorkflowSampleSystem.Generated.DTO.LegalEntityBaseIdentityDTO legalEntityBaseIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.LegalEntityBase>(legalEntityBaseIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationIdentityDTO locationIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Location>(locationIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO locationStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.LocationStrictDTO, WorkflowSampleSystem.Domain.Location>(locationStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO locationStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(locationStrictDTO, () => new WorkflowSampleSystem.Domain.Location());
            }
            else
            {
                return this.ToLocation(locationStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Location ToLocation(WorkflowSampleSystem.Generated.DTO.LocationIntegrationSimpleDTO locationSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Location>(locationSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EnversBug1676.Location1676 ToLocation1676(WorkflowSampleSystem.Generated.DTO.Location1676IdentityDTO location1676IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EnversBug1676.Location1676>(location1676IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitIdentityDTO managementUnitIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnit>(managementUnitIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO managementUnitStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO, WorkflowSampleSystem.Domain.ManagementUnit>(managementUnitStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitStrictDTO managementUnitStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(managementUnitStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnit());
            }
            else
            {
                return this.ToManagementUnit(managementUnitStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnit ToManagementUnit(WorkflowSampleSystem.Generated.DTO.ManagementUnitIntegrationSimpleDTO managementUnitSimpleIntegrationDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnit>(managementUnitSimpleIntegrationDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAncestorLink ToManagementUnitAncestorLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAncestorLinkIdentityDTO managementUnitAncestorLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnitAncestorLink>(managementUnitAncestorLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkIdentityDTO managementUnitAndBusinessUnitLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(managementUnitAndBusinessUnitLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(managementUnitAndBusinessUnitLinkStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(managementUnitAndBusinessUnitLinkStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink());
            }
            else
            {
                return this.ToManagementUnitAndBusinessUnitLink(managementUnitAndBusinessUnitLinkStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.BusinessUnit businessUnit)
        {
            return this.ToDomainObject(managementUnitAndBusinessUnitLinkStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink(businessUnit));
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink ToManagementUnitAndBusinessUnitLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO managementUnitAndBusinessUnitLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnit managementUnit)
        {
            return this.ToDomainObject(managementUnitAndBusinessUnitLinkStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnitAndBusinessUnitLink(managementUnit));
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkIdentityDTO managementUnitAndHRDepartmentLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(managementUnitAndHRDepartmentLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(managementUnitAndHRDepartmentLinkStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(managementUnitAndHRDepartmentLinkStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink());
            }
            else
            {
                return this.ToManagementUnitAndHRDepartmentLink(managementUnitAndHRDepartmentLinkStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.HRDepartment hRDepartment)
        {
            return this.ToDomainObject(managementUnitAndHRDepartmentLinkStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink(hRDepartment));
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink ToManagementUnitAndHRDepartmentLink(WorkflowSampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO managementUnitAndHRDepartmentLinkStrictDTO, WorkflowSampleSystem.Domain.ManagementUnit managementUnit)
        {
            return this.ToDomainObject(managementUnitAndHRDepartmentLinkStrictDTO, () => new WorkflowSampleSystem.Domain.ManagementUnitAndHRDepartmentLink(managementUnit));
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitFluentMapping ToManagementUnitFluentMapping(WorkflowSampleSystem.Generated.DTO.ManagementUnitFluentMappingIdentityDTO managementUnitFluentMappingIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnitFluentMapping>(managementUnitFluentMappingIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.ManagementUnitToAncestorChildView ToManagementUnitToAncestorChildView(WorkflowSampleSystem.Generated.DTO.ManagementUnitToAncestorChildViewIdentityDTO managementUnitToAncestorChildViewIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.ManagementUnitToAncestorChildView>(managementUnitToAncestorChildViewIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.NamedLock ToNamedLock(WorkflowSampleSystem.Generated.DTO.NamedLockIdentityDTO namedLockIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.NamedLock>(namedLockIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity ToParentEntity(WorkflowSampleSystem.Generated.DTO.ParentEntityIdentityDTO parentEntityIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.UniqueByMaster.ParentEntity>(parentEntityIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Principal ToPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalIdentityDTO principalIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Principal>(principalIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Principal ToPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO principalStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO, WorkflowSampleSystem.Domain.Principal>(principalStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.Principal ToPrincipal(WorkflowSampleSystem.Generated.DTO.PrincipalStrictDTO principalStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(principalStrictDTO, () => new WorkflowSampleSystem.Domain.Principal());
            }
            else
            {
                return this.ToPrincipal(principalStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.Project ToProject(WorkflowSampleSystem.Generated.DTO.ProjectIdentityDTO projectIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.Project>(projectIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.RoleRoleDegreeLink ToRoleRoleDegreeLink(WorkflowSampleSystem.Generated.DTO.RoleRoleDegreeLinkIdentityDTO roleRoleDegreeLinkIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.RoleRoleDegreeLink>(roleRoleDegreeLinkIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel ToSingleEmployeeFilterModel(WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelStrictDTO singleEmployeeFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.SingleEmployeeFilterModelStrictDTO, WorkflowSampleSystem.Domain.Models.Filters.SingleEmployeeFilterModel>(singleEmployeeFilterModelStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.SqlParserTestObj ToSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjIdentityDTO sqlParserTestObjIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.SqlParserTestObj>(sqlParserTestObjIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.SqlParserTestObj ToSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO sqlParserTestObjStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO, WorkflowSampleSystem.Domain.SqlParserTestObj>(sqlParserTestObjStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.SqlParserTestObj ToSqlParserTestObj(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjStrictDTO sqlParserTestObjStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(sqlParserTestObjStrictDTO, () => new WorkflowSampleSystem.Domain.SqlParserTestObj());
            }
            else
            {
                return this.ToSqlParserTestObj(sqlParserTestObjStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.SqlParserTestObjContainer ToSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerIdentityDTO sqlParserTestObjContainerIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.SqlParserTestObjContainer>(sqlParserTestObjContainerIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.SqlParserTestObjContainer ToSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO sqlParserTestObjContainerStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO, WorkflowSampleSystem.Domain.SqlParserTestObjContainer>(sqlParserTestObjContainerStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.SqlParserTestObjContainer ToSqlParserTestObjContainer(WorkflowSampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO sqlParserTestObjContainerStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(sqlParserTestObjContainerStrictDTO, () => new WorkflowSampleSystem.Domain.SqlParserTestObjContainer());
            }
            else
            {
                return this.ToSqlParserTestObjContainer(sqlParserTestObjContainerStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.TestCustomContextSecurityObj ToTestCustomContextSecurityObj(WorkflowSampleSystem.Generated.DTO.TestCustomContextSecurityObjIdentityDTO testCustomContextSecurityObjIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestCustomContextSecurityObj>(testCustomContextSecurityObjIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj ToTestDefaultFieldsMappingObj(WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO testDefaultFieldsMappingObjStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO, WorkflowSampleSystem.Domain.TestDefaultFieldsMappingObj>(testDefaultFieldsMappingObjStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestEmployeeFilter ToTestEmployeeFilter(WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterStrictDTO testEmployeeFilterStrictDTO)
        {
            return this.ToDomainObjectBase<WorkflowSampleSystem.Generated.DTO.TestEmployeeFilterStrictDTO, WorkflowSampleSystem.Domain.TestEmployeeFilter>(testEmployeeFilterStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIdentityDTO testImmutableObjIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestImmutableObj>(testImmutableObjIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO testImmutableObjStrictDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO, WorkflowSampleSystem.Domain.TestImmutableObj>(testImmutableObjStrictDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjStrictDTO testImmutableObjStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(testImmutableObjStrictDTO, () => new WorkflowSampleSystem.Domain.TestImmutableObj());
            }
            else
            {
                return this.ToTestImmutableObj(testImmutableObjStrictDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO testImmutableObjRichIntegrationDTO)
        {
            return this.ToDomainObject<WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO, WorkflowSampleSystem.Domain.TestImmutableObj>(testImmutableObjRichIntegrationDTO);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestImmutableObj ToTestImmutableObj(WorkflowSampleSystem.Generated.DTO.TestImmutableObjIntegrationRichDTO testImmutableObjRichIntegrationDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(testImmutableObjRichIntegrationDTO, () => new WorkflowSampleSystem.Domain.TestImmutableObj());
            }
            else
            {
                return this.ToTestImmutableObj(testImmutableObjRichIntegrationDTO);
            }
        }
        
        public virtual WorkflowSampleSystem.Domain.TestObjForNested ToTestObjForNested(WorkflowSampleSystem.Generated.DTO.TestObjForNestedIdentityDTO testObjForNestedIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestObjForNested>(testObjForNestedIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestObjForNestedBase ToTestObjForNestedBase(WorkflowSampleSystem.Generated.DTO.TestObjForNestedBaseIdentityDTO testObjForNestedBaseIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestObjForNestedBase>(testObjForNestedBaseIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestRootSecurityObj ToTestRootSecurityObj(WorkflowSampleSystem.Generated.DTO.TestRootSecurityObjIdentityDTO testRootSecurityObjIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestRootSecurityObj>(testRootSecurityObjIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestSecurityObjItem ToTestSecurityObjItem(WorkflowSampleSystem.Generated.DTO.TestSecurityObjItemIdentityDTO testSecurityObjItemIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestSecurityObjItem>(testSecurityObjItemIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestSecuritySubObjItem ToTestSecuritySubObjItem(WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItemIdentityDTO testSecuritySubObjItemIdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestSecuritySubObjItem>(testSecuritySubObjItemIdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestSecuritySubObjItem2 ToTestSecuritySubObjItem2(WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem2IdentityDTO testSecuritySubObjItem2IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestSecuritySubObjItem2>(testSecuritySubObjItem2IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.TestSecuritySubObjItem3 ToTestSecuritySubObjItem3(WorkflowSampleSystem.Generated.DTO.TestSecuritySubObjItem3IdentityDTO testSecuritySubObjItem3IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.TestSecuritySubObjItem3>(testSecuritySubObjItem3IdentityDTO.Id);
        }
        
        public virtual WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676 ToWorkingCalendar1676(WorkflowSampleSystem.Generated.DTO.WorkingCalendar1676IdentityDTO workingCalendar1676IdentityDTO)
        {
            return this.GetById<WorkflowSampleSystem.Domain.EnversBug1676.WorkingCalendar1676>(workingCalendar1676IdentityDTO.Id);
        }
    }
    
    public partial class WorkflowSampleSystemServerPrimitiveDTOMappingService : WorkflowSampleSystem.Generated.DTO.WorkflowSampleSystemServerPrimitiveDTOMappingServiceBase
    {
        
        public WorkflowSampleSystemServerPrimitiveDTOMappingService(WorkflowSampleSystem.BLL.IWorkflowSampleSystemBLLContext context) : 
                base(context)
        {
        }
    }
}
