//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Attachments.Generated.DTO
{
    
    
    public partial interface IAttachmentsClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapFullToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentFullDTO currentSource);
        
        void MapFullToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO currentSource);
        
        void MapFullToStrictForAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO currentSource);
        
        void MapFullToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentTagFullDTO currentSource);
        
        void MapFullToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.DomainTypeFullDTO currentSource);
        
        void MapFullToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.TargetSystemFullDTO currentSource);
        
        void MapRichToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentRichDTO currentSource);
        
        void MapRichToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO currentSource);
        
        void MapRichToStrictForAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO currentSource);
        
        void MapRichToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentTagRichDTO currentSource);
        
        void MapRichToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.DomainTypeRichDTO currentSource);
        
        void MapRichToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.TargetSystemRichDTO currentSource);
        
        void MapSimpleToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentSimpleDTO currentSource);
        
        void MapSimpleToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO currentSource);
        
        void MapSimpleToStrictForAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO currentSource);
        
        void MapSimpleToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO currentSource);
        
        void MapSimpleToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO currentSource);
        
        void MapSimpleToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO currentSource);
    }
    
    public abstract partial class AttachmentsClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBasePersistentToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapFullToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DomainType, null))
            {
                target.DomainType = source.DomainType.Identity;
            }
            else
            {
                target.DomainType = Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DomainType, null))
            {
                target.DomainType = source.DomainType.Identity;
            }
            else
            {
                target.DomainType = Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentTagFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.DomainTypeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.TargetSystemFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Content, null))
            {
                target.Content = System.Linq.Enumerable.ToArray(source.Content);
            }
            else
            {
                target.Content = null;
            }
            if (!object.ReferenceEquals(source.Tags, null))
            {
                target.Tags = Framework.Core.EnumerableExtensions.ToList(source.Tags, attachmentTag => new Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO(attachmentTag));
            }
        }
        
        public virtual void MapRichToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Attachments, null))
            {
                target.Attachments = Framework.Core.EnumerableExtensions.ToList(source.Attachments, attachment => new Framework.Attachments.Generated.DTO.AttachmentStrictDTO(attachment));
            }
        }
        
        public virtual void MapRichToStrictForAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentTagRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.DomainTypeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.TargetSystemRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.ObjectId = source.ObjectId;
        }
        
        public virtual void MapSimpleToStrictForAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.ObjectId = source.ObjectId;
        }
        
        public virtual void MapSimpleToStrictForAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO target, Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO target, Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO target, Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
        }
    }
    
    public partial class AttachmentsClientPrimitiveDTOMappingService : Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingServiceBase
    {
        
        private static Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService _default = new Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService();
        
        public static Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService Default
        {
            get
            {
                return Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService._default;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public struct AttachmentIdentityDTO : System.IEquatable<Framework.Attachments.Generated.DTO.AttachmentIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Attachments.Generated.DTO.AttachmentIdentityDTO EmptyField = new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public AttachmentIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public AttachmentIdentityDTO(Framework.Attachments.Generated.DTO.AttachmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public AttachmentIdentityDTO(Framework.Attachments.Domain.Attachment domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public AttachmentIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentIdentityDTO Empty
        {
            get
            {
                return Framework.Attachments.Generated.DTO.AttachmentIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Attachments.Generated.DTO.AttachmentIdentityDTO identity1, Framework.Attachments.Generated.DTO.AttachmentIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Attachments.Generated.DTO.AttachmentIdentityDTO identity1, Framework.Attachments.Generated.DTO.AttachmentIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Attachments.Generated.DTO.AttachmentIdentityDTO) == other.GetType()) && this.Equals(((Framework.Attachments.Generated.DTO.AttachmentIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Attachments.Generated.DTO.AttachmentIdentityDTO other)
        {
            return (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public struct AttachmentContainerIdentityDTO : System.IEquatable<Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO EmptyField = new Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public AttachmentContainerIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public AttachmentContainerIdentityDTO(Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public AttachmentContainerIdentityDTO(Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public AttachmentContainerIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO Empty
        {
            get
            {
                return Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO identity1, Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO identity1, Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO) == other.GetType()) && this.Equals(((Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO other)
        {
            return (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public struct AttachmentTagIdentityDTO : System.IEquatable<Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO EmptyField = new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public AttachmentTagIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public AttachmentTagIdentityDTO(Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public AttachmentTagIdentityDTO(Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public AttachmentTagIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO Empty
        {
            get
            {
                return Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO identity1, Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO identity1, Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO) == other.GetType()) && this.Equals(((Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO other)
        {
            return (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public struct DomainTypeIdentityDTO : System.IEquatable<Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO EmptyField = new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public DomainTypeIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public DomainTypeIdentityDTO(Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public DomainTypeIdentityDTO(Framework.Attachments.Domain.DomainType domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public DomainTypeIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO Empty
        {
            get
            {
                return Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO identity1, Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO identity1, Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO) == other.GetType()) && this.Equals(((Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO other)
        {
            return (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.DomainType ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public struct TargetSystemIdentityDTO : System.IEquatable<Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO EmptyField = new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public TargetSystemIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public TargetSystemIdentityDTO(Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public TargetSystemIdentityDTO(Framework.Attachments.Domain.TargetSystem domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public TargetSystemIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO Empty
        {
            get
            {
                return Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO identity1, Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO identity1, Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO) == other.GetType()) && this.Equals(((Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO other)
        {
            return (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.TargetSystem ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToTargetSystem(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainObjectBase), "BaseAbstractDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public abstract partial class BaseAbstractDTO
    {
        
        protected BaseAbstractDTO()
        {
        }
        
        protected BaseAbstractDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainObjectBase domainObject)
        {
            mappingService.MapDomainObjectBase(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.PersistentDomainObjectBase), "BasePersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public abstract partial class BasePersistentDTO : Framework.Attachments.Generated.DTO.BaseAbstractDTO, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private System.Guid _id;
        
        protected BasePersistentDTO()
        {
        }
        
        protected BasePersistentDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.PersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public bool IsNew
        {
            get
            {
                return (default(System.Guid) == this.Id);
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AuditPersistentDomainObjectBase), "BaseAuditPersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public abstract partial class BaseAuditPersistentDTO : Framework.Attachments.Generated.DTO.BasePersistentDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        protected BaseAuditPersistentDTO()
        {
        }
        
        protected BaseAuditPersistentDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AuditPersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAuditPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.PersistentDomainObjectBase), "BaseEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentTagSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentTagRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.DomainTypeSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.DomainTypeRemoveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.TargetSystemSaveEventDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.TargetSystemRemoveEventDTO))]
    public abstract partial class EventDTOBase
    {
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentVisualDTO : Framework.Attachments.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentIdentityDTO>
    {
        
        private string _name;
        
        public AttachmentVisualDTO()
        {
        }
        
        public AttachmentVisualDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentRichDTO))]
    public partial class AttachmentSimpleDTO : Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentIdentityDTO>
    {
        
        private string _name;
        
        public AttachmentSimpleDTO()
        {
        }
        
        public AttachmentSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        public AttachmentSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Attachments.Generated.DTO.AttachmentStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentRichDTO))]
    public partial class AttachmentFullDTO : Framework.Attachments.Generated.DTO.AttachmentSimpleDTO
    {
        
        private Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO _container;
        
        public AttachmentFullDTO()
        {
        }
        
        public AttachmentFullDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO Container
        {
            get
            {
                return this._container;
            }
            set
            {
                this._container = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentRichDTO : Framework.Attachments.Generated.DTO.AttachmentFullDTO
    {
        
        private byte[] _content;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagRichDTO> _tags = new System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagRichDTO>();
        
        public AttachmentRichDTO()
        {
        }
        
        public AttachmentRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagRichDTO> Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                this._tags = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentIdentityDTO>
    {
        
        private byte[] _content;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO> _tags = new System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO>();
        
        public AttachmentStrictDTO()
        {
        }
        
        public AttachmentStrictDTO(Framework.Attachments.Generated.DTO.AttachmentRichDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachment(this, source);
        }
        
        public AttachmentStrictDTO(Framework.Attachments.Generated.DTO.AttachmentRichDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentStrictDTO(Framework.Attachments.Generated.DTO.AttachmentFullDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachment(this, source);
        }
        
        public AttachmentStrictDTO(Framework.Attachments.Generated.DTO.AttachmentFullDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentStrictDTO(Framework.Attachments.Generated.DTO.AttachmentSimpleDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachment(this, source);
        }
        
        public AttachmentStrictDTO(Framework.Attachments.Generated.DTO.AttachmentSimpleDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForAttachment(this, source);
        }
        
        private AttachmentStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForAttachment(this, source);
        }
        
        private AttachmentStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO> Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                this._tags = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(this, domainObject);
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "RichIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentIntegrationRichDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO _container;
        
        private byte[] _content;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO> _tags;
        
        public AttachmentIntegrationRichDTO()
        {
        }
        
        public AttachmentIntegrationRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO Container
        {
            get
            {
                return this._container;
            }
            set
            {
                this._container = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO> Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                this._tags = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(this, domainObject);
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "SimpleIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentIntegrationSimpleDTO : Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public AttachmentIntegrationSimpleDTO()
        {
        }
        
        public AttachmentIntegrationSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(this, domainObject);
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentSaveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentEventRichDTO Attachment;
        
        public AttachmentSaveEventDTO()
        {
        }
        
        public AttachmentSaveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            this.Attachment = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentRemoveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentEventRichDTO Attachment;
        
        public AttachmentRemoveEventDTO()
        {
        }
        
        public AttachmentRemoveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            this.Attachment = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentEventRichDTO
    {
        
        private bool _active;
        
        private Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO _container;
        
        private byte[] _content;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO> _tags;
        
        public AttachmentEventRichDTO()
        {
        }
        
        public AttachmentEventRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO Container
        {
            get
            {
                return this._container;
            }
            set
            {
                this._container = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO> Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                this._tags = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public AttachmentEventSimpleDTO()
        {
        }
        
        public AttachmentEventSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO))]
    public partial class AttachmentContainerSimpleDTO : Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO>
    {
        
        private System.Guid _objectId;
        
        public AttachmentContainerSimpleDTO()
        {
        }
        
        public AttachmentContainerSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        public AttachmentContainerSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public virtual Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO))]
    public partial class AttachmentContainerFullDTO : Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO
    {
        
        private Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO _domainType;
        
        public AttachmentContainerFullDTO()
        {
        }
        
        public AttachmentContainerFullDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentContainerRichDTO : Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentRichDTO> _attachments = new System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentRichDTO>();
        
        public AttachmentContainerRichDTO()
        {
        }
        
        public AttachmentContainerRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentRichDTO> Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                this._attachments = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentContainerStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO>
    {
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentStrictDTO> _attachments = new System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentStrictDTO>();
        
        private Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO _domainType;
        
        private System.Guid _id;
        
        private System.Guid _objectId;
        
        public AttachmentContainerStrictDTO()
        {
        }
        
        public AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachmentContainer(this, source);
        }
        
        public AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachmentContainer(this, source);
        }
        
        public AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachmentContainer(this, source);
        }
        
        public AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForAttachmentContainer(this, source);
        }
        
        private AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForAttachmentContainer(this, source);
        }
        
        private AttachmentContainerStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentStrictDTO> Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                this._attachments = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToAttachmentContainer(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "RichIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerIntegrationRichDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO> _attachments;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO _domainType;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private System.Guid _objectId;
        
        public AttachmentContainerIntegrationRichDTO()
        {
        }
        
        public AttachmentContainerIntegrationRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO> Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                this._attachments = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToAttachmentContainer(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "SimpleIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerIntegrationSimpleDTO : Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private System.Guid _objectId;
        
        public AttachmentContainerIntegrationSimpleDTO()
        {
        }
        
        public AttachmentContainerIntegrationSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerSaveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO AttachmentContainer;
        
        public AttachmentContainerSaveEventDTO()
        {
        }
        
        public AttachmentContainerSaveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            this.AttachmentContainer = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerRemoveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO AttachmentContainer;
        
        public AttachmentContainerRemoveEventDTO()
        {
        }
        
        public AttachmentContainerRemoveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            this.AttachmentContainer = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerEventRichDTO
    {
        
        private bool _active;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentEventRichDTO> _attachments;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO _domainType;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private System.Guid _objectId;
        
        public AttachmentContainerEventRichDTO()
        {
        }
        
        public AttachmentContainerEventRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentEventRichDTO> Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                this._attachments = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private System.Guid _objectId;
        
        public AttachmentContainerEventSimpleDTO()
        {
        }
        
        public AttachmentContainerEventSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO))]
    public partial class AttachmentContainerReferenceSimpleDTO : Framework.Attachments.Generated.DTO.BaseAbstractDTO
    {
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceSimpleDTO()
        {
        }
        
        public AttachmentContainerReferenceSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public virtual Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO))]
    public partial class AttachmentContainerReferenceFullDTO : Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO
    {
        
        private Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO _domainType;
        
        public AttachmentContainerReferenceFullDTO()
        {
        }
        
        public AttachmentContainerReferenceFullDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentContainerReferenceRichDTO : Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO
    {
        
        public AttachmentContainerReferenceRichDTO()
        {
        }
        
        public AttachmentContainerReferenceRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentContainerReferenceStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>
    {
        
        private Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO _domainType;
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceStrictDTO()
        {
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachmentContainerReference(this, source);
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachmentContainerReference(this, source);
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachmentContainerReference(this, source);
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainerReference ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainerReference(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "RichIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerReferenceIntegrationRichDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>
    {
        
        private Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO _domainType;
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceIntegrationRichDTO()
        {
        }
        
        public AttachmentContainerReferenceIntegrationRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainerReference ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainerReference(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "SimpleIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerReferenceIntegrationSimpleDTO
    {
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceIntegrationSimpleDTO()
        {
        }
        
        public AttachmentContainerReferenceIntegrationSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerReferenceSaveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO AttachmentContainerReference;
        
        public AttachmentContainerReferenceSaveEventDTO()
        {
        }
        
        public AttachmentContainerReferenceSaveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            this.AttachmentContainerReference = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerReferenceRemoveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO AttachmentContainerReference;
        
        public AttachmentContainerReferenceRemoveEventDTO()
        {
        }
        
        public AttachmentContainerReferenceRemoveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            this.AttachmentContainerReference = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerReferenceEventRichDTO
    {
        
        private Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO _domainType;
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceEventRichDTO()
        {
        }
        
        public AttachmentContainerReferenceEventRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentContainerReferenceEventSimpleDTO
    {
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceEventSimpleDTO()
        {
        }
        
        public AttachmentContainerReferenceEventSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentTagVisualDTO : Framework.Attachments.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO>
    {
        
        private string _name;
        
        public AttachmentTagVisualDTO()
        {
        }
        
        public AttachmentTagVisualDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentTagFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentTagRichDTO))]
    public partial class AttachmentTagSimpleDTO : Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO>
    {
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagSimpleDTO()
        {
        }
        
        public AttachmentTagSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        public AttachmentTagSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.AttachmentTagRichDTO))]
    public partial class AttachmentTagFullDTO : Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO
    {
        
        private Framework.Attachments.Generated.DTO.AttachmentSimpleDTO _attachment;
        
        public AttachmentTagFullDTO()
        {
        }
        
        public AttachmentTagFullDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentSimpleDTO Attachment
        {
            get
            {
                return this._attachment;
            }
            set
            {
                this._attachment = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentTagRichDTO : Framework.Attachments.Generated.DTO.AttachmentTagFullDTO
    {
        
        public AttachmentTagRichDTO()
        {
        }
        
        public AttachmentTagRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        public override Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class AttachmentTagStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO>
    {
        
        private System.Guid _id;
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagStrictDTO()
        {
        }
        
        public AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.AttachmentTagRichDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentTagFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachmentTag(this, source);
        }
        
        public AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.AttachmentTagRichDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.AttachmentTagFullDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachmentTag(this, source);
        }
        
        public AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.AttachmentTagFullDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachmentTag(this, source);
        }
        
        public AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForAttachmentTag(this, source);
        }
        
        private AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForAttachmentTag(this, source);
        }
        
        private AttachmentTagStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "RichIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentTagIntegrationRichDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO _attachment;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagIntegrationRichDTO()
        {
        }
        
        public AttachmentTagIntegrationRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO Attachment
        {
            get
            {
                return this._attachment;
            }
            set
            {
                this._attachment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "SimpleIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentTagIntegrationSimpleDTO : Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagIntegrationSimpleDTO()
        {
        }
        
        public AttachmentTagIntegrationSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentTagSaveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO AttachmentTag;
        
        public AttachmentTagSaveEventDTO()
        {
        }
        
        public AttachmentTagSaveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            this.AttachmentTag = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentTagRemoveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO AttachmentTag;
        
        public AttachmentTagRemoveEventDTO()
        {
        }
        
        public AttachmentTagRemoveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            this.AttachmentTag = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentTagEventRichDTO
    {
        
        private bool _active;
        
        private Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO _attachment;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagEventRichDTO()
        {
        }
        
        public AttachmentTagEventRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO Attachment
        {
            get
            {
                return this._attachment;
            }
            set
            {
                this._attachment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class AttachmentTagEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagEventSimpleDTO()
        {
        }
        
        public AttachmentTagEventSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class DomainTypeVisualDTO : Framework.Attachments.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _name;
        
        public DomainTypeVisualDTO()
        {
        }
        
        public DomainTypeVisualDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.DomainTypeFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.DomainTypeRichDTO))]
    public partial class DomainTypeSimpleDTO : Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _fullTypeName;
        
        private bool _hasSecurityAttachment;
        
        private string _name;
        
        private string _nameSpace;
        
        public DomainTypeSimpleDTO()
        {
        }
        
        public DomainTypeSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public DomainTypeSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSecurityAttachment
        {
            get
            {
                return this._hasSecurityAttachment;
            }
            set
            {
                this._hasSecurityAttachment = value;
            }
        }
        
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
        
        public virtual Framework.Attachments.Generated.DTO.DomainTypeStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.DomainTypeRichDTO))]
    public partial class DomainTypeFullDTO : Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO
    {
        
        private Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO _targetSystem;
        
        public DomainTypeFullDTO()
        {
        }
        
        public DomainTypeFullDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.DomainTypeStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class DomainTypeRichDTO : Framework.Attachments.Generated.DTO.DomainTypeFullDTO
    {
        
        public DomainTypeRichDTO()
        {
        }
        
        public DomainTypeRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public override Framework.Attachments.Generated.DTO.DomainTypeStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class DomainTypeStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.DomainType, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.DomainType>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private System.Guid _id;
        
        public DomainTypeStrictDTO()
        {
        }
        
        public DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.DomainTypeRichDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.DomainTypeFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForDomainType(this, source);
        }
        
        public DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.DomainTypeRichDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.DomainTypeFullDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForDomainType(this, source);
        }
        
        public DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.DomainTypeFullDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForDomainType(this, source);
        }
        
        public DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForDomainType(this, source);
        }
        
        private DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForDomainType(this, source);
        }
        
        private DomainTypeStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(this, domainObject);
        }
        
        public Framework.Attachments.Domain.DomainType ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "RichIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class DomainTypeIntegrationRichDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.DomainType, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.DomainType>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _fullTypeName;
        
        private bool _hasSecurityAttachment;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _nameSpace;
        
        private Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO _targetSystem;
        
        public DomainTypeIntegrationRichDTO()
        {
        }
        
        public DomainTypeIntegrationRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSecurityAttachment
        {
            get
            {
                return this._hasSecurityAttachment;
            }
            set
            {
                this._hasSecurityAttachment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(this, domainObject);
        }
        
        public Framework.Attachments.Domain.DomainType ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "SimpleIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class DomainTypeIntegrationSimpleDTO : Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.DomainType>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _fullTypeName;
        
        private bool _hasSecurityAttachment;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _nameSpace;
        
        public DomainTypeIntegrationSimpleDTO()
        {
        }
        
        public DomainTypeIntegrationSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSecurityAttachment
        {
            get
            {
                return this._hasSecurityAttachment;
            }
            set
            {
                this._hasSecurityAttachment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(this, domainObject);
        }
        
        public Framework.Attachments.Domain.DomainType ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class DomainTypeSaveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO DomainType;
        
        public DomainTypeSaveEventDTO()
        {
        }
        
        public DomainTypeSaveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            this.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class DomainTypeRemoveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO DomainType;
        
        public DomainTypeRemoveEventDTO()
        {
        }
        
        public DomainTypeRemoveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            this.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class DomainTypeEventRichDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _fullTypeName;
        
        private bool _hasSecurityAttachment;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _nameSpace;
        
        private Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO _targetSystem;
        
        public DomainTypeEventRichDTO()
        {
        }
        
        public DomainTypeEventRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSecurityAttachment
        {
            get
            {
                return this._hasSecurityAttachment;
            }
            set
            {
                this._hasSecurityAttachment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.DomainType), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class DomainTypeEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _fullTypeName;
        
        private bool _hasSecurityAttachment;
        
        private System.Guid _id;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        private string _nameSpace;
        
        public DomainTypeEventSimpleDTO()
        {
        }
        
        public DomainTypeEventSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSecurityAttachment
        {
            get
            {
                return this._hasSecurityAttachment;
            }
            set
            {
                this._hasSecurityAttachment = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class TargetSystemVisualDTO : Framework.Attachments.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO>
    {
        
        private string _name;
        
        public TargetSystemVisualDTO()
        {
        }
        
        public TargetSystemVisualDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        public Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.TargetSystemFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.TargetSystemRichDTO))]
    public partial class TargetSystemSimpleDTO : Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO>
    {
        
        private bool _isMain;
        
        private string _name;
        
        public TargetSystemSimpleDTO()
        {
        }
        
        public TargetSystemSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        public TargetSystemSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Attachments.Generated.DTO.TargetSystemStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Attachments.Generated.DTO.TargetSystemRichDTO))]
    public partial class TargetSystemFullDTO : Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO
    {
        
        public TargetSystemFullDTO()
        {
        }
        
        public TargetSystemFullDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        public override Framework.Attachments.Generated.DTO.TargetSystemStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class TargetSystemRichDTO : Framework.Attachments.Generated.DTO.TargetSystemFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeRichDTO> _domainTypes = new System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeRichDTO>();
        
        public TargetSystemRichDTO()
        {
        }
        
        public TargetSystemRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeRichDTO> DomainTypes
        {
            get
            {
                return this._domainTypes;
            }
            set
            {
                this._domainTypes = value;
            }
        }
        
        public override Framework.Attachments.Generated.DTO.TargetSystemStrictDTO ToStrict()
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Attachments")]
    public partial class TargetSystemStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.TargetSystem, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.TargetSystem>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO>
    {
        
        private System.Guid _id;
        
        private string _name;
        
        public TargetSystemStrictDTO()
        {
        }
        
        public TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.TargetSystemRichDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.TargetSystemFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForTargetSystem(this, source);
        }
        
        public TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.TargetSystemRichDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.TargetSystemFullDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForTargetSystem(this, source);
        }
        
        public TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.TargetSystemFullDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForTargetSystem(this, source);
        }
        
        public TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Attachments.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForTargetSystem(this, source);
        }
        
        private TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source, Framework.Attachments.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForTargetSystem(this, source);
        }
        
        private TargetSystemStrictDTO(Framework.Attachments.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Attachments.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(this, domainObject);
        }
        
        public Framework.Attachments.Domain.TargetSystem ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToTargetSystem(this);
        }
        
        public Framework.Attachments.Domain.TargetSystem ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToTargetSystem(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "RichIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class TargetSystemIntegrationRichDTO : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.TargetSystem, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.TargetSystem>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO> _domainTypes;
        
        private System.Guid _id;
        
        private bool _isMain;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public TargetSystemIntegrationRichDTO()
        {
        }
        
        public TargetSystemIntegrationRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO> DomainTypes
        {
            get
            {
                return this._domainTypes;
            }
            set
            {
                this._domainTypes = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(this, domainObject);
        }
        
        public Framework.Attachments.Domain.TargetSystem ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToTargetSystem(this);
        }
        
        public Framework.Attachments.Domain.TargetSystem ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToTargetSystem(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "SimpleIntegrationDTO", Framework.DomainDriven.Serialization.DTORole.Integration)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class TargetSystemIntegrationSimpleDTO : Framework.DomainDriven.IConvertMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.TargetSystem>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private bool _isMain;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public TargetSystemIntegrationSimpleDTO()
        {
        }
        
        public TargetSystemIntegrationSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public void MapToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(this, domainObject);
        }
        
        public Framework.Attachments.Domain.TargetSystem ToDomainObject(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToTargetSystem(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Save")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class TargetSystemSaveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO TargetSystem;
        
        public TargetSystemSaveEventDTO()
        {
        }
        
        public TargetSystemSaveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            this.TargetSystem = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "OperationEventDTO", Framework.DomainDriven.Serialization.DTORole.Event, ExternalData="Operation = Remove")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class TargetSystemRemoveEventDTO : Framework.Attachments.Generated.DTO.EventDTOBase
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO TargetSystem;
        
        public TargetSystemRemoveEventDTO()
        {
        }
        
        public TargetSystemRemoveEventDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            this.TargetSystem = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "RichEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class TargetSystemEventRichDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO> _domainTypes;
        
        private System.Guid _id;
        
        private bool _isMain;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public TargetSystemEventRichDTO()
        {
        }
        
        public TargetSystemEventRichDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO> DomainTypes
        {
            get
            {
                return this._domainTypes;
            }
            set
            {
                this._domainTypes = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.TargetSystem), "SimpleEventDTO", Framework.DomainDriven.Serialization.DTORole.Event)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class TargetSystemEventSimpleDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private System.Guid _id;
        
        private bool _isMain;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private string _name;
        
        public TargetSystemEventSimpleDTO()
        {
        }
        
        public TargetSystemEventSimpleDTO(Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    #region 
	static
    public class LambdaHelper
    {
        
        public static Framework.Attachments.Generated.DTO.AttachmentFullDTO ToFullDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO ToFullDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO ToFullDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagFullDTO ToFullDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeFullDTO ToFullDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemFullDTO ToFullDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemFullDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.Attachment domainObject)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentIdentityDTO(domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO(domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO(domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.DomainType domainObject)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO(domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.TargetSystem domainObject)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO(domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentRichDTO ToRichDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO ToRichDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO ToRichDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagRichDTO ToRichDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeRichDTO ToRichDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemRichDTO ToRichDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentEventRichDTO ToRichEventDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO ToRichEventDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO ToRichEventDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO ToRichEventDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO ToRichEventDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO ToRichEventDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO> ToRichEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO ToRichIntegrationDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO ToRichIntegrationDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO ToRichIntegrationDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO ToRichIntegrationDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO ToRichIntegrationDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO ToRichIntegrationDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO> ToRichIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO> ToRichIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO> ToRichIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO> ToRichIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO> ToRichIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO> ToRichIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO ToSimpleEventDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO ToSimpleEventDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventSimpleDTO ToSimpleEventDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagEventSimpleDTO ToSimpleEventDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO ToSimpleEventDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO ToSimpleEventDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO> ToSimpleEventDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO ToSimpleIntegrationDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO ToSimpleIntegrationDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO ToSimpleIntegrationDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO ToSimpleIntegrationDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO ToSimpleIntegrationDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO ToSimpleIntegrationDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO> ToSimpleIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO> ToSimpleIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO> ToSimpleIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO> ToSimpleIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO> ToSimpleIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO> ToSimpleIntegrationDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject, mappingService));
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentVisualDTO ToVisualDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.AttachmentTagVisualDTO ToVisualDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.AttachmentTagVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.DomainTypeVisualDTO ToVisualDTO(this Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.DomainTypeVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Attachments.Generated.DTO.TargetSystemVisualDTO ToVisualDTO(this Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Attachments.Generated.DTO.TargetSystemVisualDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.AttachmentTagVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.DomainTypeVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Attachments.Generated.DTO.TargetSystemVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.TargetSystem> domainObjects, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Attachments.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
    }
    #endregion
    
    public partial interface IAttachmentsDTOMappingService : Framework.DomainDriven.IDTOMappingService<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentVisualDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentSimpleDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentFullDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentRichDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentEventRichDTO mappingObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventSimpleDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagVisualDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagFullDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagRichDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO mappingObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagEventSimpleDTO mappingObject);
        
        void MapAuditPersistentDomainObjectBase(Framework.Attachments.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO mappingObject);
        
        void MapDomainObjectBase(Framework.Attachments.Domain.DomainObjectBase domainObject, Framework.Attachments.Generated.DTO.BaseAbstractDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeVisualDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeFullDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeRichDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO mappingObject, Framework.Attachments.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO mappingObject, Framework.Attachments.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO mappingObject);
        
        void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO mappingObject);
        
        void MapPersistentDomainObjectBase(Framework.Attachments.Domain.PersistentDomainObjectBase domainObject, Framework.Attachments.Generated.DTO.BasePersistentDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemVisualDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemFullDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemRichDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO mappingObject, Framework.Attachments.Domain.TargetSystem domainObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO mappingObject, Framework.Attachments.Domain.TargetSystem domainObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.TargetSystem domainObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO mappingObject);
        
        void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO mappingObject);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIdentityDTO attachmentIdentityDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO, Framework.Attachments.Domain.AttachmentContainer master);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO attachmentRichIntegrationDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO attachmentSimpleIntegrationDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO attachmentContainerIdentityDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO, bool allowCreate);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO attachmentContainerRichIntegrationDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO attachmentContainerRichIntegrationDTO, bool allowCreate);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO attachmentContainerSimpleIntegrationDTO);
        
        Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO attachmentContainerReferenceStrictDTO);
        
        Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO attachmentContainerReferenceRichIntegrationDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO attachmentTagIdentityDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO, Framework.Attachments.Domain.Attachment master);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO attachmentTagRichIntegrationDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO attachmentTagSimpleIntegrationDTO);
        
        Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentityDTO);
        
        Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO domainTypeStrictDTO);
        
        Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO domainTypeRichIntegrationDTO);
        
        Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO domainTypeSimpleIntegrationDTO);
        
        Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentityDTO);
        
        Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO targetSystemStrictDTO);
        
        Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO targetSystemStrictDTO, bool allowCreate);
        
        Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO targetSystemRichIntegrationDTO);
        
        Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO targetSystemRichIntegrationDTO, bool allowCreate);
        
        Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO targetSystemSimpleIntegrationDTO);
    }
    
    public abstract partial class AttachmentsServerPrimitiveDTOMappingServiceBase : Framework.DomainDriven.DTOMappingService<Framework.Attachments.BLL.IAttachmentsBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.AuditPersistentDomainObjectBase, System.Guid, Framework.Core.Ignore>, Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService
    {
        
        protected AttachmentsServerPrimitiveDTOMappingServiceBase(Framework.Attachments.BLL.IAttachmentsBLLContext context) : 
                base(context)
        {
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Container, null))
            {
                mappingObject.Container = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Container, this);
            }
            else
            {
                mappingObject.Container = null;
            }
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentRichDTO mappingObject)
        {
            mappingObject.Content = domainObject.Content;
            mappingObject.Tags = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Tags, this);
        }
        
        public virtual void MapAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Content = mappingObject.Content;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.Tags, null))
            {
                this.GetCollectionMappingService<Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO, Framework.Attachments.Domain.AttachmentTag>(detailDTO => this.ToAttachmentTag(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.Attachment, Framework.Attachments.Domain.AttachmentTag>(domainObject, detail)).Map(mappingObject.Tags, domainObject.Tags);
            }
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.Container, null))
            {
                mappingObject.Container = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Container, this);
            }
            else
            {
                mappingObject.Container = null;
            }
            mappingObject.Content = domainObject.Content;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Tags = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTOList(domainObject.Tags, this);
        }
        
        public virtual void MapAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Content = mappingObject.Content;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.Tags, null))
            {
                this.GetCollectionMappingService<Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO, Framework.Attachments.Domain.AttachmentTag>(detailDTO => this.ToAttachmentTag(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.Attachment, Framework.Attachments.Domain.AttachmentTag>(domainObject, detail)).Map(mappingObject.Tags, domainObject.Tags);
            }
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.Container, null))
            {
                mappingObject.Container = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Container, this);
            }
            else
            {
                mappingObject.Container = null;
            }
            mappingObject.Content = domainObject.Content;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Tags = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Tags, this);
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Attachments.Generated.DTO.AttachmentEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerSimpleDTO mappingObject)
        {
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerRichDTO mappingObject)
        {
            mappingObject.Attachments = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Attachments, this);
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.Attachments, null))
            {
                this.GetCollectionMappingService<Framework.Attachments.Generated.DTO.AttachmentStrictDTO, Framework.Attachments.Domain.Attachment>(detailDTO => this.ToAttachment(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.Attachment>(domainObject, detail)).Map(mappingObject.Attachments, domainObject.Attachments);
            }
            if (!object.Equals(mappingObject.DomainType, default(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Attachments = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTOList(domainObject.Attachments, this);
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.Attachments, null))
            {
                this.GetCollectionMappingService<Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO, Framework.Attachments.Domain.Attachment>(detailDTO => this.ToAttachment(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.Attachment>(domainObject, detail)).Map(mappingObject.Attachments, domainObject.Attachments);
            }
            if (!object.Equals(mappingObject.DomainType, default(Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.Attachments = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.Attachments, this);
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceSimpleDTO mappingObject)
        {
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceRichDTO mappingObject)
        {
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            if (!object.Equals(mappingObject.DomainType, default(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            if (!object.Equals(mappingObject.DomainType, default(Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO mappingObject)
        {
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Attachments.Generated.DTO.AttachmentContainerReferenceEventSimpleDTO mappingObject)
        {
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Attachment, null))
            {
                mappingObject.Attachment = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Attachment, this);
            }
            else
            {
                mappingObject.Attachment = null;
            }
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagRichDTO mappingObject)
        {
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.Attachment, null))
            {
                mappingObject.Attachment = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.Attachment, this);
            }
            else
            {
                mappingObject.Attachment = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            if (!object.ReferenceEquals(domainObject.Attachment, null))
            {
                mappingObject.Attachment = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.Attachment, this);
            }
            else
            {
                mappingObject.Attachment = null;
            }
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Attachments.Generated.DTO.AttachmentTagEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapAuditPersistentDomainObjectBase(Framework.Attachments.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Attachments.Generated.DTO.BaseAuditPersistentDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
        }
        
        public virtual void MapDomainObjectBase(Framework.Attachments.Domain.DomainObjectBase domainObject, Framework.Attachments.Generated.DTO.BaseAbstractDTO mappingObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeSimpleDTO mappingObject)
        {
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.HasSecurityAttachment = domainObject.HasSecurityAttachment;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.TargetSystem, null))
            {
                mappingObject.TargetSystem = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TargetSystem, this);
            }
            else
            {
                mappingObject.TargetSystem = null;
            }
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeRichDTO mappingObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO mappingObject, Framework.Attachments.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.HasSecurityAttachment = domainObject.HasSecurityAttachment;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
            if (!object.ReferenceEquals(domainObject.TargetSystem, null))
            {
                mappingObject.TargetSystem = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleIntegrationDTO(domainObject.TargetSystem, this);
            }
            else
            {
                mappingObject.TargetSystem = null;
            }
        }
        
        public virtual void MapDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO mappingObject, Framework.Attachments.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.HasSecurityAttachment = domainObject.HasSecurityAttachment;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
        }
        
        public virtual void MapDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.HasSecurityAttachment = domainObject.HasSecurityAttachment;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
            if (!object.ReferenceEquals(domainObject.TargetSystem, null))
            {
                mappingObject.TargetSystem = Framework.Attachments.Generated.DTO.LambdaHelper.ToSimpleEventDTO(domainObject.TargetSystem, this);
            }
            else
            {
                mappingObject.TargetSystem = null;
            }
        }
        
        public virtual void MapDomainType(Framework.Attachments.Domain.DomainType domainObject, Framework.Attachments.Generated.DTO.DomainTypeEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.HasSecurityAttachment = domainObject.HasSecurityAttachment;
            mappingObject.Id = domainObject.Id;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
        }
        
        public virtual void MapPersistentDomainObjectBase(Framework.Attachments.Domain.PersistentDomainObjectBase domainObject, Framework.Attachments.Generated.DTO.BasePersistentDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemSimpleDTO mappingObject)
        {
            mappingObject.IsMain = domainObject.IsMain;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemFullDTO mappingObject)
        {
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemRichDTO mappingObject)
        {
            mappingObject.DomainTypes = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.DomainTypes, this);
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO mappingObject, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.DomainTypes = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichIntegrationDTOList(domainObject.DomainTypes, this);
            mappingObject.Id = domainObject.Id;
            mappingObject.IsMain = domainObject.IsMain;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO mappingObject, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsMain = domainObject.IsMain;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO mappingObject, Framework.Attachments.Domain.TargetSystem domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemEventRichDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.DomainTypes = Framework.Attachments.Generated.DTO.LambdaHelper.ToRichEventDTOList(domainObject.DomainTypes, this);
            mappingObject.Id = domainObject.Id;
            mappingObject.IsMain = domainObject.IsMain;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Attachments.Domain.TargetSystem domainObject, Framework.Attachments.Generated.DTO.TargetSystemEventSimpleDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.Id = domainObject.Id;
            mappingObject.IsMain = domainObject.IsMain;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Name = domainObject.Name;
        }
        
        protected virtual void MapToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, TDomainObject domainObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Attachments.Domain.DomainObjectBase
        {
            mappingObject.MapToDomainObject(this, domainObject);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIdentityDTO attachmentIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.Attachment>(attachmentIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.AttachmentStrictDTO, Framework.Attachments.Domain.Attachment>(attachmentStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO, Framework.Attachments.Domain.AttachmentContainer attachmentContainer)
        {
            return this.ToDomainObject(attachmentStrictDTO, () => new Framework.Attachments.Domain.Attachment(attachmentContainer));
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO attachmentRichIntegrationDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO, Framework.Attachments.Domain.Attachment>(attachmentRichIntegrationDTO);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationRichDTO attachmentRichIntegrationDTO, Framework.Attachments.Domain.AttachmentContainer attachmentContainer)
        {
            return this.ToDomainObject(attachmentRichIntegrationDTO, () => new Framework.Attachments.Domain.Attachment(attachmentContainer));
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Attachments.Generated.DTO.AttachmentIntegrationSimpleDTO attachmentSimpleIntegrationDTO)
        {
            return this.GetById<Framework.Attachments.Domain.Attachment>(attachmentSimpleIntegrationDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIdentityDTO attachmentContainerIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO, Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(attachmentContainerStrictDTO, () => new Framework.Attachments.Domain.AttachmentContainer());
            }
            else
            {
                return this.ToAttachmentContainer(attachmentContainerStrictDTO);
            }
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO attachmentContainerRichIntegrationDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO, Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerRichIntegrationDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationRichDTO attachmentContainerRichIntegrationDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(attachmentContainerRichIntegrationDTO, () => new Framework.Attachments.Domain.AttachmentContainer());
            }
            else
            {
                return this.ToAttachmentContainer(attachmentContainerRichIntegrationDTO);
            }
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Attachments.Generated.DTO.AttachmentContainerIntegrationSimpleDTO attachmentContainerSimpleIntegrationDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerSimpleIntegrationDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO attachmentContainerReferenceStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceStrictDTO, Framework.Attachments.Domain.AttachmentContainerReference>(attachmentContainerReferenceStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO attachmentContainerReferenceRichIntegrationDTO)
        {
            return this.ToDomainObjectBase<Framework.Attachments.Generated.DTO.AttachmentContainerReferenceIntegrationRichDTO, Framework.Attachments.Domain.AttachmentContainerReference>(attachmentContainerReferenceRichIntegrationDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIdentityDTO attachmentTagIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentTag>(attachmentTagIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO, Framework.Attachments.Domain.AttachmentTag>(attachmentTagStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO, Framework.Attachments.Domain.Attachment attachment)
        {
            return this.ToDomainObject(attachmentTagStrictDTO, () => new Framework.Attachments.Domain.AttachmentTag(attachment));
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO attachmentTagRichIntegrationDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO, Framework.Attachments.Domain.AttachmentTag>(attachmentTagRichIntegrationDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationRichDTO attachmentTagRichIntegrationDTO, Framework.Attachments.Domain.Attachment attachment)
        {
            return this.ToDomainObject(attachmentTagRichIntegrationDTO, () => new Framework.Attachments.Domain.AttachmentTag(attachment));
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Attachments.Generated.DTO.AttachmentTagIntegrationSimpleDTO attachmentTagSimpleIntegrationDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentTag>(attachmentTagSimpleIntegrationDTO.Id);
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Attachments.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetById<TDomainObject>(mappingObject.Id, Framework.DomainDriven.BLL.IdCheckMode.CheckAll);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, System.Func<TDomainObject> createFunc)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Attachments.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetByIdOrCreate<TDomainObject>(mappingObject.Id, createFunc);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObjectBase<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Attachments.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Attachments.Domain.DomainObjectBase, new ()
        {
            TDomainObject domainObject = new TDomainObject();
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        public virtual Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.DomainType>(domainTypeIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeStrictDTO domainTypeStrictDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.DomainTypeStrictDTO, Framework.Attachments.Domain.DomainType>(domainTypeStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO domainTypeRichIntegrationDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.DomainTypeIntegrationRichDTO, Framework.Attachments.Domain.DomainType>(domainTypeRichIntegrationDTO);
        }
        
        public virtual Framework.Attachments.Domain.DomainType ToDomainType(Framework.Attachments.Generated.DTO.DomainTypeIntegrationSimpleDTO domainTypeSimpleIntegrationDTO)
        {
            return this.GetById<Framework.Attachments.Domain.DomainType>(domainTypeSimpleIntegrationDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.TargetSystem>(targetSystemIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO targetSystemStrictDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.TargetSystemStrictDTO, Framework.Attachments.Domain.TargetSystem>(targetSystemStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemStrictDTO targetSystemStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(targetSystemStrictDTO, () => new Framework.Attachments.Domain.TargetSystem());
            }
            else
            {
                return this.ToTargetSystem(targetSystemStrictDTO);
            }
        }
        
        public virtual Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO targetSystemRichIntegrationDTO)
        {
            return this.ToDomainObject<Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO, Framework.Attachments.Domain.TargetSystem>(targetSystemRichIntegrationDTO);
        }
        
        public virtual Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationRichDTO targetSystemRichIntegrationDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(targetSystemRichIntegrationDTO, () => new Framework.Attachments.Domain.TargetSystem());
            }
            else
            {
                return this.ToTargetSystem(targetSystemRichIntegrationDTO);
            }
        }
        
        public virtual Framework.Attachments.Domain.TargetSystem ToTargetSystem(Framework.Attachments.Generated.DTO.TargetSystemIntegrationSimpleDTO targetSystemSimpleIntegrationDTO)
        {
            return this.GetById<Framework.Attachments.Domain.TargetSystem>(targetSystemSimpleIntegrationDTO.Id);
        }
    }
    
    public partial class AttachmentsServerPrimitiveDTOMappingService : Framework.Attachments.Generated.DTO.AttachmentsServerPrimitiveDTOMappingServiceBase
    {
        
        public AttachmentsServerPrimitiveDTOMappingService(Framework.Attachments.BLL.IAttachmentsBLLContext context) : 
                base(context)
        {
        }
    }
}
