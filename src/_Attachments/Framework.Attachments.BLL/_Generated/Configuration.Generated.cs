//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Attachments.BLL
{
    
    
    public partial class AttachmentBLL : Framework.Attachments.BLL.SecurityDomainBLLBase<Framework.Attachments.Domain.Attachment, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Attachments.BLL.IAttachmentBLL
    {
        
		partial void Initialize();
        
        public AttachmentBLL(Framework.Attachments.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Attachments.Domain.Attachment> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class AttachmentBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Attachments.BLL.IConfigurationBLLContext, Framework.Attachments.BLL.IAttachmentBLL, Framework.Attachments.BLL.AttachmentBLL, Framework.Attachments.Domain.Attachment, Framework.Attachments.AttachmentsSecurityOperationCode>, Framework.Attachments.BLL.IAttachmentBLLFactory
    {
        
        public AttachmentBLLFactory(Framework.Attachments.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class AttachmentContainerBLL : Framework.Attachments.BLL.SecurityDomainBLLBase<Framework.Attachments.Domain.AttachmentContainer, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Attachments.BLL.IAttachmentContainerBLL
    {
        
		partial void Initialize();
        
        public AttachmentContainerBLL(Framework.Attachments.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Attachments.Domain.AttachmentContainer> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class AttachmentContainerBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Attachments.BLL.IConfigurationBLLContext, Framework.Attachments.BLL.IAttachmentContainerBLL, Framework.Attachments.BLL.AttachmentContainerBLL, Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.AttachmentsSecurityOperationCode>, Framework.Attachments.BLL.IAttachmentContainerBLLFactory
    {
        
        public AttachmentContainerBLLFactory(Framework.Attachments.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ConfigurationBLLFactoryContainer : Framework.DomainDriven.BLL.BLLContextContainer<Framework.Attachments.BLL.IConfigurationBLLContext>, Framework.Attachments.BLL.IConfigurationBLLFactoryContainer
    {
        
        private Framework.Attachments.BLL.IAttachmentBLL attachmentBLL;
        
        private Framework.Attachments.BLL.IAttachmentContainerBLL attachmentContainerBLL;
        
        private Framework.Attachments.BLL.ConfigurationDefaultBLLFactory defaultBLLFactory;
        
        private Framework.Attachments.BLL.ConfigurationImplementedBLLFactory implementedBLLFactory;
        
        public ConfigurationBLLFactoryContainer(Framework.Attachments.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public Framework.Attachments.BLL.IAttachmentBLL Attachment
        {
            get
            {
                if (object.ReferenceEquals(this.attachmentBLL, null))
                {
                    this.attachmentBLL = this.AttachmentFactory.Create();
                }
                return this.attachmentBLL;
            }
        }
        
        public Framework.Attachments.BLL.IAttachmentContainerBLL AttachmentContainer
        {
            get
            {
                if (object.ReferenceEquals(this.attachmentContainerBLL, null))
                {
                    this.attachmentContainerBLL = this.AttachmentContainerFactory.Create();
                }
                return this.attachmentContainerBLL;
            }
        }
        
        public Framework.Attachments.BLL.IAttachmentContainerBLLFactory AttachmentContainerFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Attachments.BLL.IAttachmentContainerBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Attachments.BLL.IAttachmentBLLFactory AttachmentFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Attachments.BLL.IAttachmentBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.AttachmentsSecurityOperationCode, System.Guid> Default
        {
            get
            {
                if (object.ReferenceEquals(this.defaultBLLFactory, null))
                {
                    this.defaultBLLFactory = new Framework.Attachments.BLL.ConfigurationDefaultBLLFactory(this.Context);
                }
                return this.defaultBLLFactory;
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.AttachmentsSecurityOperationCode, System.Guid> Implemented
        {
            get
            {
                if (object.ReferenceEquals(this.implementedBLLFactory, null))
                {
                    this.implementedBLLFactory = new Framework.Attachments.BLL.ConfigurationImplementedBLLFactory(this.Context);
                }
                return this.implementedBLLFactory;
            }
        }
        
        public static void RegisterBLLFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
        {
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Attachments.BLL.IAttachmentBLLFactory, Framework.Attachments.BLL.AttachmentBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Attachments.BLL.IAttachmentContainerBLLFactory, Framework.Attachments.BLL.AttachmentContainerBLLFactory>(serviceCollection);
        }
    }
    
    public partial class ConfigurationDefaultBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Attachments.BLL.IConfigurationBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.DomainObjectBase, Framework.Attachments.AttachmentsSecurityOperationCode, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.AttachmentsSecurityOperationCode, System.Guid>
    {
        
        public ConfigurationDefaultBLLFactory(Framework.Attachments.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            return new Framework.Attachments.BLL.DomainBLLBase<TDomainObject>(this.Context);
        }
    }
    
    public partial class ConfigurationImplementedBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Attachments.BLL.IConfigurationBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.DomainObjectBase, Framework.Attachments.AttachmentsSecurityOperationCode, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.AttachmentsSecurityOperationCode, System.Guid>
    {
        
        public ConfigurationImplementedBLLFactory(Framework.Attachments.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Attachment));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainer));
            }
            else
            {
                return new Framework.Attachments.BLL.DomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Attachments.Domain.Attachment>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainerFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Attachments.Domain.AttachmentContainer>)(securityProvider)))));
            }
            else
            {
                return new Framework.Attachments.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.Attachments.AttachmentsSecurityOperationCode securityOperation)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainerFactory.Create(securityOperation)));
            }
            else
            {
                return new Framework.Attachments.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.BLLSecurityMode bllSecurityMode)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainerFactory.Create(bllSecurityMode)));
            }
            else
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(new Framework.Attachments.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context)));
            }
        }
    }
}
