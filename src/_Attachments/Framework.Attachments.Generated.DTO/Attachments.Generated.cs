//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Configuration.Generated.DTO
{
    
    
    public partial interface IAttachmentsClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapFullToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentFullDTO currentSource);
        
        void MapFullToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO currentSource);
        
        void MapFullToStrictForAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO currentSource);
        
        void MapFullToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentTagFullDTO currentSource);
        
        void MapFullToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.DomainTypeFullDTO currentSource);
        
        void MapRichToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentRichDTO currentSource);
        
        void MapRichToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO currentSource);
        
        void MapRichToStrictForAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO currentSource);
        
        void MapRichToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentTagRichDTO currentSource);
        
        void MapRichToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.DomainTypeRichDTO currentSource);
        
        void MapSimpleToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentSimpleDTO currentSource);
        
        void MapSimpleToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO currentSource);
        
        void MapSimpleToStrictForAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO currentSource);
        
        void MapSimpleToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO currentSource);
        
        void MapSimpleToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO currentSource);
    }
    
    public abstract partial class AttachmentsClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapBasePersistentToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapFullToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DomainType, null))
            {
                target.DomainType = source.DomainType.Identity;
            }
            else
            {
                target.DomainType = default(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DomainType, null))
            {
                target.DomainType = source.DomainType.Identity;
            }
            else
            {
                target.DomainType = default(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentTagFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.DomainTypeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Content, null))
            {
                target.Content = System.Linq.Enumerable.ToArray(source.Content);
            }
            else
            {
                target.Content = null;
            }
            if (!object.ReferenceEquals(source.Tags, null))
            {
                target.Tags = Framework.Core.EnumerableExtensions.ToList(source.Tags, attachmentTag => new Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO(attachmentTag));
            }
        }
        
        public virtual void MapRichToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Attachments, null))
            {
                target.Attachments = Framework.Core.EnumerableExtensions.ToList(source.Attachments, attachment => new Framework.Configuration.Generated.DTO.AttachmentStrictDTO(attachment));
            }
        }
        
        public virtual void MapRichToStrictForAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentTagRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.DomainTypeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.ObjectId = source.ObjectId;
        }
        
        public virtual void MapSimpleToStrictForAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.ObjectId = source.ObjectId;
        }
        
        public virtual void MapSimpleToStrictForAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO target, Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO target, Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
    }
    
    public partial class AttachmentsClientPrimitiveDTOMappingService : Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingServiceBase
    {
        
        private static Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService _default = new Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService();
        
        public static Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService Default
        {
            get
            {
                return Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService._default;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public class AttachmentIdentityDTO : System.IEquatable<Framework.Configuration.Generated.DTO.AttachmentIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Configuration.Generated.DTO.AttachmentIdentityDTO EmptyField = new Framework.Configuration.Generated.DTO.AttachmentIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public AttachmentIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public AttachmentIdentityDTO(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public AttachmentIdentityDTO(Framework.Attachments.Domain.Attachment domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public AttachmentIdentityDTO()
        {
        }
        
        public AttachmentIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentIdentityDTO Empty
        {
            get
            {
                return Framework.Configuration.Generated.DTO.AttachmentIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO identity1, Framework.Configuration.Generated.DTO.AttachmentIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO identity1, Framework.Configuration.Generated.DTO.AttachmentIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO) == other.GetType()) && this.Equals(((Framework.Configuration.Generated.DTO.AttachmentIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public class AttachmentContainerIdentityDTO : System.IEquatable<Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO EmptyField = new Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public AttachmentContainerIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public AttachmentContainerIdentityDTO(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public AttachmentContainerIdentityDTO(Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public AttachmentContainerIdentityDTO()
        {
        }
        
        public AttachmentContainerIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO Empty
        {
            get
            {
                return Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO identity1, Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO identity1, Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO) == other.GetType()) && this.Equals(((Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public class AttachmentTagIdentityDTO : System.IEquatable<Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO EmptyField = new Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public AttachmentTagIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public AttachmentTagIdentityDTO(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public AttachmentTagIdentityDTO(Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public AttachmentTagIdentityDTO()
        {
        }
        
        public AttachmentTagIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO Empty
        {
            get
            {
                return Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO identity1, Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO identity1, Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO) == other.GetType()) && this.Equals(((Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.Configuration.ConfigurationViewDomainObjectAttribute(Framework.Configuration.ConfigurationSecurityOperationCode.Disabled)]
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainType), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public class DomainTypeIdentityDTO : System.IEquatable<Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO EmptyField = new Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public DomainTypeIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public DomainTypeIdentityDTO(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public DomainTypeIdentityDTO(Framework.Configuration.Domain.DomainType domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public DomainTypeIdentityDTO()
        {
        }
        
        public DomainTypeIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO Empty
        {
            get
            {
                return Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO identity1, Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO identity1, Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO) == other.GetType()) && this.Equals(((Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Configuration.Domain.DomainType ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainObjectBase), "BaseAbstractDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public abstract partial class BaseAbstractDTO
    {
        
        protected BaseAbstractDTO()
        {
        }
        
        protected BaseAbstractDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainObjectBase domainObject)
        {
            mappingService.MapDomainObjectBase(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.PersistentDomainObjectBase), "BasePersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public abstract partial class BasePersistentDTO : Framework.Configuration.Generated.DTO.BaseAbstractDTO, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private System.Guid _id;
        
        protected BasePersistentDTO()
        {
        }
        
        protected BasePersistentDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.PersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public bool IsNew
        {
            get
            {
                return (default(System.Guid) == this.Id);
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.AuditPersistentDomainObjectBase), "BaseAuditPersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public abstract partial class BaseAuditPersistentDTO : Framework.Configuration.Generated.DTO.BasePersistentDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        protected BaseAuditPersistentDTO()
        {
        }
        
        protected BaseAuditPersistentDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.AuditPersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAuditPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentVisualDTO : Framework.Configuration.Generated.DTO.BasePersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentIdentityDTO>
    {
        
        private string _name;
        
        public AttachmentVisualDTO()
        {
        }
        
        public AttachmentVisualDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(this, domainObject);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentRichDTO))]
    public partial class AttachmentSimpleDTO : Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentIdentityDTO>
    {
        
        private string _name;
        
        public AttachmentSimpleDTO()
        {
        }
        
        public AttachmentSimpleDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        public AttachmentSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(this, domainObject);
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
        
        public virtual Framework.Configuration.Generated.DTO.AttachmentStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentRichDTO))]
    public partial class AttachmentFullDTO : Framework.Configuration.Generated.DTO.AttachmentSimpleDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>
    {
        
        private Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO _container;
        
        public AttachmentFullDTO()
        {
        }
        
        public AttachmentFullDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO Container
        {
            get
            {
                return this._container;
            }
            set
            {
                this._container = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachment(this, domainObject);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentRichDTO : Framework.Configuration.Generated.DTO.AttachmentFullDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment>
    {
        
        private byte[] _content;
        
        private System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagRichDTO> _tags = new System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagRichDTO>();
        
        public AttachmentRichDTO()
        {
        }
        
        public AttachmentRichDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachment(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagRichDTO> Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                this._tags = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachment(this, domainObject);
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.Attachment), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.Attachment>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentIdentityDTO>
    {
        
        private byte[] _content;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO> _tags = new System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO>();
        
        public AttachmentStrictDTO()
        {
        }
        
        public AttachmentStrictDTO(Framework.Configuration.Generated.DTO.AttachmentRichDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachment(this, source);
        }
        
        public AttachmentStrictDTO(Framework.Configuration.Generated.DTO.AttachmentRichDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentStrictDTO(Framework.Configuration.Generated.DTO.AttachmentFullDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachment(this, source);
        }
        
        public AttachmentStrictDTO(Framework.Configuration.Generated.DTO.AttachmentFullDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentStrictDTO(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachment(this, source);
        }
        
        public AttachmentStrictDTO(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForAttachment(this, source);
        }
        
        private AttachmentStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForAttachment(this, source);
        }
        
        private AttachmentStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO> Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                this._tags = value;
            }
        }
        
        public void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.Attachment domainObject)
        {
            mappingService.MapAttachment(this, domainObject);
        }
        
        public Framework.Attachments.Domain.Attachment ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachment(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO))]
    public partial class AttachmentContainerSimpleDTO : Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO>
    {
        
        private System.Guid _objectId;
        
        public AttachmentContainerSimpleDTO()
        {
        }
        
        public AttachmentContainerSimpleDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        public AttachmentContainerSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public virtual Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO))]
    public partial class AttachmentContainerFullDTO : Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer, System.Guid>
    {
        
        private Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO _domainType;
        
        public AttachmentContainerFullDTO()
        {
        }
        
        public AttachmentContainerFullDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentContainerRichDTO : Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer>
    {
        
        private System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentRichDTO> _attachments = new System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentRichDTO>();
        
        public AttachmentContainerRichDTO()
        {
        }
        
        public AttachmentContainerRichDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainer(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentRichDTO> Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                this._attachments = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToAttachmentContainer(this, allowCreate);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainer), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentContainerStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainer>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO>
    {
        
        private System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentStrictDTO> _attachments = new System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentStrictDTO>();
        
        private Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO _domainType;
        
        private System.Guid _id;
        
        private System.Guid _objectId;
        
        public AttachmentContainerStrictDTO()
        {
        }
        
        public AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachmentContainer(this, source);
        }
        
        public AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachmentContainer(this, source);
        }
        
        public AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachmentContainer(this, source);
        }
        
        public AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForAttachmentContainer(this, source);
        }
        
        private AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForAttachmentContainer(this, source);
        }
        
        private AttachmentContainerStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentStrictDTO> Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                this._attachments = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            mappingService.MapAttachmentContainer(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainer(this);
        }
        
        public Framework.Attachments.Domain.AttachmentContainer ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToAttachmentContainer(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO))]
    public partial class AttachmentContainerReferenceSimpleDTO : Framework.Configuration.Generated.DTO.BaseAbstractDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>
    {
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceSimpleDTO()
        {
        }
        
        public AttachmentContainerReferenceSimpleDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
        
        public virtual Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO))]
    public partial class AttachmentContainerReferenceFullDTO : Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>
    {
        
        private Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO _domainType;
        
        public AttachmentContainerReferenceFullDTO()
        {
        }
        
        public AttachmentContainerReferenceFullDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentContainerReferenceRichDTO : Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>
    {
        
        public AttachmentContainerReferenceRichDTO()
        {
        }
        
        public AttachmentContainerReferenceRichDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentContainerReference(domainObject, this);
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainerReference ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainerReference(this);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentContainerReference), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentContainerReferenceStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentContainerReference>
    {
        
        private Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO _domainType;
        
        private System.Guid _objectId;
        
        public AttachmentContainerReferenceStrictDTO()
        {
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachmentContainerReference(this, source);
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachmentContainerReference(this, source);
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachmentContainerReference(this, source);
        }
        
        public AttachmentContainerReferenceStrictDTO(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ObjectId
        {
            get
            {
                return this._objectId;
            }
            set
            {
                this._objectId = value;
            }
        }
        
        public void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            mappingService.MapAttachmentContainerReference(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentContainerReference ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentContainerReference(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentTagVisualDTO : Framework.Configuration.Generated.DTO.BasePersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO>
    {
        
        private string _name;
        
        public AttachmentTagVisualDTO()
        {
        }
        
        public AttachmentTagVisualDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(this, domainObject);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentTagFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO))]
    public partial class AttachmentTagSimpleDTO : Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO>
    {
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagSimpleDTO()
        {
        }
        
        public AttachmentTagSimpleDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        public AttachmentTagSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
        
        public virtual Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO))]
    public partial class AttachmentTagFullDTO : Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>
    {
        
        private Framework.Configuration.Generated.DTO.AttachmentSimpleDTO _attachment;
        
        public AttachmentTagFullDTO()
        {
        }
        
        public AttachmentTagFullDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Generated.DTO.AttachmentSimpleDTO Attachment
        {
            get
            {
                return this._attachment;
            }
            set
            {
                this._attachment = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentTagRichDTO : Framework.Configuration.Generated.DTO.AttachmentTagFullDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag>
    {
        
        public AttachmentTagRichDTO()
        {
        }
        
        public AttachmentTagRichDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAttachmentTag(domainObject, this);
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
        
        public override Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Attachments.Domain.AttachmentTag), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class AttachmentTagStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Attachments.Domain.AttachmentTag>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO>
    {
        
        private System.Guid _id;
        
        private string _name;
        
        private string _value;
        
        public AttachmentTagStrictDTO()
        {
        }
        
        public AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentTagFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForAttachmentTag(this, source);
        }
        
        public AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.AttachmentTagFullDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForAttachmentTag(this, source);
        }
        
        public AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.AttachmentTagFullDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForAttachmentTag(this, source);
        }
        
        public AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForAttachmentTag(this, source);
        }
        
        private AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForAttachmentTag(this, source);
        }
        
        private AttachmentTagStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            mappingService.MapAttachmentTag(this, domainObject);
        }
        
        public Framework.Attachments.Domain.AttachmentTag ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToAttachmentTag(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainType), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class DomainTypeVisualDTO : Framework.Configuration.Generated.DTO.BasePersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType, System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _name;
        
        public DomainTypeVisualDTO()
        {
        }
        
        public DomainTypeVisualDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(this, domainObject);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainType), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.DomainTypeFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.DomainTypeRichDTO))]
    public partial class DomainTypeSimpleDTO : Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _fullTypeName;
        
        private bool _hasSecurityAttachment;
        
        private string _name;
        
        private string _nameSpace;
        
        public DomainTypeSimpleDTO()
        {
        }
        
        public DomainTypeSimpleDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public DomainTypeSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasSecurityAttachment
        {
            get
            {
                return this._hasSecurityAttachment;
            }
            set
            {
                this._hasSecurityAttachment = value;
            }
        }
        
        public Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
        
        public virtual void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(this, domainObject);
        }
        
        public Framework.Configuration.Domain.DomainType ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
        
        public virtual Framework.Configuration.Generated.DTO.DomainTypeStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainType), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Configuration.Generated.DTO.DomainTypeRichDTO))]
    public partial class DomainTypeFullDTO : Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType, System.Guid>
    {
        
        private Framework.Configuration.Domain.TargetSystem _targetSystem;
        
        public DomainTypeFullDTO()
        {
        }
        
        public DomainTypeFullDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Configuration.Domain.TargetSystem TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapDomainType(this, domainObject);
        }
        
        public override Framework.Configuration.Generated.DTO.DomainTypeStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainType), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class DomainTypeRichDTO : Framework.Configuration.Generated.DTO.DomainTypeFullDTO, Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType>
    {
        
        private System.Collections.Generic.List<Framework.Configuration.Domain.DomainTypeEventOperation> _eventOperations = new System.Collections.Generic.List<Framework.Configuration.Domain.DomainTypeEventOperation>();
        
        public DomainTypeRichDTO()
        {
        }
        
        public DomainTypeRichDTO(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Configuration.Domain.DomainTypeEventOperation> EventOperations
        {
            get
            {
                return this._eventOperations;
            }
            set
            {
                this._eventOperations = value;
            }
        }
        
        public override void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject)
        {
            base.MapToDomainObject(mappingService, domainObject);
            mappingService.MapDomainType(this, domainObject);
        }
        
        public Framework.Configuration.Domain.DomainType ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
        
        public override Framework.Configuration.Generated.DTO.DomainTypeStrictDTO ToStrict()
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Configuration.Domain.DomainType), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Configuration")]
    public partial class DomainTypeStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, Framework.Configuration.Domain.DomainType>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private System.Guid _id;
        
        public DomainTypeStrictDTO()
        {
        }
        
        public DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.DomainTypeRichDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.DomainTypeFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForDomainType(this, source);
        }
        
        public DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.DomainTypeRichDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.DomainTypeFullDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForDomainType(this, source);
        }
        
        public DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.DomainTypeFullDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForDomainType(this, source);
        }
        
        public DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService) : 
                this(((Framework.Configuration.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForDomainType(this, source);
        }
        
        private DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source, Framework.Configuration.Generated.DTO.IAttachmentsClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForDomainType(this, source);
        }
        
        private DomainTypeStrictDTO(Framework.Configuration.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Configuration.Generated.DTO.AttachmentsClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        public void MapToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService, Framework.Configuration.Domain.DomainType domainObject)
        {
            mappingService.MapDomainType(this, domainObject);
        }
        
        public Framework.Configuration.Domain.DomainType ToDomainObject(Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
    }
    
    #region 
	static
    public class LambdaHelper
    {
        
        public static Framework.Configuration.Generated.DTO.AttachmentFullDTO ToFullDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO ToFullDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO ToFullDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentTagFullDTO ToFullDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.DomainTypeFullDTO ToFullDTO(this Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeFullDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.DomainTypeFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Configuration.Domain.DomainType> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.Attachment domainObject)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentIdentityDTO(domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO(domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO ToIdentityDTO(this Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO(domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentRichDTO ToRichDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO ToRichDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO ToRichDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentTagRichDTO ToRichDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.DomainTypeRichDTO ToRichDTO(this Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.DomainTypeRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Configuration.Domain.DomainType> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO ToSimpleDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO ToSimpleDTO(this Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainer> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentContainerReference> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Configuration.Domain.DomainType> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentVisualDTO ToVisualDTO(this Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO ToVisualDTO(this Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Configuration.Generated.DTO.DomainTypeVisualDTO ToVisualDTO(this Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return new Framework.Configuration.Generated.DTO.DomainTypeVisualDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Configuration.Generated.DTO.DomainTypeVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Configuration.Domain.DomainType> domainObjects, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Configuration.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
    }
    #endregion
    
    public partial interface IAttachmentsDTOMappingService : Framework.DomainDriven.IDTOMappingService<Framework.Configuration.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentVisualDTO mappingObject);
        
        void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentVisualDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentSimpleDTO mappingObject);
        
        void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentFullDTO mappingObject);
        
        void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentFullDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentRichDTO mappingObject);
        
        void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentRichDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO mappingObject);
        
        void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO mappingObject);
        
        void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO mappingObject);
        
        void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO mappingObject);
        
        void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagFullDTO mappingObject);
        
        void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagFullDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagRichDTO mappingObject);
        
        void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject);
        
        void MapAuditPersistentDomainObjectBase(Framework.Configuration.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO mappingObject);
        
        void MapDomainObjectBase(Framework.Configuration.Domain.DomainObjectBase domainObject, Framework.Configuration.Generated.DTO.BaseAbstractDTO mappingObject);
        
        void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeVisualDTO mappingObject);
        
        void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeVisualDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO mappingObject);
        
        void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeFullDTO mappingObject);
        
        void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeFullDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeRichDTO mappingObject);
        
        void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeRichDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject);
        
        void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject);
        
        void MapPersistentDomainObjectBase(Framework.Configuration.Domain.PersistentDomainObjectBase domainObject, Framework.Configuration.Generated.DTO.BasePersistentDTO mappingObject);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO attachmentIdentityDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO attachmentSimpleDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentRichDTO attachmentRichDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO);
        
        Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO, Framework.Attachments.Domain.AttachmentContainer master);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO attachmentContainerIdentityDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO attachmentContainerSimpleDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO attachmentContainerRichDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO attachmentContainerRichDTO, bool allowCreate);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO);
        
        Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO, bool allowCreate);
        
        Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO attachmentContainerReferenceRichDTO);
        
        Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO attachmentContainerReferenceStrictDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO attachmentTagIdentityDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO attachmentTagSimpleDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO attachmentTagRichDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO);
        
        Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO, Framework.Attachments.Domain.Attachment master);
        
        Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentityDTO);
        
        Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO domainTypeSimpleDTO);
        
        Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeRichDTO domainTypeRichDTO);
        
        Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO domainTypeStrictDTO);
    }
    
    public abstract partial class AttachmentsServerPrimitiveDTOMappingServiceBase : Framework.DomainDriven.DTOMappingService<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.Domain.AuditPersistentDomainObjectBase, System.Guid, long>, Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService
    {
        
        protected AttachmentsServerPrimitiveDTOMappingServiceBase(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentVisualDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Container, null))
            {
                mappingObject.Container = Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Container, this);
            }
            else
            {
                mappingObject.Container = null;
            }
        }
        
        public virtual void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentFullDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
        }
        
        public virtual void MapAttachment(Framework.Attachments.Domain.Attachment domainObject, Framework.Configuration.Generated.DTO.AttachmentRichDTO mappingObject)
        {
            mappingObject.Content = domainObject.Content;
            mappingObject.Tags = Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Tags, this);
        }
        
        public virtual void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentRichDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Content = mappingObject.Content;
            if (!object.ReferenceEquals(mappingObject.Tags, null))
            {
                this.GetCollectionMappingService<Framework.Configuration.Generated.DTO.AttachmentTagRichDTO, Framework.Attachments.Domain.AttachmentTag>(detailDTO => this.ToAttachmentTag(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.Attachment, Framework.Attachments.Domain.AttachmentTag>(domainObject, detail)).Map(mappingObject.Tags, domainObject.Tags);
            }
        }
        
        public virtual void MapAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO mappingObject, Framework.Attachments.Domain.Attachment domainObject)
        {
            domainObject.Content = mappingObject.Content;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.Tags, null))
            {
                this.GetCollectionMappingService<Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO, Framework.Attachments.Domain.AttachmentTag>(detailDTO => this.ToAttachmentTag(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.Attachment, Framework.Attachments.Domain.AttachmentTag>(domainObject, detail)).Map(mappingObject.Tags, domainObject.Tags);
            }
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO mappingObject)
        {
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
        }
        
        public virtual void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerFullDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (!object.Equals(mappingObject.DomainType, default(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
        }
        
        public virtual void MapAttachmentContainer(Framework.Attachments.Domain.AttachmentContainer domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO mappingObject)
        {
            mappingObject.Attachments = Framework.Configuration.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Attachments, this);
        }
        
        public virtual void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.Attachments, null))
            {
                this.GetCollectionMappingService<Framework.Configuration.Generated.DTO.AttachmentRichDTO, Framework.Attachments.Domain.Attachment>(detailDTO => this.ToAttachment(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.Attachment>(domainObject, detail)).Map(mappingObject.Attachments, domainObject.Attachments);
            }
        }
        
        public virtual void MapAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainer domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.Attachments, null))
            {
                this.GetCollectionMappingService<Framework.Configuration.Generated.DTO.AttachmentStrictDTO, Framework.Attachments.Domain.Attachment>(detailDTO => this.ToAttachment(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.Attachment>(domainObject, detail)).Map(mappingObject.Attachments, domainObject.Attachments);
            }
            if (!object.Equals(mappingObject.DomainType, default(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO mappingObject)
        {
            mappingObject.ObjectId = domainObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceFullDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            if (!object.Equals(mappingObject.DomainType, default(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Attachments.Domain.AttachmentContainerReference domainObject, Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO mappingObject)
        {
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
        }
        
        public virtual void MapAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentContainerReference domainObject)
        {
            if (!object.Equals(mappingObject.DomainType, default(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.ObjectId = mappingObject.ObjectId;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagVisualDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Attachment, null))
            {
                mappingObject.Attachment = Framework.Configuration.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Attachment, this);
            }
            else
            {
                mappingObject.Attachment = null;
            }
        }
        
        public virtual void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagFullDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
        }
        
        public virtual void MapAttachmentTag(Framework.Attachments.Domain.AttachmentTag domainObject, Framework.Configuration.Generated.DTO.AttachmentTagRichDTO mappingObject)
        {
        }
        
        public virtual void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
        }
        
        public virtual void MapAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO mappingObject, Framework.Attachments.Domain.AttachmentTag domainObject)
        {
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapAuditPersistentDomainObjectBase(Framework.Configuration.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Configuration.Generated.DTO.BaseAuditPersistentDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
        }
        
        public virtual void MapDomainObjectBase(Framework.Configuration.Domain.DomainObjectBase domainObject, Framework.Configuration.Generated.DTO.BaseAbstractDTO mappingObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeVisualDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO mappingObject)
        {
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.HasSecurityAttachment = domainObject.HasSecurityAttachment;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
        }
        
        public virtual void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeFullDTO mappingObject)
        {
            mappingObject.TargetSystem = domainObject.TargetSystem;
        }
        
        public virtual void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeFullDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Configuration.Domain.DomainType domainObject, Framework.Configuration.Generated.DTO.DomainTypeRichDTO mappingObject)
        {
            //mappingObject.EventOperations = domainObject.EventOperations;
        }
        
        public virtual void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeRichDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO mappingObject, Framework.Configuration.Domain.DomainType domainObject)
        {
        }
        
        public virtual void MapPersistentDomainObjectBase(Framework.Configuration.Domain.PersistentDomainObjectBase domainObject, Framework.Configuration.Generated.DTO.BasePersistentDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
        }
        
        protected virtual void MapToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, TDomainObject domainObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Configuration.Domain.DomainObjectBase
        {
            mappingObject.MapToDomainObject(this, domainObject);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentIdentityDTO attachmentIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.Attachment>(attachmentIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentSimpleDTO attachmentSimpleDTO)
        {
            return this.GetById<Framework.Attachments.Domain.Attachment>(attachmentSimpleDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentRichDTO attachmentRichDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.AttachmentRichDTO, Framework.Attachments.Domain.Attachment>(attachmentRichDTO);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentRichDTO attachmentRichDTO, Framework.Attachments.Domain.AttachmentContainer attachmentContainer)
        {
            return this.ToDomainObject(attachmentRichDTO, () => new Framework.Attachments.Domain.Attachment(attachmentContainer));
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.AttachmentStrictDTO, Framework.Attachments.Domain.Attachment>(attachmentStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.Attachment ToAttachment(Framework.Configuration.Generated.DTO.AttachmentStrictDTO attachmentStrictDTO, Framework.Attachments.Domain.AttachmentContainer attachmentContainer)
        {
            return this.ToDomainObject(attachmentStrictDTO, () => new Framework.Attachments.Domain.Attachment(attachmentContainer));
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerIdentityDTO attachmentContainerIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerSimpleDTO attachmentContainerSimpleDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerSimpleDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO attachmentContainerRichDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO, Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerRichDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerRichDTO attachmentContainerRichDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(attachmentContainerRichDTO, () => new Framework.Attachments.Domain.AttachmentContainer());
            }
            else
            {
                return this.ToAttachmentContainer(attachmentContainerRichDTO);
            }
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO, Framework.Attachments.Domain.AttachmentContainer>(attachmentContainerStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainer ToAttachmentContainer(Framework.Configuration.Generated.DTO.AttachmentContainerStrictDTO attachmentContainerStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(attachmentContainerStrictDTO, () => new Framework.Attachments.Domain.AttachmentContainer());
            }
            else
            {
                return this.ToAttachmentContainer(attachmentContainerStrictDTO);
            }
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO attachmentContainerReferenceRichDTO)
        {
            return this.ToDomainObjectBase<Framework.Configuration.Generated.DTO.AttachmentContainerReferenceRichDTO, Framework.Attachments.Domain.AttachmentContainerReference>(attachmentContainerReferenceRichDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentContainerReference ToAttachmentContainerReference(Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO attachmentContainerReferenceStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Configuration.Generated.DTO.AttachmentContainerReferenceStrictDTO, Framework.Attachments.Domain.AttachmentContainerReference>(attachmentContainerReferenceStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagIdentityDTO attachmentTagIdentityDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentTag>(attachmentTagIdentityDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagSimpleDTO attachmentTagSimpleDTO)
        {
            return this.GetById<Framework.Attachments.Domain.AttachmentTag>(attachmentTagSimpleDTO.Id);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO attachmentTagRichDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.AttachmentTagRichDTO, Framework.Attachments.Domain.AttachmentTag>(attachmentTagRichDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagRichDTO attachmentTagRichDTO, Framework.Attachments.Domain.Attachment attachment)
        {
            return this.ToDomainObject(attachmentTagRichDTO, () => new Framework.Attachments.Domain.AttachmentTag(attachment));
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO, Framework.Attachments.Domain.AttachmentTag>(attachmentTagStrictDTO);
        }
        
        public virtual Framework.Attachments.Domain.AttachmentTag ToAttachmentTag(Framework.Configuration.Generated.DTO.AttachmentTagStrictDTO attachmentTagStrictDTO, Framework.Attachments.Domain.Attachment attachment)
        {
            return this.ToDomainObject(attachmentTagStrictDTO, () => new Framework.Attachments.Domain.AttachmentTag(attachment));
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Configuration.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetById<TDomainObject>(mappingObject.Id, Framework.DomainDriven.BLL.IdCheckMode.CheckAll);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, System.Func<TDomainObject> createFunc)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Configuration.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetByIdOrCreate<TDomainObject>(mappingObject.Id, createFunc);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObjectBase<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Configuration.Generated.DTO.IAttachmentsDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Configuration.Domain.DomainObjectBase, new ()
        {
            TDomainObject domainObject = new TDomainObject();
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        public virtual Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentityDTO)
        {
            return this.GetById<Framework.Configuration.Domain.DomainType>(domainTypeIdentityDTO.Id);
        }
        
        public virtual Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeSimpleDTO domainTypeSimpleDTO)
        {
            return this.GetById<Framework.Configuration.Domain.DomainType>(domainTypeSimpleDTO.Id);
        }
        
        public virtual Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeRichDTO domainTypeRichDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.DomainTypeRichDTO, Framework.Configuration.Domain.DomainType>(domainTypeRichDTO);
        }
        
        public virtual Framework.Configuration.Domain.DomainType ToDomainType(Framework.Configuration.Generated.DTO.DomainTypeStrictDTO domainTypeStrictDTO)
        {
            return this.ToDomainObject<Framework.Configuration.Generated.DTO.DomainTypeStrictDTO, Framework.Configuration.Domain.DomainType>(domainTypeStrictDTO);
        }
    }
    
    public partial class AttachmentsServerPrimitiveDTOMappingService : Framework.Configuration.Generated.DTO.AttachmentsServerPrimitiveDTOMappingServiceBase
    {
        
        public AttachmentsServerPrimitiveDTOMappingService(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
}
