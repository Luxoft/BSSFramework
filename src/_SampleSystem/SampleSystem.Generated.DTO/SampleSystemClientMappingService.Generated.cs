//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleSystem.Generated.DTO
{
    
    
    public partial interface ISampleSystemClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForNoSecurityObject(SampleSystem.Generated.DTO.NoSecurityObjectStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForNoSecurityObject(SampleSystem.Generated.DTO.NoSecurityObjectStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapEmployee(SampleSystem.Generated.DTO.EmployeeUpdateDTO target, SampleSystem.Generated.DTO.EmployeeStrictDTO currentSource);
        
        void MapEmployee(SampleSystem.Generated.DTO.EmployeeUpdateDTO target, SampleSystem.Generated.DTO.EmployeeStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeStrictDTO baseSource);
        
        void MapEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO currentSource);
        
        void MapEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO baseSource);
        
        void MapEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO currentSource);
        
        void MapEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO baseSource);
        
        void MapEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO currentSource);
        
        void MapEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO baseSource);
        
        void MapEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO currentSource);
        
        void MapEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO baseSource);
        
        void MapExample1(SampleSystem.Generated.DTO.Example1UpdateDTO target, SampleSystem.Generated.DTO.Example1StrictDTO currentSource);
        
        void MapExample1(SampleSystem.Generated.DTO.Example1UpdateDTO target, SampleSystem.Generated.DTO.Example1StrictDTO currentSource, SampleSystem.Generated.DTO.Example1StrictDTO baseSource);
        
        void MapExample2(SampleSystem.Generated.DTO.Example2UpdateDTO target, SampleSystem.Generated.DTO.Example2StrictDTO currentSource);
        
        void MapExample2(SampleSystem.Generated.DTO.Example2UpdateDTO target, SampleSystem.Generated.DTO.Example2StrictDTO currentSource, SampleSystem.Generated.DTO.Example2StrictDTO baseSource);
        
        void MapFullToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.AddressFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitHrDepartmentFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentFullDTO currentSource);
        
        void MapFullToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToFullDTO currentSource);
        
        void MapFullToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.CompanyLegalEntityFullDTO currentSource);
        
        void MapFullToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.CountryFullDTO currentSource);
        
        void MapFullToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.EmployeeFullDTO currentSource);
        
        void MapFullToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkFullDTO currentSource);
        
        void MapFullToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneFullDTO currentSource);
        
        void MapFullToStrictForEmployeeEmailChangeModel(SampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailChangeModelFullDTO currentSource);
        
        void MapFullToStrictForEmployeeEmailMassChangeModel(SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelFullDTO currentSource);
        
        void MapFullToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneFullDTO currentSource);
        
        void MapFullToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkFullDTO currentSource);
        
        void MapFullToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.Example1FullDTO currentSource);
        
        void MapFullToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.Example2FullDTO currentSource);
        
        void MapFullToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentFullDTO currentSource);
        
        void MapFullToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentEmployeePositionFullDTO currentSource);
        
        void MapFullToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeFullDTO currentSource);
        
        void MapFullToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.LocationFullDTO currentSource);
        
        void MapFullToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitFullDTO currentSource);
        
        void MapFullToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkFullDTO currentSource);
        
        void MapFullToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkFullDTO currentSource);
        
        void MapFullToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.PrincipalFullDTO currentSource);
        
        void MapFullToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjFullDTO currentSource);
        
        void MapFullToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjContainerFullDTO currentSource);
        
        void MapFullToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.TestImmutableObjFullDTO currentSource);
        
        void MapRichToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.AddressRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitHrDepartmentRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentRichDTO currentSource);
        
        void MapRichToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToRichDTO currentSource);
        
        void MapRichToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.CompanyLegalEntityRichDTO currentSource);
        
        void MapRichToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.CountryRichDTO currentSource);
        
        void MapRichToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.EmployeeRichDTO currentSource);
        
        void MapRichToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkRichDTO currentSource);
        
        void MapRichToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneRichDTO currentSource);
        
        void MapRichToStrictForEmployeeEmailChangeModel(SampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailChangeModelRichDTO currentSource);
        
        void MapRichToStrictForEmployeeEmailMassChangeModel(SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelRichDTO currentSource);
        
        void MapRichToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO currentSource);
        
        void MapRichToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkRichDTO currentSource);
        
        void MapRichToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.Example1RichDTO currentSource);
        
        void MapRichToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.Example2RichDTO currentSource);
        
        void MapRichToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRichDTO currentSource);
        
        void MapRichToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentEmployeePositionRichDTO currentSource);
        
        void MapRichToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeRichDTO currentSource);
        
        void MapRichToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.LocationRichDTO currentSource);
        
        void MapRichToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitRichDTO currentSource);
        
        void MapRichToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkRichDTO currentSource);
        
        void MapRichToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkRichDTO currentSource);
        
        void MapRichToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.PrincipalRichDTO currentSource);
        
        void MapRichToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.TestImmutableObjRichDTO currentSource);
        
        void MapSimpleToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.AddressSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitHrDepartmentSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToSimpleDTO currentSource);
        
        void MapSimpleToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO currentSource);
        
        void MapSimpleToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.CountrySimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.EmployeeSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployeeEmailChangeModel(SampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailChangeModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployeeEmailMassChangeModel(SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkSimpleDTO currentSource);
        
        void MapSimpleToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.Example1SimpleDTO currentSource);
        
        void MapSimpleToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.Example2SimpleDTO currentSource);
        
        void MapSimpleToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentSimpleDTO currentSource);
        
        void MapSimpleToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentEmployeePositionSimpleDTO currentSource);
        
        void MapSimpleToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeSimpleDTO currentSource);
        
        void MapSimpleToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.LocationSimpleDTO currentSource);
        
        void MapSimpleToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitSimpleDTO currentSource);
        
        void MapSimpleToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkSimpleDTO currentSource);
        
        void MapSimpleToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkSimpleDTO currentSource);
        
        void MapSimpleToStrictForNoSecurityObject(SampleSystem.Generated.DTO.NoSecurityObjectStrictDTO target, SampleSystem.Generated.DTO.NoSecurityObjectSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.PrincipalSimpleDTO currentSource);
        
        void MapSimpleToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjSimpleDTO currentSource);
        
        void MapSimpleToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjContainerSimpleDTO currentSource);
        
        void MapSimpleToStrictForTestDefaultFieldsMappingObj(SampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO target, SampleSystem.Generated.DTO.TestDefaultFieldsMappingObjSimpleDTO currentSource);
        
        void MapSimpleToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.TestImmutableObjSimpleDTO currentSource);
    }
    
    public abstract partial class SampleSystemClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, SampleSystem.Generated.DTO.ISampleSystemClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForNoSecurityObject(SampleSystem.Generated.DTO.NoSecurityObjectStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBasePersistentToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForNoSecurityObject(SampleSystem.Generated.DTO.NoSecurityObjectStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapEmployee(SampleSystem.Generated.DTO.EmployeeUpdateDTO target, SampleSystem.Generated.DTO.EmployeeStrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Age = Framework.Core.Maybe.Return(currentSource.Age);
            target.BirthDate = Framework.Core.Maybe.Return(currentSource.BirthDate);
            target.CanBePPM = Framework.Core.Maybe.Return(currentSource.CanBePPM);
            target.CellPhones = this.ExtractUpdateDataFromSingle<SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO, SampleSystem.Generated.DTO.EmployeeCellPhoneIdentityDTO, SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO>(currentSource.CellPhones, employeeCellPhone => new SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO(employeeCellPhone, this));
            target.EducationDuration = Framework.Core.Maybe.Return(currentSource.EducationDuration);
            target.Email = Framework.Core.Maybe.Return(currentSource.Email);
            target.EmployeeToEmployeeLinks = this.ExtractUpdateDataFromSingle<SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkIdentityDTO, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO>(currentSource.EmployeeToEmployeeLinks, employeeToEmployeeLink => new SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO(employeeToEmployeeLink, this));
            target.ExternalId = Framework.Core.Maybe.Return(currentSource.ExternalId);
            target.Gender = Framework.Core.Maybe.Return(currentSource.Gender);
            target.Id = currentSource.Id;
            target.Interphone = Framework.Core.Maybe.Return(currentSource.Interphone);
            target.Landlinephone = Framework.Core.Maybe.Return(currentSource.Landlinephone);
            target.LastActionDate = Framework.Core.Maybe.Return(currentSource.LastActionDate);
            target.Login = currentSource.Login;
            target.NameEng = Framework.Core.Maybe.Return(currentSource.NameEng);
            target.NameNative = Framework.Core.Maybe.Return(currentSource.NameNative);
            target.NameRussian = Framework.Core.Maybe.Return(currentSource.NameRussian);
            target.NonValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.NonValidateVirtualProp);
            target.PersonalCellPhones = this.ExtractSecurityUpdateDataFromSingle<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneIdentityDTO, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO>(currentSource.PersonalCellPhones, employeePersonalCellPhone => new SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO(employeePersonalCellPhone, this));
            target.Pin = Framework.Core.Maybe.Return(currentSource.Pin);
            target.PlannedHireDate = Framework.Core.Maybe.Return(currentSource.PlannedHireDate);
            target.Position = currentSource.Position;
            target.Ppm = Framework.Core.Maybe.Return(currentSource.Ppm);
            target.RegistrationType = Framework.Core.Maybe.Return(currentSource.RegistrationType);
            target.RestrictionHandler = Framework.Core.Maybe.Return(currentSource.RestrictionHandler);
            target.Role = Framework.Core.Maybe.Return(currentSource.Role);
            target.RoleDegree = Framework.Core.Maybe.Return(currentSource.RoleDegree);
            target.Specializations = this.ExtractUpdateDataFromSingle<SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIdentityDTO, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO>(currentSource.Specializations, employeeAndEmployeeSpecializationLink => new SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO(employeeAndEmployeeSpecializationLink, this));
            target.VacationApprover = Framework.Core.Maybe.Return(currentSource.VacationApprover);
            target.ValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.ValidateVirtualProp);
            target.Version = currentSource.Version;
            target.WorkPeriod = Framework.Core.Maybe.Return(currentSource.WorkPeriod);
        }
        
        public virtual void MapEmployee(SampleSystem.Generated.DTO.EmployeeUpdateDTO target, SampleSystem.Generated.DTO.EmployeeStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeStrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.Age != currentSource.Age)
            {
                target.Age = Framework.Core.Maybe.Return(currentSource.Age);
            }
            if (baseSource.BirthDate != currentSource.BirthDate)
            {
                target.BirthDate = Framework.Core.Maybe.Return(currentSource.BirthDate);
            }
            if (baseSource.CanBePPM != currentSource.CanBePPM)
            {
                target.CanBePPM = Framework.Core.Maybe.Return(currentSource.CanBePPM);
            }
            target.CellPhones = this.ExtractUpdateDataL<SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO, SampleSystem.Generated.DTO.EmployeeCellPhoneIdentityDTO, SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO>(currentSource.CellPhones, baseSource.CellPhones, (currentSourceItem, baseSourceItem) => new SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO(currentSourceItem, baseSourceItem, this), currentSourceItem => new SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO(currentSourceItem, this));
            if (baseSource.EducationDuration != currentSource.EducationDuration)
            {
                target.EducationDuration = Framework.Core.Maybe.Return(currentSource.EducationDuration);
            }
            if (baseSource.Email != currentSource.Email)
            {
                target.Email = Framework.Core.Maybe.Return(currentSource.Email);
            }
            target.EmployeeToEmployeeLinks = this.ExtractUpdateDataL<SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkIdentityDTO, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO>(currentSource.EmployeeToEmployeeLinks, baseSource.EmployeeToEmployeeLinks, (currentSourceItem, baseSourceItem) => new SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO(currentSourceItem, baseSourceItem, this), currentSourceItem => new SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO(currentSourceItem, this));
            if (baseSource.ExternalId != currentSource.ExternalId)
            {
                target.ExternalId = Framework.Core.Maybe.Return(currentSource.ExternalId);
            }
            if (baseSource.Gender != currentSource.Gender)
            {
                target.Gender = Framework.Core.Maybe.Return(currentSource.Gender);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            if (baseSource.Interphone != currentSource.Interphone)
            {
                target.Interphone = Framework.Core.Maybe.Return(currentSource.Interphone);
            }
            if (baseSource.Landlinephone != currentSource.Landlinephone)
            {
                target.Landlinephone = Framework.Core.Maybe.Return(currentSource.Landlinephone);
            }
            if (baseSource.LastActionDate != currentSource.LastActionDate)
            {
                target.LastActionDate = Framework.Core.Maybe.Return(currentSource.LastActionDate);
            }
            if (baseSource.Login != currentSource.Login)
            {
                target.Login = currentSource.Login;
            }
            if (baseSource.NameEng != currentSource.NameEng)
            {
                target.NameEng = Framework.Core.Maybe.Return(currentSource.NameEng);
            }
            if (baseSource.NameNative != currentSource.NameNative)
            {
                target.NameNative = Framework.Core.Maybe.Return(currentSource.NameNative);
            }
            if (baseSource.NameRussian != currentSource.NameRussian)
            {
                target.NameRussian = Framework.Core.Maybe.Return(currentSource.NameRussian);
            }
            if (baseSource.NonValidateVirtualProp != currentSource.NonValidateVirtualProp)
            {
                target.NonValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.NonValidateVirtualProp);
            }
            target.PersonalCellPhones = this.ExtractSecurityUpdateDataL<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneIdentityDTO, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO>(currentSource.PersonalCellPhones, baseSource.PersonalCellPhones, (currentSourceItem, baseSourceItem) => new SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO(currentSourceItem, baseSourceItem, this), currentSourceItem => new SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO(currentSourceItem, this));
            if (baseSource.Pin != currentSource.Pin)
            {
                target.Pin = Framework.Core.Maybe.Return(currentSource.Pin);
            }
            if (baseSource.PlannedHireDate != currentSource.PlannedHireDate)
            {
                target.PlannedHireDate = Framework.Core.Maybe.Return(currentSource.PlannedHireDate);
            }
            if (baseSource.Position != currentSource.Position)
            {
                target.Position = currentSource.Position;
            }
            if (baseSource.Ppm != currentSource.Ppm)
            {
                target.Ppm = Framework.Core.Maybe.Return(currentSource.Ppm);
            }
            if (baseSource.RegistrationType != currentSource.RegistrationType)
            {
                target.RegistrationType = Framework.Core.Maybe.Return(currentSource.RegistrationType);
            }
            if (baseSource.RestrictionHandler != currentSource.RestrictionHandler)
            {
                target.RestrictionHandler = Framework.Core.Maybe.Return(currentSource.RestrictionHandler);
            }
            if (baseSource.Role != currentSource.Role)
            {
                target.Role = Framework.Core.Maybe.Return(currentSource.Role);
            }
            if (baseSource.RoleDegree != currentSource.RoleDegree)
            {
                target.RoleDegree = Framework.Core.Maybe.Return(currentSource.RoleDegree);
            }
            target.Specializations = this.ExtractUpdateDataL<SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkIdentityDTO, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO>(currentSource.Specializations, baseSource.Specializations, (currentSourceItem, baseSourceItem) => new SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO(currentSourceItem, baseSourceItem, this), currentSourceItem => new SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO(currentSourceItem, this));
            if (baseSource.VacationApprover != currentSource.VacationApprover)
            {
                target.VacationApprover = Framework.Core.Maybe.Return(currentSource.VacationApprover);
            }
            if (baseSource.ValidateVirtualProp != currentSource.ValidateVirtualProp)
            {
                target.ValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.ValidateVirtualProp);
            }
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            if (baseSource.WorkPeriod != currentSource.WorkPeriod)
            {
                target.WorkPeriod = Framework.Core.Maybe.Return(currentSource.WorkPeriod);
            }
            target.Compress();
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Employee = Framework.Core.Maybe.Return(currentSource.Employee);
            target.Id = currentSource.Id;
            target.Specialization = Framework.Core.Maybe.Return(currentSource.Specialization);
            target.Version = currentSource.Version;
        }
        
        public virtual void MapEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.Employee != currentSource.Employee)
            {
                target.Employee = Framework.Core.Maybe.Return(currentSource.Employee);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            if (baseSource.Specialization != currentSource.Specialization)
            {
                target.Specialization = Framework.Core.Maybe.Return(currentSource.Specialization);
            }
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            target.Compress();
        }
        
        public virtual void MapEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.CityCode = Framework.Core.Maybe.Return(currentSource.CityCode);
            target.CountryCode = Framework.Core.Maybe.Return(currentSource.CountryCode);
            target.Id = currentSource.Id;
            target.Number = Framework.Core.Maybe.Return(currentSource.Number);
            target.Version = currentSource.Version;
        }
        
        public virtual void MapEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.CityCode != currentSource.CityCode)
            {
                target.CityCode = Framework.Core.Maybe.Return(currentSource.CityCode);
            }
            if (baseSource.CountryCode != currentSource.CountryCode)
            {
                target.CountryCode = Framework.Core.Maybe.Return(currentSource.CountryCode);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            if (baseSource.Number != currentSource.Number)
            {
                target.Number = Framework.Core.Maybe.Return(currentSource.Number);
            }
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            target.Compress();
        }
        
        public virtual void MapEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.CityCode = Framework.Core.Maybe.Return(currentSource.CityCode);
            target.CountryCode = Framework.Core.Maybe.Return(currentSource.CountryCode);
            target.Id = currentSource.Id;
            target.Number = Framework.Core.Maybe.Return(currentSource.Number);
            target.Version = currentSource.Version;
        }
        
        public virtual void MapEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneUpdateDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.CityCode != currentSource.CityCode)
            {
                target.CityCode = Framework.Core.Maybe.Return(currentSource.CityCode);
            }
            if (baseSource.CountryCode != currentSource.CountryCode)
            {
                target.CountryCode = Framework.Core.Maybe.Return(currentSource.CountryCode);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            if (baseSource.Number != currentSource.Number)
            {
                target.Number = Framework.Core.Maybe.Return(currentSource.Number);
            }
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            target.Compress();
        }
        
        public virtual void MapEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.EmployeeLinkType = Framework.Core.Maybe.Return(currentSource.EmployeeLinkType);
            target.Id = currentSource.Id;
            target.LinkedEmployee = Framework.Core.Maybe.Return(currentSource.LinkedEmployee);
            target.Version = currentSource.Version;
        }
        
        public virtual void MapEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkUpdateDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO currentSource, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.EmployeeLinkType != currentSource.EmployeeLinkType)
            {
                target.EmployeeLinkType = Framework.Core.Maybe.Return(currentSource.EmployeeLinkType);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            if (baseSource.LinkedEmployee != currentSource.LinkedEmployee)
            {
                target.LinkedEmployee = Framework.Core.Maybe.Return(currentSource.LinkedEmployee);
            }
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            target.Compress();
        }
        
        public virtual void MapExample1(SampleSystem.Generated.DTO.Example1UpdateDTO target, SampleSystem.Generated.DTO.Example1StrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Field1 = Framework.Core.Maybe.Return(currentSource.Field1);
            target.Field2 = Framework.Core.Maybe.Return(currentSource.Field2);
            target.Field3 = currentSource.Field3;
            target.Id = currentSource.Id;
            target.Items2 = this.ExtractUpdateDataFromSingle<SampleSystem.Generated.DTO.Example2StrictDTO, SampleSystem.Generated.DTO.Example2IdentityDTO, SampleSystem.Generated.DTO.Example2UpdateDTO>(currentSource.Items2, example2 => new SampleSystem.Generated.DTO.Example2UpdateDTO(example2, this));
            target.Version = currentSource.Version;
        }
        
        public virtual void MapExample1(SampleSystem.Generated.DTO.Example1UpdateDTO target, SampleSystem.Generated.DTO.Example1StrictDTO currentSource, SampleSystem.Generated.DTO.Example1StrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.Field1 != currentSource.Field1)
            {
                target.Field1 = Framework.Core.Maybe.Return(currentSource.Field1);
            }
            if (baseSource.Field2 != currentSource.Field2)
            {
                target.Field2 = Framework.Core.Maybe.Return(currentSource.Field2);
            }
            if (baseSource.Field3 != currentSource.Field3)
            {
                target.Field3 = currentSource.Field3;
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            target.Items2 = this.ExtractUpdateDataL<SampleSystem.Generated.DTO.Example2StrictDTO, SampleSystem.Generated.DTO.Example2IdentityDTO, SampleSystem.Generated.DTO.Example2UpdateDTO>(currentSource.Items2, baseSource.Items2, (currentSourceItem, baseSourceItem) => new SampleSystem.Generated.DTO.Example2UpdateDTO(currentSourceItem, baseSourceItem, this), currentSourceItem => new SampleSystem.Generated.DTO.Example2UpdateDTO(currentSourceItem, this));
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            target.Compress();
        }
        
        public virtual void MapExample2(SampleSystem.Generated.DTO.Example2UpdateDTO target, SampleSystem.Generated.DTO.Example2StrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Field1 = Framework.Core.Maybe.Return(currentSource.Field1);
            target.Field2 = Framework.Core.Maybe.Return(currentSource.Field2);
            target.Id = currentSource.Id;
            target.Version = currentSource.Version;
        }
        
        public virtual void MapExample2(SampleSystem.Generated.DTO.Example2UpdateDTO target, SampleSystem.Generated.DTO.Example2StrictDTO currentSource, SampleSystem.Generated.DTO.Example2StrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.Field1 != currentSource.Field1)
            {
                target.Field1 = Framework.Core.Maybe.Return(currentSource.Field1);
            }
            if (baseSource.Field2 != currentSource.Field2)
            {
                target.Field2 = Framework.Core.Maybe.Return(currentSource.Field2);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            target.Compress();
        }
        
        public virtual void MapFullToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.AddressFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.CountryName, null))
            {
                target.CountryName = source.CountryName.Identity;
            }
            else
            {
                target.CountryName = SampleSystem.Generated.DTO.CountryIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnitForRent, null))
            {
                target.BusinessUnitForRent = source.BusinessUnitForRent.Identity;
            }
            else
            {
                target.BusinessUnitForRent = SampleSystem.Generated.DTO.BusinessUnitIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Employee, null))
            {
                target.Employee = source.Employee.Identity;
            }
            else
            {
                target.Employee = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitHrDepartmentFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnit, null))
            {
                target.BusinessUnit = source.BusinessUnit.Identity;
            }
            else
            {
                target.BusinessUnit = SampleSystem.Generated.DTO.BusinessUnitIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.HRDepartment, null))
            {
                target.HRDepartment = source.HRDepartment.Identity;
            }
            else
            {
                target.HRDepartment = SampleSystem.Generated.DTO.HRDepartmentIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnit, null))
            {
                target.BusinessUnit = source.BusinessUnit.Identity;
            }
            else
            {
                target.BusinessUnit = SampleSystem.Generated.DTO.BusinessUnitIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Manager, null))
            {
                target.Manager = source.Manager.Identity;
            }
            else
            {
                target.Manager = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnitType, null))
            {
                target.BusinessUnitType = source.BusinessUnitType.Identity;
            }
            else
            {
                target.BusinessUnitType = SampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnitType, null))
            {
                target.BusinessUnitType = source.BusinessUnitType.Identity;
            }
            else
            {
                target.BusinessUnitType = SampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.PossibleParent, null))
            {
                target.PossibleParent = source.PossibleParent.Identity;
            }
            else
            {
                target.PossibleParent = SampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnitType, null))
            {
                target.BusinessUnitType = source.BusinessUnitType.Identity;
            }
            else
            {
                target.BusinessUnitType = SampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.TransferTo, null))
            {
                target.TransferTo = source.TransferTo.Identity;
            }
            else
            {
                target.TransferTo = SampleSystem.Generated.DTO.BusinessUnitTypeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.CompanyLegalEntityFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BaseObj, null))
            {
                target.BaseObj = source.BaseObj.Identity;
            }
            else
            {
                target.BaseObj = SampleSystem.Generated.DTO.TestObjForNestedIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.CurrentObj, null))
            {
                target.CurrentObj = source.CurrentObj.Identity;
            }
            else
            {
                target.CurrentObj = SampleSystem.Generated.DTO.TestObjForNestedIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Parent, null))
            {
                target.Parent = source.Parent.Identity;
            }
            else
            {
                target.Parent = SampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.CountryFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.EmployeeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            Framework.Core.Just<SampleSystem.Generated.DTO.EmployeePositionSimpleDTO> justPosition = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<SampleSystem.Generated.DTO.EmployeePositionSimpleDTO>>(source.Position);
            if (!object.ReferenceEquals(justPosition, null))
            {
                SampleSystem.Generated.DTO.EmployeePositionIdentityDTO resultPosition;
                if (!object.ReferenceEquals(justPosition.Value, null))
                {
                    resultPosition = justPosition.Value.Identity;
                }
                else
                {
                    resultPosition = SampleSystem.Generated.DTO.EmployeePositionIdentityDTO.Empty;
                }
                target.Position = new Framework.Core.Just<SampleSystem.Generated.DTO.EmployeePositionIdentityDTO>(resultPosition);
            }
            else
            {
                target.Position = Framework.Core.Maybe<SampleSystem.Generated.DTO.EmployeePositionIdentityDTO>.Nothing;
            }
            if (!object.ReferenceEquals(source.Ppm, null))
            {
                target.Ppm = source.Ppm.Identity;
            }
            else
            {
                target.Ppm = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.RegistrationType, null))
            {
                target.RegistrationType = source.RegistrationType.Identity;
            }
            else
            {
                target.RegistrationType = SampleSystem.Generated.DTO.EmployeeRegistrationTypeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Role, null))
            {
                target.Role = source.Role.Identity;
            }
            else
            {
                target.Role = SampleSystem.Generated.DTO.EmployeeRoleIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.RoleDegree, null))
            {
                target.RoleDegree = source.RoleDegree.Identity;
            }
            else
            {
                target.RoleDegree = SampleSystem.Generated.DTO.EmployeeRoleDegreeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.VacationApprover, null))
            {
                target.VacationApprover = source.VacationApprover.Identity;
            }
            else
            {
                target.VacationApprover = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Employee, null))
            {
                target.Employee = source.Employee.Identity;
            }
            else
            {
                target.Employee = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Specialization, null))
            {
                target.Specialization = source.Specialization.Identity;
            }
            else
            {
                target.Specialization = SampleSystem.Generated.DTO.EmployeeSpecializationIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForEmployeeEmailChangeModel(SampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailChangeModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.ChangingObject, null))
            {
                target.ChangingObject = source.ChangingObject.Identity;
            }
            else
            {
                target.ChangingObject = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForEmployeeEmailMassChangeModel(SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.LinkedEmployee, null))
            {
                target.LinkedEmployee = source.LinkedEmployee.Identity;
            }
            else
            {
                target.LinkedEmployee = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.Example1FullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.Example2FullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.ApprovedBy, null))
            {
                target.ApprovedBy = source.ApprovedBy.Identity;
            }
            else
            {
                target.ApprovedBy = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
            Framework.Core.Just<SampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO> justCompanyLegalEntity = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<SampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO>>(source.CompanyLegalEntity);
            if (!object.ReferenceEquals(justCompanyLegalEntity, null))
            {
                SampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO resultCompanyLegalEntity;
                if (!object.ReferenceEquals(justCompanyLegalEntity.Value, null))
                {
                    resultCompanyLegalEntity = justCompanyLegalEntity.Value.Identity;
                }
                else
                {
                    resultCompanyLegalEntity = SampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO.Empty;
                }
                target.CompanyLegalEntity = new Framework.Core.Just<SampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO>(resultCompanyLegalEntity);
            }
            else
            {
                target.CompanyLegalEntity = Framework.Core.Maybe<SampleSystem.Generated.DTO.CompanyLegalEntityIdentityDTO>.Nothing;
            }
            if (!object.ReferenceEquals(source.Head, null))
            {
                target.Head = source.Head.Identity;
            }
            else
            {
                target.Head = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Parent, null))
            {
                target.Parent = source.Parent.Identity;
            }
            else
            {
                target.Parent = SampleSystem.Generated.DTO.HRDepartmentIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentEmployeePositionFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.EmployeePosition, null))
            {
                target.EmployeePosition = source.EmployeePosition.Identity;
            }
            else
            {
                target.EmployeePosition = SampleSystem.Generated.DTO.EmployeePositionIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.HrDepartment, null))
            {
                target.HrDepartment = source.HrDepartment.Identity;
            }
            else
            {
                target.HrDepartment = SampleSystem.Generated.DTO.HRDepartmentIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Employee, null))
            {
                target.Employee = source.Employee.Identity;
            }
            else
            {
                target.Employee = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.LocationFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Country, null))
            {
                target.Country = source.Country.Identity;
            }
            else
            {
                target.Country = SampleSystem.Generated.DTO.CountryIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Parent, null))
            {
                target.Parent = source.Parent.Identity;
            }
            else
            {
                target.Parent = SampleSystem.Generated.DTO.LocationIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnit, null))
            {
                target.BusinessUnit = source.BusinessUnit.Identity;
            }
            else
            {
                target.BusinessUnit = SampleSystem.Generated.DTO.BusinessUnitIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.ManagementUnit, null))
            {
                target.ManagementUnit = source.ManagementUnit.Identity;
            }
            else
            {
                target.ManagementUnit = SampleSystem.Generated.DTO.ManagementUnitIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.HRDepartment, null))
            {
                target.HRDepartment = source.HRDepartment.Identity;
            }
            else
            {
                target.HRDepartment = SampleSystem.Generated.DTO.HRDepartmentIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.ManagementUnit, null))
            {
                target.ManagementUnit = source.ManagementUnit.Identity;
            }
            else
            {
                target.ManagementUnit = SampleSystem.Generated.DTO.ManagementUnitIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.PrincipalFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjContainerFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.IncludedObject, null))
            {
                target.IncludedObject = source.IncludedObject.Identity;
            }
            else
            {
                target.IncludedObject = SampleSystem.Generated.DTO.SqlParserTestObjIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.TestImmutableObjFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.TestImmutableRefProperty, null))
            {
                target.TestImmutableRefProperty = source.TestImmutableRefProperty.Identity;
            }
            else
            {
                target.TestImmutableRefProperty = SampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapRichToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.AddressRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnitEmployeeRoles, null))
            {
                target.BusinessUnitEmployeeRoles = Framework.Core.EnumerableExtensions.ToList(source.BusinessUnitEmployeeRoles, businessUnitEmployeeRole => new SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO(businessUnitEmployeeRole));
            }
            if (!object.ReferenceEquals(source.ManagementUnits, null))
            {
                target.ManagementUnits = Framework.Core.EnumerableExtensions.ToList(source.ManagementUnits, managementUnitAndBusinessUnitLink => new SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO(managementUnitAndBusinessUnitLink));
            }
            if (!object.ReferenceEquals(source.ManagerCommissions, null))
            {
                target.ManagerCommissions = Framework.Core.EnumerableExtensions.ToList(source.ManagerCommissions, businessUnitManagerCommissionLink => new SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO(businessUnitManagerCommissionLink));
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitHrDepartmentRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.PossibleFinancialProjectTypes, null))
            {
                target.PossibleFinancialProjectTypes = Framework.Core.EnumerableExtensions.ToList(source.PossibleFinancialProjectTypes, businessUnitTypeLinkWithPossibleFinancialProjectType => new SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO(businessUnitTypeLinkWithPossibleFinancialProjectType));
            }
            if (!object.ReferenceEquals(source.PossibleParents, null))
            {
                target.PossibleParents = Framework.Core.EnumerableExtensions.ToList(source.PossibleParents, businessUnitTypeLinkWithPossibleParent => new SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO(businessUnitTypeLinkWithPossibleParent));
            }
            if (!object.ReferenceEquals(source.TransferTo, null))
            {
                target.TransferTo = Framework.Core.EnumerableExtensions.ToList(source.TransferTo, businessUnitTypeLinkWithTransferTo => new SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO(businessUnitTypeLinkWithTransferTo));
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.CompanyLegalEntityRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Addresses, null))
            {
                target.Addresses = Framework.Core.EnumerableExtensions.ToList(source.Addresses, address => new SampleSystem.Generated.DTO.AddressStrictDTO(address));
            }
        }
        
        public virtual void MapRichToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.CountryRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.EmployeeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.CellPhones, null))
            {
                target.CellPhones = Framework.Core.EnumerableExtensions.ToList(source.CellPhones, employeeCellPhone => new SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO(employeeCellPhone));
            }
            if (!object.ReferenceEquals(source.EmployeeToEmployeeLinks, null))
            {
                target.EmployeeToEmployeeLinks = Framework.Core.EnumerableExtensions.ToList(source.EmployeeToEmployeeLinks, employeeToEmployeeLink => new SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO(employeeToEmployeeLink));
            }
            Framework.Core.Just<System.Collections.Generic.List<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO>> justPersonalCellPhones = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Collections.Generic.List<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO>>>(source.PersonalCellPhones);
            if (!object.ReferenceEquals(justPersonalCellPhones, null))
            {
                System.Collections.Generic.List<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO> resultPersonalCellPhones = new System.Collections.Generic.List<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO>();
                if (!object.ReferenceEquals(justPersonalCellPhones.Value, null))
                {
                    resultPersonalCellPhones = Framework.Core.EnumerableExtensions.ToList(justPersonalCellPhones.Value, employeePersonalCellPhone => new SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO(employeePersonalCellPhone));
                }
                target.PersonalCellPhones = new Framework.Core.Just<System.Collections.Generic.List<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO>>(resultPersonalCellPhones);
            }
            else
            {
                target.PersonalCellPhones = Framework.Core.Maybe<System.Collections.Generic.List<SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO>>.Nothing;
            }
            if (!object.ReferenceEquals(source.Specializations, null))
            {
                target.Specializations = Framework.Core.EnumerableExtensions.ToList(source.Specializations, employeeAndEmployeeSpecializationLink => new SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO(employeeAndEmployeeSpecializationLink));
            }
        }
        
        public virtual void MapRichToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForEmployeeEmailChangeModel(SampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailChangeModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForEmployeeEmailMassChangeModel(SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.ChangingObjects, null))
            {
                target.ChangingObjects = Framework.Core.EnumerableExtensions.ToList(source.ChangingObjects, employee => employee.Identity);
            }
        }
        
        public virtual void MapRichToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.Example1RichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Items2, null))
            {
                target.Items2 = Framework.Core.EnumerableExtensions.ToList(source.Items2, example2 => new SampleSystem.Generated.DTO.Example2StrictDTO(example2));
            }
        }
        
        public virtual void MapRichToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.Example2RichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnitHrDepartments, null))
            {
                target.BusinessUnitHrDepartments = Framework.Core.EnumerableExtensions.ToList(source.BusinessUnitHrDepartments, businessUnitHrDepartment => new SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO(businessUnitHrDepartment));
            }
            if (!object.ReferenceEquals(source.EmployeePositions, null))
            {
                target.EmployeePositions = Framework.Core.EnumerableExtensions.ToList(source.EmployeePositions, hRDepartmentEmployeePosition => new SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO(hRDepartmentEmployeePosition));
            }
            if (!object.ReferenceEquals(source.HrDepartmentRoleEmployees, null))
            {
                target.HrDepartmentRoleEmployees = Framework.Core.EnumerableExtensions.ToList(source.HrDepartmentRoleEmployees, hRDepartmentRoleEmployee => new SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO(hRDepartmentRoleEmployee));
            }
            if (!object.ReferenceEquals(source.ManagementUnits, null))
            {
                target.ManagementUnits = Framework.Core.EnumerableExtensions.ToList(source.ManagementUnits, managementUnitAndHRDepartmentLink => new SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO(managementUnitAndHRDepartmentLink));
            }
        }
        
        public virtual void MapRichToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentEmployeePositionRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.LocationRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BinaryData, null))
            {
                target.BinaryData = System.Linq.Enumerable.ToArray(source.BinaryData);
            }
            else
            {
                target.BinaryData = null;
            }
        }
        
        public virtual void MapRichToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.BusinessUnits, null))
            {
                target.BusinessUnits = Framework.Core.EnumerableExtensions.ToList(source.BusinessUnits, managementUnitAndBusinessUnitLink => new SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO(managementUnitAndBusinessUnitLink));
            }
            if (!object.ReferenceEquals(source.HRDepartments, null))
            {
                target.HRDepartments = Framework.Core.EnumerableExtensions.ToList(source.HRDepartments, managementUnitAndHRDepartmentLink => new SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO(managementUnitAndHRDepartmentLink));
            }
        }
        
        public virtual void MapRichToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.PrincipalRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.TestImmutableObjRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForAddress(SampleSystem.Generated.DTO.AddressStrictDTO target, SampleSystem.Generated.DTO.AddressSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AddressType = source.AddressType;
            target.CityName = source.CityName;
            target.RegionName = source.RegionName;
            target.Street = source.Street;
            target.Zip = source.Zip;
        }
        
        public virtual void MapSimpleToStrictForBusinessUnit(SampleSystem.Generated.DTO.BusinessUnitStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.BusinessUnitStatus = source.BusinessUnitStatus;
            target.Commission = source.Commission;
            target.FirstNewBusinessStatusMonth = source.FirstNewBusinessStatusMonth;
            target.IsNewBusiness = source.IsNewBusiness;
            target.IsPool = source.IsPool;
            target.IsProduction = source.IsProduction;
            target.IsSpecialCommission = source.IsSpecialCommission;
            target.LeastProjectStartDate = source.LeastProjectStartDate;
            target.Name = source.Name;
            target.NewBusinessStatusLeft = source.NewBusinessStatusLeft;
            target.Options = source.Options;
            target.ProjectStartMailList = source.ProjectStartMailList;
            target.Rank = source.Rank;
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitEmployeeRole(SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitEmployeeRoleSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Role = source.Role;
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitHrDepartment(SampleSystem.Generated.DTO.BusinessUnitHrDepartmentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitHrDepartmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitManagerCommissionLink(SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitManagerCommissionLinkSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Commission = source.Commission;
            target.Period = source.Period;
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitType(SampleSystem.Generated.DTO.BusinessUnitTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AdditionalStartConfirm = source.AdditionalStartConfirm;
            target.AdditionalTransferConfirm = source.AdditionalTransferConfirm;
            target.BillingProjectAreNotAllowed = source.BillingProjectAreNotAllowed;
            target.CanBeIsSpecialCommission = source.CanBeIsSpecialCommission;
            target.CanBeLinkedToClient = source.CanBeLinkedToClient;
            target.CanBeLinkedToDepartment = source.CanBeLinkedToDepartment;
            target.CanBeNewBusiness = source.CanBeNewBusiness;
            target.CanBeResourcePool = source.CanBeResourcePool;
            target.IsAdministrative = source.IsAdministrative;
            target.Name = source.Name;
            target.NeedVertical = source.NeedVertical;
            target.PossibleStartDate = source.PossibleStartDate;
            target.PossibleTransferDate = source.PossibleTransferDate;
            target.PracticeAllowed = source.PracticeAllowed;
            target.ProjectStartAllowed = source.ProjectStartAllowed;
            target.StartBOConfirm = source.StartBOConfirm;
            target.TransferBOConfirm = source.TransferBOConfirm;
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitTypeLinkWithPossibleFinancialProjectType(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.FinancialProjectType = source.FinancialProjectType;
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitTypeLinkWithPossibleParent(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithPossibleParentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessUnitTypeLinkWithTransferTo(SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToStrictDTO target, SampleSystem.Generated.DTO.BusinessUnitTypeLinkWithTransferToSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForCompanyLegalEntity(SampleSystem.Generated.DTO.CompanyLegalEntityStrictDTO target, SampleSystem.Generated.DTO.CompanyLegalEntitySimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Code = source.Code;
            target.Name = source.Name;
            target.NameEnglish = source.NameEnglish;
            target.Type = source.Type;
        }
        
        public virtual void MapSimpleToStrictForCountry(SampleSystem.Generated.DTO.CountryStrictDTO target, SampleSystem.Generated.DTO.CountrySimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Code = source.Code;
            target.Culture = source.Culture;
            target.Name = source.Name;
            target.NameNative = source.NameNative;
        }
        
        public virtual void MapSimpleToStrictForEmployee(SampleSystem.Generated.DTO.EmployeeStrictDTO target, SampleSystem.Generated.DTO.EmployeeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Age = source.Age;
            target.BirthDate = source.BirthDate;
            target.CanBePPM = source.CanBePPM;
            target.EducationDuration = source.EducationDuration;
            target.Email = source.Email;
            target.ExternalId = source.ExternalId;
            target.Gender = source.Gender;
            target.Interphone = source.Interphone;
            target.Landlinephone = source.Landlinephone;
            target.LastActionDate = source.LastActionDate;
            Framework.Core.Just<string> justLogin = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(source.Login);
            if (!object.ReferenceEquals(justLogin, null))
            {
                string resultLogin;
                resultLogin = justLogin.Value;
                target.Login = new Framework.Core.Just<string>(resultLogin);
            }
            else
            {
                target.Login = Framework.Core.Maybe<string>.Nothing;
            }
            target.NameEng = source.NameEng;
            target.NameNative = source.NameNative;
            target.NameRussian = source.NameRussian;
            target.NonValidateVirtualProp = source.NonValidateVirtualProp;
            target.Pin = source.Pin;
            target.PlannedHireDate = source.PlannedHireDate;
            target.RestrictionHandler = source.RestrictionHandler;
            target.ValidateVirtualProp = source.ValidateVirtualProp;
            target.WorkPeriod = source.WorkPeriod;
        }
        
        public virtual void MapSimpleToStrictForEmployeeAndEmployeeSpecializationLink(SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeAndEmployeeSpecializationLinkSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForEmployeeCellPhone(SampleSystem.Generated.DTO.EmployeeCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeeCellPhoneSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.CityCode = source.CityCode;
            target.CountryCode = source.CountryCode;
            target.Number = source.Number;
        }
        
        public virtual void MapSimpleToStrictForEmployeeEmailChangeModel(SampleSystem.Generated.DTO.EmployeeEmailChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailChangeModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Email = source.Email;
        }
        
        public virtual void MapSimpleToStrictForEmployeeEmailMassChangeModel(SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelStrictDTO target, SampleSystem.Generated.DTO.EmployeeEmailMassChangeModelSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Email = source.Email;
        }
        
        public virtual void MapSimpleToStrictForEmployeePersonalCellPhone(SampleSystem.Generated.DTO.EmployeePersonalCellPhoneStrictDTO target, SampleSystem.Generated.DTO.EmployeePersonalCellPhoneSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.CityCode = source.CityCode;
            target.CountryCode = source.CountryCode;
            target.Number = source.Number;
        }
        
        public virtual void MapSimpleToStrictForEmployeeToEmployeeLink(SampleSystem.Generated.DTO.EmployeeToEmployeeLinkStrictDTO target, SampleSystem.Generated.DTO.EmployeeToEmployeeLinkSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.EmployeeLinkType = source.EmployeeLinkType;
        }
        
        public virtual void MapSimpleToStrictForExample1(SampleSystem.Generated.DTO.Example1StrictDTO target, SampleSystem.Generated.DTO.Example1SimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Field1 = source.Field1;
            target.Field2 = source.Field2;
            Framework.Core.Just<System.Guid> justField3 = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<System.Guid>>(source.Field3);
            if (!object.ReferenceEquals(justField3, null))
            {
                System.Guid resultField3;
                resultField3 = justField3.Value;
                target.Field3 = new Framework.Core.Just<System.Guid>(resultField3);
            }
            else
            {
                target.Field3 = Framework.Core.Maybe<System.Guid>.Nothing;
            }
        }
        
        public virtual void MapSimpleToStrictForExample2(SampleSystem.Generated.DTO.Example2StrictDTO target, SampleSystem.Generated.DTO.Example2SimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Field1 = source.Field1;
            target.Field2 = source.Field2;
        }
        
        public virtual void MapSimpleToStrictForHRDepartment(SampleSystem.Generated.DTO.HRDepartmentStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Code = source.Code;
            target.CodeNative = source.CodeNative;
            target.ExternalId = source.ExternalId;
            target.IsLegal = source.IsLegal;
            target.IsProduction = source.IsProduction;
            target.Name = source.Name;
            target.NameNative = source.NameNative;
        }
        
        public virtual void MapSimpleToStrictForHRDepartmentEmployeePosition(SampleSystem.Generated.DTO.HRDepartmentEmployeePositionStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentEmployeePositionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForHRDepartmentRoleEmployee(SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeStrictDTO target, SampleSystem.Generated.DTO.HRDepartmentRoleEmployeeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.HRDepartmentEmployeeRoleType = source.HRDepartmentEmployeeRoleType;
        }
        
        public virtual void MapSimpleToStrictForLocation(SampleSystem.Generated.DTO.LocationStrictDTO target, SampleSystem.Generated.DTO.LocationSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.CloseDate = source.CloseDate;
            target.Code = source.Code;
            target.IsFinancial = source.IsFinancial;
            target.LocationType = source.LocationType;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForManagementUnit(SampleSystem.Generated.DTO.ManagementUnitStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.BusinessUnitStatus = source.BusinessUnitStatus;
            target.IsProduction = source.IsProduction;
            target.Name = source.Name;
            target.Period = source.Period;
        }
        
        public virtual void MapSimpleToStrictForManagementUnitAndBusinessUnitLink(SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndBusinessUnitLinkSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.EqualBU = source.EqualBU;
        }
        
        public virtual void MapSimpleToStrictForManagementUnitAndHRDepartmentLink(SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkStrictDTO target, SampleSystem.Generated.DTO.ManagementUnitAndHRDepartmentLinkSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForNoSecurityObject(SampleSystem.Generated.DTO.NoSecurityObjectStrictDTO target, SampleSystem.Generated.DTO.NoSecurityObjectSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForPrincipal(SampleSystem.Generated.DTO.PrincipalStrictDTO target, SampleSystem.Generated.DTO.PrincipalSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.ExternalId = source.ExternalId;
        }
        
        public virtual void MapSimpleToStrictForSqlParserTestObj(SampleSystem.Generated.DTO.SqlParserTestObjStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.NotNullColumn = source.NotNullColumn;
            target.UniqueColumn = source.UniqueColumn;
        }
        
        public virtual void MapSimpleToStrictForSqlParserTestObjContainer(SampleSystem.Generated.DTO.SqlParserTestObjContainerStrictDTO target, SampleSystem.Generated.DTO.SqlParserTestObjContainerSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForTestDefaultFieldsMappingObj(SampleSystem.Generated.DTO.TestDefaultFieldsMappingObjStrictDTO target, SampleSystem.Generated.DTO.TestDefaultFieldsMappingObjSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.EnumVal = source.EnumVal;
            target.IntVal = source.IntVal;
            target.StrVal = source.StrVal;
        }
        
        public virtual void MapSimpleToStrictForTestImmutableObj(SampleSystem.Generated.DTO.TestImmutableObjStrictDTO target, SampleSystem.Generated.DTO.TestImmutableObjSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.TestImmutablePrimitiveProperty = source.TestImmutablePrimitiveProperty;
        }
    }
    
    public partial class SampleSystemClientPrimitiveDTOMappingService : SampleSystem.Generated.DTO.SampleSystemClientPrimitiveDTOMappingServiceBase
    {
        
        private static SampleSystem.Generated.DTO.SampleSystemClientPrimitiveDTOMappingService _default = new SampleSystem.Generated.DTO.SampleSystemClientPrimitiveDTOMappingService();
        
        public static SampleSystem.Generated.DTO.SampleSystemClientPrimitiveDTOMappingService Default
        {
            get
            {
                return SampleSystem.Generated.DTO.SampleSystemClientPrimitiveDTOMappingService._default;
            }
        }
    }
}
