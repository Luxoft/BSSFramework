//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleSystem.BLL
{
    
    
    public abstract partial class SampleSystemMainFetchServiceBase : Framework.DomainDriven.MainFetchServiceBase<SampleSystem.Domain.PersistentDomainObjectBase>
    {
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Address> GetAddressContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Address>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Address>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Address>(
                    fetchRootRule => fetchRootRule.SelectNested(address => address.CountryName),
                    fetchRootRule => fetchRootRule.SelectNested(address => address.LegalEntity));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Address>(
                    fetchRootRule => fetchRootRule.SelectNested(address => address.CountryName),
                    fetchRootRule => fetchRootRule.SelectNested(address => address.LegalEntity));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.AnotherSqlParserTestObj> GetAnotherSqlParserTestObjContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.AnotherSqlParserTestObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.AnotherSqlParserTestObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.AnotherSqlParserTestObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.AnotherSqlParserTestObj>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.AuthPerformanceObject> GetAuthPerformanceObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.AuthPerformanceObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.AuthPerformanceObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.AuthPerformanceObject>(
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.ManagementUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.AuthPerformanceObject>(
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(authPerformanceObject => authPerformanceObject.ManagementUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitAncestorLink> GetBusinessUnitAncestorLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Ancestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Child));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Ancestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Child));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnit> GetBusinessUnitContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.BusinessUnitForRent),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.BusinessUnitEmployeeRoles).SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.BusinessUnitEmployeeRoles).SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.BusinessUnitForRent),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children).SelectMany(businessUnit => businessUnit.BusinessUnitEmployeeRoles).SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children).SelectMany(businessUnit => businessUnit.BusinessUnitEmployeeRoles).SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children).SelectNested(businessUnit => businessUnit.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children).SelectMany(businessUnit => businessUnit.ManagementUnits).SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children).SelectMany(businessUnit => businessUnit.ManagerCommissions).SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children).SelectMany(businessUnit => businessUnit.ManagerCommissions).SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.ManagementUnits).SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.ManagerCommissions).SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.ManagerCommissions).SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitEmployeeRole> GetBusinessUnitEmployeeRoleContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitEmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitEmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitEmployeeRole>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitEmployeeRole>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitEmployeeRole => businessUnitEmployeeRole.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitHrDepartment> GetBusinessUnitHrDepartmentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitHrDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitHrDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitHrDepartment>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitHrDepartment => businessUnitHrDepartment.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitHrDepartment => businessUnitHrDepartment.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitHrDepartment>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitHrDepartment => businessUnitHrDepartment.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitHrDepartment => businessUnitHrDepartment.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.BusinessUnitIdentity> GetBusinessUnitIdentityContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitIdentity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitIdentity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitIdentity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitIdentity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitIdentity>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitManagerCommissionLink> GetBusinessUnitManagerCommissionLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitManagerCommissionLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitManagerCommissionLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitManagerCommissionLink>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitManagerCommissionLink>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitManagerCommissionLink => businessUnitManagerCommissionLink.Manager).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.BusinessUnitProgramClass> GetBusinessUnitProgramClassContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitProgramClass>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitProgramClass>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitProgramClass>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitProgramClass>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.BusinessUnitProgramClass>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitToAncestorChildView> GetBusinessUnitToAncestorChildViewContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.ChildOrAncestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.Source));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.ChildOrAncestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.Source));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitType> GetBusinessUnitTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitType>(
                    fetchRootRule => fetchRootRule.SelectMany(businessUnitType => businessUnitType.PossibleFinancialProjectTypes),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnitType => businessUnitType.PossibleParents).SelectNested(businessUnitTypeLinkWithPossibleParent => businessUnitTypeLinkWithPossibleParent.PossibleParent),
                    fetchRootRule => fetchRootRule.SelectMany(businessUnitType => businessUnitType.TransferTo).SelectNested(businessUnitTypeLinkWithTransferTo => businessUnitTypeLinkWithTransferTo.TransferTo));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType> GetBusinessUnitTypeLinkWithPossibleFinancialProjectTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>(fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithPossibleFinancialProjectType => businessUnitTypeLinkWithPossibleFinancialProjectType.BusinessUnitType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType>(fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithPossibleFinancialProjectType => businessUnitTypeLinkWithPossibleFinancialProjectType.BusinessUnitType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent> GetBusinessUnitTypeLinkWithPossibleParentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithPossibleParent => businessUnitTypeLinkWithPossibleParent.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithPossibleParent => businessUnitTypeLinkWithPossibleParent.PossibleParent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithPossibleParent => businessUnitTypeLinkWithPossibleParent.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithPossibleParent => businessUnitTypeLinkWithPossibleParent.PossibleParent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo> GetBusinessUnitTypeLinkWithTransferToContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithTransferTo => businessUnitTypeLinkWithTransferTo.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithTransferTo => businessUnitTypeLinkWithTransferTo.TransferTo));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithTransferTo => businessUnitTypeLinkWithTransferTo.BusinessUnitType),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitTypeLinkWithTransferTo => businessUnitTypeLinkWithTransferTo.TransferTo));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.UniqueByParent.ChildEntity> GetChildEntityContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.UniqueByParent.ChildEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.UniqueByParent.ChildEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.UniqueByParent.ChildEntity>(fetchRootRule => fetchRootRule.SelectNested(childEntity => childEntity.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.UniqueByParent.ChildEntity>(fetchRootRule => fetchRootRule.SelectNested(childEntity => childEntity.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestForceAbstract.ClassAChild> GetClassAChildContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ClassAChild>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ClassAChild>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestForceAbstract.ClassAChild>(fetchRootRule => fetchRootRule.SelectNested(classAChild => classAChild.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestForceAbstract.ClassAChild>(fetchRootRule => fetchRootRule.SelectNested(classAChild => classAChild.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestForceAbstract.ClassA> GetClassAContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ClassA>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ClassA>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ClassA>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestForceAbstract.ClassA>(fetchRootRule => fetchRootRule.SelectMany(classA => classA.Child));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EnversBug1676.Coefficient1676> GetCoefficient1676Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.Coefficient1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.Coefficient1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EnversBug1676.Coefficient1676>(fetchRootRule => fetchRootRule.SelectNested(coefficient1676 => coefficient1676.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EnversBug1676.Coefficient1676>(fetchRootRule => fetchRootRule.SelectNested(coefficient1676 => coefficient1676.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.CompanyLegalEntity> GetCompanyLegalEntityContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.CompanyLegalEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.CompanyLegalEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.CompanyLegalEntity>(
                    fetchRootRule => fetchRootRule.SelectNested(companyLegalEntity => companyLegalEntity.BaseObj),
                    fetchRootRule => fetchRootRule.SelectNested(companyLegalEntity => companyLegalEntity.CurrentObj),
                    fetchRootRule => fetchRootRule.SelectNested(companyLegalEntity => companyLegalEntity.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.CompanyLegalEntity>(
                    fetchRootRule => fetchRootRule.SelectMany(companyLegalEntity => companyLegalEntity.Addresses).SelectNested(address => address.CountryName),
                    fetchRootRule => fetchRootRule.SelectMany(companyLegalEntity => companyLegalEntity.Addresses).SelectNested(address => address.LegalEntity),
                    fetchRootRule => fetchRootRule.SelectNested(companyLegalEntity => companyLegalEntity.BaseObj),
                    fetchRootRule => fetchRootRule.SelectNested(companyLegalEntity => companyLegalEntity.CurrentObj),
                    fetchRootRule => fetchRootRule.SelectNested(companyLegalEntity => companyLegalEntity.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestForceAbstract.ConcreteClassA> GetConcreteClassAContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ConcreteClassA>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ConcreteClassA>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestForceAbstract.ConcreteClassA>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestForceAbstract.ConcreteClassA>(fetchRootRule => fetchRootRule.SelectMany(concreteClassA => concreteClassA.Child).SelectNested(classAChild => classAChild.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected override Framework.DomainDriven.IFetchContainer<TDomainObject> GetContainer<TDomainObject>(Framework.Transfering.ViewDTOType rule)
        {
            if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Address)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAddressContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.AnotherSqlParserTestObj)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAnotherSqlParserTestObjContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.AuthPerformanceObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAuthPerformanceObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnit)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitAncestorLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitAncestorLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitEmployeeRole)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitEmployeeRoleContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitHrDepartment)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitHrDepartmentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitManagerCommissionLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitManagerCommissionLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitToAncestorChildView)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitToAncestorChildViewContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleFinancialProjectType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitTypeLinkWithPossibleFinancialProjectTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitTypeLinkWithPossibleParent)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitTypeLinkWithPossibleParentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.BusinessUnitTypeLinkWithTransferTo)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitTypeLinkWithTransferToContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.CompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCompanyLegalEntityContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Country)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCountryContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Employee)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeAndEmployeeSpecializationLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeAndEmployeeSpecializationLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeCellPhone)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeCellPhoneContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeCellPhoneBase)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeCellPhoneBaseContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeInformation)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeInformationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeePersonalCellPhone)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeePersonalCellPhoneContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeePhoto)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeePhotoContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeePosition)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeePositionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeRegistrationType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeRegistrationTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeRole)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeRoleContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeRoleDegree)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeRoleDegreeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeSpecialization)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeSpecializationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EmployeeToEmployeeLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeToEmployeeLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EnversBug1676.Coefficient1676)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCoefficient1676Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EnversBug1676.Location1676)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLocation1676Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.EnversBug1676.WorkingCalendar1676)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetWorkingCalendar1676Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Example1)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetExample1Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Example2)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetExample2Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.HRDepartment)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetHRDepartmentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.HRDepartmentEmployeePosition)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetHRDepartmentEmployeePositionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.HRDepartmentRoleEmployee)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetHRDepartmentRoleEmployeeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.IMRequest)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetIMRequestContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.IMRequestDetail)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetIMRequestDetailContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Information)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetInformationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.InsuranceDetail)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetInsuranceDetailContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer1)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetIntegrationVersionContainer1Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer2)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetIntegrationVersionContainer2Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.LegalEntityBase)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLegalEntityBaseContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Location)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLocationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.LocationAncestorLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLocationAncestorLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.LocationToAncestorChildView)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLocationToAncestorChildViewContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManagementUnit)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetManagementUnitContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManagementUnitAncestorLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetManagementUnitAncestorLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManagementUnitAndBusinessUnitLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetManagementUnitAndBusinessUnitLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManagementUnitAndHRDepartmentLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetManagementUnitAndHRDepartmentLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManagementUnitFluentMapping)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetManagementUnitFluentMappingContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManagementUnitToAncestorChildView)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetManagementUnitToAncestorChildViewContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestManualEmployeeProjectionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.NoSecurityObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetNoSecurityObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Principal)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetPrincipalContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Project)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetProjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.BusinessUnitIdentity)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitIdentityContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.BusinessUnitProgramClass)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitProgramClassContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.CustomCompanyLegalEntity)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCustomCompanyLegalEntityContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.CustomTestObjForNested)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetCustomTestObjForNestedContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.HerBusinessUnit)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetHerBusinessUnitContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetMiniBusinessUnitEmployeeRoleContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestBusinessUnit)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestBusinessUnitContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestBusinessUnitType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestBusinessUnitTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestCustomContextSecurityObjProjectionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestDepartment)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestDepartmentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestEmployee)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestEmployeeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestIMRequest)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestIMRequestContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestIMRequestDetail)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestIMRequestDetailContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestLegacyEmployee)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestLegacyEmployeeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestLocation)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestLocationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestLocationCollectionProperties)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestLocationCollectionPropertiesContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.TestSecurityObjItemProjection)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestSecurityObjItemProjectionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.VisualEmployee)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetVisualEmployeeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.Projections.VisualProject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetVisualProjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.PureFluentMappingObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetPureFluentMappingObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.RoleRoleDegreeLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetRoleRoleDegreeLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.SqlParserTestObj)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSqlParserTestObjContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.SqlParserTestObjContainer)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetSqlParserTestObjContainerContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestCustomContextSecurityObj)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestCustomContextSecurityObjContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestExceptObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestExceptObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestForceAbstract.ClassA)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetClassAContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestForceAbstract.ClassAChild)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetClassAChildContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestForceAbstract.ConcreteClassA)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetConcreteClassAContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestImmutableObj)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestImmutableObjContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestItemAuthObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestItemAuthObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestObjForNested)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestObjForNestedContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestObjForNestedBase)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestObjForNestedBaseContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestPerformanceObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestPerformanceObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestPlainAuthObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestPlainAuthObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestRelativeEmployeeObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestRelativeEmployeeObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestRestrictionObject)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestRestrictionObjectContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestRootSecurityObj)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestRootSecurityObjContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestSecurityObjItem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestSecurityObjItemContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestSecuritySubObjItem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestSecuritySubObjItemContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestSecuritySubObjItem2)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestSecuritySubObjItem2Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.TestSecuritySubObjItem3)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTestSecuritySubObjItem3Container(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.UniqueByMaster.ParentEntity)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetParentEntityContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(SampleSystem.Domain.UniqueByParent.ChildEntity)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetChildEntityContainer(rule)));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("TDomainObject");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Country> GetCountryContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Country>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Country>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Country>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Country>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.CustomCompanyLegalEntity> GetCustomCompanyLegalEntityContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomCompanyLegalEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomCompanyLegalEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.CustomCompanyLegalEntity>(
                    fetchRootRule => fetchRootRule.SelectNested(customCompanyLegalEntity => customCompanyLegalEntity.BaseObj),
                    fetchRootRule => fetchRootRule.SelectNested(customCompanyLegalEntity => customCompanyLegalEntity.CurrentObj));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.CustomCompanyLegalEntity>(
                    fetchRootRule => fetchRootRule.SelectNested(customCompanyLegalEntity => customCompanyLegalEntity.BaseObj),
                    fetchRootRule => fetchRootRule.SelectNested(customCompanyLegalEntity => customCompanyLegalEntity.CurrentObj));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.CustomCompanyLegalEntity>(
                    fetchRootRule => fetchRootRule.SelectNested(customCompanyLegalEntity => customCompanyLegalEntity.BaseObj),
                    fetchRootRule => fetchRootRule.SelectNested(customCompanyLegalEntity => customCompanyLegalEntity.CurrentObj));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.CustomTestObjForNested> GetCustomTestObjForNestedContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomTestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomTestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomTestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomTestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.CustomTestObjForNested>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeAndEmployeeSpecializationLink> GetEmployeeAndEmployeeSpecializationLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Specialization));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeAndEmployeeSpecializationLink>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Specialization));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeCellPhoneBase> GetEmployeeCellPhoneBaseContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeCellPhoneBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeCellPhoneBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeCellPhoneBase>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhoneBase => employeeCellPhoneBase.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhoneBase => employeeCellPhoneBase.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeCellPhoneBase>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhoneBase => employeeCellPhoneBase.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhoneBase => employeeCellPhoneBase.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeCellPhone> GetEmployeeCellPhoneContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeCellPhone>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeCellPhone>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeCellPhone>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhone => employeeCellPhone.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhone => employeeCellPhone.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeCellPhone>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhone => employeeCellPhone.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeCellPhone => employeeCellPhone.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Employee> GetEmployeeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Employee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Employee>(
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Employee>(
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(employee => employee.EmployeeToEmployeeLinks).SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Position),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Ppm).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Ppm).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.RegistrationType),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Role),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.RoleDegree),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.VacationApprover).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.VacationApprover).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Employee>(
                    fetchRootRule => fetchRootRule.SelectMany(employee => employee.CellPhones),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(employee => employee.EmployeeToEmployeeLinks).SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(employee => employee.EmployeeToEmployeeLinks).SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectMany(employee => employee.PersonalCellPhones),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Position),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Ppm).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Ppm).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.RegistrationType),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Role),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.RoleDegree),
                    fetchRootRule => fetchRootRule.SelectMany(employee => employee.Specializations).SelectNested(employeeAndEmployeeSpecializationLink => employeeAndEmployeeSpecializationLink.Specialization),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.VacationApprover).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.VacationApprover).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeInformation> GetEmployeeInformationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeInformation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeInformation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeInformation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeInformation>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeePersonalCellPhone> GetEmployeePersonalCellPhoneContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeePersonalCellPhone>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeePersonalCellPhone>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeePersonalCellPhone>(
                    fetchRootRule => fetchRootRule.SelectNested(employeePersonalCellPhone => employeePersonalCellPhone.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeePersonalCellPhone => employeePersonalCellPhone.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeePersonalCellPhone>(
                    fetchRootRule => fetchRootRule.SelectNested(employeePersonalCellPhone => employeePersonalCellPhone.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeePersonalCellPhone => employeePersonalCellPhone.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeePhoto> GetEmployeePhotoContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeePhoto>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeePhoto>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeePhoto>(
                    fetchRootRule => fetchRootRule.SelectNested(employeePhoto => employeePhoto.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeePhoto => employeePhoto.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeePhoto>(
                    fetchRootRule => fetchRootRule.SelectNested(employeePhoto => employeePhoto.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeePhoto => employeePhoto.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeePosition> GetEmployeePositionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeePosition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeePosition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeePosition>(fetchRootRule => fetchRootRule.SelectNested(employeePosition => employeePosition.Location).SelectMany(location => location.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeePosition>(fetchRootRule => fetchRootRule.SelectNested(employeePosition => employeePosition.Location).SelectMany(location => location.Children));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeRegistrationType> GetEmployeeRegistrationTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRegistrationType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRegistrationType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRegistrationType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRegistrationType>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeRole> GetEmployeeRoleContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRole>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeRoleDegree> GetEmployeeRoleDegreeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRoleDegree>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRoleDegree>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRoleDegree>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeRoleDegree>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeSpecialization> GetEmployeeSpecializationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeSpecialization>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeSpecialization>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeSpecialization>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeSpecialization>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EmployeeToEmployeeLink> GetEmployeeToEmployeeLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeToEmployeeLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EmployeeToEmployeeLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeToEmployeeLink>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.Owner).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.Owner).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EmployeeToEmployeeLink>(
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.LinkedEmployee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.Owner).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employeeToEmployeeLink => employeeToEmployeeLink.Owner).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Example1> GetExample1Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Example1>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Example1>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Example1>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Example1>(fetchRootRule => fetchRootRule.SelectMany(example1 => example1.Items2));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Example2> GetExample2Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Example2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Example2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Example2>(fetchRootRule => fetchRootRule.SelectNested(example2 => example2.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Example2>(fetchRootRule => fetchRootRule.SelectNested(example2 => example2.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.HerBusinessUnit> GetHerBusinessUnitContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.HerBusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.HerBusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.HerBusinessUnit>(fetchRootRule => fetchRootRule.SelectNested(herBusinessUnit => herBusinessUnit.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.HerBusinessUnit>(fetchRootRule => fetchRootRule.SelectNested(herBusinessUnit => herBusinessUnit.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.HerBusinessUnit>(fetchRootRule => fetchRootRule.SelectNested(herBusinessUnit => herBusinessUnit.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.HRDepartment> GetHRDepartmentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.HRDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartment>(fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartment>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.ApprovedBy).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.ApprovedBy).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.CompanyLegalEntity),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Parent).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartment>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.ApprovedBy).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.ApprovedBy).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.BusinessUnitHrDepartments).SelectNested(businessUnitHrDepartment => businessUnitHrDepartment.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.ApprovedBy).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.ApprovedBy).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectMany(hRDepartment => hRDepartment.BusinessUnitHrDepartments).SelectNested(businessUnitHrDepartment => businessUnitHrDepartment.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.CompanyLegalEntity),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectMany(hRDepartment => hRDepartment.EmployeePositions).SelectNested(hRDepartmentEmployeePosition => hRDepartmentEmployeePosition.EmployeePosition),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectMany(hRDepartment => hRDepartment.HrDepartmentRoleEmployees).SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectMany(hRDepartment => hRDepartment.HrDepartmentRoleEmployees).SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectMany(hRDepartment => hRDepartment.ManagementUnits).SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.CompanyLegalEntity),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.EmployeePositions).SelectNested(hRDepartmentEmployeePosition => hRDepartmentEmployeePosition.EmployeePosition),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.HrDepartmentRoleEmployees).SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.HrDepartmentRoleEmployees).SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.ManagementUnits).SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Parent).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.HRDepartmentEmployeePosition> GetHRDepartmentEmployeePositionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.HRDepartmentEmployeePosition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.HRDepartmentEmployeePosition>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartmentEmployeePosition>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentEmployeePosition => hRDepartmentEmployeePosition.EmployeePosition),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentEmployeePosition => hRDepartmentEmployeePosition.HrDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartmentEmployeePosition>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentEmployeePosition => hRDepartmentEmployeePosition.EmployeePosition),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentEmployeePosition => hRDepartmentEmployeePosition.HrDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.HRDepartmentRoleEmployee> GetHRDepartmentRoleEmployeeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.HRDepartmentRoleEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.HRDepartmentRoleEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartmentRoleEmployee>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.HRDepartmentRoleEmployee>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartmentRoleEmployee => hRDepartmentRoleEmployee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.IMRequest> GetIMRequestContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IMRequest>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IMRequest>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IMRequest>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.IMRequest>(fetchRootRule => fetchRootRule.SelectNested(iMRequest => iMRequest.OneToOneDetail).SelectNested(iMRequestDetail => iMRequestDetail.Request));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.IMRequestDetail> GetIMRequestDetailContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IMRequestDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IMRequestDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.IMRequestDetail>(fetchRootRule => fetchRootRule.SelectNested(iMRequestDetail => iMRequestDetail.Request));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.IMRequestDetail>(fetchRootRule => fetchRootRule.SelectNested(iMRequestDetail => iMRequestDetail.Request));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Information> GetInformationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Information>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Information>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Information>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Information>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.InsuranceDetail> GetInsuranceDetailContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.InsuranceDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.InsuranceDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.InsuranceDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.InsuranceDetail>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer1> GetIntegrationVersionContainer1Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer1>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer1>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer1>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer1>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer2> GetIntegrationVersionContainer2Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.IntegrationVersions.IntegrationVersionContainer2>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.LegalEntityBase> GetLegalEntityBaseContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.LegalEntityBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.LegalEntityBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.LegalEntityBase>(fetchRootRule => fetchRootRule.SelectNested(legalEntityBase => legalEntityBase.BaseObj));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.LegalEntityBase>(
                    fetchRootRule => fetchRootRule.SelectMany(legalEntityBase => legalEntityBase.Addresses).SelectNested(address => address.CountryName),
                    fetchRootRule => fetchRootRule.SelectNested(legalEntityBase => legalEntityBase.BaseObj));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EnversBug1676.Location1676> GetLocation1676Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.Location1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.Location1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.Location1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EnversBug1676.Location1676>(fetchRootRule => fetchRootRule.SelectMany(location1676 => location1676.Calendar));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.LocationAncestorLink> GetLocationAncestorLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.LocationAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.LocationAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.LocationAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(locationAncestorLink => locationAncestorLink.Ancestor).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(locationAncestorLink => locationAncestorLink.Child).SelectMany(location => location.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.LocationAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(locationAncestorLink => locationAncestorLink.Ancestor).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(locationAncestorLink => locationAncestorLink.Child).SelectMany(location => location.Children));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Location> GetLocationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Location>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Location>(fetchRootRule => fetchRootRule.SelectMany(location => location.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Location>(
                    fetchRootRule => fetchRootRule.SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(location => location.Country),
                    fetchRootRule => fetchRootRule.SelectNested(location => location.Parent).SelectMany(location => location.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Location>(
                    fetchRootRule => fetchRootRule.SelectMany(location => location.Children).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectMany(location => location.Children).SelectNested(location => location.Country),
                    fetchRootRule => fetchRootRule.SelectNested(location => location.Country),
                    fetchRootRule => fetchRootRule.SelectNested(location => location.Parent).SelectMany(location => location.Children));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.LocationToAncestorChildView> GetLocationToAncestorChildViewContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.LocationToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.LocationToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.LocationToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(locationToAncestorChildView => locationToAncestorChildView.ChildOrAncestor).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(locationToAncestorChildView => locationToAncestorChildView.Source).SelectMany(location => location.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.LocationToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(locationToAncestorChildView => locationToAncestorChildView.ChildOrAncestor).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(locationToAncestorChildView => locationToAncestorChildView.Source).SelectMany(location => location.Children));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManagementUnitAncestorLink> GetManagementUnitAncestorLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAncestorLink => managementUnitAncestorLink.Ancestor),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAncestorLink => managementUnitAncestorLink.Child));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAncestorLink => managementUnitAncestorLink.Ancestor),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAncestorLink => managementUnitAncestorLink.Child));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManagementUnitAndBusinessUnitLink> GetManagementUnitAndBusinessUnitLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitAndBusinessUnitLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitAndBusinessUnitLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.ManagementUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitAndBusinessUnitLink>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.ManagementUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManagementUnitAndHRDepartmentLink> GetManagementUnitAndHRDepartmentLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitAndHRDepartmentLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitAndHRDepartmentLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.ManagementUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitAndHRDepartmentLink>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.ManagementUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManagementUnit> GetManagementUnitContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnit>(fetchRootRule => fetchRootRule.SelectNested(managementUnit => managementUnit.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(managementUnit => managementUnit.BusinessUnits).SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(managementUnit => managementUnit.Children).SelectMany(managementUnit => managementUnit.BusinessUnits).SelectNested(managementUnitAndBusinessUnitLink => managementUnitAndBusinessUnitLink.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(managementUnit => managementUnit.Children).SelectMany(managementUnit => managementUnit.HRDepartments).SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(managementUnit => managementUnit.HRDepartments).SelectNested(managementUnitAndHRDepartmentLink => managementUnitAndHRDepartmentLink.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnit => managementUnit.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManagementUnitFluentMapping> GetManagementUnitFluentMappingContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitFluentMapping>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitFluentMapping>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitFluentMapping>(fetchRootRule => fetchRootRule.SelectNested(managementUnitFluentMapping => managementUnitFluentMapping.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitFluentMapping>(
                    fetchRootRule => fetchRootRule.SelectMany(managementUnitFluentMapping => managementUnitFluentMapping.Children),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitFluentMapping => managementUnitFluentMapping.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManagementUnitToAncestorChildView> GetManagementUnitToAncestorChildViewContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManagementUnitToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitToAncestorChildView => managementUnitToAncestorChildView.ChildOrAncestor),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitToAncestorChildView => managementUnitToAncestorChildView.Source));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.ManagementUnitToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitToAncestorChildView => managementUnitToAncestorChildView.ChildOrAncestor),
                    fetchRootRule => fetchRootRule.SelectNested(managementUnitToAncestorChildView => managementUnitToAncestorChildView.Source));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole> GetMiniBusinessUnitEmployeeRoleContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole>(fetchRootRule => fetchRootRule.SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole>(fetchRootRule => fetchRootRule.SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.MiniBusinessUnitEmployeeRole>(fetchRootRule => fetchRootRule.SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.NoSecurityObject> GetNoSecurityObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.NoSecurityObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.NoSecurityObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.NoSecurityObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.NoSecurityObject>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.UniqueByMaster.ParentEntity> GetParentEntityContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.UniqueByMaster.ParentEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.UniqueByMaster.ParentEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.UniqueByMaster.ParentEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.UniqueByMaster.ParentEntity>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Principal> GetPrincipalContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Principal>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Principal>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Principal>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Principal>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Project> GetProjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Project>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Project>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Project>(fetchRootRule => fetchRootRule.SelectNested(project => project.BusinessUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Project>(fetchRootRule => fetchRootRule.SelectNested(project => project.BusinessUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.PureFluentMappingObject> GetPureFluentMappingObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.PureFluentMappingObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.PureFluentMappingObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.PureFluentMappingObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.PureFluentMappingObject>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.RoleRoleDegreeLink> GetRoleRoleDegreeLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.RoleRoleDegreeLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.RoleRoleDegreeLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.RoleRoleDegreeLink>(
                    fetchRootRule => fetchRootRule.SelectNested(roleRoleDegreeLink => roleRoleDegreeLink.AnotherRole),
                    fetchRootRule => fetchRootRule.SelectNested(roleRoleDegreeLink => roleRoleDegreeLink.Role),
                    fetchRootRule => fetchRootRule.SelectNested(roleRoleDegreeLink => roleRoleDegreeLink.RoleDegree));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.RoleRoleDegreeLink>(
                    fetchRootRule => fetchRootRule.SelectNested(roleRoleDegreeLink => roleRoleDegreeLink.AnotherRole),
                    fetchRootRule => fetchRootRule.SelectNested(roleRoleDegreeLink => roleRoleDegreeLink.Role),
                    fetchRootRule => fetchRootRule.SelectNested(roleRoleDegreeLink => roleRoleDegreeLink.RoleDegree));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.SqlParserTestObj> GetSqlParserTestObjContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.SqlParserTestObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.SqlParserTestObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.SqlParserTestObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.SqlParserTestObj>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.SqlParserTestObjContainer> GetSqlParserTestObjContainerContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.SqlParserTestObjContainer>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.SqlParserTestObjContainer>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.SqlParserTestObjContainer>(fetchRootRule => fetchRootRule.SelectNested(sqlParserTestObjContainer => sqlParserTestObjContainer.IncludedObject));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.SqlParserTestObjContainer>(fetchRootRule => fetchRootRule.SelectNested(sqlParserTestObjContainer => sqlParserTestObjContainer.IncludedObject));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestBusinessUnit> GetTestBusinessUnitContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestBusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestBusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(testBusinessUnit => testBusinessUnit.BusinessUnitEmployeeRoles).SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee),
                    fetchRootRule => fetchRootRule.SelectNested(testBusinessUnit => testBusinessUnit.Parent_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestBusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(testBusinessUnit => testBusinessUnit.BusinessUnitEmployeeRoles).SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee),
                    fetchRootRule => fetchRootRule.SelectNested(testBusinessUnit => testBusinessUnit.Parent_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestBusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(testBusinessUnit => testBusinessUnit.BusinessUnitEmployeeRoles).SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee),
                    fetchRootRule => fetchRootRule.SelectNested(testBusinessUnit => testBusinessUnit.Parent_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestBusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(testBusinessUnit => testBusinessUnit.BusinessUnitEmployeeRoles).SelectNested(miniBusinessUnitEmployeeRole => miniBusinessUnitEmployeeRole.Employee),
                    fetchRootRule => fetchRootRule.SelectNested(testBusinessUnit => testBusinessUnit.Parent_Auto));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestBusinessUnitType> GetTestBusinessUnitTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestBusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestBusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestBusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestBusinessUnitType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestBusinessUnitType>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestCustomContextSecurityObj> GetTestCustomContextSecurityObjContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestCustomContextSecurityObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestCustomContextSecurityObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestCustomContextSecurityObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestCustomContextSecurityObj>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection> GetTestCustomContextSecurityObjProjectionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestCustomContextSecurityObjProjection>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestDepartment> GetTestDepartmentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestDepartment>(fetchRootRule => fetchRootRule.SelectNested(testDepartment => testDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestDepartment>(fetchRootRule => fetchRootRule.SelectNested(testDepartment => testDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestDepartment>(fetchRootRule => fetchRootRule.SelectNested(testDepartment => testDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestEmployee> GetTestEmployeeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestEmployee>(
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Position_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Ppm_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Role_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestEmployee>(
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Position_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Ppm_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Role_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestEmployee>(
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit_Auto).SelectMany(testEmployee_AutoProp_CoreBusinessUnit => testEmployee_AutoProp_CoreBusinessUnit.Projects_Last_CoreBusinessUnitProjects),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Position_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Ppm_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Role_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestEmployee>(
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.CoreBusinessUnit_Auto).SelectMany(testEmployee_AutoProp_CoreBusinessUnit => testEmployee_AutoProp_CoreBusinessUnit.Projects_Last_CoreBusinessUnitProjects),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Position_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Ppm_Auto),
                    fetchRootRule => fetchRootRule.SelectNested(testEmployee => testEmployee.Role_Auto));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestExceptObject> GetTestExceptObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestExceptObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestExceptObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestExceptObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testExceptObject => testExceptObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testExceptObject => testExceptObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestExceptObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testExceptObject => testExceptObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testExceptObject => testExceptObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestImmutableObj> GetTestImmutableObjContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestImmutableObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestImmutableObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestImmutableObj>(
                    fetchRootRule => fetchRootRule.SelectNested(testImmutableObj => testImmutableObj.TestImmutableRefProperty).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testImmutableObj => testImmutableObj.TestImmutableRefProperty).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestImmutableObj>(
                    fetchRootRule => fetchRootRule.SelectNested(testImmutableObj => testImmutableObj.TestImmutableRefProperty).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testImmutableObj => testImmutableObj.TestImmutableRefProperty).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestIMRequest> GetTestIMRequestContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequest>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequest>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestIMRequest>(fetchRootRule => fetchRootRule.SelectNested(testIMRequest => testIMRequest.OneToOneDetail));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestIMRequest>(fetchRootRule => fetchRootRule.SelectNested(testIMRequest => testIMRequest.OneToOneDetail));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestIMRequest>(fetchRootRule => fetchRootRule.SelectNested(testIMRequest => testIMRequest.OneToOneDetail));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestIMRequestDetail> GetTestIMRequestDetailContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequestDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequestDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequestDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequestDetail>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestIMRequestDetail>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestItemAuthObject> GetTestItemAuthObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestItemAuthObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestItemAuthObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestItemAuthObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testItemAuthObject => testItemAuthObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testItemAuthObject => testItemAuthObject.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testItemAuthObject => testItemAuthObject.Master));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestItemAuthObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testItemAuthObject => testItemAuthObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testItemAuthObject => testItemAuthObject.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testItemAuthObject => testItemAuthObject.Master));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestLegacyEmployee> GetTestLegacyEmployeeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLegacyEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestLegacyEmployee>(fetchRootRule => fetchRootRule.SelectNested(testLegacyEmployee => testLegacyEmployee.Role_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestLegacyEmployee>(fetchRootRule => fetchRootRule.SelectNested(testLegacyEmployee => testLegacyEmployee.Role_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestLegacyEmployee>(fetchRootRule => fetchRootRule.SelectNested(testLegacyEmployee => testLegacyEmployee.Role_Auto));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestLegacyEmployee>(fetchRootRule => fetchRootRule.SelectNested(testLegacyEmployee => testLegacyEmployee.Role_Auto));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestLocationCollectionProperties> GetTestLocationCollectionPropertiesContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocationCollectionProperties>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocationCollectionProperties>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocationCollectionProperties>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestLocationCollectionProperties>(fetchRootRule => fetchRootRule.SelectMany(testLocationCollectionProperties => testLocationCollectionProperties.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.Projections.TestLocationCollectionProperties>(fetchRootRule => fetchRootRule.SelectMany(testLocationCollectionProperties => testLocationCollectionProperties.Children));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestLocation> GetTestLocationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocation>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestLocation>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection> GetTestManualEmployeeProjectionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.ManualProjections.TestManualEmployeeProjection>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestObjForNestedBase> GetTestObjForNestedBaseContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNestedBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNestedBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNestedBase>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNestedBase>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestObjForNested> GetTestObjForNestedContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNested>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestObjForNested>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestPerformanceObject> GetTestPerformanceObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestPerformanceObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestPerformanceObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestPerformanceObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.ManagementUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestPerformanceObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(testPerformanceObject => testPerformanceObject.ManagementUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestPlainAuthObject> GetTestPlainAuthObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestPlainAuthObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestPlainAuthObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestPlainAuthObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testPlainAuthObject => testPlainAuthObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPlainAuthObject => testPlainAuthObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(testPlainAuthObject => testPlainAuthObject.Location).SelectMany(location => location.Children));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestPlainAuthObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testPlainAuthObject => testPlainAuthObject.Employee).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPlainAuthObject => testPlainAuthObject.Employee).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectMany(testPlainAuthObject => testPlainAuthObject.Items).SelectNested(testItemAuthObject => testItemAuthObject.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(testPlainAuthObject => testPlainAuthObject.Items).SelectNested(testItemAuthObject => testItemAuthObject.ManagementUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testPlainAuthObject => testPlainAuthObject.Location).SelectMany(location => location.Children));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestRelativeEmployeeObject> GetTestRelativeEmployeeObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestRelativeEmployeeObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestRelativeEmployeeObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestRelativeEmployeeObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef1).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef1).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef2).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef2).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestRelativeEmployeeObject>(
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef1).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef1).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef2).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testRelativeEmployeeObject => testRelativeEmployeeObject.EmployeeRef2).SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestRestrictionObject> GetTestRestrictionObjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestRestrictionObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestRestrictionObject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestRestrictionObject>(fetchRootRule => fetchRootRule.SelectNested(testRestrictionObject => testRestrictionObject.BusinessUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestRestrictionObject>(fetchRootRule => fetchRootRule.SelectNested(testRestrictionObject => testRestrictionObject.BusinessUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestRootSecurityObj> GetTestRootSecurityObjContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestRootSecurityObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestRootSecurityObj>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestRootSecurityObj>(
                    fetchRootRule => fetchRootRule.SelectNested(testRootSecurityObj => testRootSecurityObj.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(testRootSecurityObj => testRootSecurityObj.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(testRootSecurityObj => testRootSecurityObj.ManagementUnitFluentMapping));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestRootSecurityObj>(
                    fetchRootRule => fetchRootRule.SelectNested(testRootSecurityObj => testRootSecurityObj.BusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(testRootSecurityObj => testRootSecurityObj.Items).SelectMany(testSecurityObjItem => testSecurityObjItem.Items),
                    fetchRootRule => fetchRootRule.SelectMany(testRootSecurityObj => testRootSecurityObj.Items).SelectMany(testSecurityObjItem => testSecurityObjItem.Items2).SelectNested(testSecuritySubObjItem2 => testSecuritySubObjItem2.InnerMaster).SelectNested(testSecurityObjItem => testSecurityObjItem.FirstMaster),
                    fetchRootRule => fetchRootRule.SelectMany(testRootSecurityObj => testRootSecurityObj.Items).SelectMany(testSecurityObjItem => testSecurityObjItem.Items3),
                    fetchRootRule => fetchRootRule.SelectNested(testRootSecurityObj => testRootSecurityObj.Location).SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(testRootSecurityObj => testRootSecurityObj.ManagementUnitFluentMapping));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestSecurityObjItem> GetTestSecurityObjItemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecurityObjItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecurityObjItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecurityObjItem>(fetchRootRule => fetchRootRule.SelectNested(testSecurityObjItem => testSecurityObjItem.FirstMaster));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecurityObjItem>(
                    fetchRootRule => fetchRootRule.SelectNested(testSecurityObjItem => testSecurityObjItem.FirstMaster),
                    fetchRootRule => fetchRootRule.SelectMany(testSecurityObjItem => testSecurityObjItem.Items),
                    fetchRootRule => fetchRootRule.SelectMany(testSecurityObjItem => testSecurityObjItem.Items2).SelectNested(testSecuritySubObjItem2 => testSecuritySubObjItem2.InnerMaster).SelectNested(testSecurityObjItem => testSecurityObjItem.FirstMaster),
                    fetchRootRule => fetchRootRule.SelectMany(testSecurityObjItem => testSecurityObjItem.Items3));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.TestSecurityObjItemProjection> GetTestSecurityObjItemProjectionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestSecurityObjItemProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestSecurityObjItemProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestSecurityObjItemProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestSecurityObjItemProjection>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.TestSecurityObjItemProjection>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestSecuritySubObjItem2> GetTestSecuritySubObjItem2Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecuritySubObjItem2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecuritySubObjItem2>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecuritySubObjItem2>(fetchRootRule => fetchRootRule.SelectNested(testSecuritySubObjItem2 => testSecuritySubObjItem2.InnerMaster).SelectNested(testSecurityObjItem => testSecurityObjItem.FirstMaster));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecuritySubObjItem2>(fetchRootRule => fetchRootRule.SelectNested(testSecuritySubObjItem2 => testSecuritySubObjItem2.InnerMaster).SelectNested(testSecurityObjItem => testSecurityObjItem.FirstMaster));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestSecuritySubObjItem3> GetTestSecuritySubObjItem3Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecuritySubObjItem3>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecuritySubObjItem3>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecuritySubObjItem3>(fetchRootRule => fetchRootRule.SelectNested(testSecuritySubObjItem3 => testSecuritySubObjItem3.InnerMaster));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecuritySubObjItem3>(fetchRootRule => fetchRootRule.SelectNested(testSecuritySubObjItem3 => testSecuritySubObjItem3.InnerMaster));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.TestSecuritySubObjItem> GetTestSecuritySubObjItemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecuritySubObjItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.TestSecuritySubObjItem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecuritySubObjItem>(fetchRootRule => fetchRootRule.SelectNested(testSecuritySubObjItem => testSecuritySubObjItem.InnerMaster));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.TestSecuritySubObjItem>(fetchRootRule => fetchRootRule.SelectNested(testSecuritySubObjItem => testSecuritySubObjItem.InnerMaster));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.VisualEmployee> GetVisualEmployeeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualEmployee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualEmployee>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.Projections.VisualProject> GetVisualProjectContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualProject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualProject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualProject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualProject>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.ProjectionDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.Projections.VisualProject>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<SampleSystem.Domain.EnversBug1676.WorkingCalendar1676> GetWorkingCalendar1676Container(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.WorkingCalendar1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<SampleSystem.Domain.EnversBug1676.WorkingCalendar1676>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EnversBug1676.WorkingCalendar1676>(fetchRootRule => fetchRootRule.SelectNested(workingCalendar1676 => workingCalendar1676.Location));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<SampleSystem.Domain.EnversBug1676.WorkingCalendar1676>(fetchRootRule => fetchRootRule.SelectNested(workingCalendar1676 => workingCalendar1676.Location));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
    }
    
    public partial class SampleSystemMainFetchService : SampleSystem.BLL.SampleSystemMainFetchServiceBase
    {
    }
}
