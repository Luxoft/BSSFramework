//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkflowSampleSystem.Generated.DTO
{
    
    
    public partial interface IWorkflowSampleSystemClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO currentSource);
        
        void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO currentSource, WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO baseSource);
        
        void MapFullToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BusinessUnitFullDTO currentSource);
        
        void MapFullToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeFullDTO currentSource);
        
        void MapFullToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.HRDepartmentFullDTO currentSource);
        
        void MapFullToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.LocationFullDTO currentSource);
        
        void MapRichToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BusinessUnitRichDTO currentSource);
        
        void MapRichToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.HRDepartmentRichDTO currentSource);
        
        void MapRichToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.LocationRichDTO currentSource);
        
        void MapSimpleToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BusinessUnitSimpleDTO currentSource);
        
        void MapSimpleToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeSimpleDTO currentSource);
        
        void MapSimpleToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.HRDepartmentSimpleDTO currentSource);
        
        void MapSimpleToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.LocationSimpleDTO currentSource);
    }
    
    public abstract partial class WorkflowSampleSystemClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, WorkflowSampleSystem.Generated.DTO.IWorkflowSampleSystemClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Age = Framework.Core.Maybe.Return(currentSource.Age);
            target.BirthDate = Framework.Core.Maybe.Return(currentSource.BirthDate);
            target.EducationDuration = Framework.Core.Maybe.Return(currentSource.EducationDuration);
            target.Email = Framework.Core.Maybe.Return(currentSource.Email);
            target.ExternalId = Framework.Core.Maybe.Return(currentSource.ExternalId);
            target.Id = currentSource.Id;
            target.Interphone = Framework.Core.Maybe.Return(currentSource.Interphone);
            target.Landlinephone = Framework.Core.Maybe.Return(currentSource.Landlinephone);
            target.LastActionDate = Framework.Core.Maybe.Return(currentSource.LastActionDate);
            target.Login = currentSource.Login;
            target.NameEng = Framework.Core.Maybe.Return(currentSource.NameEng);
            target.NameNative = Framework.Core.Maybe.Return(currentSource.NameNative);
            target.NameRussian = Framework.Core.Maybe.Return(currentSource.NameRussian);
            target.NonValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.NonValidateVirtualProp);
            target.Pin = Framework.Core.Maybe.Return(currentSource.Pin);
            target.PlannedHireDate = Framework.Core.Maybe.Return(currentSource.PlannedHireDate);
            target.Ppm = Framework.Core.Maybe.Return(currentSource.Ppm);
            target.VacationApprover = Framework.Core.Maybe.Return(currentSource.VacationApprover);
            target.ValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.ValidateVirtualProp);
            target.Version = currentSource.Version;
            target.WorkPeriod = Framework.Core.Maybe.Return(currentSource.WorkPeriod);
        }
        
        public virtual void MapEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeUpdateDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO currentSource, WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO baseSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (object.ReferenceEquals(baseSource, null))
            {
                throw new System.ArgumentNullException("baseSource");
            }
            if (baseSource.Age != currentSource.Age)
            {
                target.Age = Framework.Core.Maybe.Return(currentSource.Age);
            }
            if (baseSource.BirthDate != currentSource.BirthDate)
            {
                target.BirthDate = Framework.Core.Maybe.Return(currentSource.BirthDate);
            }
            if (baseSource.EducationDuration != currentSource.EducationDuration)
            {
                target.EducationDuration = Framework.Core.Maybe.Return(currentSource.EducationDuration);
            }
            if (baseSource.Email != currentSource.Email)
            {
                target.Email = Framework.Core.Maybe.Return(currentSource.Email);
            }
            if (baseSource.ExternalId != currentSource.ExternalId)
            {
                target.ExternalId = Framework.Core.Maybe.Return(currentSource.ExternalId);
            }
            target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, "Id");
            if (baseSource.Interphone != currentSource.Interphone)
            {
                target.Interphone = Framework.Core.Maybe.Return(currentSource.Interphone);
            }
            if (baseSource.Landlinephone != currentSource.Landlinephone)
            {
                target.Landlinephone = Framework.Core.Maybe.Return(currentSource.Landlinephone);
            }
            if (baseSource.LastActionDate != currentSource.LastActionDate)
            {
                target.LastActionDate = Framework.Core.Maybe.Return(currentSource.LastActionDate);
            }
            if (baseSource.Login != currentSource.Login)
            {
                target.Login = currentSource.Login;
            }
            if (baseSource.NameEng != currentSource.NameEng)
            {
                target.NameEng = Framework.Core.Maybe.Return(currentSource.NameEng);
            }
            if (baseSource.NameNative != currentSource.NameNative)
            {
                target.NameNative = Framework.Core.Maybe.Return(currentSource.NameNative);
            }
            if (baseSource.NameRussian != currentSource.NameRussian)
            {
                target.NameRussian = Framework.Core.Maybe.Return(currentSource.NameRussian);
            }
            if (baseSource.NonValidateVirtualProp != currentSource.NonValidateVirtualProp)
            {
                target.NonValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.NonValidateVirtualProp);
            }
            if (baseSource.Pin != currentSource.Pin)
            {
                target.Pin = Framework.Core.Maybe.Return(currentSource.Pin);
            }
            if (baseSource.PlannedHireDate != currentSource.PlannedHireDate)
            {
                target.PlannedHireDate = Framework.Core.Maybe.Return(currentSource.PlannedHireDate);
            }
            if (baseSource.Ppm != currentSource.Ppm)
            {
                target.Ppm = Framework.Core.Maybe.Return(currentSource.Ppm);
            }
            if (baseSource.VacationApprover != currentSource.VacationApprover)
            {
                target.VacationApprover = Framework.Core.Maybe.Return(currentSource.VacationApprover);
            }
            if (baseSource.ValidateVirtualProp != currentSource.ValidateVirtualProp)
            {
                target.ValidateVirtualProp = Framework.Core.Maybe.Return(currentSource.ValidateVirtualProp);
            }
            target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, "Version");
            if (baseSource.WorkPeriod != currentSource.WorkPeriod)
            {
                target.WorkPeriod = Framework.Core.Maybe.Return(currentSource.WorkPeriod);
            }
            target.Compress();
        }
        
        public virtual void MapFullToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BusinessUnitFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Ppm, null))
            {
                target.Ppm = source.Ppm.Identity;
            }
            else
            {
                target.Ppm = WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.VacationApprover, null))
            {
                target.VacationApprover = source.VacationApprover.Identity;
            }
            else
            {
                target.VacationApprover = WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.HRDepartmentFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Head, null))
            {
                target.Head = source.Head.Identity;
            }
            else
            {
                target.Head = WorkflowSampleSystem.Generated.DTO.EmployeeIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(source.Parent, null))
            {
                target.Parent = source.Parent.Identity;
            }
            else
            {
                target.Parent = WorkflowSampleSystem.Generated.DTO.HRDepartmentIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.LocationFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Parent, null))
            {
                target.Parent = source.Parent.Identity;
            }
            else
            {
                target.Parent = WorkflowSampleSystem.Generated.DTO.LocationIdentityDTO.Empty;
            }
        }
        
        public virtual void MapRichToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BusinessUnitRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.HRDepartmentRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.LocationRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessUnit(WorkflowSampleSystem.Generated.DTO.BusinessUnitStrictDTO target, WorkflowSampleSystem.Generated.DTO.BusinessUnitSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForEmployee(WorkflowSampleSystem.Generated.DTO.EmployeeStrictDTO target, WorkflowSampleSystem.Generated.DTO.EmployeeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Age = source.Age;
            target.BirthDate = source.BirthDate;
            target.EducationDuration = source.EducationDuration;
            target.Email = source.Email;
            target.ExternalId = source.ExternalId;
            target.Interphone = source.Interphone;
            target.Landlinephone = source.Landlinephone;
            target.LastActionDate = source.LastActionDate;
            Framework.Core.Just<string> justLogin = Framework.Core.PipeObjectExtensions.AsCast<Framework.Core.Just<string>>(source.Login);
            if (!object.ReferenceEquals(justLogin, null))
            {
                string resultLogin;
                resultLogin = justLogin.Value;
                target.Login = new Framework.Core.Just<string>(resultLogin);
            }
            else
            {
                target.Login = Framework.Core.Maybe<string>.Nothing;
            }
            target.NameEng = source.NameEng;
            target.NameNative = source.NameNative;
            target.NameRussian = source.NameRussian;
            target.NonValidateVirtualProp = source.NonValidateVirtualProp;
            target.Pin = source.Pin;
            target.PlannedHireDate = source.PlannedHireDate;
            target.ValidateVirtualProp = source.ValidateVirtualProp;
            target.WorkPeriod = source.WorkPeriod;
        }
        
        public virtual void MapSimpleToStrictForHRDepartment(WorkflowSampleSystem.Generated.DTO.HRDepartmentStrictDTO target, WorkflowSampleSystem.Generated.DTO.HRDepartmentSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Code = source.Code;
            target.CodeNative = source.CodeNative;
            target.ExternalId = source.ExternalId;
            target.IsLegal = source.IsLegal;
            target.IsProduction = source.IsProduction;
            target.Name = source.Name;
            target.NameNative = source.NameNative;
        }
        
        public virtual void MapSimpleToStrictForLocation(WorkflowSampleSystem.Generated.DTO.LocationStrictDTO target, WorkflowSampleSystem.Generated.DTO.LocationSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Name = source.Name;
        }
    }
    
    public partial class WorkflowSampleSystemClientPrimitiveDTOMappingService : WorkflowSampleSystem.Generated.DTO.WorkflowSampleSystemClientPrimitiveDTOMappingServiceBase
    {
        
        private static WorkflowSampleSystem.Generated.DTO.WorkflowSampleSystemClientPrimitiveDTOMappingService _default = new WorkflowSampleSystem.Generated.DTO.WorkflowSampleSystemClientPrimitiveDTOMappingService();
        
        public static WorkflowSampleSystem.Generated.DTO.WorkflowSampleSystemClientPrimitiveDTOMappingService Default
        {
            get
            {
                return WorkflowSampleSystem.Generated.DTO.WorkflowSampleSystemClientPrimitiveDTOMappingService._default;
            }
        }
    }
}
