//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Workflow.BLL
{
    
    
    public partial class WorkflowValidationMapBase : Framework.Validation.ValidationMapBase
    {
        
        private Framework.Validation.IValidationMap _defaultValidatorMap;
        
        protected WorkflowValidationMapBase(Framework.Core.IDynamicSource extendedValidationData) : 
                base(extendedValidationData)
        {
            this._defaultValidatorMap = new Framework.Validation.ValidationMap(extendedValidationData);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableCommandFilterModel, Framework.Workflow.Domain.Runtime.TaskInstance>> GetAvailableCommandFilterModel_TaskInstanceValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.AvailableCommandFilterModel, Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.AvailableCommandFilterModel>> GetAvailableCommandFilterModelProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableCommandFilterModel> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.AvailableCommandFilterModel, Framework.Workflow.Domain.Runtime.TaskInstance>(source => source.TaskInstance, currentClass, this.GetAvailableCommandFilterModel_TaskInstanceValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.TaskInstance>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableCommandFilterModel> GetAvailableCommandFilterModelValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.AvailableCommandFilterModel>(this.GetAvailableCommandFilterModelProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroup, System.Collections.Generic.IList<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>>> GetAvailableTaskInstanceGroup_ItemsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroup, System.Collections.Generic.IList<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>, Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroup, Framework.Workflow.Domain.Definition.Task>> GetAvailableTaskInstanceGroup_TaskValidators()
        {
            yield return new Framework.Validation.DeepSingleValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroup, Framework.Workflow.Domain.Definition.Task>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem, System.Collections.Generic.IList<Framework.Workflow.Domain.Definition.Command>>> GetAvailableTaskInstanceGroupItem_CommandsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem, System.Collections.Generic.IList<Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.Domain.Definition.Command>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>>> GetAvailableTaskInstanceGroupItem_TaskInstancesValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>> GetAvailableTaskInstanceGroupItemProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem, System.Collections.Generic.IList<Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.Domain.Definition.Command>(source => source.Commands, currentClass, this.GetAvailableTaskInstanceGroupItem_CommandsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Command>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance>(source => source.TaskInstances, currentClass, this.GetAvailableTaskInstanceGroupItem_TaskInstancesValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.TaskInstance>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem> GetAvailableTaskInstanceGroupItemValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>(this.GetAvailableTaskInstanceGroupItemProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup>> GetAvailableTaskInstanceGroupProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup, System.Collections.Generic.IList<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>, Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>(source => source.Items, currentClass, this.GetAvailableTaskInstanceGroup_ItemsValidators(), this.GetClassMap<Framework.Workflow.Domain.AvailableTaskInstanceGroupItem>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup, Framework.Workflow.Domain.Definition.Task>(source => source.Task, currentClass, this.GetAvailableTaskInstanceGroup_TaskValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Task>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup> GetAvailableTaskInstanceGroupValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup>(this.GetAvailableTaskInstanceGroupProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel> GetAvailableTaskInstanceMainFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel>.Empty;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel, string>> GetAvailableTaskInstanceUntypedMainFilterModel_SourceTypePathValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel>> GetAvailableTaskInstanceUntypedMainFilterModelProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel, string>(source => source.SourceTypePath, currentClass, this.GetAvailableTaskInstanceUntypedMainFilterModel_SourceTypePathValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel> GetAvailableTaskInstanceUntypedMainFilterModelValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel>(this.GetAvailableTaskInstanceUntypedMainFilterModelProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup, System.Collections.Generic.IList<Framework.Workflow.Domain.AvailableTaskInstanceGroup>>> GetAvailableTaskInstanceWorkflowGroup_ItemsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup, System.Collections.Generic.IList<Framework.Workflow.Domain.AvailableTaskInstanceGroup>, Framework.Workflow.Domain.AvailableTaskInstanceGroup>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup, Framework.Workflow.Domain.Definition.Workflow>> GetAvailableTaskInstanceWorkflowGroup_WorkflowValidators()
        {
            yield return new Framework.Validation.DeepSingleValidator<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup, Framework.Workflow.Domain.Definition.Workflow>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup>> GetAvailableTaskInstanceWorkflowGroupProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup, System.Collections.Generic.IList<Framework.Workflow.Domain.AvailableTaskInstanceGroup>, Framework.Workflow.Domain.AvailableTaskInstanceGroup>(source => source.Items, currentClass, this.GetAvailableTaskInstanceWorkflowGroup_ItemsValidators(), this.GetClassMap<Framework.Workflow.Domain.AvailableTaskInstanceGroup>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup, Framework.Workflow.Domain.Definition.Workflow>(source => source.Workflow, currentClass, this.GetAvailableTaskInstanceWorkflowGroup_WorkflowValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Workflow>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup> GetAvailableTaskInstanceWorkflowGroupValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup>(this.GetAvailableTaskInstanceWorkflowGroupProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, System.DateTime?>> GetCommand_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Command>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, string>> GetCommand_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Command>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, string>> GetCommand_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Command>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandEvent>> GetCommand_EventValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandEvent>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return new Framework.Validation.DeepSingleValidator<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetCommand_ExecuteActionValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.Command>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata>>> GetCommand_MetadatasValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata>, Framework.Workflow.Domain.Definition.CommandMetadata, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata>, Framework.Workflow.Domain.Definition.CommandMetadata>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, string>> GetCommand_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Command>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, System.DateTime?>> GetCommand_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Command>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, string>> GetCommand_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Command>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Command, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter>>> GetCommand_ParametersValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter>, Framework.Workflow.Domain.Definition.CommandParameter, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter>, Framework.Workflow.Domain.Definition.CommandParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess>>> GetCommand_RoleAccessesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess>, Framework.Workflow.Domain.Definition.CommandRoleAccess, System.Tuple<Framework.Workflow.Domain.Definition.Role>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.Role>(source.Role), "Role");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess>, Framework.Workflow.Domain.Definition.CommandRoleAccess>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandEvent, System.DateTime?>> GetCommandEvent_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandEvent, string>> GetCommandEvent_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandEvent, string>> GetCommandEvent_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandEvent, string>> GetCommandEvent_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandEvent, System.DateTime?>> GetCommandEvent_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandEvent, string>> GetCommandEvent_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandEvent>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.CommandEvent, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent>> GetCommandEventProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandEvent> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent, System.DateTime?>(source => source.CreateDate, currentClass, this.GetCommandEvent_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent, string>(source => source.CreatedBy, currentClass, this.GetCommandEvent_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent, string>(source => source.Description, currentClass, this.GetCommandEvent_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent, string>(source => source.ModifiedBy, currentClass, this.GetCommandEvent_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetCommandEvent_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandEvent, string>(source => source.Name, currentClass, this.GetCommandEvent_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.CommandEventRootFilterModel> GetCommandEventRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.CommandEventRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandEvent> GetCommandEventValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.CommandEvent>(this.GetCommandEventProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, System.DateTime?>> GetCommandMetadata_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, string>> GetCommandMetadata_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, string>> GetCommandMetadata_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, string>> GetCommandMetadata_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, System.DateTime?>> GetCommandMetadata_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, string>> GetCommandMetadata_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.CommandMetadata, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandMetadata, string>> GetCommandMetadata_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata>> GetCommandMetadataProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, System.DateTime?>(source => source.CreateDate, currentClass, this.GetCommandMetadata_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, string>(source => source.CreatedBy, currentClass, this.GetCommandMetadata_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, string>(source => source.Description, currentClass, this.GetCommandMetadata_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, string>(source => source.ModifiedBy, currentClass, this.GetCommandMetadata_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetCommandMetadata_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, string>(source => source.Name, currentClass, this.GetCommandMetadata_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata, string>(source => source.Value, currentClass, this.GetCommandMetadata_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata> GetCommandMetadataValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.CommandMetadata>(this.GetCommandMetadataProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, System.DateTime?>> GetCommandParameter_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, string>> GetCommandParameter_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, string>> GetCommandParameter_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, string>> GetCommandParameter_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, System.DateTime?>> GetCommandParameter_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, string>> GetCommandParameter_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandParameter>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.CommandParameter, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandParameter, Framework.Workflow.Domain.Definition.DomainType>> GetCommandParameter_TypeValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.CommandParameter, Framework.Workflow.Domain.Definition.DomainType>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowTargetSystemPropertyValidator.Value;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter>> GetCommandParameterProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandParameter> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, System.DateTime?>(source => source.CreateDate, currentClass, this.GetCommandParameter_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, string>(source => source.CreatedBy, currentClass, this.GetCommandParameter_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, string>(source => source.Description, currentClass, this.GetCommandParameter_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, string>(source => source.ModifiedBy, currentClass, this.GetCommandParameter_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetCommandParameter_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, string>(source => source.Name, currentClass, this.GetCommandParameter_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandParameter, Framework.Workflow.Domain.Definition.DomainType>(source => source.Type, currentClass, this.GetCommandParameter_TypeValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.DomainType>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandParameter> GetCommandParameterValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.CommandParameter>(this.GetCommandParameterProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.Command>> GetCommandProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Command> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, System.DateTime?>(source => source.CreateDate, currentClass, this.GetCommand_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, string>(source => source.CreatedBy, currentClass, this.GetCommand_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, string>(source => source.Description, currentClass, this.GetCommand_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandEvent>(source => source.Event, currentClass, this.GetCommand_EventValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.CommandEvent>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.ExecuteAction, currentClass, this.GetCommand_ExecuteActionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata>, Framework.Workflow.Domain.Definition.CommandMetadata>(source => source.Metadatas, currentClass, this.GetCommand_MetadatasValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.CommandMetadata>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, string>(source => source.ModifiedBy, currentClass, this.GetCommand_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetCommand_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Command, string>(source => source.Name, currentClass, this.GetCommand_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter>, Framework.Workflow.Domain.Definition.CommandParameter>(source => source.Parameters, currentClass, this.GetCommand_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.CommandParameter>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Command, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess>, Framework.Workflow.Domain.Definition.CommandRoleAccess>(source => source.RoleAccesses, currentClass, this.GetCommand_RoleAccessesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.CommandRoleAccess>(true));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess, System.DateTime?>> GetCommandRoleAccess_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandRoleAccess>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess, string>> GetCommandRoleAccess_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess, string>> GetCommandRoleAccess_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess, System.DateTime?>> GetCommandRoleAccess_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.CommandRoleAccess>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess, Framework.Workflow.Domain.Definition.Role>> GetCommandRoleAccess_RoleValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.CommandRoleAccess, Framework.Workflow.Domain.Definition.Role>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess>> GetCommandRoleAccessProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess, System.DateTime?>(source => source.CreateDate, currentClass, this.GetCommandRoleAccess_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess, string>(source => source.CreatedBy, currentClass, this.GetCommandRoleAccess_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess, string>(source => source.ModifiedBy, currentClass, this.GetCommandRoleAccess_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetCommandRoleAccess_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess, Framework.Workflow.Domain.Definition.Role>(source => source.Role, currentClass, this.GetCommandRoleAccess_RoleValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Role>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess> GetCommandRoleAccessValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.CommandRoleAccess>(this.GetCommandRoleAccessProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.CommandRootFilterModel> GetCommandRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.CommandRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Command> GetCommandValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.Command>(this.GetCommandProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, string>> GetConditionState_AutoSetStatePropertyNameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, string>> GetConditionState_AutoSetStatePropertyValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetConditionState_ConditionValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.ConditionState>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, System.DateTime?>> GetConditionState_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, string>> GetConditionState_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, string>> GetConditionState_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>> GetConditionState_FalseEventValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return new Framework.Validation.DeepSingleValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, string>> GetConditionState_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, System.DateTime?>> GetConditionState_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, string>> GetConditionState_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionState>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ConditionState, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>> GetConditionState_TrueEventValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return new Framework.Validation.DeepSingleValidator<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, System.DateTime?>> GetConditionStateEvent_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>> GetConditionStateEvent_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>> GetConditionStateEvent_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>> GetConditionStateEvent_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, System.DateTime?>> GetConditionStateEvent_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>> GetConditionStateEvent_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent>> GetConditionStateEventProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent, System.DateTime?>(source => source.CreateDate, currentClass, this.GetConditionStateEvent_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>(source => source.CreatedBy, currentClass, this.GetConditionStateEvent_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>(source => source.Description, currentClass, this.GetConditionStateEvent_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>(source => source.ModifiedBy, currentClass, this.GetConditionStateEvent_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetConditionStateEvent_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent, string>(source => source.Name, currentClass, this.GetConditionStateEvent_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent> GetConditionStateEventValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.ConditionStateEvent>(this.GetConditionStateEventProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState>> GetConditionStateProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ConditionState> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, string>(source => source.AutoSetStatePropertyName, currentClass, this.GetConditionState_AutoSetStatePropertyNameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, string>(source => source.AutoSetStatePropertyValue, currentClass, this.GetConditionState_AutoSetStatePropertyValueValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Condition, currentClass, this.GetConditionState_ConditionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, System.DateTime?>(source => source.CreateDate, currentClass, this.GetConditionState_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, string>(source => source.CreatedBy, currentClass, this.GetConditionState_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, string>(source => source.Description, currentClass, this.GetConditionState_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>(source => source.FalseEvent, currentClass, this.GetConditionState_FalseEventValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.ConditionStateEvent>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, string>(source => source.ModifiedBy, currentClass, this.GetConditionState_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetConditionState_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, string>(source => source.Name, currentClass, this.GetConditionState_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ConditionState, Framework.Workflow.Domain.Definition.ConditionStateEvent>(source => source.TrueEvent, currentClass, this.GetConditionState_TrueEventValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.ConditionStateEvent>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.ConditionStateRootFilterModel> GetConditionStateRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.ConditionStateRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ConditionState> GetConditionStateValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.ConditionState>(this.GetConditionStateProperties, this.GetConditionStateValidators());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IClassValidator<Framework.Workflow.Domain.Definition.ConditionState>> GetConditionStateValidators()
        {
            yield return this.GetStateAutoSetValidator<Framework.Workflow.Domain.Definition.ConditionState>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>>> GetCustomStateStartWorkflowRequest_ParametersValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter, System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, Framework.Workflow.Domain.Definition.StateBase>> GetCustomStateStartWorkflowRequest_StartStateValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, Framework.Workflow.Domain.Definition.StateBase>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>> GetCustomStateStartWorkflowRequest_WorkflowValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest>> GetCustomStateStartWorkflowRequestProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter>(source => source.Parameters, currentClass, this.GetCustomStateStartWorkflowRequest_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.StartWorkflowRequestParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, Framework.Workflow.Domain.Definition.StateBase>(source => source.StartState, currentClass, this.GetCustomStateStartWorkflowRequest_StartStateValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StateBase>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>(source => source.Workflow, currentClass, this.GetCustomStateStartWorkflowRequest_WorkflowValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Workflow>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest> GetCustomStateStartWorkflowRequestValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest>(this.GetCustomStateStartWorkflowRequestProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, System.DateTime?>> GetDomainType_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, string>> GetDomainType_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, string>> GetDomainType_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, string>> GetDomainType_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, System.DateTime?>> GetDomainType_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, string>> GetDomainType_NameSpaceValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, string>> GetDomainType_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.DomainType>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.DomainType, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.DomainType, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>>> GetDomainType_WorkflowSourcesValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.DomainType, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.Domain.Definition.WorkflowSource>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType>> GetDomainTypeProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.DomainType> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, System.DateTime?>(source => source.CreateDate, currentClass, this.GetDomainType_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, string>(source => source.CreatedBy, currentClass, this.GetDomainType_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, string>(source => source.Description, currentClass, this.GetDomainType_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, string>(source => source.ModifiedBy, currentClass, this.GetDomainType_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetDomainType_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, string>(source => source.Name, currentClass, this.GetDomainType_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, string>(source => source.NameSpace, currentClass, this.GetDomainType_NameSpaceValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.DomainType, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.Domain.Definition.WorkflowSource>(source => source.WorkflowSources, currentClass, this.GetDomainType_WorkflowSourcesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowSource>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.DomainTypeRootFilterModel> GetDomainTypeRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.DomainTypeRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.DomainType> GetDomainTypeValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.DomainType>(this.GetDomainTypeProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Event, System.DateTime?>> GetEvent_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Event>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Event, string>> GetEvent_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Event>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Event, string>> GetEvent_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Event>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Event, string>> GetEvent_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Event>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Event, System.DateTime?>> GetEvent_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Event>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Event, string>> GetEvent_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Event>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Event, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.Event>> GetEventProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Event> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Event, System.DateTime?>(source => source.CreateDate, currentClass, this.GetEvent_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Event, string>(source => source.CreatedBy, currentClass, this.GetEvent_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Event, string>(source => source.Description, currentClass, this.GetEvent_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Event, string>(source => source.ModifiedBy, currentClass, this.GetEvent_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Event, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetEvent_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Event, string>(source => source.Name, currentClass, this.GetEvent_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.EventRootFilterModel> GetEventRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.EventRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Event> GetEventValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.Event>(this.GetEventProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.ExecuteCommandRequest, Framework.Workflow.Domain.Definition.Command>> GetExecuteCommandRequest_CommandValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.ExecuteCommandRequest, Framework.Workflow.Domain.Definition.Command>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.ExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>>> GetExecuteCommandRequest_ParametersValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.ExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.ExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.Workflow.Domain.ExecuteCommandRequestParameter, System.Tuple<Framework.Workflow.Domain.Definition.CommandParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.CommandParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.ExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.Workflow.Domain.ExecuteCommandRequestParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.ExecuteCommandRequest, Framework.Workflow.Domain.Runtime.TaskInstance>> GetExecuteCommandRequest_TaskInstanceValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.ExecuteCommandRequest, Framework.Workflow.Domain.Runtime.TaskInstance>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.ExecuteCommandRequestParameter, Framework.Workflow.Domain.Definition.CommandParameter>> GetExecuteCommandRequestParameter_DefinitionValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.ExecuteCommandRequestParameter, Framework.Workflow.Domain.Definition.CommandParameter>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.ExecuteCommandRequestParameter, string>> GetExecuteCommandRequestParameter_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.ExecuteCommandRequestParameter>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter>> GetExecuteCommandRequestParameterProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter, Framework.Workflow.Domain.Definition.CommandParameter>(source => source.Definition, currentClass, this.GetExecuteCommandRequestParameter_DefinitionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.CommandParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter, string>(source => source.Value, currentClass, this.GetExecuteCommandRequestParameter_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter> GetExecuteCommandRequestParameterValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter>(this.GetExecuteCommandRequestParameterProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest>> GetExecuteCommandRequestProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest, Framework.Workflow.Domain.Definition.Command>(source => source.Command, currentClass, this.GetExecuteCommandRequest_CommandValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Command>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.Workflow.Domain.ExecuteCommandRequestParameter>(source => source.Parameters, currentClass, this.GetExecuteCommandRequest_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest, Framework.Workflow.Domain.Runtime.TaskInstance>(source => source.TaskInstance, currentClass, this.GetExecuteCommandRequest_TaskInstanceValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.TaskInstance>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest> GetExecuteCommandRequestValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.ExecuteCommandRequest>(this.GetExecuteCommandRequestProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.DateTime?>> GetExecutedCommand_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.ExecutedCommand>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, string>> GetExecutedCommand_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, Framework.Workflow.Domain.Definition.Command>> GetExecutedCommand_DefinitionValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, Framework.Workflow.Domain.Definition.Command>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, string>> GetExecutedCommand_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.DateTime?>> GetExecutedCommand_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.ExecutedCommand>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>>> GetExecutedCommand_ParametersValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>, Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, System.Tuple<Framework.Workflow.Domain.Definition.CommandParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.CommandParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>, Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, System.DateTime?>> GetExecutedCommandParameter_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, string>> GetExecutedCommandParameter_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, Framework.Workflow.Domain.Definition.CommandParameter>> GetExecutedCommandParameter_DefinitionValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, Framework.Workflow.Domain.Definition.CommandParameter>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, string>> GetExecutedCommandParameter_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, System.DateTime?>> GetExecutedCommandParameter_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, string>> GetExecutedCommandParameter_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>> GetExecutedCommandParameterProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, System.DateTime?>(source => source.CreateDate, currentClass, this.GetExecutedCommandParameter_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, string>(source => source.CreatedBy, currentClass, this.GetExecutedCommandParameter_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, Framework.Workflow.Domain.Definition.CommandParameter>(source => source.Definition, currentClass, this.GetExecutedCommandParameter_DefinitionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.CommandParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, string>(source => source.ModifiedBy, currentClass, this.GetExecutedCommandParameter_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetExecutedCommandParameter_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter, string>(source => source.Value, currentClass, this.GetExecutedCommandParameter_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter> GetExecutedCommandParameterValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(this.GetExecutedCommandParameterProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand>> GetExecutedCommandProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.DateTime?>(source => source.CreateDate, currentClass, this.GetExecutedCommand_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand, string>(source => source.CreatedBy, currentClass, this.GetExecutedCommand_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand, Framework.Workflow.Domain.Definition.Command>(source => source.Definition, currentClass, this.GetExecutedCommand_DefinitionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Command>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand, string>(source => source.ModifiedBy, currentClass, this.GetExecutedCommand_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetExecutedCommand_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>, Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(source => source.Parameters, currentClass, this.GetExecutedCommand_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand> GetExecutedCommandValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.ExecutedCommand>(this.GetExecutedCommandProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, Framework.Workflow.Domain.Definition.Command>> GetGroupExecuteCommandRequest_CommandValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, Framework.Workflow.Domain.Definition.Command>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>>> GetGroupExecuteCommandRequest_ParametersValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.Workflow.Domain.ExecuteCommandRequestParameter, System.Tuple<Framework.Workflow.Domain.Definition.CommandParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.CommandParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.Workflow.Domain.ExecuteCommandRequestParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>>> GetGroupExecuteCommandRequest_TaskInstancesValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.AnyElementsValidator<Framework.Workflow.Domain.Runtime.TaskInstance>();
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest>> GetGroupExecuteCommandRequestProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest, Framework.Workflow.Domain.Definition.Command>(source => source.Command, currentClass, this.GetGroupExecuteCommandRequest_CommandValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Command>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.Workflow.Domain.ExecuteCommandRequestParameter>(source => source.Parameters, currentClass, this.GetGroupExecuteCommandRequest_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.ExecuteCommandRequestParameter>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance>(source => source.TaskInstances, currentClass, this.GetGroupExecuteCommandRequest_TaskInstancesValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.TaskInstance>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest> GetGroupExecuteCommandRequestValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.GroupExecuteCommandRequest>(this.GetGroupExecuteCommandRequestProperties);
        }
        
        protected override Framework.Validation.IClassValidationMap<TSource> GetInternalClassMap<TSource>()
        {
            if ((typeof(TSource) == typeof(Framework.Workflow.Domain.AvailableCommandFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAvailableCommandFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.AvailableTaskInstanceGroup)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAvailableTaskInstanceGroupValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.AvailableTaskInstanceGroupItem)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAvailableTaskInstanceGroupItemValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAvailableTaskInstanceMainFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAvailableTaskInstanceUntypedMainFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.AvailableTaskInstanceWorkflowGroup)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAvailableTaskInstanceWorkflowGroupValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.CommandEventRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandEventRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.CommandRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.ConditionStateRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetConditionStateRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.Command)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.CommandEvent)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandEventValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.CommandMetadata)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandMetadataValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.CommandParameter)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandParameterValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.CommandRoleAccess)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCommandRoleAccessValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.ConditionState)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetConditionStateValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetConditionStateEventValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.DomainType)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetDomainTypeValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.Event)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetEventValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.ParallelState)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetParallelStateValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetParallelStateFinalEventValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.ParallelStateStartItem)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetParallelStateStartItemValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.Role)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetRoleValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStartWorkflowDomainObjectConditionValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.State)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.StateBase)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateBaseValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateDomainObjectEventValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateTimeoutEventValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.TargetSystem)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTargetSystemValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.Task)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTaskValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.TaskMetadata)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTaskMetadataValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.Transition)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTransitionValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.TransitionAction)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTransitionActionValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.Workflow)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.WorkflowLambda)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowLambdaValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowMetadataValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.WorkflowParameter)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowParameterValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Definition.WorkflowSource)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowSourceValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.DomainTypeRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetDomainTypeRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.EventRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetEventRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.ExecuteCommandRequest)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetExecuteCommandRequestValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.ExecuteCommandRequestParameter)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetExecuteCommandRequestParameterValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.GroupExecuteCommandRequest)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetGroupExecuteCommandRequestValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.MassExecuteCommandRequest)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetMassExecuteCommandRequestValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.NamedLock)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetNamedLockValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.ParallelStateRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetParallelStateRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.RoleRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetRoleRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.ExecutedCommand)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetExecutedCommandValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetExecutedCommandParameterValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.StateInstance)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateInstanceValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.TaskInstance)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTaskInstanceValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.TransitionInstance)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTransitionInstanceValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowInstanceValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowInstanceParameterValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowInstanceWatcherValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStartWorkflowDomainObjectConditionRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StartWorkflowRequest)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStartWorkflowRequestValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StartWorkflowRequest.CustomStateStartWorkflowRequest)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetCustomStateStartWorkflowRequestValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStartSubWorkflowRequestValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StartWorkflowRequestParameter)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStartWorkflowRequestParameterValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StateBaseRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateBaseRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.StateRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetStateRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.TaskInstanceRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTaskInstanceRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.TaskRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTaskRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.TransitionRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTransitionRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.WorkflowCreateModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowCreateModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.WorkflowInstanceRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowInstanceRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.WorkflowLambdaRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowLambdaRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.WorkflowRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowRootFilterModelValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Workflow.Domain.WorkflowSourceRootFilterModel)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetWorkflowSourceRootFilterModelValidationMap()));
            }
            else
            {
                return Framework.Validation.ValidationMapExtensions.GetClassMap<TSource>(this._defaultValidatorMap);
            }
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.MassExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.GroupExecuteCommandRequest>>> GetMassExecuteCommandRequest_GroupsValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.MassExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.GroupExecuteCommandRequest>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.AnyElementsValidator<Framework.Workflow.Domain.GroupExecuteCommandRequest>();
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.MassExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.GroupExecuteCommandRequest>, Framework.Workflow.Domain.GroupExecuteCommandRequest>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.MassExecuteCommandRequest, bool>> GetMassExecuteCommandRequest_UniqueTaskInstancesValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.MassExecuteCommandRequest, bool>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.MassExecuteCommandRequest>> GetMassExecuteCommandRequestProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.MassExecuteCommandRequest> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.MassExecuteCommandRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.GroupExecuteCommandRequest>, Framework.Workflow.Domain.GroupExecuteCommandRequest>(source => source.Groups, currentClass, this.GetMassExecuteCommandRequest_GroupsValidators(), this.GetClassMap<Framework.Workflow.Domain.GroupExecuteCommandRequest>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.MassExecuteCommandRequest, bool>(source => source.UniqueTaskInstances, currentClass, this.GetMassExecuteCommandRequest_UniqueTaskInstancesValidators(), this.GetClassMap<bool>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.MassExecuteCommandRequest> GetMassExecuteCommandRequestValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.MassExecuteCommandRequest>(this.GetMassExecuteCommandRequestProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.NamedLock, System.DateTime?>> GetNamedLock_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.NamedLock>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.NamedLock, string>> GetNamedLock_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.NamedLock>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.NamedLock, string>> GetNamedLock_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.NamedLock>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.NamedLock, System.DateTime?>> GetNamedLock_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.NamedLock>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.NamedLock>> GetNamedLockProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.NamedLock> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.NamedLock, System.DateTime?>(source => source.CreateDate, currentClass, this.GetNamedLock_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.NamedLock, string>(source => source.CreatedBy, currentClass, this.GetNamedLock_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.NamedLock, string>(source => source.ModifiedBy, currentClass, this.GetNamedLock_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.NamedLock, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetNamedLock_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.NamedLock> GetNamedLockValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.NamedLock>(this.GetNamedLockProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, string>> GetParallelState_AutoSetStatePropertyNameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, string>> GetParallelState_AutoSetStatePropertyValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, System.DateTime?>> GetParallelState_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, string>> GetParallelState_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, string>> GetParallelState_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>>> GetParallelState_FinalEventsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.ParallelState, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, string>> GetParallelState_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, System.DateTime?>> GetParallelState_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, string>> GetParallelState_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelState>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ParallelState, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelState, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateStartItem>>> GetParallelState_StartItemsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.ParallelState, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateStartItem>, Framework.Workflow.Domain.Definition.ParallelStateStartItem>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetParallelStateFinalEvent_ConditionValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, System.DateTime?>> GetParallelStateFinalEvent_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>> GetParallelStateFinalEvent_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>> GetParallelStateFinalEvent_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>> GetParallelStateFinalEvent_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, System.DateTime?>> GetParallelStateFinalEvent_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>> GetParallelStateFinalEvent_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>> GetParallelStateFinalEventProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Condition, currentClass, this.GetParallelStateFinalEvent_ConditionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, System.DateTime?>(source => source.CreateDate, currentClass, this.GetParallelStateFinalEvent_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>(source => source.CreatedBy, currentClass, this.GetParallelStateFinalEvent_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>(source => source.Description, currentClass, this.GetParallelStateFinalEvent_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>(source => source.ModifiedBy, currentClass, this.GetParallelStateFinalEvent_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetParallelStateFinalEvent_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, string>(source => source.Name, currentClass, this.GetParallelStateFinalEvent_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> GetParallelStateFinalEventValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(this.GetParallelStateFinalEventProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState>> GetParallelStateProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ParallelState> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, string>(source => source.AutoSetStatePropertyName, currentClass, this.GetParallelState_AutoSetStatePropertyNameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, string>(source => source.AutoSetStatePropertyValue, currentClass, this.GetParallelState_AutoSetStatePropertyValueValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, System.DateTime?>(source => source.CreateDate, currentClass, this.GetParallelState_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, string>(source => source.CreatedBy, currentClass, this.GetParallelState_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, string>(source => source.Description, currentClass, this.GetParallelState_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(source => source.FinalEvents, currentClass, this.GetParallelState_FinalEventsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, string>(source => source.ModifiedBy, currentClass, this.GetParallelState_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetParallelState_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, string>(source => source.Name, currentClass, this.GetParallelState_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelState, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateStartItem>, Framework.Workflow.Domain.Definition.ParallelStateStartItem>(source => source.StartItems, currentClass, this.GetParallelState_StartItemsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.ParallelStateRootFilterModel> GetParallelStateRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.ParallelStateRootFilterModel>.Empty;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, System.DateTime?>> GetParallelStateStartItem_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, string>> GetParallelStateStartItem_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetParallelStateStartItem_FactoryValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, string>> GetParallelStateStartItem_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, System.DateTime?>> GetParallelStateStartItem_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, Framework.Workflow.Domain.Definition.Workflow>> GetParallelStateStartItem_SubWorkflowValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem, Framework.Workflow.Domain.Definition.Workflow>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return Framework.Workflow.Domain.Definition.WorkflowTargetSystemPropertyValidator.Value;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem>> GetParallelStateStartItemProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem, System.DateTime?>(source => source.CreateDate, currentClass, this.GetParallelStateStartItem_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem, string>(source => source.CreatedBy, currentClass, this.GetParallelStateStartItem_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Factory, currentClass, this.GetParallelStateStartItem_FactoryValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem, string>(source => source.ModifiedBy, currentClass, this.GetParallelStateStartItem_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetParallelStateStartItem_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem, Framework.Workflow.Domain.Definition.Workflow>(source => source.SubWorkflow, currentClass, this.GetParallelStateStartItem_SubWorkflowValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Workflow>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem> GetParallelStateStartItemValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(this.GetParallelStateStartItemProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.ParallelState> GetParallelStateValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.ParallelState>(this.GetParallelStateProperties, this.GetParallelStateValidators());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IClassValidator<Framework.Workflow.Domain.Definition.ParallelState>> GetParallelStateValidators()
        {
            yield return this.GetStateAutoSetValidator<Framework.Workflow.Domain.Definition.ParallelState>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, System.DateTime?>> GetRole_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Role>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, string>> GetRole_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Role>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetRole_CustomSecurityProviderValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.Role>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, string>> GetRole_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Role>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, string>> GetRole_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Role>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, System.DateTime?>> GetRole_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Role>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Role, string>> GetRole_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Role>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Role, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.Role>> GetRoleProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Role> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, System.DateTime?>(source => source.CreateDate, currentClass, this.GetRole_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, string>(source => source.CreatedBy, currentClass, this.GetRole_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.CustomSecurityProvider, currentClass, this.GetRole_CustomSecurityProviderValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, string>(source => source.Description, currentClass, this.GetRole_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, string>(source => source.ModifiedBy, currentClass, this.GetRole_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetRole_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Role, string>(source => source.Name, currentClass, this.GetRole_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.RoleRootFilterModel> GetRoleRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.RoleRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Role> GetRoleValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.Role>(this.GetRoleProperties, this.GetRoleValidators());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IClassValidator<Framework.Workflow.Domain.Definition.Role>> GetRoleValidators()
        {
            yield return Framework.Validation.ClassValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredGroupValidator<Framework.Workflow.Domain.Definition.Role>(Framework.Validation.RequiredGroupValidatorMode.One, Framework.Core.DictionaryHelper.Create<string, System.Func<Framework.Workflow.Domain.Definition.Role, bool>>(new System.Collections.Generic.KeyValuePair<string, System.Func<Framework.Workflow.Domain.Definition.Role, bool>>("SecurityOperationId", source => Framework.Validation.RequiredHelper.IsValid(source.SecurityOperationId, Framework.Restriction.RequiredMode.Default)), new System.Collections.Generic.KeyValuePair<string, System.Func<Framework.Workflow.Domain.Definition.Role, bool>>("CustomSecurityProvider", source => Framework.Validation.RequiredHelper.IsValid(source.CustomSecurityProvider, Framework.Restriction.RequiredMode.Default))), "SecurityOperationId, CustomSecurityProvider"), 8);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, Framework.Workflow.Domain.Runtime.StateInstance>> GetStartSubWorkflowRequest_OwnerWorkflowStateValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>>> GetStartSubWorkflowRequest_ParametersValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter, System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>> GetStartSubWorkflowRequest_WorkflowValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest>> GetStartSubWorkflowRequestProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, Framework.Workflow.Domain.Runtime.StateInstance>(source => source.OwnerWorkflowState, currentClass, this.GetStartSubWorkflowRequest_OwnerWorkflowStateValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.StateInstance>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter>(source => source.Parameters, currentClass, this.GetStartSubWorkflowRequest_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.StartWorkflowRequestParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>(source => source.Workflow, currentClass, this.GetStartSubWorkflowRequest_WorkflowValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Workflow>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest> GetStartSubWorkflowRequestValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest.StartSubWorkflowRequest>(this.GetStartSubWorkflowRequestProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetStartWorkflowDomainObjectCondition_ConditionValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.DateTime?>> GetStartWorkflowDomainObjectCondition_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, string>> GetStartWorkflowDomainObjectCondition_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetStartWorkflowDomainObjectCondition_FactoryValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, string>> GetStartWorkflowDomainObjectCondition_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.DateTime?>> GetStartWorkflowDomainObjectCondition_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>> GetStartWorkflowDomainObjectConditionProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Condition, currentClass, this.GetStartWorkflowDomainObjectCondition_ConditionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.DateTime?>(source => source.CreateDate, currentClass, this.GetStartWorkflowDomainObjectCondition_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, string>(source => source.CreatedBy, currentClass, this.GetStartWorkflowDomainObjectCondition_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Factory, currentClass, this.GetStartWorkflowDomainObjectCondition_FactoryValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, string>(source => source.ModifiedBy, currentClass, this.GetStartWorkflowDomainObjectCondition_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetStartWorkflowDomainObjectCondition_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel> GetStartWorkflowDomainObjectConditionRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> GetStartWorkflowDomainObjectConditionValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(this.GetStartWorkflowDomainObjectConditionProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>>> GetStartWorkflowRequest_ParametersValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.StartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter, System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.StartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>> GetStartWorkflowRequest_WorkflowValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequestParameter, Framework.Workflow.Domain.Definition.WorkflowParameter>> GetStartWorkflowRequestParameter_DefinitionValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.StartWorkflowRequestParameter, Framework.Workflow.Domain.Definition.WorkflowParameter>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.StartWorkflowRequestParameter, string>> GetStartWorkflowRequestParameter_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.StartWorkflowRequestParameter>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequestParameter>> GetStartWorkflowRequestParameterProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequestParameter> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequestParameter, Framework.Workflow.Domain.Definition.WorkflowParameter>(source => source.Definition, currentClass, this.GetStartWorkflowRequestParameter_DefinitionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequestParameter, string>(source => source.Value, currentClass, this.GetStartWorkflowRequestParameter_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequestParameter> GetStartWorkflowRequestParameterValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequestParameter>(this.GetStartWorkflowRequestParameterProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest>> GetStartWorkflowRequestProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest, System.Collections.Generic.IList<Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.Workflow.Domain.StartWorkflowRequestParameter>(source => source.Parameters, currentClass, this.GetStartWorkflowRequest_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.StartWorkflowRequestParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.StartWorkflowRequest, Framework.Workflow.Domain.Definition.Workflow>(source => source.Workflow, currentClass, this.GetStartWorkflowRequest_WorkflowValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Workflow>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest> GetStartWorkflowRequestValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StartWorkflowRequest>(this.GetStartWorkflowRequestProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, string>> GetState_AutoSetStatePropertyNameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, string>> GetState_AutoSetStatePropertyValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, System.DateTime?>> GetState_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, string>> GetState_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, string>> GetState_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>>> GetState_DomainObjectEventsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, string>> GetState_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, System.DateTime?>> GetState_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, string>> GetState_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.State>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.State, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task>>> GetState_TasksValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task>, Framework.Workflow.Domain.Definition.Task>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent>>> GetState_TimeoutEventsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent>, Framework.Workflow.Domain.Definition.StateTimeoutEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, string>> GetStateBase_AutoSetStatePropertyNameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, string>> GetStateBase_AutoSetStatePropertyValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, System.DateTime?>> GetStateBase_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, string>> GetStateBase_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, string>> GetStateBase_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, string>> GetStateBase_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, System.DateTime?>> GetStateBase_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateBase, string>> GetStateBase_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateBase>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.StateBase, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase>> GetStateBaseProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StateBase> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, string>(source => source.AutoSetStatePropertyName, currentClass, this.GetStateBase_AutoSetStatePropertyNameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, string>(source => source.AutoSetStatePropertyValue, currentClass, this.GetStateBase_AutoSetStatePropertyValueValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, System.DateTime?>(source => source.CreateDate, currentClass, this.GetStateBase_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, string>(source => source.CreatedBy, currentClass, this.GetStateBase_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, string>(source => source.Description, currentClass, this.GetStateBase_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, string>(source => source.ModifiedBy, currentClass, this.GetStateBase_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetStateBase_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateBase, string>(source => source.Name, currentClass, this.GetStateBase_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StateBaseRootFilterModel> GetStateBaseRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StateBaseRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StateBase> GetStateBaseValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.StateBase>(this.GetStateBaseProperties, this.GetStateBaseValidators());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IClassValidator<Framework.Workflow.Domain.Definition.StateBase>> GetStateBaseValidators()
        {
            yield return this.GetStateAutoSetValidator<Framework.Workflow.Domain.Definition.StateBase>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetStateDomainObjectEvent_ConditionValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, System.DateTime?>> GetStateDomainObjectEvent_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>> GetStateDomainObjectEvent_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>> GetStateDomainObjectEvent_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>> GetStateDomainObjectEvent_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, System.DateTime?>> GetStateDomainObjectEvent_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>> GetStateDomainObjectEvent_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>> GetStateDomainObjectEventProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Condition, currentClass, this.GetStateDomainObjectEvent_ConditionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, System.DateTime?>(source => source.CreateDate, currentClass, this.GetStateDomainObjectEvent_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>(source => source.CreatedBy, currentClass, this.GetStateDomainObjectEvent_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>(source => source.Description, currentClass, this.GetStateDomainObjectEvent_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>(source => source.ModifiedBy, currentClass, this.GetStateDomainObjectEvent_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetStateDomainObjectEvent_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, string>(source => source.Name, currentClass, this.GetStateDomainObjectEvent_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> GetStateDomainObjectEventValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(this.GetStateDomainObjectEventProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.DateTime?>> GetStateInstance_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.StateInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.StateInstance, string>> GetStateInstance_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.StateInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.StateInstance, string>> GetStateInstance_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.StateInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.DateTime?>> GetStateInstance_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.StateInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance>>> GetStateInstance_SubWorkflowsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance>, Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance>, Framework.Workflow.Domain.Runtime.WorkflowInstance>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance>>> GetStateInstance_TasksValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance, System.Tuple<Framework.Workflow.Domain.Definition.Task>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.Task>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance>> GetStateInstanceProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.StateInstance> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance, System.DateTime?>(source => source.CreateDate, currentClass, this.GetStateInstance_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance, string>(source => source.CreatedBy, currentClass, this.GetStateInstance_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance, string>(source => source.ModifiedBy, currentClass, this.GetStateInstance_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetStateInstance_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance>, Framework.Workflow.Domain.Runtime.WorkflowInstance>(source => source.SubWorkflows, currentClass, this.GetStateInstance_SubWorkflowsValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.WorkflowInstance>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.StateInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.Domain.Runtime.TaskInstance>(source => source.Tasks, currentClass, this.GetStateInstance_TasksValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.TaskInstance>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.StateInstance> GetStateInstanceValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.StateInstance>(this.GetStateInstanceProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.State>> GetStateProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.State> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, string>(source => source.AutoSetStatePropertyName, currentClass, this.GetState_AutoSetStatePropertyNameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, string>(source => source.AutoSetStatePropertyValue, currentClass, this.GetState_AutoSetStatePropertyValueValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, System.DateTime?>(source => source.CreateDate, currentClass, this.GetState_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, string>(source => source.CreatedBy, currentClass, this.GetState_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, string>(source => source.Description, currentClass, this.GetState_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(source => source.DomainObjectEvents, currentClass, this.GetState_DomainObjectEventsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, string>(source => source.ModifiedBy, currentClass, this.GetState_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetState_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.State, string>(source => source.Name, currentClass, this.GetState_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task>, Framework.Workflow.Domain.Definition.Task>(source => source.Tasks, currentClass, this.GetState_TasksValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Task>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.State, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent>, Framework.Workflow.Domain.Definition.StateTimeoutEvent>(source => source.TimeoutEvents, currentClass, this.GetState_TimeoutEventsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.StateRootFilterModel> GetStateRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.StateRootFilterModel>.Empty;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetStateTimeoutEvent_ConditionValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, System.DateTime?>> GetStateTimeoutEvent_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>> GetStateTimeoutEvent_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>> GetStateTimeoutEvent_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>> GetStateTimeoutEvent_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, System.DateTime?>> GetStateTimeoutEvent_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>> GetStateTimeoutEvent_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent>> GetStateTimeoutEventProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Condition, currentClass, this.GetStateTimeoutEvent_ConditionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, System.DateTime?>(source => source.CreateDate, currentClass, this.GetStateTimeoutEvent_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>(source => source.CreatedBy, currentClass, this.GetStateTimeoutEvent_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>(source => source.Description, currentClass, this.GetStateTimeoutEvent_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>(source => source.ModifiedBy, currentClass, this.GetStateTimeoutEvent_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetStateTimeoutEvent_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent, string>(source => source.Name, currentClass, this.GetStateTimeoutEvent_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent> GetStateTimeoutEventValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(this.GetStateTimeoutEventProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.State> GetStateValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.State>(this.GetStateProperties, this.GetStateValidators());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IClassValidator<Framework.Workflow.Domain.Definition.State>> GetStateValidators()
        {
            yield return this.GetStateAutoSetValidator<Framework.Workflow.Domain.Definition.State>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, System.DateTime?>> GetTargetSystem_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.TargetSystem>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, string>> GetTargetSystem_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, string>> GetTargetSystem_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType>>> GetTargetSystem_DomainTypesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType>, Framework.Workflow.Domain.Definition.DomainType, System.Tuple<string, string>>(source => new System.Tuple<string, string>(Framework.Core.StringExtensions.TrimNull(source.NameSpace).ToLower(), Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "NameSpace, Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType>, Framework.Workflow.Domain.Definition.DomainType>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, string>> GetTargetSystem_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, System.DateTime?>> GetTargetSystem_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.TargetSystem>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TargetSystem, string>> GetTargetSystem_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.TargetSystem, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem>> GetTargetSystemProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.TargetSystem> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTargetSystem_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, string>(source => source.CreatedBy, currentClass, this.GetTargetSystem_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, string>(source => source.Description, currentClass, this.GetTargetSystem_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType>, Framework.Workflow.Domain.Definition.DomainType>(source => source.DomainTypes, currentClass, this.GetTargetSystem_DomainTypesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.DomainType>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, string>(source => source.ModifiedBy, currentClass, this.GetTargetSystem_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTargetSystem_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TargetSystem, string>(source => source.Name, currentClass, this.GetTargetSystem_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.TargetSystem> GetTargetSystemValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.TargetSystem>(this.GetTargetSystemProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command>>> GetTask_CommandsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.Domain.Definition.Command, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.Domain.Definition.Command>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, System.DateTime?>> GetTask_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Task>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, string>> GetTask_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Task>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, string>> GetTask_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Task>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata>>> GetTask_MetadatasValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata>, Framework.Workflow.Domain.Definition.TaskMetadata, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata>, Framework.Workflow.Domain.Definition.TaskMetadata>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, string>> GetTask_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Task>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, System.DateTime?>> GetTask_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Task>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Task, string>> GetTask_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Task>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Task, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TaskInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand>>> GetTaskInstance_CommandsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Runtime.TaskInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand>, Framework.Workflow.Domain.Runtime.ExecutedCommand, System.Tuple<Framework.Workflow.Domain.Definition.Command>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.Command>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.TaskInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand>, Framework.Workflow.Domain.Runtime.ExecutedCommand>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TaskInstance, System.DateTime?>> GetTaskInstance_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.TaskInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TaskInstance, string>> GetTaskInstance_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.TaskInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TaskInstance, string>> GetTaskInstance_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.TaskInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TaskInstance, System.DateTime?>> GetTaskInstance_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.TaskInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance>> GetTaskInstanceProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand>, Framework.Workflow.Domain.Runtime.ExecutedCommand>(source => source.Commands, currentClass, this.GetTaskInstance_CommandsValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.ExecutedCommand>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTaskInstance_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance, string>(source => source.CreatedBy, currentClass, this.GetTaskInstance_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance, string>(source => source.ModifiedBy, currentClass, this.GetTaskInstance_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTaskInstance_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.TaskInstanceRootFilterModel> GetTaskInstanceRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.TaskInstanceRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance> GetTaskInstanceValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.TaskInstance>(this.GetTaskInstanceProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, System.DateTime?>> GetTaskMetadata_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, string>> GetTaskMetadata_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, string>> GetTaskMetadata_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, string>> GetTaskMetadata_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, System.DateTime?>> GetTaskMetadata_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, string>> GetTaskMetadata_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.TaskMetadata, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TaskMetadata, string>> GetTaskMetadata_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TaskMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata>> GetTaskMetadataProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTaskMetadata_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, string>(source => source.CreatedBy, currentClass, this.GetTaskMetadata_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, string>(source => source.Description, currentClass, this.GetTaskMetadata_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, string>(source => source.ModifiedBy, currentClass, this.GetTaskMetadata_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTaskMetadata_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, string>(source => source.Name, currentClass, this.GetTaskMetadata_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata, string>(source => source.Value, currentClass, this.GetTaskMetadata_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata> GetTaskMetadataValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.TaskMetadata>(this.GetTaskMetadataProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.Task>> GetTaskProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Task> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.Domain.Definition.Command>(source => source.Commands, currentClass, this.GetTask_CommandsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Command>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Task, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTask_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Task, string>(source => source.CreatedBy, currentClass, this.GetTask_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Task, string>(source => source.Description, currentClass, this.GetTask_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Task, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata>, Framework.Workflow.Domain.Definition.TaskMetadata>(source => source.Metadatas, currentClass, this.GetTask_MetadatasValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.TaskMetadata>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Task, string>(source => source.ModifiedBy, currentClass, this.GetTask_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Task, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTask_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Task, string>(source => source.Name, currentClass, this.GetTask_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.TaskRootFilterModel> GetTaskRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.TaskRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Task> GetTaskValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.Task>(this.GetTaskProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, System.DateTime?>> GetTransition_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Transition>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, string>> GetTransition_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Transition>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, string>> GetTransition_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Transition>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.StateBase>> GetTransition_FromValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.StateBase>(Framework.Restriction.RequiredMode.Default), 8);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, string>> GetTransition_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Transition>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, System.DateTime?>> GetTransition_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Transition>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, string>> GetTransition_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Transition>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Transition, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TransitionAction>>> GetTransition_PostActionsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Transition, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TransitionAction>, Framework.Workflow.Domain.Definition.TransitionAction>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.StateBase>> GetTransition_ToValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.StateBase>(Framework.Restriction.RequiredMode.Default), 8);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.Event>> GetTransition_TriggerEventValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.Event>(Framework.Restriction.RequiredMode.Default), 8);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TransitionAction, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetTransitionAction_ActionValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.TransitionAction, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.TransitionAction>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TransitionAction, System.DateTime?>> GetTransitionAction_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.TransitionAction>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TransitionAction, string>> GetTransitionAction_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TransitionAction>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TransitionAction, string>> GetTransitionAction_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.TransitionAction>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.TransitionAction, System.DateTime?>> GetTransitionAction_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.TransitionAction>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.TransitionAction>> GetTransitionActionProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.TransitionAction> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TransitionAction, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Action, currentClass, this.GetTransitionAction_ActionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TransitionAction, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTransitionAction_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TransitionAction, string>(source => source.CreatedBy, currentClass, this.GetTransitionAction_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TransitionAction, string>(source => source.ModifiedBy, currentClass, this.GetTransitionAction_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.TransitionAction, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTransitionAction_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.TransitionAction> GetTransitionActionValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.TransitionAction>(this.GetTransitionActionProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TransitionInstance, System.DateTime?>> GetTransitionInstance_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.TransitionInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TransitionInstance, string>> GetTransitionInstance_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.TransitionInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TransitionInstance, string>> GetTransitionInstance_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.TransitionInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.TransitionInstance, System.DateTime?>> GetTransitionInstance_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.TransitionInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance>> GetTransitionInstanceProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTransitionInstance_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance, string>(source => source.CreatedBy, currentClass, this.GetTransitionInstance_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance, string>(source => source.ModifiedBy, currentClass, this.GetTransitionInstance_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTransitionInstance_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance> GetTransitionInstanceValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.TransitionInstance>(this.GetTransitionInstanceProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.Transition>> GetTransitionProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Transition> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTransition_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, string>(source => source.CreatedBy, currentClass, this.GetTransition_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, string>(source => source.Description, currentClass, this.GetTransition_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.StateBase>(source => source.From, currentClass, this.GetTransition_FromValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StateBase>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, string>(source => source.ModifiedBy, currentClass, this.GetTransition_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTransition_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, string>(source => source.Name, currentClass, this.GetTransition_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TransitionAction>, Framework.Workflow.Domain.Definition.TransitionAction>(source => source.PostActions, currentClass, this.GetTransition_PostActionsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.TransitionAction>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.StateBase>(source => source.To, currentClass, this.GetTransition_ToValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StateBase>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.Event>(source => source.TriggerEvent, currentClass, this.GetTransition_TriggerEventValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Event>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.TransitionRootFilterModel> GetTransitionRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.TransitionRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Transition> GetTransitionValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.Transition>(this.GetTransitionProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetWorkflow_ActiveConditionValidators()
        {
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.Workflow>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState>>> GetWorkflow_ConditionStatesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState>, Framework.Workflow.Domain.Definition.ConditionState, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState>, Framework.Workflow.Domain.Definition.ConditionState>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.DateTime?>> GetWorkflow_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Workflow>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, string>> GetWorkflow_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Workflow>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, string>> GetWorkflow_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Workflow>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.DomainType>> GetWorkflow_DomainTypeValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.DomainType>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda>>> GetWorkflow_LambdasValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda>, Framework.Workflow.Domain.Definition.WorkflowLambda, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda>, Framework.Workflow.Domain.Definition.WorkflowLambda>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata>>> GetWorkflow_MetadatasValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata>, Framework.Workflow.Domain.Definition.WorkflowMetadata, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata>, Framework.Workflow.Domain.Definition.WorkflowMetadata>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, string>> GetWorkflow_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Workflow>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.DateTime?>> GetWorkflow_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.Workflow>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, string>> GetWorkflow_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Workflow>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.Workflow, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState>>> GetWorkflow_ParallelStatesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState>, Framework.Workflow.Domain.Definition.ParallelState, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState>, Framework.Workflow.Domain.Definition.ParallelState>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter>>> GetWorkflow_ParametersValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter>, Framework.Workflow.Domain.Definition.WorkflowParameter, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter>, Framework.Workflow.Domain.Definition.WorkflowParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role>>> GetWorkflow_RolesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role>, Framework.Workflow.Domain.Definition.Role, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role>, Framework.Workflow.Domain.Definition.Role, System.Tuple<System.Guid, Framework.Workflow.Domain.Definition.WorkflowLambda>>(source => new System.Tuple<System.Guid, Framework.Workflow.Domain.Definition.WorkflowLambda>(source.SecurityOperationId, source.CustomSecurityProvider), "SecurityOperationId, CustomSecurityProvider");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role>, Framework.Workflow.Domain.Definition.Role>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>>> GetWorkflow_SourcesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.Domain.Definition.WorkflowSource, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.Domain.Definition.WorkflowSource>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>>> GetWorkflow_StartConditionsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.Tuple<Framework.Workflow.Domain.Definition.WorkflowLambda, Framework.Workflow.Domain.Definition.WorkflowLambda>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.WorkflowLambda, Framework.Workflow.Domain.Definition.WorkflowLambda>(source.Condition, source.Factory), "Condition, Factory");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase>>> GetWorkflow_StateBasesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase>, Framework.Workflow.Domain.Definition.StateBase, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State>>> GetWorkflow_StatesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State>, Framework.Workflow.Domain.Definition.State, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State>, Framework.Workflow.Domain.Definition.State>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow>>> GetWorkflow_SubWorkflowsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow>, Framework.Workflow.Domain.Definition.Workflow, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow>, Framework.Workflow.Domain.Definition.Workflow>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition>>> GetWorkflow_TransitionsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition>, Framework.Workflow.Domain.Definition.Transition, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition>, Framework.Workflow.Domain.Definition.Transition, System.Tuple<Framework.Workflow.Domain.Definition.Event>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.Event>(source.TriggerEvent), "TriggerEvent"), 8);
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition>, Framework.Workflow.Domain.Definition.Transition>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.Workflow, string>> GetWorkflow_ValidationErrorValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.Workflow>(2147483647);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.WorkflowCreateModel> GetWorkflowCreateModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.WorkflowCreateModel>.Empty;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.DateTime?>> GetWorkflowInstance_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.WorkflowInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>> GetWorkflowInstance_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.StateInstance>> GetWorkflowInstance_CurrentStateValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.StateInstance>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>> GetWorkflowInstance_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Guid>> GetWorkflowInstance_DomainObjectIdValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Guid>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>> GetWorkflowInstance_DomainObjectParameterValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>> GetWorkflowInstance_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.DateTime?>> GetWorkflowInstance_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.WorkflowInstance>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>> GetWorkflowInstance_NameValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>>> GetWorkflowInstance_ParametersValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>>(source => new System.Tuple<Framework.Workflow.Domain.Definition.WorkflowParameter>(source.Definition), "Definition");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance>>> GetWorkflowInstance_StatesValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance>, Framework.Workflow.Domain.Runtime.StateInstance>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance>>> GetWorkflowInstance_TransitionsValidators()
        {
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance>, Framework.Workflow.Domain.Runtime.TransitionInstance>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>>> GetWorkflowInstance_WatchersValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Login).ToLower()), "Login");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, System.DateTime?>> GetWorkflowInstanceParameter_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, string>> GetWorkflowInstanceParameter_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, Framework.Workflow.Domain.Definition.WorkflowParameter>> GetWorkflowInstanceParameter_DefinitionValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, Framework.Workflow.Domain.Definition.WorkflowParameter>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, string>> GetWorkflowInstanceParameter_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, System.DateTime?>> GetWorkflowInstanceParameter_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, string>> GetWorkflowInstanceParameter_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>> GetWorkflowInstanceParameterProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowInstanceParameter_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, string>(source => source.CreatedBy, currentClass, this.GetWorkflowInstanceParameter_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, Framework.Workflow.Domain.Definition.WorkflowParameter>(source => source.Definition, currentClass, this.GetWorkflowInstanceParameter_DefinitionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowInstanceParameter_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowInstanceParameter_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter, string>(source => source.Value, currentClass, this.GetWorkflowInstanceParameter_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter> GetWorkflowInstanceParameterValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(this.GetWorkflowInstanceParameterProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance>> GetWorkflowInstanceProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowInstance_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>(source => source.CreatedBy, currentClass, this.GetWorkflowInstance_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.StateInstance>(source => source.CurrentState, currentClass, this.GetWorkflowInstance_CurrentStateValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.StateInstance>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>(source => source.Description, currentClass, this.GetWorkflowInstance_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Guid>(source => source.DomainObjectId, currentClass, this.GetWorkflowInstance_DomainObjectIdValidators(), this.GetClassMap<System.Guid>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(source => source.DomainObjectParameter, currentClass, this.GetWorkflowInstance_DomainObjectParameterValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowInstance_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowInstance_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, string>(source => source.Name, currentClass, this.GetWorkflowInstance_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(source => source.Parameters, currentClass, this.GetWorkflowInstance_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance>, Framework.Workflow.Domain.Runtime.StateInstance>(source => source.States, currentClass, this.GetWorkflowInstance_StatesValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.StateInstance>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance>, Framework.Workflow.Domain.Runtime.TransitionInstance>(source => source.Transitions, currentClass, this.GetWorkflowInstance_TransitionsValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.TransitionInstance>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(source => source.Watchers, currentClass, this.GetWorkflowInstance_WatchersValidators(), this.GetClassMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.WorkflowInstanceRootFilterModel> GetWorkflowInstanceRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.WorkflowInstanceRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance> GetWorkflowInstanceValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstance>(this.GetWorkflowInstanceProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, System.DateTime?>> GetWorkflowInstanceWatcher_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>> GetWorkflowInstanceWatcher_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>> GetWorkflowInstanceWatcher_LoginValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>> GetWorkflowInstanceWatcher_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, System.DateTime?>> GetWorkflowInstanceWatcher_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>> GetWorkflowInstanceWatcherProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowInstanceWatcher_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>(source => source.CreatedBy, currentClass, this.GetWorkflowInstanceWatcher_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>(source => source.Login, currentClass, this.GetWorkflowInstanceWatcher_LoginValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowInstanceWatcher_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowInstanceWatcher_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher> GetWorkflowInstanceWatcherValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(this.GetWorkflowInstanceWatcherProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, System.DateTime?>> GetWorkflowLambda_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>> GetWorkflowLambda_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>> GetWorkflowLambda_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>> GetWorkflowLambda_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, System.DateTime?>> GetWorkflowLambda_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>> GetWorkflowLambda_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>> GetWorkflowLambda_ValueValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(Framework.Restriction.RequiredMode.Default);
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowLambda>(2147483647);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda>> GetWorkflowLambdaProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowLambda_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(source => source.CreatedBy, currentClass, this.GetWorkflowLambda_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(source => source.Description, currentClass, this.GetWorkflowLambda_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowLambda_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowLambda_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(source => source.Name, currentClass, this.GetWorkflowLambda_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda, string>(source => source.Value, currentClass, this.GetWorkflowLambda_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.WorkflowLambdaRootFilterModel> GetWorkflowLambdaRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.WorkflowLambdaRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda> GetWorkflowLambdaValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(this.GetWorkflowLambdaProperties, this.GetWorkflowLambdaValidators());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IClassValidator<Framework.Workflow.Domain.Definition.WorkflowLambda>> GetWorkflowLambdaValidators()
        {
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.Command>(source => source.ExecuteAction);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(source => source.Condition);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(source => source.Factory);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.Role>(source => source.CustomSecurityProvider);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.ConditionState>(source => source.Condition);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(source => source.Condition);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.ParallelStateStartItem>(source => source.Factory);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(source => source.Condition);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(source => source.Condition);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.TransitionAction>(source => source.Action);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.Workflow>(source => source.ActiveCondition);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.WorkflowSource>(source => source.Elements);
            yield return this.GetReferencedWorkflowLambdaValidator<Framework.Workflow.Domain.Definition.WorkflowSource>(source => source.Path);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, System.DateTime?>> GetWorkflowMetadata_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>> GetWorkflowMetadata_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>> GetWorkflowMetadata_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>> GetWorkflowMetadata_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, System.DateTime?>> GetWorkflowMetadata_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>> GetWorkflowMetadata_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>> GetWorkflowMetadata_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata>> GetWorkflowMetadataProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowMetadata_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>(source => source.CreatedBy, currentClass, this.GetWorkflowMetadata_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>(source => source.Description, currentClass, this.GetWorkflowMetadata_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowMetadata_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowMetadata_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>(source => source.Name, currentClass, this.GetWorkflowMetadata_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata, string>(source => source.Value, currentClass, this.GetWorkflowMetadata_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata> GetWorkflowMetadataValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowMetadata>(this.GetWorkflowMetadataProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, System.DateTime?>> GetWorkflowParameter_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, string>> GetWorkflowParameter_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, string>> GetWorkflowParameter_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, string>> GetWorkflowParameter_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, System.DateTime?>> GetWorkflowParameter_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, string>> GetWorkflowParameter_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, Framework.Workflow.Domain.Definition.DomainType>> GetWorkflowParameter_TypeValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowParameter, Framework.Workflow.Domain.Definition.DomainType>(Framework.Restriction.RequiredMode.Default);
            yield return Framework.Workflow.Domain.Definition.WorkflowTargetSystemPropertyValidator.Value;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter>> GetWorkflowParameterProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowParameter_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, string>(source => source.CreatedBy, currentClass, this.GetWorkflowParameter_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, string>(source => source.Description, currentClass, this.GetWorkflowParameter_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowParameter_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowParameter_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, string>(source => source.Name, currentClass, this.GetWorkflowParameter_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter, Framework.Workflow.Domain.Definition.DomainType>(source => source.Type, currentClass, this.GetWorkflowParameter_TypeValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.DomainType>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter> GetWorkflowParameterValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowParameter>(this.GetWorkflowParameterProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow>> GetWorkflowProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Workflow> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.ActiveCondition, currentClass, this.GetWorkflow_ActiveConditionValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState>, Framework.Workflow.Domain.Definition.ConditionState>(source => source.ConditionStates, currentClass, this.GetWorkflow_ConditionStatesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.ConditionState>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflow_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, string>(source => source.CreatedBy, currentClass, this.GetWorkflow_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, string>(source => source.Description, currentClass, this.GetWorkflow_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.DomainType>(source => source.DomainType, currentClass, this.GetWorkflow_DomainTypeValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.DomainType>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda>, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Lambdas, currentClass, this.GetWorkflow_LambdasValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata>, Framework.Workflow.Domain.Definition.WorkflowMetadata>(source => source.Metadatas, currentClass, this.GetWorkflow_MetadatasValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowMetadata>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, string>(source => source.ModifiedBy, currentClass, this.GetWorkflow_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflow_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, string>(source => source.Name, currentClass, this.GetWorkflow_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState>, Framework.Workflow.Domain.Definition.ParallelState>(source => source.ParallelStates, currentClass, this.GetWorkflow_ParallelStatesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.ParallelState>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter>, Framework.Workflow.Domain.Definition.WorkflowParameter>(source => source.Parameters, currentClass, this.GetWorkflow_ParametersValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowParameter>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role>, Framework.Workflow.Domain.Definition.Role>(source => source.Roles, currentClass, this.GetWorkflow_RolesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Role>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.Domain.Definition.WorkflowSource>(source => source.Sources, currentClass, this.GetWorkflow_SourcesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowSource>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(source => source.StartConditions, currentClass, this.GetWorkflow_StartConditionsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase>, Framework.Workflow.Domain.Definition.StateBase>(source => source.StateBases, currentClass, this.GetWorkflow_StateBasesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.StateBase>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State>, Framework.Workflow.Domain.Definition.State>(source => source.States, currentClass, this.GetWorkflow_StatesValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.State>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow>, Framework.Workflow.Domain.Definition.Workflow>(source => source.SubWorkflows, currentClass, this.GetWorkflow_SubWorkflowsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Workflow>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition>, Framework.Workflow.Domain.Definition.Transition>(source => source.Transitions, currentClass, this.GetWorkflow_TransitionsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.Transition>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.Workflow, string>(source => source.ValidationError, currentClass, this.GetWorkflow_ValidationErrorValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.WorkflowRootFilterModel> GetWorkflowRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.WorkflowRootFilterModel>.Empty;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, System.DateTime?>> GetWorkflowSource_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowSource>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, string>> GetWorkflowSource_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowSource>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, string>> GetWorkflowSource_DescriptionValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowSource>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetWorkflowSource_ElementsValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.WorkflowLambda>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.WorkflowSource>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, string>> GetWorkflowSource_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowSource>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, System.DateTime?>> GetWorkflowSource_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Workflow.Domain.Definition.WorkflowSource>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, string>> GetWorkflowSource_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Workflow.Domain.Definition.WorkflowSource>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowSource, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.WorkflowLambda>> GetWorkflowSource_PathValidators()
        {
            yield return Framework.Workflow.Domain.Definition.WorkflowElementPropertyValidator.Value;
            yield return this.GetAppliedLambdaValidator<Framework.Workflow.Domain.Definition.WorkflowSource>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.DomainType>> GetWorkflowSource_TypeValidators()
        {
            yield return Framework.Validation.PropertyValidatorExtensions.ApplyCustomOperationContext(new Framework.Validation.RequiredValidator<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.DomainType>(Framework.Restriction.RequiredMode.Default), 8);
            yield return Framework.Workflow.Domain.Definition.WorkflowTargetSystemPropertyValidator.Value;
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource>> GetWorkflowSourceProperties(Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, System.DateTime?>(source => source.CreateDate, currentClass, this.GetWorkflowSource_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, string>(source => source.CreatedBy, currentClass, this.GetWorkflowSource_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, string>(source => source.Description, currentClass, this.GetWorkflowSource_DescriptionValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Elements, currentClass, this.GetWorkflowSource_ElementsValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, string>(source => source.ModifiedBy, currentClass, this.GetWorkflowSource_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetWorkflowSource_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, string>(source => source.Name, currentClass, this.GetWorkflowSource_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.WorkflowLambda>(source => source.Path, currentClass, this.GetWorkflowSource_PathValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.WorkflowLambda>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.Workflow.Domain.Definition.DomainType>(source => source.Type, currentClass, this.GetWorkflowSource_TypeValidators(), this.GetClassMap<Framework.Workflow.Domain.Definition.DomainType>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.WorkflowSourceRootFilterModel> GetWorkflowSourceRootFilterModelValidationMap()
        {
            return Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.WorkflowSourceRootFilterModel>.Empty;
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource> GetWorkflowSourceValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.WorkflowSource>(this.GetWorkflowSourceProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Workflow.Domain.Definition.Workflow> GetWorkflowValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Workflow.Domain.Definition.Workflow>(this.GetWorkflowProperties);
        }
    }
    
    public partial class WorkflowValidationMap : Framework.Workflow.BLL.WorkflowValidationMapBase
    {
        
        public WorkflowValidationMap(Framework.Core.IDynamicSource extendedValidationData) : 
                base(extendedValidationData)
        {
        }
    }
}
