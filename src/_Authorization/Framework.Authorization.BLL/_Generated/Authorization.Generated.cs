//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Authorization.BLL
{
    
    
    public partial class BusinessRoleBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.BusinessRole>, Framework.Authorization.BLL.IBusinessRoleBLL
    {
        
        public BusinessRoleBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.BusinessRole> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial class BusinessRoleBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IBusinessRoleBLL, Framework.Authorization.BLL.BusinessRoleBLL, Framework.Authorization.Domain.BusinessRole>, Framework.Authorization.BLL.IBusinessRoleBLLFactory
    {
        
        public BusinessRoleBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PermissionBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.Permission>, Framework.Authorization.BLL.IPermissionBLL
    {
        
        public PermissionBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Permission> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial class PermissionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPermissionBLL, Framework.Authorization.BLL.PermissionBLL, Framework.Authorization.Domain.Permission>, Framework.Authorization.BLL.IPermissionBLLFactory
    {
        
        public PermissionBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PermissionRestrictionBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.PermissionRestriction>, Framework.Authorization.BLL.IPermissionRestrictionBLL
    {
        
        public PermissionRestrictionBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.PermissionRestriction> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial class PermissionRestrictionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPermissionRestrictionBLL, Framework.Authorization.BLL.PermissionRestrictionBLL, Framework.Authorization.Domain.PermissionRestriction>, Framework.Authorization.BLL.IPermissionRestrictionBLLFactory
    {
        
        public PermissionRestrictionBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class PrincipalBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.Principal>, Framework.Authorization.BLL.IPrincipalBLL
    {
        
        public PrincipalBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.Principal> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial class PrincipalBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.IPrincipalBLL, Framework.Authorization.BLL.PrincipalBLL, Framework.Authorization.Domain.Principal>, Framework.Authorization.BLL.IPrincipalBLLFactory
    {
        
        public PrincipalBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class SecurityContextTypeBLL : Framework.Authorization.BLL.SecurityDomainBLLBase<Framework.Authorization.Domain.SecurityContextType>, Framework.Authorization.BLL.ISecurityContextTypeBLL
    {
        
        public SecurityContextTypeBLL(Framework.Authorization.BLL.IAuthorizationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Authorization.Domain.SecurityContextType> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial class SecurityContextTypeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.BLL.ISecurityContextTypeBLL, Framework.Authorization.BLL.SecurityContextTypeBLL, Framework.Authorization.Domain.SecurityContextType>, Framework.Authorization.BLL.ISecurityContextTypeBLLFactory
    {
        
        public SecurityContextTypeBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class AuthorizationBLLFactoryContainer : Framework.DomainDriven.BLL.BLLContextContainer<Framework.Authorization.BLL.IAuthorizationBLLContext>, Framework.Authorization.BLL.IAuthorizationBLLFactoryContainer
    {
        
        private Framework.Authorization.BLL.IBusinessRoleBLL businessRoleBLL;
        
        private Framework.Authorization.BLL.AuthorizationDefaultBLLFactory defaultBLLFactory;
        
        private Framework.Authorization.BLL.AuthorizationImplementedBLLFactory implementedBLLFactory;
        
        private Framework.Authorization.BLL.IPermissionBLL permissionBLL;
        
        private Framework.Authorization.BLL.IPermissionRestrictionBLL permissionRestrictionBLL;
        
        private Framework.Authorization.BLL.IPrincipalBLL principalBLL;
        
        private Framework.Authorization.BLL.ISecurityContextTypeBLL securityContextTypeBLL;
        
        public AuthorizationBLLFactoryContainer(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        public Framework.Authorization.BLL.IBusinessRoleBLL BusinessRole
        {
            get
            {
                if (object.ReferenceEquals(this.businessRoleBLL, null))
                {
                    this.businessRoleBLL = this.BusinessRoleFactory.Create();
                }
                return this.businessRoleBLL;
            }
        }
        
        public Framework.Authorization.BLL.IBusinessRoleBLLFactory BusinessRoleFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IBusinessRoleBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid> Default
        {
            get
            {
                if (object.ReferenceEquals(this.defaultBLLFactory, null))
                {
                    this.defaultBLLFactory = new Framework.Authorization.BLL.AuthorizationDefaultBLLFactory(this.Context);
                }
                return this.defaultBLLFactory;
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid> Implemented
        {
            get
            {
                if (object.ReferenceEquals(this.implementedBLLFactory, null))
                {
                    this.implementedBLLFactory = new Framework.Authorization.BLL.AuthorizationImplementedBLLFactory(this.Context);
                }
                return this.implementedBLLFactory;
            }
        }
        
        public Framework.Authorization.BLL.IPermissionBLL Permission
        {
            get
            {
                if (object.ReferenceEquals(this.permissionBLL, null))
                {
                    this.permissionBLL = this.PermissionFactory.Create();
                }
                return this.permissionBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPermissionBLLFactory PermissionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPermissionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.IPermissionRestrictionBLL PermissionRestriction
        {
            get
            {
                if (object.ReferenceEquals(this.permissionRestrictionBLL, null))
                {
                    this.permissionRestrictionBLL = this.PermissionRestrictionFactory.Create();
                }
                return this.permissionRestrictionBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPermissionRestrictionBLLFactory PermissionRestrictionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPermissionRestrictionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.IPrincipalBLL Principal
        {
            get
            {
                if (object.ReferenceEquals(this.principalBLL, null))
                {
                    this.principalBLL = this.PrincipalFactory.Create();
                }
                return this.principalBLL;
            }
        }
        
        public Framework.Authorization.BLL.IPrincipalBLLFactory PrincipalFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.IPrincipalBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Authorization.BLL.ISecurityContextTypeBLL SecurityContextType
        {
            get
            {
                if (object.ReferenceEquals(this.securityContextTypeBLL, null))
                {
                    this.securityContextTypeBLL = this.SecurityContextTypeFactory.Create();
                }
                return this.securityContextTypeBLL;
            }
        }
        
        public Framework.Authorization.BLL.ISecurityContextTypeBLLFactory SecurityContextTypeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Authorization.BLL.ISecurityContextTypeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public static void RegisterBLLFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
        {
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IBusinessRoleBLLFactory, Framework.Authorization.BLL.BusinessRoleBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.BusinessRole, System.Guid>, Framework.Authorization.Domain.BusinessRole>, Framework.Authorization.BLL.IBusinessRoleBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPermissionBLLFactory, Framework.Authorization.BLL.PermissionBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.Permission, System.Guid>, Framework.Authorization.Domain.Permission>, Framework.Authorization.BLL.IPermissionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPermissionRestrictionBLLFactory, Framework.Authorization.BLL.PermissionRestrictionBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.PermissionRestriction, System.Guid>, Framework.Authorization.Domain.PermissionRestriction>, Framework.Authorization.BLL.IPermissionRestrictionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.IPrincipalBLLFactory, Framework.Authorization.BLL.PrincipalBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.Principal, System.Guid>, Framework.Authorization.Domain.Principal>, Framework.Authorization.BLL.IPrincipalBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Authorization.BLL.ISecurityContextTypeBLLFactory, Framework.Authorization.BLL.SecurityContextTypeBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.SecurityContextType, System.Guid>, Framework.Authorization.Domain.SecurityContextType>, Framework.Authorization.BLL.ISecurityContextTypeBLLFactory>(serviceCollection);
        }
    }
    
    public partial class AuthorizationDefaultBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        public AuthorizationDefaultBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            return new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context, securityProvider);
        }
    }
    
    public partial class AuthorizationImplementedBLLFactory : Framework.DomainDriven.BLL.Security.ImplementedSecurityBLLFactory<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        public AuthorizationImplementedBLLFactory(Framework.Authorization.BLL.IAuthorizationBLLContext context) : 
                base(context)
        {
        }
        
        protected override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> CreateDefault<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            return new Framework.Authorization.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context, securityProvider);
        }
    }
}
