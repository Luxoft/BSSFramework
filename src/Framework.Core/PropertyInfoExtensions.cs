using System.Linq.Expressions;
using System.Reflection;

using CommonFramework;

namespace Framework.Core;

public static class PropertyInfoExtensions
{
    public static Expression<Func<TSource, TProperty>> ToLambdaExpression<TSource, TProperty>(this PropertyInfo property)
    {
        if (property == null) throw new ArgumentNullException(nameof(property));

        throw new NotImplementedException("Use CommonFramework");
    }


    public static bool HasPrivateField(this PropertyInfo propertyInfo, string preFieldName = null)
    {
        if (propertyInfo == null) throw new ArgumentNullException(nameof(propertyInfo));

        return propertyInfo.HasPrivateFieldInternal(preFieldName);
    }

    public static bool HasPrivateField(this PropertyInfo propertyInfo, bool withAutoGenerated)
    {
        if (propertyInfo == null) throw new ArgumentNullException(nameof(propertyInfo));

        return propertyInfo.HasPrivateFieldInternal()
               || (withAutoGenerated && propertyInfo.HasPrivateField($"<{propertyInfo.Name}>k__BackingField"));
    }

    private static bool HasPrivateFieldInternal(this PropertyInfo propertyInfo, string preFieldName = null)
    {
        if (propertyInfo == null) throw new ArgumentNullException(nameof(propertyInfo));

        return propertyInfo.HasPrivateField(propertyInfo.DeclaringType, preFieldName);
    }

    public static bool HasPrivateField(this PropertyInfo propertyInfo, Type declaringType, string preFieldName = null)
    {
        if (propertyInfo == null) throw new ArgumentNullException(nameof(propertyInfo));

        return propertyInfo.HasPrivateFieldInternal(declaringType, preFieldName)

            // || (preFieldName == null && propertyInfo.HasPrivateFieldInternal("_" + propertyInfo.Name.ToStartLowerCase()))
            ;
    }

    private static bool HasPrivateFieldInternal(this PropertyInfo propertyInfo, Type declaringType, string preFieldName = null)
    {
        if (propertyInfo == null) throw new ArgumentNullException(nameof(propertyInfo));

        return propertyInfo.GetPrivateFieldInternal(declaringType, preFieldName) != null;
    }

    private static FieldInfo GetPrivateFieldInternal(this PropertyInfo propertyInfo, Type declaringType, string preFieldName = null)
    {
        if (propertyInfo == null) throw new ArgumentNullException(nameof(propertyInfo));

        var fieldName = preFieldName ?? propertyInfo.Name.ToStartLowerCase();

        var request = from type in declaringType.GetAllElements(t => t.BaseType)

                      let field = type.GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance)

                      where field != null && field.DeclaringType == type && propertyInfo.PropertyType.IsAssignableFrom(field.FieldType)

                      select field;

        return request.SingleOrDefault();
    }
}
