// ------------------------------------------------------------------------------
/// <auto-generated>
/// This code was generated by a tool.
///
/// Changes to this file may cause incorrect behavior and will be lost if
/// the code is regenerated.
/// </auto-generated>
// ------------------------------------------------------------------------------

// tslint:disable
/* eslint-disable */

import { Guid, Convert } from 'luxite/system';
import * as Framework from 'luxite/framework/framework';
import { observable, observableArray, unwrap } from 'knockout';
import { Core } from 'luxite/framework/framework';
import * as FrameworkCore from '../../FrameworkCore';

export interface ISampleSystemClientDTOMappingService {
    mapUpdateFromStrictForEmployee(target: EmployeeUpdateDTO, currentSource: EmployeeStrictDTO, baseSource: EmployeeStrictDTO);

    mapUpdateFromStrictForEmployeeAndEmployeeSpecializationLink(target: EmployeeAndEmployeeSpecializationLinkUpdateDTO, currentSource: EmployeeAndEmployeeSpecializationLinkStrictDTO, baseSource: EmployeeAndEmployeeSpecializationLinkStrictDTO);

    mapUpdateFromStrictForEmployeeCellPhone(target: EmployeeCellPhoneUpdateDTO, currentSource: EmployeeCellPhoneStrictDTO, baseSource: EmployeeCellPhoneStrictDTO);

    mapUpdateFromStrictForEmployeePersonalCellPhone(target: EmployeePersonalCellPhoneUpdateDTO, currentSource: EmployeePersonalCellPhoneStrictDTO, baseSource: EmployeePersonalCellPhoneStrictDTO);

    mapUpdateFromStrictForEmployeeToEmployeeLink(target: EmployeeToEmployeeLinkUpdateDTO, currentSource: EmployeeToEmployeeLinkStrictDTO, baseSource: EmployeeToEmployeeLinkStrictDTO);

    mapUpdateFromStrictForExample1(target: Example1UpdateDTO, currentSource: Example1StrictDTO, baseSource: Example1StrictDTO);

    mapUpdateFromStrictForExample2(target: Example2UpdateDTO, currentSource: Example2StrictDTO, baseSource: Example2StrictDTO);

}

export class SampleSystemClientPrimitiveDTOMappingService extends FrameworkCore.ClientDTOMappingServiceBase implements ISampleSystemClientDTOMappingService {
    private static _default = new SampleSystemClientPrimitiveDTOMappingService();

    public static get Default() : SampleSystemClientPrimitiveDTOMappingService {
        return SampleSystemClientPrimitiveDTOMappingService._default;
    }

    public static  set Default(value: SampleSystemClientPrimitiveDTOMappingService) {
        SampleSystemClientPrimitiveDTOMappingService._default = value;
    }

    private mapUpdateFromPairStrictsForEmployee(target: EmployeeUpdateDTO, currentSource: EmployeeStrictDTO, baseSource: EmployeeStrictDTO) {
        if (((baseSource.Age === currentSource.Age) 
                            === false)) {
            target.Age = FrameworkCore.MaybeFactory.Return(currentSource.Age);
        }
        if (((baseSource.BirthDate === currentSource.BirthDate) 
                            === false)) {
            target.BirthDate = FrameworkCore.MaybeFactory.Return(currentSource.BirthDate);
        }
        if (((baseSource.CanBePPM === currentSource.CanBePPM) 
                            === false)) {
            target.CanBePPM = FrameworkCore.MaybeFactory.Return(currentSource.CanBePPM);
        }
        target.CellPhones = this.ExtractUpdateDataL<EmployeeCellPhoneStrictDTO, EmployeeCellPhoneIdentityDTO, EmployeeCellPhoneUpdateDTO>(currentSource.CellPhones, baseSource.CellPhones, (currentSourceItem, baseSourceItem) => {
            return EmployeeCellPhoneUpdateDTO.fromStrict(currentSourceItem, baseSourceItem, this);
        }, (currentSourceItem) => {
            return EmployeeCellPhoneUpdateDTO.fromStrict(currentSourceItem, undefined, this);
        });
        if (((baseSource.EducationDuration === currentSource.EducationDuration) 
                            === false)) {
            target.EducationDuration = FrameworkCore.MaybeFactory.Return(currentSource.EducationDuration);
        }
        if (((baseSource.Email === currentSource.Email) 
                            === false)) {
            target.Email = FrameworkCore.MaybeFactory.Return(currentSource.Email);
        }
        target.EmployeeToEmployeeLinks = this.ExtractUpdateDataL<EmployeeToEmployeeLinkStrictDTO, EmployeeToEmployeeLinkIdentityDTO, EmployeeToEmployeeLinkUpdateDTO>(currentSource.EmployeeToEmployeeLinks, baseSource.EmployeeToEmployeeLinks, (currentSourceItem, baseSourceItem) => {
            return EmployeeToEmployeeLinkUpdateDTO.fromStrict(currentSourceItem, baseSourceItem, this);
        }, (currentSourceItem) => {
            return EmployeeToEmployeeLinkUpdateDTO.fromStrict(currentSourceItem, undefined, this);
        });
        if (((baseSource.ExternalId === currentSource.ExternalId) 
                            === false)) {
            target.ExternalId = FrameworkCore.MaybeFactory.Return(currentSource.ExternalId);
        }
        if (((baseSource.Gender === currentSource.Gender) 
                            === false)) {
            target.Gender = FrameworkCore.MaybeFactory.Return(currentSource.Gender);
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        if (((baseSource.Interphone === currentSource.Interphone) 
                            === false)) {
            target.Interphone = FrameworkCore.MaybeFactory.Return(currentSource.Interphone);
        }
        if (((baseSource.Landlinephone === currentSource.Landlinephone) 
                            === false)) {
            target.Landlinephone = FrameworkCore.MaybeFactory.Return(currentSource.Landlinephone);
        }
        if (((baseSource.LastActionDate === currentSource.LastActionDate) 
                            === false)) {
            target.LastActionDate = FrameworkCore.MaybeFactory.Return(currentSource.LastActionDate);
        }
        if (((baseSource.Login === currentSource.Login) 
                            === false)) {
            target.Login = currentSource.Login;
        }
        if (((baseSource.NameEng === currentSource.NameEng) 
                            === false)) {
            target.NameEng = FrameworkCore.MaybeFactory.Return(currentSource.NameEng);
        }
        if (((baseSource.NameNative === currentSource.NameNative) 
                            === false)) {
            target.NameNative = FrameworkCore.MaybeFactory.Return(currentSource.NameNative);
        }
        if (((baseSource.NameRussian === currentSource.NameRussian) 
                            === false)) {
            target.NameRussian = FrameworkCore.MaybeFactory.Return(currentSource.NameRussian);
        }
        if (((baseSource.NonValidateVirtualProp === currentSource.NonValidateVirtualProp) 
                            === false)) {
            target.NonValidateVirtualProp = FrameworkCore.MaybeFactory.Return(currentSource.NonValidateVirtualProp);
        }
        target.PersonalCellPhones = this.ExtractSecurityUpdateDataL<EmployeePersonalCellPhoneStrictDTO, EmployeePersonalCellPhoneIdentityDTO, EmployeePersonalCellPhoneUpdateDTO>(currentSource.PersonalCellPhones, baseSource.PersonalCellPhones, (currentSourceItem, baseSourceItem) => {
            return EmployeePersonalCellPhoneUpdateDTO.fromStrict(currentSourceItem, baseSourceItem, this);
        }, (currentSourceItem) => {
            return EmployeePersonalCellPhoneUpdateDTO.fromStrict(currentSourceItem, undefined, this);
        });
        if (((baseSource.Pin === currentSource.Pin) 
                            === false)) {
            target.Pin = FrameworkCore.MaybeFactory.Return(currentSource.Pin);
        }
        if (((baseSource.PlannedHireDate === currentSource.PlannedHireDate) 
                            === false)) {
            target.PlannedHireDate = FrameworkCore.MaybeFactory.Return(currentSource.PlannedHireDate);
        }
        if (((baseSource.Position === currentSource.Position) 
                            === false)) {
            target.Position = currentSource.Position;
        }
        if (((baseSource.Ppm === currentSource.Ppm) 
                            === false)) {
            target.Ppm = FrameworkCore.MaybeFactory.Return(currentSource.Ppm);
        }
        if (((baseSource.RegistrationType === currentSource.RegistrationType) 
                            === false)) {
            target.RegistrationType = FrameworkCore.MaybeFactory.Return(currentSource.RegistrationType);
        }
        if (((baseSource.Role === currentSource.Role) 
                            === false)) {
            target.Role = FrameworkCore.MaybeFactory.Return(currentSource.Role);
        }
        if (((baseSource.RoleDegree === currentSource.RoleDegree) 
                            === false)) {
            target.RoleDegree = FrameworkCore.MaybeFactory.Return(currentSource.RoleDegree);
        }
        target.Specializations = this.ExtractUpdateDataL<EmployeeAndEmployeeSpecializationLinkStrictDTO, EmployeeAndEmployeeSpecializationLinkIdentityDTO, EmployeeAndEmployeeSpecializationLinkUpdateDTO>(currentSource.Specializations, baseSource.Specializations, (currentSourceItem, baseSourceItem) => {
            return EmployeeAndEmployeeSpecializationLinkUpdateDTO.fromStrict(currentSourceItem, baseSourceItem, this);
        }, (currentSourceItem) => {
            return EmployeeAndEmployeeSpecializationLinkUpdateDTO.fromStrict(currentSourceItem, undefined, this);
        });
        if (((baseSource.VacationApprover === currentSource.VacationApprover) 
                            === false)) {
            target.VacationApprover = FrameworkCore.MaybeFactory.Return(currentSource.VacationApprover);
        }
        if (((baseSource.ValidateVirtualProp === currentSource.ValidateVirtualProp) 
                            === false)) {
            target.ValidateVirtualProp = FrameworkCore.MaybeFactory.Return(currentSource.ValidateVirtualProp);
        }
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        if (((baseSource.WorkPeriod === currentSource.WorkPeriod) 
                            === false)) {
            target.WorkPeriod = FrameworkCore.MaybeFactory.Return(currentSource.WorkPeriod);
        }
        target.compress();
    }

    private mapUpdateFromPairStrictsForEmployeeAndEmployeeSpecializationLink(target: EmployeeAndEmployeeSpecializationLinkUpdateDTO, currentSource: EmployeeAndEmployeeSpecializationLinkStrictDTO, baseSource: EmployeeAndEmployeeSpecializationLinkStrictDTO) {
        if (((baseSource.Employee === currentSource.Employee) 
                            === false)) {
            target.Employee = FrameworkCore.MaybeFactory.Return(currentSource.Employee);
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        if (((baseSource.Specialization === currentSource.Specialization) 
                            === false)) {
            target.Specialization = FrameworkCore.MaybeFactory.Return(currentSource.Specialization);
        }
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        target.compress();
    }

    private mapUpdateFromPairStrictsForEmployeeCellPhone(target: EmployeeCellPhoneUpdateDTO, currentSource: EmployeeCellPhoneStrictDTO, baseSource: EmployeeCellPhoneStrictDTO) {
        if (((baseSource.CityCode === currentSource.CityCode) 
                            === false)) {
            target.CityCode = FrameworkCore.MaybeFactory.Return(currentSource.CityCode);
        }
        if (((baseSource.CountryCode === currentSource.CountryCode) 
                            === false)) {
            target.CountryCode = FrameworkCore.MaybeFactory.Return(currentSource.CountryCode);
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        if (((baseSource.Number === currentSource.Number) 
                            === false)) {
            target.Number = FrameworkCore.MaybeFactory.Return(currentSource.Number);
        }
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        target.compress();
    }

    private mapUpdateFromPairStrictsForEmployeePersonalCellPhone(target: EmployeePersonalCellPhoneUpdateDTO, currentSource: EmployeePersonalCellPhoneStrictDTO, baseSource: EmployeePersonalCellPhoneStrictDTO) {
        if (((baseSource.CityCode === currentSource.CityCode) 
                            === false)) {
            target.CityCode = FrameworkCore.MaybeFactory.Return(currentSource.CityCode);
        }
        if (((baseSource.CountryCode === currentSource.CountryCode) 
                            === false)) {
            target.CountryCode = FrameworkCore.MaybeFactory.Return(currentSource.CountryCode);
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        if (((baseSource.Number === currentSource.Number) 
                            === false)) {
            target.Number = FrameworkCore.MaybeFactory.Return(currentSource.Number);
        }
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        target.compress();
    }

    private mapUpdateFromPairStrictsForEmployeeToEmployeeLink(target: EmployeeToEmployeeLinkUpdateDTO, currentSource: EmployeeToEmployeeLinkStrictDTO, baseSource: EmployeeToEmployeeLinkStrictDTO) {
        if (((baseSource.EmployeeLinkType === currentSource.EmployeeLinkType) 
                            === false)) {
            target.EmployeeLinkType = FrameworkCore.MaybeFactory.Return(currentSource.EmployeeLinkType);
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        if (((baseSource.LinkedEmployee === currentSource.LinkedEmployee) 
                            === false)) {
            target.LinkedEmployee = FrameworkCore.MaybeFactory.Return(currentSource.LinkedEmployee);
        }
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        target.compress();
    }

    private mapUpdateFromPairStrictsForExample1(target: Example1UpdateDTO, currentSource: Example1StrictDTO, baseSource: Example1StrictDTO) {
        if (((baseSource.Field1 === currentSource.Field1) 
                            === false)) {
            target.Field1 = FrameworkCore.MaybeFactory.Return(currentSource.Field1);
        }
        if (((baseSource.Field2 === currentSource.Field2) 
                            === false)) {
            target.Field2 = FrameworkCore.MaybeFactory.Return(currentSource.Field2);
        }
        if (((baseSource.Field3 === currentSource.Field3) 
                            === false)) {
            target.Field3 = currentSource.Field3;
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        target.Items2 = this.ExtractUpdateDataL<Example2StrictDTO, Example2IdentityDTO, Example2UpdateDTO>(currentSource.Items2, baseSource.Items2, (currentSourceItem, baseSourceItem) => {
            return Example2UpdateDTO.fromStrict(currentSourceItem, baseSourceItem, this);
        }, (currentSourceItem) => {
            return Example2UpdateDTO.fromStrict(currentSourceItem, undefined, this);
        });
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        target.compress();
    }

    private mapUpdateFromPairStrictsForExample2(target: Example2UpdateDTO, currentSource: Example2StrictDTO, baseSource: Example2StrictDTO) {
        if (((baseSource.Field1 === currentSource.Field1) 
                            === false)) {
            target.Field1 = FrameworkCore.MaybeFactory.Return(currentSource.Field1);
        }
        if (((baseSource.Field2 === currentSource.Field2) 
                            === false)) {
            target.Field2 = FrameworkCore.MaybeFactory.Return(currentSource.Field2);
        }
        target.Id = this.GetEqualsValue(currentSource.Id, baseSource.Id, 'Id');
        target.Version = this.GetEqualsValue(currentSource.Version, baseSource.Version, 'Version');
        target.compress();
    }

    private mapUpdateFromSingleStrictForEmployee(target: EmployeeUpdateDTO, currentSource: EmployeeStrictDTO) {
        target.Age = FrameworkCore.MaybeFactory.Return(currentSource.Age);
        target.BirthDate = FrameworkCore.MaybeFactory.Return(currentSource.BirthDate);
        target.CanBePPM = FrameworkCore.MaybeFactory.Return(currentSource.CanBePPM);
        target.CellPhones = this.ExtractUpdateDataFromSingle<EmployeeCellPhoneStrictDTO, EmployeeCellPhoneIdentityDTO, EmployeeCellPhoneUpdateDTO>(currentSource.CellPhones, (employeeCellPhone) => {
            return EmployeeCellPhoneUpdateDTO.fromStrict(employeeCellPhone, undefined, this);
        });
        target.EducationDuration = FrameworkCore.MaybeFactory.Return(currentSource.EducationDuration);
        target.Email = FrameworkCore.MaybeFactory.Return(currentSource.Email);
        target.EmployeeToEmployeeLinks = this.ExtractUpdateDataFromSingle<EmployeeToEmployeeLinkStrictDTO, EmployeeToEmployeeLinkIdentityDTO, EmployeeToEmployeeLinkUpdateDTO>(currentSource.EmployeeToEmployeeLinks, (employeeToEmployeeLink) => {
            return EmployeeToEmployeeLinkUpdateDTO.fromStrict(employeeToEmployeeLink, undefined, this);
        });
        target.ExternalId = FrameworkCore.MaybeFactory.Return(currentSource.ExternalId);
        target.Gender = FrameworkCore.MaybeFactory.Return(currentSource.Gender);
        target.Id = currentSource.Id;
        target.Interphone = FrameworkCore.MaybeFactory.Return(currentSource.Interphone);
        target.Landlinephone = FrameworkCore.MaybeFactory.Return(currentSource.Landlinephone);
        target.LastActionDate = FrameworkCore.MaybeFactory.Return(currentSource.LastActionDate);
        target.Login = currentSource.Login;
        target.NameEng = FrameworkCore.MaybeFactory.Return(currentSource.NameEng);
        target.NameNative = FrameworkCore.MaybeFactory.Return(currentSource.NameNative);
        target.NameRussian = FrameworkCore.MaybeFactory.Return(currentSource.NameRussian);
        target.NonValidateVirtualProp = FrameworkCore.MaybeFactory.Return(currentSource.NonValidateVirtualProp);
        target.PersonalCellPhones = this.ExtractSecurityUpdateDataFromSingle<EmployeePersonalCellPhoneStrictDTO, EmployeePersonalCellPhoneIdentityDTO, EmployeePersonalCellPhoneUpdateDTO>(currentSource.PersonalCellPhones, (employeePersonalCellPhone) => {
            return EmployeePersonalCellPhoneUpdateDTO.fromStrict(employeePersonalCellPhone, undefined, this);
        });
        target.Pin = FrameworkCore.MaybeFactory.Return(currentSource.Pin);
        target.PlannedHireDate = FrameworkCore.MaybeFactory.Return(currentSource.PlannedHireDate);
        target.Position = currentSource.Position;
        target.Ppm = FrameworkCore.MaybeFactory.Return(currentSource.Ppm);
        target.RegistrationType = FrameworkCore.MaybeFactory.Return(currentSource.RegistrationType);
        target.Role = FrameworkCore.MaybeFactory.Return(currentSource.Role);
        target.RoleDegree = FrameworkCore.MaybeFactory.Return(currentSource.RoleDegree);
        target.Specializations = this.ExtractUpdateDataFromSingle<EmployeeAndEmployeeSpecializationLinkStrictDTO, EmployeeAndEmployeeSpecializationLinkIdentityDTO, EmployeeAndEmployeeSpecializationLinkUpdateDTO>(currentSource.Specializations, (employeeAndEmployeeSpecializationLink) => {
            return EmployeeAndEmployeeSpecializationLinkUpdateDTO.fromStrict(employeeAndEmployeeSpecializationLink, undefined, this);
        });
        target.VacationApprover = FrameworkCore.MaybeFactory.Return(currentSource.VacationApprover);
        target.ValidateVirtualProp = FrameworkCore.MaybeFactory.Return(currentSource.ValidateVirtualProp);
        target.Version = currentSource.Version;
        target.WorkPeriod = FrameworkCore.MaybeFactory.Return(currentSource.WorkPeriod);
    }

    private mapUpdateFromSingleStrictForEmployeeAndEmployeeSpecializationLink(target: EmployeeAndEmployeeSpecializationLinkUpdateDTO, currentSource: EmployeeAndEmployeeSpecializationLinkStrictDTO) {
        target.Employee = FrameworkCore.MaybeFactory.Return(currentSource.Employee);
        target.Id = currentSource.Id;
        target.Specialization = FrameworkCore.MaybeFactory.Return(currentSource.Specialization);
        target.Version = currentSource.Version;
    }

    private mapUpdateFromSingleStrictForEmployeeCellPhone(target: EmployeeCellPhoneUpdateDTO, currentSource: EmployeeCellPhoneStrictDTO) {
        target.CityCode = FrameworkCore.MaybeFactory.Return(currentSource.CityCode);
        target.CountryCode = FrameworkCore.MaybeFactory.Return(currentSource.CountryCode);
        target.Id = currentSource.Id;
        target.Number = FrameworkCore.MaybeFactory.Return(currentSource.Number);
        target.Version = currentSource.Version;
    }

    private mapUpdateFromSingleStrictForEmployeePersonalCellPhone(target: EmployeePersonalCellPhoneUpdateDTO, currentSource: EmployeePersonalCellPhoneStrictDTO) {
        target.CityCode = FrameworkCore.MaybeFactory.Return(currentSource.CityCode);
        target.CountryCode = FrameworkCore.MaybeFactory.Return(currentSource.CountryCode);
        target.Id = currentSource.Id;
        target.Number = FrameworkCore.MaybeFactory.Return(currentSource.Number);
        target.Version = currentSource.Version;
    }

    private mapUpdateFromSingleStrictForEmployeeToEmployeeLink(target: EmployeeToEmployeeLinkUpdateDTO, currentSource: EmployeeToEmployeeLinkStrictDTO) {
        target.EmployeeLinkType = FrameworkCore.MaybeFactory.Return(currentSource.EmployeeLinkType);
        target.Id = currentSource.Id;
        target.LinkedEmployee = FrameworkCore.MaybeFactory.Return(currentSource.LinkedEmployee);
        target.Version = currentSource.Version;
    }

    private mapUpdateFromSingleStrictForExample1(target: Example1UpdateDTO, currentSource: Example1StrictDTO) {
        target.Field1 = FrameworkCore.MaybeFactory.Return(currentSource.Field1);
        target.Field2 = FrameworkCore.MaybeFactory.Return(currentSource.Field2);
        target.Field3 = currentSource.Field3;
        target.Id = currentSource.Id;
        target.Items2 = this.ExtractUpdateDataFromSingle<Example2StrictDTO, Example2IdentityDTO, Example2UpdateDTO>(currentSource.Items2, (example2) => {
            return Example2UpdateDTO.fromStrict(example2, undefined, this);
        });
        target.Version = currentSource.Version;
    }

    private mapUpdateFromSingleStrictForExample2(target: Example2UpdateDTO, currentSource: Example2StrictDTO) {
        target.Field1 = FrameworkCore.MaybeFactory.Return(currentSource.Field1);
        target.Field2 = FrameworkCore.MaybeFactory.Return(currentSource.Field2);
        target.Id = currentSource.Id;
        target.Version = currentSource.Version;
    }

    public mapUpdateFromStrictForEmployee(target: EmployeeUpdateDTO, currentSource: EmployeeStrictDTO, baseSource: EmployeeStrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForEmployee(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForEmployee(target, currentSource);
        }
    }

    public mapUpdateFromStrictForEmployeeAndEmployeeSpecializationLink(target: EmployeeAndEmployeeSpecializationLinkUpdateDTO, currentSource: EmployeeAndEmployeeSpecializationLinkStrictDTO, baseSource: EmployeeAndEmployeeSpecializationLinkStrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForEmployeeAndEmployeeSpecializationLink(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForEmployeeAndEmployeeSpecializationLink(target, currentSource);
        }
    }

    public mapUpdateFromStrictForEmployeeCellPhone(target: EmployeeCellPhoneUpdateDTO, currentSource: EmployeeCellPhoneStrictDTO, baseSource: EmployeeCellPhoneStrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForEmployeeCellPhone(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForEmployeeCellPhone(target, currentSource);
        }
    }

    public mapUpdateFromStrictForEmployeePersonalCellPhone(target: EmployeePersonalCellPhoneUpdateDTO, currentSource: EmployeePersonalCellPhoneStrictDTO, baseSource: EmployeePersonalCellPhoneStrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForEmployeePersonalCellPhone(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForEmployeePersonalCellPhone(target, currentSource);
        }
    }

    public mapUpdateFromStrictForEmployeeToEmployeeLink(target: EmployeeToEmployeeLinkUpdateDTO, currentSource: EmployeeToEmployeeLinkStrictDTO, baseSource: EmployeeToEmployeeLinkStrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForEmployeeToEmployeeLink(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForEmployeeToEmployeeLink(target, currentSource);
        }
    }

    public mapUpdateFromStrictForExample1(target: Example1UpdateDTO, currentSource: Example1StrictDTO, baseSource: Example1StrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForExample1(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForExample1(target, currentSource);
        }
    }

    public mapUpdateFromStrictForExample2(target: Example2UpdateDTO, currentSource: Example2StrictDTO, baseSource: Example2StrictDTO) {
        if (baseSource) {
            this.mapUpdateFromPairStrictsForExample2(target, currentSource, baseSource);
        }
        else {
            this.mapUpdateFromSingleStrictForExample2(target, currentSource);
        }
    }

}

export enum SampleSystemBusinessUnitSecurityOperationCode {
    BusinessUnitHrDepartmentEdit = 11,
    BusinessUnitHrDepartmentView = 10,
    BusinessUnitView = 3,
    EmployeeEdit = 2,
}

export enum SampleSystemHRDepartmentSecurityOperationCode {
    EmployeeEdit = 2,
    HRDepartmentView = 29,
}

export enum SampleSystemLocationSecurityOperationCode {
    HRDepartmentEdit = 30,
    LocationView = 33,
}

export enum SampleSystemManagementUnitSecurityOperationCode {
    EmployeeEdit = 2,
    ManagementUnitView = 13,
}

export class BusinessUnitIdentityDTO {
    public static Empty = new BusinessUnitIdentityDTO(Guid.Empty);

    public __type = 'BusinessUnitIdentityDTO';

    private _businessunitidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitIdentityDTO(source.Id);
    }

    public toNativeJson(): BusinessUnitIdentityDTO {
        return this;
    }

}

export class BusinessUnitHrDepartmentIdentityDTO {
    public static Empty = new BusinessUnitHrDepartmentIdentityDTO(Guid.Empty);

    public __type = 'BusinessUnitHrDepartmentIdentityDTO';

    private _businessunithrdepartmentidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitHrDepartmentIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitHrDepartmentIdentityDTO(source.Id);
    }

    public toNativeJson(): BusinessUnitHrDepartmentIdentityDTO {
        return this;
    }

}

export class BusinessUnitManagerCommissionLinkIdentityDTO {
    public static Empty = new BusinessUnitManagerCommissionLinkIdentityDTO(Guid.Empty);

    public __type = 'BusinessUnitManagerCommissionLinkIdentityDTO';

    private _businessunitmanagercommissionlinkidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitManagerCommissionLinkIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitManagerCommissionLinkIdentityDTO(source.Id);
    }

    public toNativeJson(): BusinessUnitManagerCommissionLinkIdentityDTO {
        return this;
    }

}

export class BusinessUnitTypeIdentityDTO {
    public static Empty = new BusinessUnitTypeIdentityDTO(Guid.Empty);

    public __type = 'BusinessUnitTypeIdentityDTO';

    private _businessunittypeidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitTypeIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitTypeIdentityDTO(source.Id);
    }

    public toNativeJson(): BusinessUnitTypeIdentityDTO {
        return this;
    }

}

export class CompanyLegalEntityIdentityDTO {
    public static Empty = new CompanyLegalEntityIdentityDTO(Guid.Empty);

    public __type = 'CompanyLegalEntityIdentityDTO';

    private _companylegalentityidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CompanyLegalEntityIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CompanyLegalEntityIdentityDTO(source.Id);
    }

    public toNativeJson(): CompanyLegalEntityIdentityDTO {
        return this;
    }

}

export class CountryIdentityDTO {
    public static Empty = new CountryIdentityDTO(Guid.Empty);

    public __type = 'CountryIdentityDTO';

    private _countryidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CountryIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CountryIdentityDTO(source.Id);
    }

    public toNativeJson(): CountryIdentityDTO {
        return this;
    }

}

export class EmployeeIdentityDTO {
    public static Empty = new EmployeeIdentityDTO(Guid.Empty);

    public __type = 'EmployeeIdentityDTO';

    private _employeeidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeIdentityDTO {
        return this;
    }

}

export class EmployeeAndEmployeeSpecializationLinkIdentityDTO {
    public static Empty = new EmployeeAndEmployeeSpecializationLinkIdentityDTO(Guid.Empty);

    public __type = 'EmployeeAndEmployeeSpecializationLinkIdentityDTO';

    private _employeeandemployeespecializationlinkidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeAndEmployeeSpecializationLinkIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeAndEmployeeSpecializationLinkIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeAndEmployeeSpecializationLinkIdentityDTO {
        return this;
    }

}

export class EmployeeCellPhoneIdentityDTO {
    public static Empty = new EmployeeCellPhoneIdentityDTO(Guid.Empty);

    public __type = 'EmployeeCellPhoneIdentityDTO';

    private _employeecellphoneidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeCellPhoneIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeCellPhoneIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeCellPhoneIdentityDTO {
        return this;
    }

}

export class EmployeeInformationIdentityDTO {
    public static Empty = new EmployeeInformationIdentityDTO(Guid.Empty);

    public __type = 'EmployeeInformationIdentityDTO';

    private _employeeinformationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeInformationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeInformationIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeInformationIdentityDTO {
        return this;
    }

}

export class EmployeePersonalCellPhoneIdentityDTO {
    public static Empty = new EmployeePersonalCellPhoneIdentityDTO(Guid.Empty);

    public __type = 'EmployeePersonalCellPhoneIdentityDTO';

    private _employeepersonalcellphoneidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeePersonalCellPhoneIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeePersonalCellPhoneIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeePersonalCellPhoneIdentityDTO {
        return this;
    }

}

export class EmployeePhotoIdentityDTO {
    public static Empty = new EmployeePhotoIdentityDTO(Guid.Empty);

    public __type = 'EmployeePhotoIdentityDTO';

    private _employeephotoidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeePhotoIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeePhotoIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeePhotoIdentityDTO {
        return this;
    }

}

export class EmployeePositionIdentityDTO {
    public static Empty = new EmployeePositionIdentityDTO(Guid.Empty);

    public __type = 'EmployeePositionIdentityDTO';

    private _employeepositionidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeePositionIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeePositionIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeePositionIdentityDTO {
        return this;
    }

}

export class EmployeeRegistrationTypeIdentityDTO {
    public static Empty = new EmployeeRegistrationTypeIdentityDTO(Guid.Empty);

    public __type = 'EmployeeRegistrationTypeIdentityDTO';

    private _employeeregistrationtypeidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeRegistrationTypeIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeRegistrationTypeIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeRegistrationTypeIdentityDTO {
        return this;
    }

}

export class EmployeeRoleIdentityDTO {
    public static Empty = new EmployeeRoleIdentityDTO(Guid.Empty);

    public __type = 'EmployeeRoleIdentityDTO';

    private _employeeroleidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeRoleIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeRoleIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeRoleIdentityDTO {
        return this;
    }

}

export class EmployeeRoleDegreeIdentityDTO {
    public static Empty = new EmployeeRoleDegreeIdentityDTO(Guid.Empty);

    public __type = 'EmployeeRoleDegreeIdentityDTO';

    private _employeeroledegreeidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeRoleDegreeIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeRoleDegreeIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeRoleDegreeIdentityDTO {
        return this;
    }

}

export class EmployeeSpecializationIdentityDTO {
    public static Empty = new EmployeeSpecializationIdentityDTO(Guid.Empty);

    public __type = 'EmployeeSpecializationIdentityDTO';

    private _employeespecializationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeSpecializationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeSpecializationIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeSpecializationIdentityDTO {
        return this;
    }

}

export class EmployeeToEmployeeLinkIdentityDTO {
    public static Empty = new EmployeeToEmployeeLinkIdentityDTO(Guid.Empty);

    public __type = 'EmployeeToEmployeeLinkIdentityDTO';

    private _employeetoemployeelinkidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeToEmployeeLinkIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeToEmployeeLinkIdentityDTO(source.Id);
    }

    public toNativeJson(): EmployeeToEmployeeLinkIdentityDTO {
        return this;
    }

}

export class Location1676IdentityDTO {
    public static Empty = new Location1676IdentityDTO(Guid.Empty);

    public __type = 'Location1676IdentityDTO';

    private _location1676identitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): Location1676IdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new Location1676IdentityDTO(source.Id);
    }

    public toNativeJson(): Location1676IdentityDTO {
        return this;
    }

}

export class WorkingCalendar1676IdentityDTO {
    public static Empty = new WorkingCalendar1676IdentityDTO(Guid.Empty);

    public __type = 'WorkingCalendar1676IdentityDTO';

    private _workingcalendar1676identitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): WorkingCalendar1676IdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new WorkingCalendar1676IdentityDTO(source.Id);
    }

    public toNativeJson(): WorkingCalendar1676IdentityDTO {
        return this;
    }

}

export class Example1IdentityDTO {
    public static Empty = new Example1IdentityDTO(Guid.Empty);

    public __type = 'Example1IdentityDTO';

    private _example1identitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): Example1IdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new Example1IdentityDTO(source.Id);
    }

    public toNativeJson(): Example1IdentityDTO {
        return this;
    }

}

export class Example2IdentityDTO {
    public static Empty = new Example2IdentityDTO(Guid.Empty);

    public __type = 'Example2IdentityDTO';

    private _example2identitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): Example2IdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new Example2IdentityDTO(source.Id);
    }

    public toNativeJson(): Example2IdentityDTO {
        return this;
    }

}

export class HRDepartmentIdentityDTO {
    public static Empty = new HRDepartmentIdentityDTO(Guid.Empty);

    public __type = 'HRDepartmentIdentityDTO';

    private _hrdepartmentidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): HRDepartmentIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new HRDepartmentIdentityDTO(source.Id);
    }

    public toNativeJson(): HRDepartmentIdentityDTO {
        return this;
    }

}

export class IMRequestIdentityDTO {
    public static Empty = new IMRequestIdentityDTO(Guid.Empty);

    public __type = 'IMRequestIdentityDTO';

    private _imrequestidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): IMRequestIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new IMRequestIdentityDTO(source.Id);
    }

    public toNativeJson(): IMRequestIdentityDTO {
        return this;
    }

}

export class InformationIdentityDTO {
    public static Empty = new InformationIdentityDTO(Guid.Empty);

    public __type = 'InformationIdentityDTO';

    private _informationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): InformationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new InformationIdentityDTO(source.Id);
    }

    public toNativeJson(): InformationIdentityDTO {
        return this;
    }

}

export class LocationIdentityDTO {
    public static Empty = new LocationIdentityDTO(Guid.Empty);

    public __type = 'LocationIdentityDTO';

    private _locationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): LocationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new LocationIdentityDTO(source.Id);
    }

    public toNativeJson(): LocationIdentityDTO {
        return this;
    }

}

export class ManagementUnitIdentityDTO {
    public static Empty = new ManagementUnitIdentityDTO(Guid.Empty);

    public __type = 'ManagementUnitIdentityDTO';

    private _managementunitidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ManagementUnitIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ManagementUnitIdentityDTO(source.Id);
    }

    public toNativeJson(): ManagementUnitIdentityDTO {
        return this;
    }

}

export class ManagementUnitAndBusinessUnitLinkIdentityDTO {
    public static Empty = new ManagementUnitAndBusinessUnitLinkIdentityDTO(Guid.Empty);

    public __type = 'ManagementUnitAndBusinessUnitLinkIdentityDTO';

    private _managementunitandbusinessunitlinkidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ManagementUnitAndBusinessUnitLinkIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ManagementUnitAndBusinessUnitLinkIdentityDTO(source.Id);
    }

    public toNativeJson(): ManagementUnitAndBusinessUnitLinkIdentityDTO {
        return this;
    }

}

export class ManagementUnitAndHRDepartmentLinkIdentityDTO {
    public static Empty = new ManagementUnitAndHRDepartmentLinkIdentityDTO(Guid.Empty);

    public __type = 'ManagementUnitAndHRDepartmentLinkIdentityDTO';

    private _managementunitandhrdepartmentlinkidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ManagementUnitAndHRDepartmentLinkIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ManagementUnitAndHRDepartmentLinkIdentityDTO(source.Id);
    }

    public toNativeJson(): ManagementUnitAndHRDepartmentLinkIdentityDTO {
        return this;
    }

}

export class PrincipalIdentityDTO {
    public static Empty = new PrincipalIdentityDTO(Guid.Empty);

    public __type = 'PrincipalIdentityDTO';

    private _principalidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): PrincipalIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new PrincipalIdentityDTO(source.Id);
    }

    public toNativeJson(): PrincipalIdentityDTO {
        return this;
    }

}

export class SqlParserTestObjIdentityDTO {
    public static Empty = new SqlParserTestObjIdentityDTO(Guid.Empty);

    public __type = 'SqlParserTestObjIdentityDTO';

    private _sqlparsertestobjidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SqlParserTestObjIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SqlParserTestObjIdentityDTO(source.Id);
    }

    public toNativeJson(): SqlParserTestObjIdentityDTO {
        return this;
    }

}

export class SqlParserTestObjContainerIdentityDTO {
    public static Empty = new SqlParserTestObjContainerIdentityDTO(Guid.Empty);

    public __type = 'SqlParserTestObjContainerIdentityDTO';

    private _sqlparsertestobjcontaineridentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SqlParserTestObjContainerIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SqlParserTestObjContainerIdentityDTO(source.Id);
    }

    public toNativeJson(): SqlParserTestObjContainerIdentityDTO {
        return this;
    }

}

export class TestCustomContextSecurityObjIdentityDTO {
    public static Empty = new TestCustomContextSecurityObjIdentityDTO(Guid.Empty);

    public __type = 'TestCustomContextSecurityObjIdentityDTO';

    private _testcustomcontextsecurityobjidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestCustomContextSecurityObjIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestCustomContextSecurityObjIdentityDTO(source.Id);
    }

    public toNativeJson(): TestCustomContextSecurityObjIdentityDTO {
        return this;
    }

}

export class TestImmutableObjIdentityDTO {
    public static Empty = new TestImmutableObjIdentityDTO(Guid.Empty);

    public __type = 'TestImmutableObjIdentityDTO';

    private _testimmutableobjidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestImmutableObjIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestImmutableObjIdentityDTO(source.Id);
    }

    public toNativeJson(): TestImmutableObjIdentityDTO {
        return this;
    }

}

export class TestObjForNestedIdentityDTO {
    public static Empty = new TestObjForNestedIdentityDTO(Guid.Empty);

    public __type = 'TestObjForNestedIdentityDTO';

    private _testobjfornestedidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestObjForNestedIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestObjForNestedIdentityDTO(source.Id);
    }

    public toNativeJson(): TestObjForNestedIdentityDTO {
        return this;
    }

}

export class TestRootSecurityObjIdentityDTO {
    public static Empty = new TestRootSecurityObjIdentityDTO(Guid.Empty);

    public __type = 'TestRootSecurityObjIdentityDTO';

    private _testrootsecurityobjidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestRootSecurityObjIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestRootSecurityObjIdentityDTO(source.Id);
    }

    public toNativeJson(): TestRootSecurityObjIdentityDTO {
        return this;
    }

}

export class TestSecurityObjItemIdentityDTO {
    public static Empty = new TestSecurityObjItemIdentityDTO(Guid.Empty);

    public __type = 'TestSecurityObjItemIdentityDTO';

    private _testsecurityobjitemidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecurityObjItemIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecurityObjItemIdentityDTO(source.Id);
    }

    public toNativeJson(): TestSecurityObjItemIdentityDTO {
        return this;
    }

}

export class TestSecuritySubObjItemIdentityDTO {
    public static Empty = new TestSecuritySubObjItemIdentityDTO(Guid.Empty);

    public __type = 'TestSecuritySubObjItemIdentityDTO';

    private _testsecuritysubobjitemidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecuritySubObjItemIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecuritySubObjItemIdentityDTO(source.Id);
    }

    public toNativeJson(): TestSecuritySubObjItemIdentityDTO {
        return this;
    }

}

export class TestSecuritySubObjItem2IdentityDTO {
    public static Empty = new TestSecuritySubObjItem2IdentityDTO(Guid.Empty);

    public __type = 'TestSecuritySubObjItem2IdentityDTO';

    private _testsecuritysubobjitem2identitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecuritySubObjItem2IdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecuritySubObjItem2IdentityDTO(source.Id);
    }

    public toNativeJson(): TestSecuritySubObjItem2IdentityDTO {
        return this;
    }

}

export class TestSecuritySubObjItem3IdentityDTO {
    public static Empty = new TestSecuritySubObjItem3IdentityDTO(Guid.Empty);

    public __type = 'TestSecuritySubObjItem3IdentityDTO';

    private _testsecuritysubobjitem3identitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecuritySubObjItem3IdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecuritySubObjItem3IdentityDTO(source.Id);
    }

    public toNativeJson(): TestSecuritySubObjItem3IdentityDTO {
        return this;
    }

}

export class BaseObservableAbstractDTO {
    public __type = 'BaseObservableAbstractDTO';

    private _baseobservableabstractdto: string;

    public static fromJs(source: any): BaseObservableAbstractDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservableAbstractDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
    }

    public fromObservable(source: any): void {
    }

}

export class BaseObservablePersistentDTO extends BaseObservableAbstractDTO {
    public __type = 'BaseObservablePersistentDTO';

    private _baseobservablepersistentdto: string;

    public Id = observable<Guid>();

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): BaseObservablePersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservablePersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBasePersistentDTO): void {
        super.fromJs(source);
        this.Id(source.Id);
    }

}

export class BaseObservableAuditPersistentDTO extends BaseObservablePersistentDTO {
    public __type = 'BaseObservableAuditPersistentDTO';

    private _baseobservableauditpersistentdto: string;

    public Active = observable<boolean>(true);

    public CreateDate = observable<Date>();

    public CreatedBy = observable<string>();

    public ModifiedBy = observable<string>();

    public ModifyDate = observable<Date>();

    public Version = observable<number>();

    public static fromJs(source: IBaseAuditPersistentDTO): BaseObservableAuditPersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservableAuditPersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBaseAuditPersistentDTO): void {
        super.fromJs(source);
        this.Active(source.Active);
        this.CreateDate(Convert.toDate(source.CreateDate));
        this.CreatedBy(source.CreatedBy);
        this.ModifiedBy(source.ModifiedBy);
        this.ModifyDate(Convert.toDate(source.ModifyDate));
        this.Version(source.Version);
    }

}

export class AddressObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AddressObservableSimpleDTO';

    private _addressobservablesimpledto: string;

    public AddressType = observable<AddressType>();

    public CityName = observable<string>();

    public RegionName = observable<string>();

    public Street = observable<string>();

    public Zip = observable<string>();

    public static fromJs(source: IAddressSimpleDTO): AddressObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AddressObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAddressSimpleDTO): void {
        super.fromJs(source);
        this.AddressType(source.AddressType);
        this.CityName(source.CityName);
        this.RegionName(source.RegionName);
        this.Street(source.Street);
        this.Zip(source.Zip);
    }

    public toJs(): AddressSimpleDTO {
        let e = new AddressSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AddressStrictDTO {
        let e = new AddressSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AddressObservableFullDTO extends AddressObservableSimpleDTO {
    public __type = 'AddressObservableFullDTO';

    private _addressobservablefulldto: string;

    public CountryName = observable<CountryObservableSimpleDTO>();

    public LegalEntity = observable<LegalEntityBaseObservableSimpleDTO>();

    public static fromJs(source: IAddressFullDTO): AddressObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AddressObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAddressFullDTO): void {
        super.fromJs(source);
        this.CountryName(CountryObservableSimpleDTO.fromJs(source.CountryName));
        this.LegalEntity(LegalEntityBaseObservableSimpleDTO.fromJs(source.LegalEntity));
    }

    public toJs(): AddressFullDTO {
        let e = new AddressFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AddressStrictDTO {
        let e = new AddressFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AddressObservableRichDTO extends AddressObservableFullDTO {
    public __type = 'AddressObservableRichDTO';

    private _addressobservablerichdto: string;

    public static fromJs(source: IAddressRichDTO): AddressObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AddressObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAddressRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): AddressRichDTO {
        let e = new AddressRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AddressStrictDTO {
        let e = new AddressRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitObservableIdentityDTO(source.Id);
    }

}

export class BusinessUnitObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitObservableSimpleDTO';

    private _businessunitobservablesimpledto: string;

    public BusinessUnitStatus = observable<BusinessUnitStatus>();

    public BusinessUnitTypeName = observable<string>();

    public Commission = observable<number>();

    public FirstNewBusinessStatusMonth = observable<Date>();

    public IsNewBusiness = observable<boolean>(false);

    public IsPool = observable<boolean>(false);

    public IsProduction = observable<boolean>(false);

    public IsSpecialCommission = observable<boolean>(false);

    public LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = observable<Date>();

    public LastNewBusinessStatusMonth = observable<Date>();

    public LeastProjectStartDate = observable<Date>();

    public LobName = observable<string>();

    public Name = observable<string>();

    public NeedSendBusinessUnitHasNoLinkedProjectsWarning = observable<boolean>(false);

    public NewBusinessStatusLeft = observable<number>();

    public Options = observable<BusinessUnitOptions>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public ProjectStartMailList = observable<string>();

    public Rank = observable<number>();

    public static fromJs(source: IBusinessUnitSimpleDTO): BusinessUnitObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitSimpleDTO): void {
        super.fromJs(source);
        this.BusinessUnitStatus(source.BusinessUnitStatus);
        this.BusinessUnitTypeName(source.BusinessUnitTypeName);
        this.Commission(source.Commission);
        this.FirstNewBusinessStatusMonth(Convert.toDate(source.FirstNewBusinessStatusMonth));
        this.IsNewBusiness(source.IsNewBusiness);
        this.IsPool(source.IsPool);
        this.IsProduction(source.IsProduction);
        this.IsSpecialCommission(source.IsSpecialCommission);
        this.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate(Convert.toDate(source.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate));
        this.LastNewBusinessStatusMonth(Convert.toDate(source.LastNewBusinessStatusMonth));
        this.LeastProjectStartDate(Convert.toDate(source.LeastProjectStartDate));
        this.LobName(source.LobName);
        this.Name(source.Name);
        this.NeedSendBusinessUnitHasNoLinkedProjectsWarning(source.NeedSendBusinessUnitHasNoLinkedProjectsWarning);
        this.NewBusinessStatusLeft(source.NewBusinessStatusLeft);
        this.Options(source.Options);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
        this.ProjectStartMailList(source.ProjectStartMailList);
        this.Rank(source.Rank);
    }

    public identity(): BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitSimpleDTO {
        let e = new BusinessUnitSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitStrictDTO {
        let e = new BusinessUnitSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitObservableFullDTO extends BusinessUnitObservableSimpleDTO {
    public __type = 'BusinessUnitObservableFullDTO';

    private _businessunitobservablefulldto: string;

    public BusinessUnitForRent = observable<BusinessUnitObservableSimpleDTO>();

    public BusinessUnitType = observable<BusinessUnitTypeObservableSimpleDTO>();

    public Parent = observable<BusinessUnitObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitFullDTO): BusinessUnitObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitForRent(BusinessUnitObservableSimpleDTO.fromJs(source.BusinessUnitForRent));
        this.BusinessUnitType(BusinessUnitTypeObservableSimpleDTO.fromJs(source.BusinessUnitType));
        this.Parent(BusinessUnitObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): BusinessUnitFullDTO {
        let e = new BusinessUnitFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitStrictDTO {
        let e = new BusinessUnitFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitObservableRichDTO extends BusinessUnitObservableFullDTO {
    public __type = 'BusinessUnitObservableRichDTO';

    private _businessunitobservablerichdto: string;

    public BusinessUnitEmployeeRoles = observableArray<BusinessUnitEmployeeRoleObservableRichDTO>();

    public Children = observableArray<BusinessUnitObservableRichDTO>();

    public ManagementUnits = observableArray<ManagementUnitAndBusinessUnitLinkObservableRichDTO>();

    public ManagerCommissions = observableArray<BusinessUnitManagerCommissionLinkObservableRichDTO>();

    public static fromJs(source: IBusinessUnitRichDTO): BusinessUnitObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitRichDTO): void {
        super.fromJs(source);
        if (source.BusinessUnitEmployeeRoles) {
            this.BusinessUnitEmployeeRoles(source.BusinessUnitEmployeeRoles.map(e => {
                    return BusinessUnitEmployeeRoleObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Children) {
            this.Children(source.Children.map(e => {
                    return BusinessUnitObservableRichDTO.fromJs(e);
                }));
        }
        if (source.ManagementUnits) {
            this.ManagementUnits(source.ManagementUnits.map(e => {
                    return ManagementUnitAndBusinessUnitLinkObservableRichDTO.fromJs(e);
                }));
        }
        if (source.ManagerCommissions) {
            this.ManagerCommissions(source.ManagerCommissions.map(e => {
                    return BusinessUnitManagerCommissionLinkObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): BusinessUnitRichDTO {
        let e = new BusinessUnitRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitStrictDTO {
        let e = new BusinessUnitRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'BusinessUnitObservableVisualDTO';

    private _businessunitobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitVisualDTO {
        let e = new BusinessUnitVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class BusinessUnitEmployeeRoleObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitEmployeeRoleObservableSimpleDTO';

    private _businessunitemployeeroleobservablesimpledto: string;

    public Role = observable<BusinessUnitEmployeeRoleType>();

    public static fromJs(source: IBusinessUnitEmployeeRoleSimpleDTO): BusinessUnitEmployeeRoleObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitEmployeeRoleObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitEmployeeRoleSimpleDTO): void {
        super.fromJs(source);
        this.Role(source.Role);
    }

    public toJs(): BusinessUnitEmployeeRoleSimpleDTO {
        let e = new BusinessUnitEmployeeRoleSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitEmployeeRoleObservableFullDTO extends BusinessUnitEmployeeRoleObservableSimpleDTO {
    public __type = 'BusinessUnitEmployeeRoleObservableFullDTO';

    private _businessunitemployeeroleobservablefulldto: string;

    public BusinessUnit = observable<BusinessUnitObservableSimpleDTO>();

    public Employee = observable<EmployeeObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitEmployeeRoleFullDTO): BusinessUnitEmployeeRoleObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitEmployeeRoleObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitEmployeeRoleFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit(BusinessUnitObservableSimpleDTO.fromJs(source.BusinessUnit));
        this.Employee(EmployeeObservableSimpleDTO.fromJs(source.Employee));
    }

    public toJs(): BusinessUnitEmployeeRoleFullDTO {
        let e = new BusinessUnitEmployeeRoleFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitEmployeeRoleObservableRichDTO extends BusinessUnitEmployeeRoleObservableFullDTO {
    public __type = 'BusinessUnitEmployeeRoleObservableRichDTO';

    private _businessunitemployeeroleobservablerichdto: string;

    public static fromJs(source: IBusinessUnitEmployeeRoleRichDTO): BusinessUnitEmployeeRoleObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitEmployeeRoleObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitEmployeeRoleRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitEmployeeRoleRichDTO {
        let e = new BusinessUnitEmployeeRoleRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitHrDepartmentObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitHrDepartmentObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitHrDepartmentObservableIdentityDTO(source.Id);
    }

}

export class BusinessUnitHrDepartmentObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitHrDepartmentObservableSimpleDTO';

    private _businessunithrdepartmentobservablesimpledto: string;

    public static fromJs(source: IBusinessUnitHrDepartmentSimpleDTO): BusinessUnitHrDepartmentObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitHrDepartmentObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitHrDepartmentSimpleDTO): void {
        super.fromJs(source);
    }

    public identity(): BusinessUnitHrDepartmentIdentityDTO {
        return new BusinessUnitHrDepartmentIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitHrDepartmentSimpleDTO {
        let e = new BusinessUnitHrDepartmentSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitHrDepartmentObservableFullDTO extends BusinessUnitHrDepartmentObservableSimpleDTO {
    public __type = 'BusinessUnitHrDepartmentObservableFullDTO';

    private _businessunithrdepartmentobservablefulldto: string;

    public BusinessUnit = observable<BusinessUnitObservableSimpleDTO>();

    public HRDepartment = observable<HRDepartmentObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitHrDepartmentFullDTO): BusinessUnitHrDepartmentObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitHrDepartmentObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitHrDepartmentFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit(BusinessUnitObservableSimpleDTO.fromJs(source.BusinessUnit));
        this.HRDepartment(HRDepartmentObservableSimpleDTO.fromJs(source.HRDepartment));
    }

    public toJs(): BusinessUnitHrDepartmentFullDTO {
        let e = new BusinessUnitHrDepartmentFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitHrDepartmentObservableRichDTO extends BusinessUnitHrDepartmentObservableFullDTO {
    public __type = 'BusinessUnitHrDepartmentObservableRichDTO';

    private _businessunithrdepartmentobservablerichdto: string;

    public static fromJs(source: IBusinessUnitHrDepartmentRichDTO): BusinessUnitHrDepartmentObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitHrDepartmentObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitHrDepartmentRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitHrDepartmentRichDTO {
        let e = new BusinessUnitHrDepartmentRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitManagerCommissionLinkObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitManagerCommissionLinkObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitManagerCommissionLinkObservableIdentityDTO(source.Id);
    }

}

export class BusinessUnitManagerCommissionLinkObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitManagerCommissionLinkObservableSimpleDTO';

    private _businessunitmanagercommissionlinkobservablesimpledto: string;

    public Commission = observable<number>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: IBusinessUnitManagerCommissionLinkSimpleDTO): BusinessUnitManagerCommissionLinkObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitManagerCommissionLinkObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitManagerCommissionLinkSimpleDTO): void {
        super.fromJs(source);
        this.Commission(source.Commission);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
    }

    public identity(): BusinessUnitManagerCommissionLinkIdentityDTO {
        return new BusinessUnitManagerCommissionLinkIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitManagerCommissionLinkSimpleDTO {
        let e = new BusinessUnitManagerCommissionLinkSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitManagerCommissionLinkObservableFullDTO extends BusinessUnitManagerCommissionLinkObservableSimpleDTO {
    public __type = 'BusinessUnitManagerCommissionLinkObservableFullDTO';

    private _businessunitmanagercommissionlinkobservablefulldto: string;

    public BusinessUnit = observable<BusinessUnitObservableSimpleDTO>();

    public Manager = observable<EmployeeObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitManagerCommissionLinkFullDTO): BusinessUnitManagerCommissionLinkObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitManagerCommissionLinkObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitManagerCommissionLinkFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit(BusinessUnitObservableSimpleDTO.fromJs(source.BusinessUnit));
        this.Manager(EmployeeObservableSimpleDTO.fromJs(source.Manager));
    }

    public toJs(): BusinessUnitManagerCommissionLinkFullDTO {
        let e = new BusinessUnitManagerCommissionLinkFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitManagerCommissionLinkObservableRichDTO extends BusinessUnitManagerCommissionLinkObservableFullDTO {
    public __type = 'BusinessUnitManagerCommissionLinkObservableRichDTO';

    private _businessunitmanagercommissionlinkobservablerichdto: string;

    public static fromJs(source: IBusinessUnitManagerCommissionLinkRichDTO): BusinessUnitManagerCommissionLinkObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitManagerCommissionLinkObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitManagerCommissionLinkRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitManagerCommissionLinkRichDTO {
        let e = new BusinessUnitManagerCommissionLinkRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): BusinessUnitTypeObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new BusinessUnitTypeObservableIdentityDTO(source.Id);
    }

}

export class BusinessUnitTypeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitTypeObservableSimpleDTO';

    private _businessunittypeobservablesimpledto: string;

    public AdditionalStartConfirm = observable<boolean>(false);

    public AdditionalTransferConfirm = observable<boolean>(false);

    public BillingProjectAreNotAllowed = observable<boolean>(false);

    public CanBeIsSpecialCommission = observable<boolean>(false);

    public CanBeLinkedToClient = observable<boolean>(false);

    public CanBeLinkedToDepartment = observable<boolean>(false);

    public CanBeNewBusiness = observable<boolean>(false);

    public CanBeResourcePool = observable<boolean>(false);

    public IsAdministrative = observable<boolean>(false);

    public Name = observable<string>();

    public NeedVertical = observable<boolean>(false);

    public PossibleStartDate = observable<PossibleStartDate>();

    public PossibleTransferDate = observable<PossibleStartDate>();

    public PracticeAllowed = observable<boolean>(false);

    public ProjectStartAllowed = observable<boolean>(false);

    public StartBOConfirm = observable<boolean>(false);

    public TransferBOConfirm = observable<boolean>(false);

    public static fromJs(source: IBusinessUnitTypeSimpleDTO): BusinessUnitTypeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeSimpleDTO): void {
        super.fromJs(source);
        this.AdditionalStartConfirm(source.AdditionalStartConfirm);
        this.AdditionalTransferConfirm(source.AdditionalTransferConfirm);
        this.BillingProjectAreNotAllowed(source.BillingProjectAreNotAllowed);
        this.CanBeIsSpecialCommission(source.CanBeIsSpecialCommission);
        this.CanBeLinkedToClient(source.CanBeLinkedToClient);
        this.CanBeLinkedToDepartment(source.CanBeLinkedToDepartment);
        this.CanBeNewBusiness(source.CanBeNewBusiness);
        this.CanBeResourcePool(source.CanBeResourcePool);
        this.IsAdministrative(source.IsAdministrative);
        this.Name(source.Name);
        this.NeedVertical(source.NeedVertical);
        this.PossibleStartDate(source.PossibleStartDate);
        this.PossibleTransferDate(source.PossibleTransferDate);
        this.PracticeAllowed(source.PracticeAllowed);
        this.ProjectStartAllowed(source.ProjectStartAllowed);
        this.StartBOConfirm(source.StartBOConfirm);
        this.TransferBOConfirm(source.TransferBOConfirm);
    }

    public identity(): BusinessUnitTypeIdentityDTO {
        return new BusinessUnitTypeIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitTypeSimpleDTO {
        let e = new BusinessUnitTypeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeObservableFullDTO extends BusinessUnitTypeObservableSimpleDTO {
    public __type = 'BusinessUnitTypeObservableFullDTO';

    private _businessunittypeobservablefulldto: string;

    public static fromJs(source: IBusinessUnitTypeFullDTO): BusinessUnitTypeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitTypeFullDTO {
        let e = new BusinessUnitTypeFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeObservableRichDTO extends BusinessUnitTypeObservableFullDTO {
    public __type = 'BusinessUnitTypeObservableRichDTO';

    private _businessunittypeobservablerichdto: string;

    public PossibleFinancialProjectTypes = observableArray<BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO>();

    public PossibleParents = observableArray<BusinessUnitTypeLinkWithPossibleParentObservableRichDTO>();

    public TransferTo = observableArray<BusinessUnitTypeLinkWithTransferToObservableRichDTO>();

    public static fromJs(source: IBusinessUnitTypeRichDTO): BusinessUnitTypeObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeRichDTO): void {
        super.fromJs(source);
        if (source.PossibleFinancialProjectTypes) {
            this.PossibleFinancialProjectTypes(source.PossibleFinancialProjectTypes.map(e => {
                    return BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO.fromJs(e);
                }));
        }
        if (source.PossibleParents) {
            this.PossibleParents(source.PossibleParents.map(e => {
                    return BusinessUnitTypeLinkWithPossibleParentObservableRichDTO.fromJs(e);
                }));
        }
        if (source.TransferTo) {
            this.TransferTo(source.TransferTo.map(e => {
                    return BusinessUnitTypeLinkWithTransferToObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): BusinessUnitTypeRichDTO {
        let e = new BusinessUnitTypeRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'BusinessUnitTypeObservableVisualDTO';

    private _businessunittypeobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitTypeObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): BusinessUnitTypeIdentityDTO {
        return new BusinessUnitTypeIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitTypeVisualDTO {
        let e = new BusinessUnitTypeVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttypeobservablesimpledto: string;

    public FinancialProjectType = observable<FinancialProjectType>();

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO): void {
        super.fromJs(source);
        this.FinancialProjectType(source.FinancialProjectType);
    }

    public toJs(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO extends BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttypeobservablefulldto: string;

    public BusinessUnitType = observable<BusinessUnitTypeObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitType(BusinessUnitTypeObservableSimpleDTO.fromJs(source.BusinessUnitType));
    }

    public toJs(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO extends BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttypeobservablerichdto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO';

    private _businessunittypelinkwithpossibleparentobservablesimpledto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleParentSimpleDTO): BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleParentSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitTypeLinkWithPossibleParentSimpleDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithPossibleParentObservableFullDTO extends BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentObservableFullDTO';

    private _businessunittypelinkwithpossibleparentobservablefulldto: string;

    public BusinessUnitType = observable<BusinessUnitTypeObservableSimpleDTO>();

    public PossibleParent = observable<BusinessUnitTypeObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleParentFullDTO): BusinessUnitTypeLinkWithPossibleParentObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleParentObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleParentFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitType(BusinessUnitTypeObservableSimpleDTO.fromJs(source.BusinessUnitType));
        this.PossibleParent(BusinessUnitTypeObservableSimpleDTO.fromJs(source.PossibleParent));
    }

    public toJs(): BusinessUnitTypeLinkWithPossibleParentFullDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithPossibleParentObservableRichDTO extends BusinessUnitTypeLinkWithPossibleParentObservableFullDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentObservableRichDTO';

    private _businessunittypelinkwithpossibleparentobservablerichdto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleParentRichDTO): BusinessUnitTypeLinkWithPossibleParentObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleParentObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleParentRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitTypeLinkWithPossibleParentRichDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithTransferToObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToObservableSimpleDTO';

    private _businessunittypelinkwithtransfertoobservablesimpledto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithTransferToSimpleDTO): BusinessUnitTypeLinkWithTransferToObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithTransferToObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithTransferToSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitTypeLinkWithTransferToSimpleDTO {
        let e = new BusinessUnitTypeLinkWithTransferToSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithTransferToObservableFullDTO extends BusinessUnitTypeLinkWithTransferToObservableSimpleDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToObservableFullDTO';

    private _businessunittypelinkwithtransfertoobservablefulldto: string;

    public BusinessUnitType = observable<BusinessUnitTypeObservableSimpleDTO>();

    public TransferTo = observable<BusinessUnitTypeObservableSimpleDTO>();

    public static fromJs(source: IBusinessUnitTypeLinkWithTransferToFullDTO): BusinessUnitTypeLinkWithTransferToObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithTransferToObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithTransferToFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitType(BusinessUnitTypeObservableSimpleDTO.fromJs(source.BusinessUnitType));
        this.TransferTo(BusinessUnitTypeObservableSimpleDTO.fromJs(source.TransferTo));
    }

    public toJs(): BusinessUnitTypeLinkWithTransferToFullDTO {
        let e = new BusinessUnitTypeLinkWithTransferToFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitTypeLinkWithTransferToObservableRichDTO extends BusinessUnitTypeLinkWithTransferToObservableFullDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToObservableRichDTO';

    private _businessunittypelinkwithtransfertoobservablerichdto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithTransferToRichDTO): BusinessUnitTypeLinkWithTransferToObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithTransferToObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithTransferToRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): BusinessUnitTypeLinkWithTransferToRichDTO {
        let e = new BusinessUnitTypeLinkWithTransferToRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CompanyLegalEntityObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CompanyLegalEntityObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CompanyLegalEntityObservableIdentityDTO(source.Id);
    }

}

export class CompanyLegalEntityObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'CompanyLegalEntityObservableSimpleDTO';

    private _companylegalentityobservablesimpledto: string;

    public AribaStatus = observable<RevenueDocumentAribaStatus>();

    public Code = observable<string>();

    public Name = observable<string>();

    public NameEnglish = observable<string>();

    public Type = observable<CompanyLegalEntityType>();

    public static fromJs(source: ICompanyLegalEntitySimpleDTO): CompanyLegalEntityObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICompanyLegalEntitySimpleDTO): void {
        super.fromJs(source);
        this.AribaStatus(RevenueDocumentAribaStatus.fromJs(source.AribaStatus));
        this.Code(source.Code);
        this.Name(source.Name);
        this.NameEnglish(source.NameEnglish);
        this.Type(source.Type);
    }

    public identity(): CompanyLegalEntityIdentityDTO {
        return new CompanyLegalEntityIdentityDTO(this.Id());
    }

    public toJs(): CompanyLegalEntitySimpleDTO {
        let e = new CompanyLegalEntitySimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntitySimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CompanyLegalEntityObservableFullDTO extends CompanyLegalEntityObservableSimpleDTO {
    public __type = 'CompanyLegalEntityObservableFullDTO';

    private _companylegalentityobservablefulldto: string;

    public BaseObj = observable<TestObjForNestedObservableSimpleDTO>();

    public CurrentObj = observable<TestObjForNestedObservableSimpleDTO>();

    public Parent = observable<CompanyLegalEntityObservableSimpleDTO>();

    public static fromJs(source: ICompanyLegalEntityFullDTO): CompanyLegalEntityObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICompanyLegalEntityFullDTO): void {
        super.fromJs(source);
        this.BaseObj(TestObjForNestedObservableSimpleDTO.fromJs(source.BaseObj));
        this.CurrentObj(TestObjForNestedObservableSimpleDTO.fromJs(source.CurrentObj));
        this.Parent(CompanyLegalEntityObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): CompanyLegalEntityFullDTO {
        let e = new CompanyLegalEntityFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CompanyLegalEntityObservableRichDTO extends CompanyLegalEntityObservableFullDTO {
    public __type = 'CompanyLegalEntityObservableRichDTO';

    private _companylegalentityobservablerichdto: string;

    public Addresses = observableArray<AddressObservableRichDTO>();

    public static fromJs(source: ICompanyLegalEntityRichDTO): CompanyLegalEntityObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICompanyLegalEntityRichDTO): void {
        super.fromJs(source);
        if (source.Addresses) {
            this.Addresses(source.Addresses.map(e => {
                    return AddressObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): CompanyLegalEntityRichDTO {
        let e = new CompanyLegalEntityRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CompanyLegalEntityObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'CompanyLegalEntityObservableVisualDTO';

    private _companylegalentityobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): CompanyLegalEntityObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): CompanyLegalEntityIdentityDTO {
        return new CompanyLegalEntityIdentityDTO(this.Id());
    }

    public toJs(): CompanyLegalEntityVisualDTO {
        let e = new CompanyLegalEntityVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class CountryObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CountryObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CountryObservableIdentityDTO(source.Id);
    }

}

export class CountryObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'CountryObservableSimpleDTO';

    private _countryobservablesimpledto: string;

    public Code = observable<string>();

    public Culture = observable<string>();

    public Name = observable<string>();

    public NameNative = observable<string>();

    public static fromJs(source: ICountrySimpleDTO): CountryObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICountrySimpleDTO): void {
        super.fromJs(source);
        this.Code(source.Code);
        this.Culture(source.Culture);
        this.Name(source.Name);
        this.NameNative(source.NameNative);
    }

    public identity(): CountryIdentityDTO {
        return new CountryIdentityDTO(this.Id());
    }

    public toJs(): CountrySimpleDTO {
        let e = new CountrySimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CountryStrictDTO {
        let e = new CountrySimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CountryObservableFullDTO extends CountryObservableSimpleDTO {
    public __type = 'CountryObservableFullDTO';

    private _countryobservablefulldto: string;

    public static fromJs(source: ICountryFullDTO): CountryObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICountryFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): CountryFullDTO {
        let e = new CountryFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CountryStrictDTO {
        let e = new CountryFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CountryObservableRichDTO extends CountryObservableFullDTO {
    public __type = 'CountryObservableRichDTO';

    private _countryobservablerichdto: string;

    public static fromJs(source: ICountryRichDTO): CountryObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICountryRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): CountryRichDTO {
        let e = new CountryRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CountryStrictDTO {
        let e = new CountryRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CountryObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'CountryObservableVisualDTO';

    private _countryobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): CountryObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): CountryIdentityDTO {
        return new CountryIdentityDTO(this.Id());
    }

    public toJs(): CountryVisualDTO {
        let e = new CountryVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeObservableIdentityDTO(source.Id);
    }

}

export class EmployeeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeeObservableSimpleDTO';

    private _employeeobservablesimpledto: string;

    public AccountName = observable<string>();

    public Age = observable<number>();

    public BirthDate = observable<Date>();

    public CanBePPM = observable<boolean>(false);

    public CellPhone = observable<string>();

    public CoreBusinessUnitPeriod = observable<Framework.Core.ObservablePeriod>();

    public DismissDate = observable<Date>();

    public EducationDuration = observable<Framework.Core.ObservablePeriod>();

    public Email = observable<string>();

    public ExternalId = observable<number>();

    public Gender = observable<Gender>();

    public HireDate = observable<Date>();

    public Interphone = observable<string>();

    public IsCandidate = observable<boolean>(false);

    public Landlinephone = observable<string>();

    public LastActionDate = observable<Date>();

    public LocationCode = observable<number>();

    public Login = observable<string>();

    public MailAccountName = observable<string>();

    public NameEng = observable<FioShort>();

    public NameNative = observable<Fio>();

    public NameRussian = observable<Fio>();

    public NonValidateVirtualProp = observable<Date>();

    public PersonalCellPhone = observable<string>();

    public Pin = observable<number>();

    public PlannedHireDate = observable<Date>();

    public ValidateVirtualProp = observable<Date>();

    public WorkPeriod = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: IEmployeeSimpleDTO): EmployeeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSimpleDTO): void {
        super.fromJs(source);
        this.AccountName(source.AccountName);
        this.Age(source.Age);
        this.BirthDate(Convert.toDate(source.BirthDate));
        this.CanBePPM(source.CanBePPM);
        this.CellPhone(source.CellPhone);
        this.CoreBusinessUnitPeriod(Framework.Core.ObservablePeriod.toPeriod(source.CoreBusinessUnitPeriod));
        this.DismissDate(Convert.toDate(source.DismissDate));
        this.EducationDuration(Framework.Core.ObservablePeriod.toPeriod(source.EducationDuration));
        this.Email(source.Email);
        this.ExternalId(source.ExternalId);
        this.Gender(source.Gender);
        this.HireDate(Convert.toDate(source.HireDate));
        this.Interphone(source.Interphone);
        this.IsCandidate(source.IsCandidate);
        this.Landlinephone(source.Landlinephone);
        this.LastActionDate(Convert.toDate(source.LastActionDate));
        this.LocationCode(source.LocationCode);
        this.Login(source.Login);
        this.MailAccountName(source.MailAccountName);
        this.NameEng(FioShort.fromJs(source.NameEng));
        this.NameNative(Fio.fromJs(source.NameNative));
        this.NameRussian(Fio.fromJs(source.NameRussian));
        this.NonValidateVirtualProp(Convert.toDate(source.NonValidateVirtualProp));
        this.PersonalCellPhone(source.PersonalCellPhone);
        this.Pin(source.Pin);
        this.PlannedHireDate(Convert.toDate(source.PlannedHireDate));
        this.ValidateVirtualProp(Convert.toDate(source.ValidateVirtualProp));
        this.WorkPeriod(Framework.Core.ObservablePeriod.toPeriod(source.WorkPeriod));
    }

    public identity(): EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id());
    }

    public toJs(): EmployeeSimpleDTO {
        let e = new EmployeeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): EmployeeStrictDTO {
        let e = new EmployeeSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class EmployeeObservableFullDTO extends EmployeeObservableSimpleDTO {
    public __type = 'EmployeeObservableFullDTO';

    private _employeeobservablefulldto: string;

    public CoreBusinessUnit = observable<BusinessUnitObservableSimpleDTO>();

    public HRDepartment = observable<HRDepartmentObservableSimpleDTO>();

    public Location = observable<LocationObservableSimpleDTO>();

    public ManagementUnit = observable<ManagementUnitObservableSimpleDTO>();

    public PersonalAssistant = observable<EmployeeObservableSimpleDTO>();

    public Position = observable<EmployeePositionObservableSimpleDTO>();

    public Ppm = observable<EmployeeObservableSimpleDTO>();

    public RegistrationType = observable<EmployeeRegistrationTypeObservableSimpleDTO>();

    public Role = observable<EmployeeRoleObservableSimpleDTO>();

    public RoleDegree = observable<EmployeeRoleDegreeObservableSimpleDTO>();

    public VacationApprover = observable<EmployeeObservableSimpleDTO>();

    public static fromJs(source: IEmployeeFullDTO): EmployeeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeFullDTO): void {
        super.fromJs(source);
        this.CoreBusinessUnit(BusinessUnitObservableSimpleDTO.fromJs(source.CoreBusinessUnit));
        this.HRDepartment(HRDepartmentObservableSimpleDTO.fromJs(source.HRDepartment));
        this.Location(LocationObservableSimpleDTO.fromJs(source.Location));
        this.ManagementUnit(ManagementUnitObservableSimpleDTO.fromJs(source.ManagementUnit));
        this.PersonalAssistant(EmployeeObservableSimpleDTO.fromJs(source.PersonalAssistant));
        this.Position(EmployeePositionObservableSimpleDTO.fromJs(source.Position));
        this.Ppm(EmployeeObservableSimpleDTO.fromJs(source.Ppm));
        this.RegistrationType(EmployeeRegistrationTypeObservableSimpleDTO.fromJs(source.RegistrationType));
        this.Role(EmployeeRoleObservableSimpleDTO.fromJs(source.Role));
        this.RoleDegree(EmployeeRoleDegreeObservableSimpleDTO.fromJs(source.RoleDegree));
        this.VacationApprover(EmployeeObservableSimpleDTO.fromJs(source.VacationApprover));
    }

    public toJs(): EmployeeFullDTO {
        let e = new EmployeeFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): EmployeeStrictDTO {
        let e = new EmployeeFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class EmployeeAndEmployeeSpecializationLinkObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeAndEmployeeSpecializationLinkObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeAndEmployeeSpecializationLinkObservableIdentityDTO(source.Id);
    }

}

export class EmployeeCellPhoneObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeCellPhoneObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeCellPhoneObservableIdentityDTO(source.Id);
    }

}

export class EmployeeEmailMassChangeModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'EmployeeEmailMassChangeModelObservableSimpleDTO';

    private _employeeemailmasschangemodelobservablesimpledto: string;

    public Email = observable<string>();

    public static fromJs(source: IEmployeeEmailMassChangeModelSimpleDTO): EmployeeEmailMassChangeModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeEmailMassChangeModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeEmailMassChangeModelSimpleDTO): void {
        super.fromJs(source);
        this.Email(source.Email);
    }

    public toJs(): EmployeeEmailMassChangeModelSimpleDTO {
        let e = new EmployeeEmailMassChangeModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class EmployeeEmailMassChangeModelObservableFullDTO extends EmployeeEmailMassChangeModelObservableSimpleDTO {
    public __type = 'EmployeeEmailMassChangeModelObservableFullDTO';

    private _employeeemailmasschangemodelobservablefulldto: string;

    public static fromJs(source: IEmployeeEmailMassChangeModelFullDTO): EmployeeEmailMassChangeModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeEmailMassChangeModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeEmailMassChangeModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeEmailMassChangeModelFullDTO {
        let e = new EmployeeEmailMassChangeModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class EmployeeEmailMassChangeModelObservableRichDTO extends EmployeeEmailMassChangeModelObservableFullDTO {
    public __type = 'EmployeeEmailMassChangeModelObservableRichDTO';

    private _employeeemailmasschangemodelobservablerichdto: string;

    public ChangingObjects = observableArray<EmployeeObservableSimpleDTO>();

    public static fromJs(source: IEmployeeEmailMassChangeModelRichDTO): EmployeeEmailMassChangeModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeEmailMassChangeModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeEmailMassChangeModelRichDTO): void {
        super.fromJs(source);
        if (source.ChangingObjects) {
            this.ChangingObjects(source.ChangingObjects.map(e => {
                    return EmployeeObservableSimpleDTO.fromJs(e);
                }));
        }
    }

    public toJs(): EmployeeEmailMassChangeModelRichDTO {
        let e = new EmployeeEmailMassChangeModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class EmployeeInformationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeInformationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeInformationObservableIdentityDTO(source.Id);
    }

}

export class EmployeeInformationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeeInformationObservableSimpleDTO';

    private _employeeinformationobservablesimpledto: string;

    public Email = observable<string>();

    public Name = observable<string>();

    public PersonalEmail = observable<string>();

    public static fromJs(source: IEmployeeInformationSimpleDTO): EmployeeInformationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeInformationSimpleDTO): void {
        super.fromJs(source);
        this.Email(source.Email);
        this.Name(source.Name);
        this.PersonalEmail(source.PersonalEmail);
    }

    public identity(): EmployeeInformationIdentityDTO {
        return new EmployeeInformationIdentityDTO(this.Id());
    }

    public toJs(): EmployeeInformationSimpleDTO {
        let e = new EmployeeInformationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeInformationObservableFullDTO extends EmployeeInformationObservableSimpleDTO {
    public __type = 'EmployeeInformationObservableFullDTO';

    private _employeeinformationobservablefulldto: string;

    public static fromJs(source: IEmployeeInformationFullDTO): EmployeeInformationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeInformationFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeInformationFullDTO {
        let e = new EmployeeInformationFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeInformationObservableRichDTO extends EmployeeInformationObservableFullDTO {
    public __type = 'EmployeeInformationObservableRichDTO';

    private _employeeinformationobservablerichdto: string;

    public static fromJs(source: IEmployeeInformationRichDTO): EmployeeInformationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeInformationRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeInformationRichDTO {
        let e = new EmployeeInformationRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeInformationObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'EmployeeInformationObservableVisualDTO';

    private _employeeinformationobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeInformationObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeInformationIdentityDTO {
        return new EmployeeInformationIdentityDTO(this.Id());
    }

    public toJs(): EmployeeInformationVisualDTO {
        let e = new EmployeeInformationVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePersonalCellPhoneObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeePersonalCellPhoneObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeePersonalCellPhoneObservableIdentityDTO(source.Id);
    }

}

export class EmployeePhotoObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeePhotoObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeePhotoObservableIdentityDTO(source.Id);
    }

}

export class EmployeePhotoObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeePhotoObservableSimpleDTO';

    private _employeephotoobservablesimpledto: string;

    public ContentType = observable<string>();

    public IsDefault = observable<boolean>(false);

    public Type = observable<EmployeePhotoType>();

    public static fromJs(source: IEmployeePhotoSimpleDTO): EmployeePhotoObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePhotoObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePhotoSimpleDTO): void {
        super.fromJs(source);
        this.ContentType(source.ContentType);
        this.IsDefault(source.IsDefault);
        this.Type(source.Type);
    }

    public identity(): EmployeePhotoIdentityDTO {
        return new EmployeePhotoIdentityDTO(this.Id());
    }

    public toJs(): EmployeePhotoSimpleDTO {
        let e = new EmployeePhotoSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePhotoObservableFullDTO extends EmployeePhotoObservableSimpleDTO {
    public __type = 'EmployeePhotoObservableFullDTO';

    private _employeephotoobservablefulldto: string;

    public Employee = observable<EmployeeObservableSimpleDTO>();

    public static fromJs(source: IEmployeePhotoFullDTO): EmployeePhotoObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePhotoObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePhotoFullDTO): void {
        super.fromJs(source);
        this.Employee(EmployeeObservableSimpleDTO.fromJs(source.Employee));
    }

    public toJs(): EmployeePhotoFullDTO {
        let e = new EmployeePhotoFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePhotoObservableRichDTO extends EmployeePhotoObservableFullDTO {
    public __type = 'EmployeePhotoObservableRichDTO';

    private _employeephotoobservablerichdto: string;

    public Data = observableArray<number>();

    public static fromJs(source: IEmployeePhotoRichDTO): EmployeePhotoObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePhotoObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePhotoRichDTO): void {
        super.fromJs(source);
        if (source.Data) {
            this.Data(source.Data.map(e => {
                    return e;
                }));
        }
    }

    public toJs(): EmployeePhotoRichDTO {
        let e = new EmployeePhotoRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePositionObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeePositionObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeePositionObservableIdentityDTO(source.Id);
    }

}

export class EmployeePositionObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeePositionObservableSimpleDTO';

    private _employeepositionobservablesimpledto: string;

    public EnglishName = observable<string>();

    public ExternalId = observable<number>();

    public Name = observable<string>();

    public static fromJs(source: IEmployeePositionSimpleDTO): EmployeePositionObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePositionSimpleDTO): void {
        super.fromJs(source);
        this.EnglishName(source.EnglishName);
        this.ExternalId(source.ExternalId);
        this.Name(source.Name);
    }

    public identity(): EmployeePositionIdentityDTO {
        return new EmployeePositionIdentityDTO(this.Id());
    }

    public toJs(): EmployeePositionSimpleDTO {
        let e = new EmployeePositionSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePositionObservableFullDTO extends EmployeePositionObservableSimpleDTO {
    public __type = 'EmployeePositionObservableFullDTO';

    private _employeepositionobservablefulldto: string;

    public Location = observable<LocationObservableSimpleDTO>();

    public static fromJs(source: IEmployeePositionFullDTO): EmployeePositionObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePositionFullDTO): void {
        super.fromJs(source);
        this.Location(LocationObservableSimpleDTO.fromJs(source.Location));
    }

    public toJs(): EmployeePositionFullDTO {
        let e = new EmployeePositionFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePositionObservableRichDTO extends EmployeePositionObservableFullDTO {
    public __type = 'EmployeePositionObservableRichDTO';

    private _employeepositionobservablerichdto: string;

    public static fromJs(source: IEmployeePositionRichDTO): EmployeePositionObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePositionRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeePositionRichDTO {
        let e = new EmployeePositionRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeePositionObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'EmployeePositionObservableVisualDTO';

    private _employeepositionobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeePositionObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeePositionIdentityDTO {
        return new EmployeePositionIdentityDTO(this.Id());
    }

    public toJs(): EmployeePositionVisualDTO {
        let e = new EmployeePositionVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRegistrationTypeObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeRegistrationTypeObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeRegistrationTypeObservableIdentityDTO(source.Id);
    }

}

export class EmployeeRegistrationTypeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeeRegistrationTypeObservableSimpleDTO';

    private _employeeregistrationtypeobservablesimpledto: string;

    public ExternalId = observable<number>();

    public Name = observable<string>();

    public static fromJs(source: IEmployeeRegistrationTypeSimpleDTO): EmployeeRegistrationTypeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRegistrationTypeSimpleDTO): void {
        super.fromJs(source);
        this.ExternalId(source.ExternalId);
        this.Name(source.Name);
    }

    public identity(): EmployeeRegistrationTypeIdentityDTO {
        return new EmployeeRegistrationTypeIdentityDTO(this.Id());
    }

    public toJs(): EmployeeRegistrationTypeSimpleDTO {
        let e = new EmployeeRegistrationTypeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRegistrationTypeObservableFullDTO extends EmployeeRegistrationTypeObservableSimpleDTO {
    public __type = 'EmployeeRegistrationTypeObservableFullDTO';

    private _employeeregistrationtypeobservablefulldto: string;

    public static fromJs(source: IEmployeeRegistrationTypeFullDTO): EmployeeRegistrationTypeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRegistrationTypeFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeRegistrationTypeFullDTO {
        let e = new EmployeeRegistrationTypeFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRegistrationTypeObservableRichDTO extends EmployeeRegistrationTypeObservableFullDTO {
    public __type = 'EmployeeRegistrationTypeObservableRichDTO';

    private _employeeregistrationtypeobservablerichdto: string;

    public static fromJs(source: IEmployeeRegistrationTypeRichDTO): EmployeeRegistrationTypeObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRegistrationTypeRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeRegistrationTypeRichDTO {
        let e = new EmployeeRegistrationTypeRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRegistrationTypeObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'EmployeeRegistrationTypeObservableVisualDTO';

    private _employeeregistrationtypeobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeRegistrationTypeObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeRegistrationTypeIdentityDTO {
        return new EmployeeRegistrationTypeIdentityDTO(this.Id());
    }

    public toJs(): EmployeeRegistrationTypeVisualDTO {
        let e = new EmployeeRegistrationTypeVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeRoleObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeRoleObservableIdentityDTO(source.Id);
    }

}

export class EmployeeRoleObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeeRoleObservableSimpleDTO';

    private _employeeroleobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IEmployeeRoleSimpleDTO): EmployeeRoleObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeRoleIdentityDTO {
        return new EmployeeRoleIdentityDTO(this.Id());
    }

    public toJs(): EmployeeRoleSimpleDTO {
        let e = new EmployeeRoleSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleObservableFullDTO extends EmployeeRoleObservableSimpleDTO {
    public __type = 'EmployeeRoleObservableFullDTO';

    private _employeeroleobservablefulldto: string;

    public static fromJs(source: IEmployeeRoleFullDTO): EmployeeRoleObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeRoleFullDTO {
        let e = new EmployeeRoleFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleObservableRichDTO extends EmployeeRoleObservableFullDTO {
    public __type = 'EmployeeRoleObservableRichDTO';

    private _employeeroleobservablerichdto: string;

    public static fromJs(source: IEmployeeRoleRichDTO): EmployeeRoleObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeRoleRichDTO {
        let e = new EmployeeRoleRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'EmployeeRoleObservableVisualDTO';

    private _employeeroleobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeRoleObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeRoleIdentityDTO {
        return new EmployeeRoleIdentityDTO(this.Id());
    }

    public toJs(): EmployeeRoleVisualDTO {
        let e = new EmployeeRoleVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleDegreeObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeRoleDegreeObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeRoleDegreeObservableIdentityDTO(source.Id);
    }

}

export class EmployeeRoleDegreeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeeRoleDegreeObservableSimpleDTO';

    private _employeeroledegreeobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IEmployeeRoleDegreeSimpleDTO): EmployeeRoleDegreeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleDegreeSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeRoleDegreeIdentityDTO {
        return new EmployeeRoleDegreeIdentityDTO(this.Id());
    }

    public toJs(): EmployeeRoleDegreeSimpleDTO {
        let e = new EmployeeRoleDegreeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleDegreeObservableFullDTO extends EmployeeRoleDegreeObservableSimpleDTO {
    public __type = 'EmployeeRoleDegreeObservableFullDTO';

    private _employeeroledegreeobservablefulldto: string;

    public static fromJs(source: IEmployeeRoleDegreeFullDTO): EmployeeRoleDegreeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleDegreeFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeRoleDegreeFullDTO {
        let e = new EmployeeRoleDegreeFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleDegreeObservableRichDTO extends EmployeeRoleDegreeObservableFullDTO {
    public __type = 'EmployeeRoleDegreeObservableRichDTO';

    private _employeeroledegreeobservablerichdto: string;

    public static fromJs(source: IEmployeeRoleDegreeRichDTO): EmployeeRoleDegreeObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleDegreeRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeRoleDegreeRichDTO {
        let e = new EmployeeRoleDegreeRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeRoleDegreeObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'EmployeeRoleDegreeObservableVisualDTO';

    private _employeeroledegreeobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeRoleDegreeObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeRoleDegreeIdentityDTO {
        return new EmployeeRoleDegreeIdentityDTO(this.Id());
    }

    public toJs(): EmployeeRoleDegreeVisualDTO {
        let e = new EmployeeRoleDegreeVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeSpecializationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeSpecializationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeSpecializationObservableIdentityDTO(source.Id);
    }

}

export class EmployeeSpecializationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'EmployeeSpecializationObservableSimpleDTO';

    private _employeespecializationobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IEmployeeSpecializationSimpleDTO): EmployeeSpecializationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSpecializationSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeSpecializationIdentityDTO {
        return new EmployeeSpecializationIdentityDTO(this.Id());
    }

    public toJs(): EmployeeSpecializationSimpleDTO {
        let e = new EmployeeSpecializationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeSpecializationObservableFullDTO extends EmployeeSpecializationObservableSimpleDTO {
    public __type = 'EmployeeSpecializationObservableFullDTO';

    private _employeespecializationobservablefulldto: string;

    public static fromJs(source: IEmployeeSpecializationFullDTO): EmployeeSpecializationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSpecializationFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeSpecializationFullDTO {
        let e = new EmployeeSpecializationFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeSpecializationObservableRichDTO extends EmployeeSpecializationObservableFullDTO {
    public __type = 'EmployeeSpecializationObservableRichDTO';

    private _employeespecializationobservablerichdto: string;

    public static fromJs(source: IEmployeeSpecializationRichDTO): EmployeeSpecializationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSpecializationRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): EmployeeSpecializationRichDTO {
        let e = new EmployeeSpecializationRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeSpecializationObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'EmployeeSpecializationObservableVisualDTO';

    private _employeespecializationobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeSpecializationObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): EmployeeSpecializationIdentityDTO {
        return new EmployeeSpecializationIdentityDTO(this.Id());
    }

    public toJs(): EmployeeSpecializationVisualDTO {
        let e = new EmployeeSpecializationVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class EmployeeToEmployeeLinkObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): EmployeeToEmployeeLinkObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new EmployeeToEmployeeLinkObservableIdentityDTO(source.Id);
    }

}

export class Location1676ObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): Location1676ObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new Location1676ObservableIdentityDTO(source.Id);
    }

}

export class Location1676ObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'Location1676ObservableSimpleDTO';

    private _location1676observablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ILocation1676SimpleDTO): Location1676ObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676ObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocation1676SimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): Location1676IdentityDTO {
        return new Location1676IdentityDTO(this.Id());
    }

    public toJs(): Location1676SimpleDTO {
        let e = new Location1676SimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class Location1676ObservableFullDTO extends Location1676ObservableSimpleDTO {
    public __type = 'Location1676ObservableFullDTO';

    private _location1676observablefulldto: string;

    public static fromJs(source: ILocation1676FullDTO): Location1676ObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676ObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocation1676FullDTO): void {
        super.fromJs(source);
    }

    public toJs(): Location1676FullDTO {
        let e = new Location1676FullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class Location1676ObservableRichDTO extends Location1676ObservableFullDTO {
    public __type = 'Location1676ObservableRichDTO';

    private _location1676observablerichdto: string;

    public Calendar = observableArray<WorkingCalendar1676ObservableRichDTO>();

    public static fromJs(source: ILocation1676RichDTO): Location1676ObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676ObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocation1676RichDTO): void {
        super.fromJs(source);
        if (source.Calendar) {
            this.Calendar(source.Calendar.map(e => {
                    return WorkingCalendar1676ObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): Location1676RichDTO {
        let e = new Location1676RichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class Location1676ObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'Location1676ObservableVisualDTO';

    private _location1676observablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): Location1676ObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676ObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): Location1676IdentityDTO {
        return new Location1676IdentityDTO(this.Id());
    }

    public toJs(): Location1676VisualDTO {
        let e = new Location1676VisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class WorkingCalendar1676ObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): WorkingCalendar1676ObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new WorkingCalendar1676ObservableIdentityDTO(source.Id);
    }

}

export class WorkingCalendar1676ObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'WorkingCalendar1676ObservableSimpleDTO';

    private _workingcalendar1676observablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IWorkingCalendar1676SimpleDTO): WorkingCalendar1676ObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676ObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IWorkingCalendar1676SimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): WorkingCalendar1676IdentityDTO {
        return new WorkingCalendar1676IdentityDTO(this.Id());
    }

    public toJs(): WorkingCalendar1676SimpleDTO {
        let e = new WorkingCalendar1676SimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class WorkingCalendar1676ObservableFullDTO extends WorkingCalendar1676ObservableSimpleDTO {
    public __type = 'WorkingCalendar1676ObservableFullDTO';

    private _workingcalendar1676observablefulldto: string;

    public Location = observable<Location1676ObservableSimpleDTO>();

    public static fromJs(source: IWorkingCalendar1676FullDTO): WorkingCalendar1676ObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676ObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IWorkingCalendar1676FullDTO): void {
        super.fromJs(source);
        this.Location(Location1676ObservableSimpleDTO.fromJs(source.Location));
    }

    public toJs(): WorkingCalendar1676FullDTO {
        let e = new WorkingCalendar1676FullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class WorkingCalendar1676ObservableRichDTO extends WorkingCalendar1676ObservableFullDTO {
    public __type = 'WorkingCalendar1676ObservableRichDTO';

    private _workingcalendar1676observablerichdto: string;

    public static fromJs(source: IWorkingCalendar1676RichDTO): WorkingCalendar1676ObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676ObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IWorkingCalendar1676RichDTO): void {
        super.fromJs(source);
    }

    public toJs(): WorkingCalendar1676RichDTO {
        let e = new WorkingCalendar1676RichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class WorkingCalendar1676ObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'WorkingCalendar1676ObservableVisualDTO';

    private _workingcalendar1676observablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): WorkingCalendar1676ObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676ObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): WorkingCalendar1676IdentityDTO {
        return new WorkingCalendar1676IdentityDTO(this.Id());
    }

    public toJs(): WorkingCalendar1676VisualDTO {
        let e = new WorkingCalendar1676VisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class Example1ObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): Example1ObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new Example1ObservableIdentityDTO(source.Id);
    }

}

export class Example1ObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'Example1ObservableSimpleDTO';

    private _example1observablesimpledto: string;

    public Field1 = observable<Guid>();

    public Field2 = observable<Guid>();

    public Field3 = observable<Guid>();

    public static fromJs(source: IExample1SimpleDTO): Example1ObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example1ObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample1SimpleDTO): void {
        super.fromJs(source);
        this.Field1(source.Field1);
        this.Field2(source.Field2);
        this.Field3(source.Field3);
    }

    public identity(): Example1IdentityDTO {
        return new Example1IdentityDTO(this.Id());
    }

    public toJs(): Example1SimpleDTO {
        let e = new Example1SimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): Example1StrictDTO {
        let e = new Example1SimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class Example1ObservableFullDTO extends Example1ObservableSimpleDTO {
    public __type = 'Example1ObservableFullDTO';

    private _example1observablefulldto: string;

    public static fromJs(source: IExample1FullDTO): Example1ObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example1ObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample1FullDTO): void {
        super.fromJs(source);
    }

    public toJs(): Example1FullDTO {
        let e = new Example1FullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): Example1StrictDTO {
        let e = new Example1FullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class Example1ObservableRichDTO extends Example1ObservableFullDTO {
    public __type = 'Example1ObservableRichDTO';

    private _example1observablerichdto: string;

    public Items2 = observableArray<Example2ObservableRichDTO>();

    public static fromJs(source: IExample1RichDTO): Example1ObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example1ObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample1RichDTO): void {
        super.fromJs(source);
        if (source.Items2) {
            this.Items2(source.Items2.map(e => {
                    return Example2ObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): Example1RichDTO {
        let e = new Example1RichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): Example1StrictDTO {
        let e = new Example1RichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class Example2ObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): Example2ObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new Example2ObservableIdentityDTO(source.Id);
    }

}

export class Example2ObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'Example2ObservableSimpleDTO';

    private _example2observablesimpledto: string;

    public Field1 = observable<Guid>();

    public Field2 = observable<Guid>();

    public static fromJs(source: IExample2SimpleDTO): Example2ObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example2ObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample2SimpleDTO): void {
        super.fromJs(source);
        this.Field1(source.Field1);
        this.Field2(source.Field2);
    }

    public identity(): Example2IdentityDTO {
        return new Example2IdentityDTO(this.Id());
    }

    public toJs(): Example2SimpleDTO {
        let e = new Example2SimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): Example2StrictDTO {
        let e = new Example2SimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class Example2ObservableFullDTO extends Example2ObservableSimpleDTO {
    public __type = 'Example2ObservableFullDTO';

    private _example2observablefulldto: string;

    public Parent = observable<Example1ObservableSimpleDTO>();

    public static fromJs(source: IExample2FullDTO): Example2ObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example2ObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample2FullDTO): void {
        super.fromJs(source);
        this.Parent(Example1ObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): Example2FullDTO {
        let e = new Example2FullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): Example2StrictDTO {
        let e = new Example2FullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class Example2ObservableRichDTO extends Example2ObservableFullDTO {
    public __type = 'Example2ObservableRichDTO';

    private _example2observablerichdto: string;

    public static fromJs(source: IExample2RichDTO): Example2ObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example2ObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample2RichDTO): void {
        super.fromJs(source);
    }

    public toJs(): Example2RichDTO {
        let e = new Example2RichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): Example2StrictDTO {
        let e = new Example2RichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): HRDepartmentObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new HRDepartmentObservableIdentityDTO(source.Id);
    }

}

export class HRDepartmentObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'HRDepartmentObservableSimpleDTO';

    private _hrdepartmentobservablesimpledto: string;

    public Code = observable<string>();

    public CodeNative = observable<string>();

    public CompanyLegalEntityName = observable<string>();

    public ExternalId = observable<number>();

    public IsLegal = observable<boolean>(false);

    public IsProduction = observable<boolean>(false);

    public LocationName = observable<string>();

    public Name = observable<string>();

    public NameNative = observable<string>();

    public static fromJs(source: IHRDepartmentSimpleDTO): HRDepartmentObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentSimpleDTO): void {
        super.fromJs(source);
        this.Code(source.Code);
        this.CodeNative(source.CodeNative);
        this.CompanyLegalEntityName(source.CompanyLegalEntityName);
        this.ExternalId(source.ExternalId);
        this.IsLegal(source.IsLegal);
        this.IsProduction(source.IsProduction);
        this.LocationName(source.LocationName);
        this.Name(source.Name);
        this.NameNative(source.NameNative);
    }

    public identity(): HRDepartmentIdentityDTO {
        return new HRDepartmentIdentityDTO(this.Id());
    }

    public toJs(): HRDepartmentSimpleDTO {
        let e = new HRDepartmentSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentStrictDTO {
        let e = new HRDepartmentSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentObservableFullDTO extends HRDepartmentObservableSimpleDTO {
    public __type = 'HRDepartmentObservableFullDTO';

    private _hrdepartmentobservablefulldto: string;

    public ApprovedBy = observable<EmployeeObservableSimpleDTO>();

    public CompanyLegalEntity = observable<CompanyLegalEntityObservableSimpleDTO>();

    public Head = observable<EmployeeObservableSimpleDTO>();

    public Location = observable<LocationObservableSimpleDTO>();

    public Parent = observable<HRDepartmentObservableSimpleDTO>();

    public static fromJs(source: IHRDepartmentFullDTO): HRDepartmentObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentFullDTO): void {
        super.fromJs(source);
        this.ApprovedBy(EmployeeObservableSimpleDTO.fromJs(source.ApprovedBy));
        this.CompanyLegalEntity(CompanyLegalEntityObservableSimpleDTO.fromJs(source.CompanyLegalEntity));
        this.Head(EmployeeObservableSimpleDTO.fromJs(source.Head));
        this.Location(LocationObservableSimpleDTO.fromJs(source.Location));
        this.Parent(HRDepartmentObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): HRDepartmentFullDTO {
        let e = new HRDepartmentFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentStrictDTO {
        let e = new HRDepartmentFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentObservableRichDTO extends HRDepartmentObservableFullDTO {
    public __type = 'HRDepartmentObservableRichDTO';

    private _hrdepartmentobservablerichdto: string;

    public BusinessUnitHrDepartments = observableArray<BusinessUnitHrDepartmentObservableRichDTO>();

    public Children = observableArray<HRDepartmentObservableRichDTO>();

    public EmployeePositions = observableArray<HRDepartmentEmployeePositionObservableRichDTO>();

    public HrDepartmentRoleEmployees = observableArray<HRDepartmentRoleEmployeeObservableRichDTO>();

    public ManagementUnits = observableArray<ManagementUnitAndHRDepartmentLinkObservableRichDTO>();

    public static fromJs(source: IHRDepartmentRichDTO): HRDepartmentObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRichDTO): void {
        super.fromJs(source);
        if (source.BusinessUnitHrDepartments) {
            this.BusinessUnitHrDepartments(source.BusinessUnitHrDepartments.map(e => {
                    return BusinessUnitHrDepartmentObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Children) {
            this.Children(source.Children.map(e => {
                    return HRDepartmentObservableRichDTO.fromJs(e);
                }));
        }
        if (source.EmployeePositions) {
            this.EmployeePositions(source.EmployeePositions.map(e => {
                    return HRDepartmentEmployeePositionObservableRichDTO.fromJs(e);
                }));
        }
        if (source.HrDepartmentRoleEmployees) {
            this.HrDepartmentRoleEmployees(source.HrDepartmentRoleEmployees.map(e => {
                    return HRDepartmentRoleEmployeeObservableRichDTO.fromJs(e);
                }));
        }
        if (source.ManagementUnits) {
            this.ManagementUnits(source.ManagementUnits.map(e => {
                    return ManagementUnitAndHRDepartmentLinkObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): HRDepartmentRichDTO {
        let e = new HRDepartmentRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentStrictDTO {
        let e = new HRDepartmentRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'HRDepartmentObservableVisualDTO';

    private _hrdepartmentobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): HRDepartmentObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): HRDepartmentIdentityDTO {
        return new HRDepartmentIdentityDTO(this.Id());
    }

    public toJs(): HRDepartmentVisualDTO {
        let e = new HRDepartmentVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class HRDepartmentEmployeePositionObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'HRDepartmentEmployeePositionObservableSimpleDTO';

    private _hrdepartmentemployeepositionobservablesimpledto: string;

    public static fromJs(source: IHRDepartmentEmployeePositionSimpleDTO): HRDepartmentEmployeePositionObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentEmployeePositionObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentEmployeePositionSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): HRDepartmentEmployeePositionSimpleDTO {
        let e = new HRDepartmentEmployeePositionSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentEmployeePositionObservableFullDTO extends HRDepartmentEmployeePositionObservableSimpleDTO {
    public __type = 'HRDepartmentEmployeePositionObservableFullDTO';

    private _hrdepartmentemployeepositionobservablefulldto: string;

    public EmployeePosition = observable<EmployeePositionObservableSimpleDTO>();

    public HrDepartment = observable<HRDepartmentObservableSimpleDTO>();

    public static fromJs(source: IHRDepartmentEmployeePositionFullDTO): HRDepartmentEmployeePositionObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentEmployeePositionObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentEmployeePositionFullDTO): void {
        super.fromJs(source);
        this.EmployeePosition(EmployeePositionObservableSimpleDTO.fromJs(source.EmployeePosition));
        this.HrDepartment(HRDepartmentObservableSimpleDTO.fromJs(source.HrDepartment));
    }

    public toJs(): HRDepartmentEmployeePositionFullDTO {
        let e = new HRDepartmentEmployeePositionFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentEmployeePositionObservableRichDTO extends HRDepartmentEmployeePositionObservableFullDTO {
    public __type = 'HRDepartmentEmployeePositionObservableRichDTO';

    private _hrdepartmentemployeepositionobservablerichdto: string;

    public static fromJs(source: IHRDepartmentEmployeePositionRichDTO): HRDepartmentEmployeePositionObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentEmployeePositionObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentEmployeePositionRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): HRDepartmentEmployeePositionRichDTO {
        let e = new HRDepartmentEmployeePositionRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentRoleEmployeeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'HRDepartmentRoleEmployeeObservableSimpleDTO';

    private _hrdepartmentroleemployeeobservablesimpledto: string;

    public HRDepartmentEmployeeRoleType = observable<HRDepartmentEmployeeRoleType>();

    public static fromJs(source: IHRDepartmentRoleEmployeeSimpleDTO): HRDepartmentRoleEmployeeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRoleEmployeeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRoleEmployeeSimpleDTO): void {
        super.fromJs(source);
        this.HRDepartmentEmployeeRoleType(source.HRDepartmentEmployeeRoleType);
    }

    public toJs(): HRDepartmentRoleEmployeeSimpleDTO {
        let e = new HRDepartmentRoleEmployeeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentRoleEmployeeObservableFullDTO extends HRDepartmentRoleEmployeeObservableSimpleDTO {
    public __type = 'HRDepartmentRoleEmployeeObservableFullDTO';

    private _hrdepartmentroleemployeeobservablefulldto: string;

    public Employee = observable<EmployeeObservableSimpleDTO>();

    public HRDepartment = observable<HRDepartmentObservableSimpleDTO>();

    public static fromJs(source: IHRDepartmentRoleEmployeeFullDTO): HRDepartmentRoleEmployeeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRoleEmployeeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRoleEmployeeFullDTO): void {
        super.fromJs(source);
        this.Employee(EmployeeObservableSimpleDTO.fromJs(source.Employee));
        this.HRDepartment(HRDepartmentObservableSimpleDTO.fromJs(source.HRDepartment));
    }

    public toJs(): HRDepartmentRoleEmployeeFullDTO {
        let e = new HRDepartmentRoleEmployeeFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class HRDepartmentRoleEmployeeObservableRichDTO extends HRDepartmentRoleEmployeeObservableFullDTO {
    public __type = 'HRDepartmentRoleEmployeeObservableRichDTO';

    private _hrdepartmentroleemployeeobservablerichdto: string;

    public static fromJs(source: IHRDepartmentRoleEmployeeRichDTO): HRDepartmentRoleEmployeeObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRoleEmployeeObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRoleEmployeeRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): HRDepartmentRoleEmployeeRichDTO {
        let e = new HRDepartmentRoleEmployeeRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class IMRequestObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): IMRequestObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new IMRequestObservableIdentityDTO(source.Id);
    }

}

export class IMRequestObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'IMRequestObservableSimpleDTO';

    private _imrequestobservablesimpledto: string;

    public Email = observable<string>();

    public Message = observable<string>();

    public Name = observable<string>();

    public static fromJs(source: IIMRequestSimpleDTO): IMRequestObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestSimpleDTO): void {
        super.fromJs(source);
        this.Email(source.Email);
        this.Message(source.Message);
        this.Name(source.Name);
    }

    public identity(): IMRequestIdentityDTO {
        return new IMRequestIdentityDTO(this.Id());
    }

    public toJs(): IMRequestSimpleDTO {
        let e = new IMRequestSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class IMRequestObservableFullDTO extends IMRequestObservableSimpleDTO {
    public __type = 'IMRequestObservableFullDTO';

    private _imrequestobservablefulldto: string;

    public static fromJs(source: IIMRequestFullDTO): IMRequestObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): IMRequestFullDTO {
        let e = new IMRequestFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class IMRequestObservableRichDTO extends IMRequestObservableFullDTO {
    public __type = 'IMRequestObservableRichDTO';

    private _imrequestobservablerichdto: string;

    public OneToOneDetail = observable<IMRequestDetailObservableRichDTO>();

    public static fromJs(source: IIMRequestRichDTO): IMRequestObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestRichDTO): void {
        super.fromJs(source);
        this.OneToOneDetail(IMRequestDetailObservableRichDTO.fromJs(source.OneToOneDetail));
    }

    public toJs(): IMRequestRichDTO {
        let e = new IMRequestRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class IMRequestObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'IMRequestObservableVisualDTO';

    private _imrequestobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): IMRequestObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): IMRequestIdentityDTO {
        return new IMRequestIdentityDTO(this.Id());
    }

    public toJs(): IMRequestVisualDTO {
        let e = new IMRequestVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class IMRequestDetailObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'IMRequestDetailObservableSimpleDTO';

    private _imrequestdetailobservablesimpledto: string;

    public static fromJs(source: IIMRequestDetailSimpleDTO): IMRequestDetailObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestDetailObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestDetailSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): IMRequestDetailSimpleDTO {
        let e = new IMRequestDetailSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class IMRequestDetailObservableFullDTO extends IMRequestDetailObservableSimpleDTO {
    public __type = 'IMRequestDetailObservableFullDTO';

    private _imrequestdetailobservablefulldto: string;

    public Request = observable<IMRequestObservableSimpleDTO>();

    public static fromJs(source: IIMRequestDetailFullDTO): IMRequestDetailObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestDetailObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestDetailFullDTO): void {
        super.fromJs(source);
        this.Request(IMRequestObservableSimpleDTO.fromJs(source.Request));
    }

    public toJs(): IMRequestDetailFullDTO {
        let e = new IMRequestDetailFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class IMRequestDetailObservableRichDTO extends IMRequestDetailObservableFullDTO {
    public __type = 'IMRequestDetailObservableRichDTO';

    private _imrequestdetailobservablerichdto: string;

    public static fromJs(source: IIMRequestDetailRichDTO): IMRequestDetailObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestDetailObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestDetailRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): IMRequestDetailRichDTO {
        let e = new IMRequestDetailRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class InformationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): InformationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new InformationObservableIdentityDTO(source.Id);
    }

}

export class InformationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'InformationObservableSimpleDTO';

    private _informationobservablesimpledto: string;

    public Email = observable<string>();

    public Name = observable<string>();

    public static fromJs(source: IInformationSimpleDTO): InformationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IInformationSimpleDTO): void {
        super.fromJs(source);
        this.Email(source.Email);
        this.Name(source.Name);
    }

    public identity(): InformationIdentityDTO {
        return new InformationIdentityDTO(this.Id());
    }

    public toJs(): InformationSimpleDTO {
        let e = new InformationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class InformationObservableFullDTO extends InformationObservableSimpleDTO {
    public __type = 'InformationObservableFullDTO';

    private _informationobservablefulldto: string;

    public static fromJs(source: IInformationFullDTO): InformationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IInformationFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): InformationFullDTO {
        let e = new InformationFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class InformationObservableRichDTO extends InformationObservableFullDTO {
    public __type = 'InformationObservableRichDTO';

    private _informationobservablerichdto: string;

    public static fromJs(source: IInformationRichDTO): InformationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IInformationRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): InformationRichDTO {
        let e = new InformationRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class InformationObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'InformationObservableVisualDTO';

    private _informationobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): InformationObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): InformationIdentityDTO {
        return new InformationIdentityDTO(this.Id());
    }

    public toJs(): InformationVisualDTO {
        let e = new InformationVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class LegalEntityBaseObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'LegalEntityBaseObservableSimpleDTO';

    private _legalentitybaseobservablesimpledto: string;

    public AribaStatus = observable<RevenueDocumentAribaStatus>();

    public Name = observable<string>();

    public NameEnglish = observable<string>();

    public static fromJs(source: ILegalEntityBaseSimpleDTO): LegalEntityBaseObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LegalEntityBaseObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILegalEntityBaseSimpleDTO): void {
        super.fromJs(source);
        this.AribaStatus(RevenueDocumentAribaStatus.fromJs(source.AribaStatus));
        this.Name(source.Name);
        this.NameEnglish(source.NameEnglish);
    }

    public toJs(): LegalEntityBaseSimpleDTO {
        let e = new LegalEntityBaseSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class LocationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): LocationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new LocationObservableIdentityDTO(source.Id);
    }

}

export class LocationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'LocationObservableSimpleDTO';

    private _locationobservablesimpledto: string;

    public CloseDate = observable<number>();

    public Code = observable<number>();

    public ContainsOnlyInactiveChildren = observable<boolean>(false);

    public IsFinancial = observable<boolean>(false);

    public IsLeaf = observable<boolean>(false);

    public LocationType = observable<LocationType>();

    public Name = observable<string>();

    public static fromJs(source: ILocationSimpleDTO): LocationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocationSimpleDTO): void {
        super.fromJs(source);
        this.CloseDate(source.CloseDate);
        this.Code(source.Code);
        this.ContainsOnlyInactiveChildren(source.ContainsOnlyInactiveChildren);
        this.IsFinancial(source.IsFinancial);
        this.IsLeaf(source.IsLeaf);
        this.LocationType(source.LocationType);
        this.Name(source.Name);
    }

    public identity(): LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id());
    }

    public toJs(): LocationSimpleDTO {
        let e = new LocationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): LocationStrictDTO {
        let e = new LocationSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class LocationObservableFullDTO extends LocationObservableSimpleDTO {
    public __type = 'LocationObservableFullDTO';

    private _locationobservablefulldto: string;

    public Country = observable<CountryObservableSimpleDTO>();

    public Parent = observable<LocationObservableSimpleDTO>();

    public static fromJs(source: ILocationFullDTO): LocationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocationFullDTO): void {
        super.fromJs(source);
        this.Country(CountryObservableSimpleDTO.fromJs(source.Country));
        this.Parent(LocationObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): LocationFullDTO {
        let e = new LocationFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): LocationStrictDTO {
        let e = new LocationFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class LocationObservableRichDTO extends LocationObservableFullDTO {
    public __type = 'LocationObservableRichDTO';

    private _locationobservablerichdto: string;

    public BinaryData = observableArray<number>();

    public Children = observableArray<LocationObservableRichDTO>();

    public static fromJs(source: ILocationRichDTO): LocationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocationRichDTO): void {
        super.fromJs(source);
        if (source.BinaryData) {
            this.BinaryData(source.BinaryData.map(e => {
                    return e;
                }));
        }
        if (source.Children) {
            this.Children(source.Children.map(e => {
                    return LocationObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): LocationRichDTO {
        let e = new LocationRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): LocationStrictDTO {
        let e = new LocationRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class LocationObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'LocationObservableVisualDTO';

    private _locationobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): LocationObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id());
    }

    public toJs(): LocationVisualDTO {
        let e = new LocationVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class ManagementUnitObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ManagementUnitObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ManagementUnitObservableIdentityDTO(source.Id);
    }

}

export class ManagementUnitObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ManagementUnitObservableSimpleDTO';

    private _managementunitobservablesimpledto: string;

    public BusinessUnitStatus = observable<BusinessUnitStatus>();

    public IsProduction = observable<boolean>(false);

    public Name = observable<string>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: IManagementUnitSimpleDTO): ManagementUnitObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitSimpleDTO): void {
        super.fromJs(source);
        this.BusinessUnitStatus(source.BusinessUnitStatus);
        this.IsProduction(source.IsProduction);
        this.Name(source.Name);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
    }

    public identity(): ManagementUnitIdentityDTO {
        return new ManagementUnitIdentityDTO(this.Id());
    }

    public toJs(): ManagementUnitSimpleDTO {
        let e = new ManagementUnitSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitStrictDTO {
        let e = new ManagementUnitSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitObservableFullDTO extends ManagementUnitObservableSimpleDTO {
    public __type = 'ManagementUnitObservableFullDTO';

    private _managementunitobservablefulldto: string;

    public Parent = observable<ManagementUnitObservableSimpleDTO>();

    public static fromJs(source: IManagementUnitFullDTO): ManagementUnitObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitFullDTO): void {
        super.fromJs(source);
        this.Parent(ManagementUnitObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): ManagementUnitFullDTO {
        let e = new ManagementUnitFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitStrictDTO {
        let e = new ManagementUnitFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitObservableRichDTO extends ManagementUnitObservableFullDTO {
    public __type = 'ManagementUnitObservableRichDTO';

    private _managementunitobservablerichdto: string;

    public BusinessUnits = observableArray<ManagementUnitAndBusinessUnitLinkObservableRichDTO>();

    public Children = observableArray<ManagementUnitObservableRichDTO>();

    public HRDepartments = observableArray<ManagementUnitAndHRDepartmentLinkObservableRichDTO>();

    public static fromJs(source: IManagementUnitRichDTO): ManagementUnitObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitRichDTO): void {
        super.fromJs(source);
        if (source.BusinessUnits) {
            this.BusinessUnits(source.BusinessUnits.map(e => {
                    return ManagementUnitAndBusinessUnitLinkObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Children) {
            this.Children(source.Children.map(e => {
                    return ManagementUnitObservableRichDTO.fromJs(e);
                }));
        }
        if (source.HRDepartments) {
            this.HRDepartments(source.HRDepartments.map(e => {
                    return ManagementUnitAndHRDepartmentLinkObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): ManagementUnitRichDTO {
        let e = new ManagementUnitRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitStrictDTO {
        let e = new ManagementUnitRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'ManagementUnitObservableVisualDTO';

    private _managementunitobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): ManagementUnitObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): ManagementUnitIdentityDTO {
        return new ManagementUnitIdentityDTO(this.Id());
    }

    public toJs(): ManagementUnitVisualDTO {
        let e = new ManagementUnitVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class ManagementUnitAndBusinessUnitLinkObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ManagementUnitAndBusinessUnitLinkObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ManagementUnitAndBusinessUnitLinkObservableIdentityDTO(source.Id);
    }

}

export class ManagementUnitAndBusinessUnitLinkObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkObservableSimpleDTO';

    private _managementunitandbusinessunitlinkobservablesimpledto: string;

    public EqualBU = observable<boolean>(false);

    public static fromJs(source: IManagementUnitAndBusinessUnitLinkSimpleDTO): ManagementUnitAndBusinessUnitLinkObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndBusinessUnitLinkObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndBusinessUnitLinkSimpleDTO): void {
        super.fromJs(source);
        this.EqualBU(source.EqualBU);
    }

    public identity(): ManagementUnitAndBusinessUnitLinkIdentityDTO {
        return new ManagementUnitAndBusinessUnitLinkIdentityDTO(this.Id());
    }

    public toJs(): ManagementUnitAndBusinessUnitLinkSimpleDTO {
        let e = new ManagementUnitAndBusinessUnitLinkSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitAndBusinessUnitLinkObservableFullDTO extends ManagementUnitAndBusinessUnitLinkObservableSimpleDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkObservableFullDTO';

    private _managementunitandbusinessunitlinkobservablefulldto: string;

    public BusinessUnit = observable<BusinessUnitObservableSimpleDTO>();

    public ManagementUnit = observable<ManagementUnitObservableSimpleDTO>();

    public static fromJs(source: IManagementUnitAndBusinessUnitLinkFullDTO): ManagementUnitAndBusinessUnitLinkObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndBusinessUnitLinkObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndBusinessUnitLinkFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit(BusinessUnitObservableSimpleDTO.fromJs(source.BusinessUnit));
        this.ManagementUnit(ManagementUnitObservableSimpleDTO.fromJs(source.ManagementUnit));
    }

    public toJs(): ManagementUnitAndBusinessUnitLinkFullDTO {
        let e = new ManagementUnitAndBusinessUnitLinkFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitAndBusinessUnitLinkObservableRichDTO extends ManagementUnitAndBusinessUnitLinkObservableFullDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkObservableRichDTO';

    private _managementunitandbusinessunitlinkobservablerichdto: string;

    public static fromJs(source: IManagementUnitAndBusinessUnitLinkRichDTO): ManagementUnitAndBusinessUnitLinkObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndBusinessUnitLinkObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndBusinessUnitLinkRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ManagementUnitAndBusinessUnitLinkRichDTO {
        let e = new ManagementUnitAndBusinessUnitLinkRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitAndHRDepartmentLinkObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ManagementUnitAndHRDepartmentLinkObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ManagementUnitAndHRDepartmentLinkObservableIdentityDTO(source.Id);
    }

}

export class ManagementUnitAndHRDepartmentLinkObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkObservableSimpleDTO';

    private _managementunitandhrdepartmentlinkobservablesimpledto: string;

    public static fromJs(source: IManagementUnitAndHRDepartmentLinkSimpleDTO): ManagementUnitAndHRDepartmentLinkObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndHRDepartmentLinkObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndHRDepartmentLinkSimpleDTO): void {
        super.fromJs(source);
    }

    public identity(): ManagementUnitAndHRDepartmentLinkIdentityDTO {
        return new ManagementUnitAndHRDepartmentLinkIdentityDTO(this.Id());
    }

    public toJs(): ManagementUnitAndHRDepartmentLinkSimpleDTO {
        let e = new ManagementUnitAndHRDepartmentLinkSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitAndHRDepartmentLinkObservableFullDTO extends ManagementUnitAndHRDepartmentLinkObservableSimpleDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkObservableFullDTO';

    private _managementunitandhrdepartmentlinkobservablefulldto: string;

    public HRDepartment = observable<HRDepartmentObservableSimpleDTO>();

    public ManagementUnit = observable<ManagementUnitObservableSimpleDTO>();

    public static fromJs(source: IManagementUnitAndHRDepartmentLinkFullDTO): ManagementUnitAndHRDepartmentLinkObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndHRDepartmentLinkObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndHRDepartmentLinkFullDTO): void {
        super.fromJs(source);
        this.HRDepartment(HRDepartmentObservableSimpleDTO.fromJs(source.HRDepartment));
        this.ManagementUnit(ManagementUnitObservableSimpleDTO.fromJs(source.ManagementUnit));
    }

    public toJs(): ManagementUnitAndHRDepartmentLinkFullDTO {
        let e = new ManagementUnitAndHRDepartmentLinkFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitAndHRDepartmentLinkObservableRichDTO extends ManagementUnitAndHRDepartmentLinkObservableFullDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkObservableRichDTO';

    private _managementunitandhrdepartmentlinkobservablerichdto: string;

    public static fromJs(source: IManagementUnitAndHRDepartmentLinkRichDTO): ManagementUnitAndHRDepartmentLinkObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndHRDepartmentLinkObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndHRDepartmentLinkRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ManagementUnitAndHRDepartmentLinkRichDTO {
        let e = new ManagementUnitAndHRDepartmentLinkRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ManagementUnitFluentMappingObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ManagementUnitFluentMappingObservableSimpleDTO';

    private _managementunitfluentmappingobservablesimpledto: string;

    public BusinessUnitStatus = observable<BusinessUnitStatus>();

    public IsProduction = observable<boolean>(false);

    public MuComponent = observable<MuComponent>();

    public Name = observable<string>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: IManagementUnitFluentMappingSimpleDTO): ManagementUnitFluentMappingObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitFluentMappingObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitFluentMappingSimpleDTO): void {
        super.fromJs(source);
        this.BusinessUnitStatus(source.BusinessUnitStatus);
        this.IsProduction(source.IsProduction);
        this.MuComponent(MuComponent.fromJs(source.MuComponent));
        this.Name(source.Name);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
    }

    public toJs(): ManagementUnitFluentMappingSimpleDTO {
        let e = new ManagementUnitFluentMappingSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestManualEmployeeObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestManualEmployeeObservableProjectionDTO';

    private _testmanualemployeeobservableprojectiondto: string;

    public Login = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestManualEmployeeObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestManualEmployeeObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Login(source.Login);
    }

    public identity(): EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id());
    }

    public toJs(): TestManualEmployeeProjectionDTO {
        let e = new TestManualEmployeeProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class PrincipalObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): PrincipalObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new PrincipalObservableIdentityDTO(source.Id);
    }

}

export class PrincipalObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'PrincipalObservableSimpleDTO';

    private _principalobservablesimpledto: string;

    public ExternalId = observable<string>();

    public static fromJs(source: IPrincipalSimpleDTO): PrincipalObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalSimpleDTO): void {
        super.fromJs(source);
        this.ExternalId(source.ExternalId);
    }

    public identity(): PrincipalIdentityDTO {
        return new PrincipalIdentityDTO(this.Id());
    }

    public toJs(): PrincipalSimpleDTO {
        let e = new PrincipalSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): PrincipalStrictDTO {
        let e = new PrincipalSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class PrincipalObservableFullDTO extends PrincipalObservableSimpleDTO {
    public __type = 'PrincipalObservableFullDTO';

    private _principalobservablefulldto: string;

    public static fromJs(source: IPrincipalFullDTO): PrincipalObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): PrincipalFullDTO {
        let e = new PrincipalFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): PrincipalStrictDTO {
        let e = new PrincipalFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class PrincipalObservableRichDTO extends PrincipalObservableFullDTO {
    public __type = 'PrincipalObservableRichDTO';

    private _principalobservablerichdto: string;

    public static fromJs(source: IPrincipalRichDTO): PrincipalObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): PrincipalRichDTO {
        let e = new PrincipalRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): PrincipalStrictDTO {
        let e = new PrincipalRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class BusinessUnitIdentityObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'BusinessUnitIdentityObservableProjectionDTO';

    private _businessunitidentityobservableprojectiondto: string;

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitIdentityObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitIdentityObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
    }

    public identity(): BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitIdentityProjectionDTO {
        let e = new BusinessUnitIdentityProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class BusinessUnitProgramClassObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'BusinessUnitProgramClassObservableProjectionDTO';

    private _businessunitprogramclassobservableprojectiondto: string;

    public IsNewBusiness = observable<boolean>(false);

    public Name = observable<string>();

    public VirtualName = observable<string>();

    public VirtualValue = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitProgramClassObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitProgramClassObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.IsNewBusiness(source.IsNewBusiness);
        this.Name(source.Name);
        this.VirtualName(source.VirtualName);
        this.VirtualValue(source.VirtualValue);
    }

    public identity(): BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id());
    }

    public toJs(): BusinessUnitProgramClassProjectionDTO {
        let e = new BusinessUnitProgramClassProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class CustomCompanyLegalEntityObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'CustomCompanyLegalEntityObservableProjectionDTO';

    private _customcompanylegalentityobservableprojectiondto: string;

    public AribaStatusDescription = observable<string>();

    public AribaStatusType = observable<AribaStatusType>();

    public BaseObj = observable<CustomTestObjForNestedObservableProjectionDTO>();

    public Code = observable<string>();

    public CurrentObj = observable<CustomTestObjForNestedObservableProjectionDTO>();

    public Name = observable<string>();

    public NameEnglish = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): CustomCompanyLegalEntityObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CustomCompanyLegalEntityObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.AribaStatusDescription(source.AribaStatusDescription);
        this.AribaStatusType(source.AribaStatusType);
        this.BaseObj(CustomTestObjForNestedObservableProjectionDTO.fromJs(source.BaseObj));
        this.Code(source.Code);
        this.CurrentObj(CustomTestObjForNestedObservableProjectionDTO.fromJs(source.CurrentObj));
        this.Name(source.Name);
        this.NameEnglish(source.NameEnglish);
    }

    public identity(): CompanyLegalEntityIdentityDTO {
        return new CompanyLegalEntityIdentityDTO(this.Id());
    }

    public toJs(): CustomCompanyLegalEntityProjectionDTO {
        let e = new CustomCompanyLegalEntityProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class CustomTestObjForNestedObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'CustomTestObjForNestedObservableProjectionDTO';

    private _customtestobjfornestedobservableprojectiondto: string;

    public Name = observable<string>();

    public PeriodStartDateXXX = observable<Date>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): CustomTestObjForNestedObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CustomTestObjForNestedObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
        this.PeriodStartDateXXX(Convert.toDate(source.PeriodStartDateXXX));
    }

    public identity(): TestObjForNestedIdentityDTO {
        return new TestObjForNestedIdentityDTO(this.Id());
    }

    public toJs(): CustomTestObjForNestedProjectionDTO {
        let e = new CustomTestObjForNestedProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestBusinessUnitObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestBusinessUnitObservableProjectionDTO';

    private _testbusinessunitobservableprojectiondto: string;

    public CalcMatrix = observableArray<string []>();

    public CalcProjectionProp = observable<TestBusinessUnitTypeObservableProjectionDTO>();

    public CalcProp = observable<string>();

    public Employees = observable<string>();

    public HerBusinessUnit_Full = observable<string>();

    public Name = observable<string>();

    public ParentPeriodStartDate = observable<Date>();

    public PeriodEndDate = observable<Date>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestBusinessUnitObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestBusinessUnitObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        if (source.CalcMatrix) {
            this.CalcMatrix(source.CalcMatrix.map(e => {
                    return e.map(x => {
                        return x;
                    });
                }));
        }
        this.CalcProjectionProp(TestBusinessUnitTypeObservableProjectionDTO.fromJs(source.CalcProjectionProp));
        this.CalcProp(source.CalcProp);
        this.Employees(source.Employees);
        this.HerBusinessUnit_Full(source.HerBusinessUnit_Full);
        this.Name(source.Name);
        this.ParentPeriodStartDate(Convert.toDate(source.ParentPeriodStartDate));
        this.PeriodEndDate(Convert.toDate(source.PeriodEndDate));
    }

    public identity(): BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id());
    }

    public toJs(): TestBusinessUnitProjectionDTO {
        let e = new TestBusinessUnitProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestBusinessUnitTypeObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestBusinessUnitTypeObservableProjectionDTO';

    private _testbusinessunittypeobservableprojectiondto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestBusinessUnitTypeObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestBusinessUnitTypeObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): BusinessUnitTypeIdentityDTO {
        return new BusinessUnitTypeIdentityDTO(this.Id());
    }

    public toJs(): TestBusinessUnitTypeProjectionDTO {
        let e = new TestBusinessUnitTypeProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestCustomContextSecurityObjObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestCustomContextSecurityObjObservableProjectionDTO';

    private _testcustomcontextsecurityobjobservableprojectiondto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestCustomContextSecurityObjObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestCustomContextSecurityObjIdentityDTO {
        return new TestCustomContextSecurityObjIdentityDTO(this.Id());
    }

    public toJs(): TestCustomContextSecurityObjProjectionDTO {
        let e = new TestCustomContextSecurityObjProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestDepartmentObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestDepartmentObservableProjectionDTO';

    private _testdepartmentobservableprojectiondto: string;

    public Location = observable<TestLocationObservableProjectionDTO>();

    public LocationBinaryData = observableArray<number>();

    public Name = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestDepartmentObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestDepartmentObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Location(TestLocationObservableProjectionDTO.fromJs(source.Location));
        if (source.LocationBinaryData) {
            this.LocationBinaryData(source.LocationBinaryData.map(e => {
                    return e;
                }));
        }
        this.Name(source.Name);
    }

    public identity(): HRDepartmentIdentityDTO {
        return new HRDepartmentIdentityDTO(this.Id());
    }

    public toJs(): TestDepartmentProjectionDTO {
        let e = new TestDepartmentProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestEmployeeObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestEmployeeObservableProjectionDTO';

    private _testemployeeobservableprojectiondto: string;

    public BuEndDate = observable<Date>();

    public CoreBusinessUnit = observable<BusinessUnitIdentityObservableProjectionDTO>();

    public CoreBusinessUnitName = observable<string>();

    public CoreBusinessUnitProjects = observableArray<VisualProjectObservableProjectionDTO>();

    public Login = observable<string>();

    public NameEngFirstName = observable<string>();

    public PositionName = observable<string>();

    public PpmNameNativeMiddleName = observable<string>();

    public RoleId = observable<Guid>();

    public RoleName = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestEmployeeObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestEmployeeObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.BuEndDate(Convert.toDate(source.BuEndDate));
        this.CoreBusinessUnit(BusinessUnitIdentityObservableProjectionDTO.fromJs(source.CoreBusinessUnit));
        this.CoreBusinessUnitName(source.CoreBusinessUnitName);
        if (source.CoreBusinessUnitProjects) {
            this.CoreBusinessUnitProjects(source.CoreBusinessUnitProjects.map(e => {
                    return VisualProjectObservableProjectionDTO.fromJs(e);
                }));
        }
        this.Login(source.Login);
        this.NameEngFirstName(source.NameEngFirstName);
        this.PositionName(source.PositionName);
        this.PpmNameNativeMiddleName(source.PpmNameNativeMiddleName);
        this.RoleId(source.RoleId);
        this.RoleName(source.RoleName);
    }

    public identity(): EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id());
    }

    public toJs(): TestEmployeeProjectionDTO {
        let e = new TestEmployeeProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestIMRequestObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestIMRequestObservableProjectionDTO';

    private _testimrequestobservableprojectiondto: string;

    public Message = observable<string>();

    public OneToOneDetail = observable<TestIMRequestDetailObservableProjectionDTO>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestIMRequestObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestIMRequestObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Message(source.Message);
        this.OneToOneDetail(TestIMRequestDetailObservableProjectionDTO.fromJs(source.OneToOneDetail));
    }

    public identity(): IMRequestIdentityDTO {
        return new IMRequestIdentityDTO(this.Id());
    }

    public toJs(): TestIMRequestProjectionDTO {
        let e = new TestIMRequestProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestIMRequestDetailObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestIMRequestDetailObservableProjectionDTO';

    private _testimrequestdetailobservableprojectiondto: string;

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestIMRequestDetailObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestIMRequestDetailObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
    }

    public toJs(): TestIMRequestDetailProjectionDTO {
        let e = new TestIMRequestDetailProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestLegacyEmployeeObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestLegacyEmployeeObservableProjectionDTO';

    private _testlegacyemployeeobservableprojectiondto: string;

    public Login = observable<string>();

    public RoleId = observable<Guid>();

    public RoleName = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestLegacyEmployeeObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestLegacyEmployeeObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Login(source.Login);
        this.RoleId(source.RoleId);
        this.RoleName(source.RoleName);
    }

    public identity(): EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id());
    }

    public toJs(): TestLegacyEmployeeProjectionDTO {
        let e = new TestLegacyEmployeeProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestLocationObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestLocationObservableProjectionDTO';

    private _testlocationobservableprojectiondto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestLocationObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestLocationObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id());
    }

    public toJs(): TestLocationProjectionDTO {
        let e = new TestLocationProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestLocationCollectionPropertiesObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestLocationCollectionPropertiesObservableProjectionDTO';

    private _testlocationcollectionpropertiesobservableprojectiondto: string;

    public Child_Identities = observableArray<Guid>();

    public Child_Periods = observableArray<Framework.Core.ObservablePeriod>();

    public Children = observableArray<TestLocationObservableProjectionDTO>();

    public Date_Intervals = observableArray<Date>();

    public Name = observable<string>();

    public Security_Codes = observableArray<SampleSystemSecurityOperationCode>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestLocationCollectionPropertiesObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestLocationCollectionPropertiesObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        if (source.Child_Identities) {
            this.Child_Identities(source.Child_Identities.map(e => {
                    return e;
                }));
        }
        if (source.Child_Periods) {
            this.Child_Periods(source.Child_Periods.map(e => {
                    return Framework.Core.ObservablePeriod.toPeriod(e);
                }));
        }
        if (source.Children) {
            this.Children(source.Children.map(e => {
                    return TestLocationObservableProjectionDTO.fromJs(e);
                }));
        }
        if (source.Date_Intervals) {
            this.Date_Intervals(source.Date_Intervals.map(e => {
                    return Convert.toDate(e);
                }));
        }
        this.Name(source.Name);
        if (source.Security_Codes) {
            this.Security_Codes(source.Security_Codes.map(e => {
                    return e;
                }));
        }
    }

    public identity(): LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id());
    }

    public toJs(): TestLocationCollectionPropertiesProjectionDTO {
        let e = new TestLocationCollectionPropertiesProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecurityObjItemObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'TestSecurityObjItemObservableProjectionDTO';

    private _testsecurityobjitemobservableprojectiondto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): TestSecurityObjItemObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecurityObjItemIdentityDTO {
        return new TestSecurityObjItemIdentityDTO(this.Id());
    }

    public toJs(): TestSecurityObjItemProjectionDTO {
        let e = new TestSecurityObjItemProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class VisualProjectObservableProjectionDTO extends BaseObservablePersistentDTO {
    public __type = 'VisualProjectObservableProjectionDTO';

    private _visualprojectobservableprojectiondto: string;

    public Code = observable<string>();

    constructor () {
        super();

    }

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): VisualProjectObservableProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new VisualProjectObservableProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Code(source.Code);
    }

    public toJs(): VisualProjectProjectionDTO {
        let e = new VisualProjectProjectionDTO();
        e.fromObservable(this);
        return e;
    }

}

export class SqlParserTestObjObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SqlParserTestObjObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SqlParserTestObjObservableIdentityDTO(source.Id);
    }

}

export class SqlParserTestObjObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'SqlParserTestObjObservableSimpleDTO';

    private _sqlparsertestobjobservablesimpledto: string;

    public NotNullColumn = observable<string>();

    public UniqueColumn = observable<string>();

    public static fromJs(source: ISqlParserTestObjSimpleDTO): SqlParserTestObjObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjSimpleDTO): void {
        super.fromJs(source);
        this.NotNullColumn(source.NotNullColumn);
        this.UniqueColumn(source.UniqueColumn);
    }

    public identity(): SqlParserTestObjIdentityDTO {
        return new SqlParserTestObjIdentityDTO(this.Id());
    }

    public toJs(): SqlParserTestObjSimpleDTO {
        let e = new SqlParserTestObjSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SqlParserTestObjObservableFullDTO extends SqlParserTestObjObservableSimpleDTO {
    public __type = 'SqlParserTestObjObservableFullDTO';

    private _sqlparsertestobjobservablefulldto: string;

    public static fromJs(source: ISqlParserTestObjFullDTO): SqlParserTestObjObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): SqlParserTestObjFullDTO {
        let e = new SqlParserTestObjFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SqlParserTestObjContainerObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SqlParserTestObjContainerObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SqlParserTestObjContainerObservableIdentityDTO(source.Id);
    }

}

export class SqlParserTestObjContainerObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'SqlParserTestObjContainerObservableSimpleDTO';

    private _sqlparsertestobjcontainerobservablesimpledto: string;

    public static fromJs(source: ISqlParserTestObjContainerSimpleDTO): SqlParserTestObjContainerObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjContainerObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjContainerSimpleDTO): void {
        super.fromJs(source);
    }

    public identity(): SqlParserTestObjContainerIdentityDTO {
        return new SqlParserTestObjContainerIdentityDTO(this.Id());
    }

    public toJs(): SqlParserTestObjContainerSimpleDTO {
        let e = new SqlParserTestObjContainerSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SqlParserTestObjContainerObservableFullDTO extends SqlParserTestObjContainerObservableSimpleDTO {
    public __type = 'SqlParserTestObjContainerObservableFullDTO';

    private _sqlparsertestobjcontainerobservablefulldto: string;

    public IncludedObject = observable<SqlParserTestObjObservableSimpleDTO>();

    public static fromJs(source: ISqlParserTestObjContainerFullDTO): SqlParserTestObjContainerObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjContainerObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjContainerFullDTO): void {
        super.fromJs(source);
        this.IncludedObject(SqlParserTestObjObservableSimpleDTO.fromJs(source.IncludedObject));
    }

    public toJs(): SqlParserTestObjContainerFullDTO {
        let e = new SqlParserTestObjContainerFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TestCustomContextSecurityObjObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestCustomContextSecurityObjObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestCustomContextSecurityObjObservableIdentityDTO(source.Id);
    }

}

export class TestCustomContextSecurityObjObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestCustomContextSecurityObjObservableSimpleDTO';

    private _testcustomcontextsecurityobjobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ITestCustomContextSecurityObjSimpleDTO): TestCustomContextSecurityObjObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestCustomContextSecurityObjSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestCustomContextSecurityObjIdentityDTO {
        return new TestCustomContextSecurityObjIdentityDTO(this.Id());
    }

    public toJs(): TestCustomContextSecurityObjSimpleDTO {
        let e = new TestCustomContextSecurityObjSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestCustomContextSecurityObjObservableFullDTO extends TestCustomContextSecurityObjObservableSimpleDTO {
    public __type = 'TestCustomContextSecurityObjObservableFullDTO';

    private _testcustomcontextsecurityobjobservablefulldto: string;

    public static fromJs(source: ITestCustomContextSecurityObjFullDTO): TestCustomContextSecurityObjObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestCustomContextSecurityObjFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): TestCustomContextSecurityObjFullDTO {
        let e = new TestCustomContextSecurityObjFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestCustomContextSecurityObjObservableRichDTO extends TestCustomContextSecurityObjObservableFullDTO {
    public __type = 'TestCustomContextSecurityObjObservableRichDTO';

    private _testcustomcontextsecurityobjobservablerichdto: string;

    public static fromJs(source: ITestCustomContextSecurityObjRichDTO): TestCustomContextSecurityObjObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestCustomContextSecurityObjRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): TestCustomContextSecurityObjRichDTO {
        let e = new TestCustomContextSecurityObjRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestCustomContextSecurityObjObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TestCustomContextSecurityObjObservableVisualDTO';

    private _testcustomcontextsecurityobjobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestCustomContextSecurityObjObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestCustomContextSecurityObjIdentityDTO {
        return new TestCustomContextSecurityObjIdentityDTO(this.Id());
    }

    public toJs(): TestCustomContextSecurityObjVisualDTO {
        let e = new TestCustomContextSecurityObjVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestImmutableObjObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestImmutableObjObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestImmutableObjObservableIdentityDTO(source.Id);
    }

}

export class TestImmutableObjObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestImmutableObjObservableSimpleDTO';

    private _testimmutableobjobservablesimpledto: string;

    public TestImmutablePrimitiveProperty = observable<string>();

    public static fromJs(source: ITestImmutableObjSimpleDTO): TestImmutableObjObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestImmutableObjObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestImmutableObjSimpleDTO): void {
        super.fromJs(source);
        this.TestImmutablePrimitiveProperty(source.TestImmutablePrimitiveProperty);
    }

    public identity(): TestImmutableObjIdentityDTO {
        return new TestImmutableObjIdentityDTO(this.Id());
    }

    public toJs(): TestImmutableObjSimpleDTO {
        let e = new TestImmutableObjSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TestImmutableObjObservableFullDTO extends TestImmutableObjObservableSimpleDTO {
    public __type = 'TestImmutableObjObservableFullDTO';

    private _testimmutableobjobservablefulldto: string;

    public TestImmutableRefProperty = observable<EmployeeObservableSimpleDTO>();

    public static fromJs(source: ITestImmutableObjFullDTO): TestImmutableObjObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestImmutableObjObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestImmutableObjFullDTO): void {
        super.fromJs(source);
        this.TestImmutableRefProperty(EmployeeObservableSimpleDTO.fromJs(source.TestImmutableRefProperty));
    }

    public toJs(): TestImmutableObjFullDTO {
        let e = new TestImmutableObjFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TestImmutableObjObservableRichDTO extends TestImmutableObjObservableFullDTO {
    public __type = 'TestImmutableObjObservableRichDTO';

    private _testimmutableobjobservablerichdto: string;

    public static fromJs(source: ITestImmutableObjRichDTO): TestImmutableObjObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestImmutableObjObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestImmutableObjRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): TestImmutableObjRichDTO {
        let e = new TestImmutableObjRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TestObjForNestedObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestObjForNestedObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestObjForNestedObservableIdentityDTO(source.Id);
    }

}

export class TestObjForNestedObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestObjForNestedObservableSimpleDTO';

    private _testobjfornestedobservablesimpledto: string;

    public Name = observable<string>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: ITestObjForNestedSimpleDTO): TestObjForNestedObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestObjForNestedObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestObjForNestedSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
    }

    public identity(): TestObjForNestedIdentityDTO {
        return new TestObjForNestedIdentityDTO(this.Id());
    }

    public toJs(): TestObjForNestedSimpleDTO {
        let e = new TestObjForNestedSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestRootSecurityObjObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestRootSecurityObjObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestRootSecurityObjObservableIdentityDTO(source.Id);
    }

}

export class TestRootSecurityObjObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestRootSecurityObjObservableSimpleDTO';

    private _testrootsecurityobjobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ITestRootSecurityObjSimpleDTO): TestRootSecurityObjObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestRootSecurityObjSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestRootSecurityObjIdentityDTO {
        return new TestRootSecurityObjIdentityDTO(this.Id());
    }

    public toJs(): TestRootSecurityObjSimpleDTO {
        let e = new TestRootSecurityObjSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestRootSecurityObjObservableFullDTO extends TestRootSecurityObjObservableSimpleDTO {
    public __type = 'TestRootSecurityObjObservableFullDTO';

    private _testrootsecurityobjobservablefulldto: string;

    public BusinessUnit = observable<BusinessUnitObservableSimpleDTO>();

    public Location = observable<LocationObservableSimpleDTO>();

    public ManagementUnitFluentMapping = observable<ManagementUnitFluentMappingObservableSimpleDTO>();

    public static fromJs(source: ITestRootSecurityObjFullDTO): TestRootSecurityObjObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestRootSecurityObjFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit(BusinessUnitObservableSimpleDTO.fromJs(source.BusinessUnit));
        this.Location(LocationObservableSimpleDTO.fromJs(source.Location));
        this.ManagementUnitFluentMapping(ManagementUnitFluentMappingObservableSimpleDTO.fromJs(source.ManagementUnitFluentMapping));
    }

    public toJs(): TestRootSecurityObjFullDTO {
        let e = new TestRootSecurityObjFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestRootSecurityObjObservableRichDTO extends TestRootSecurityObjObservableFullDTO {
    public __type = 'TestRootSecurityObjObservableRichDTO';

    private _testrootsecurityobjobservablerichdto: string;

    public Items = observableArray<TestSecurityObjItemObservableRichDTO>();

    public static fromJs(source: ITestRootSecurityObjRichDTO): TestRootSecurityObjObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestRootSecurityObjRichDTO): void {
        super.fromJs(source);
        if (source.Items) {
            this.Items(source.Items.map(e => {
                    return TestSecurityObjItemObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): TestRootSecurityObjRichDTO {
        let e = new TestRootSecurityObjRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestRootSecurityObjObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TestRootSecurityObjObservableVisualDTO';

    private _testrootsecurityobjobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestRootSecurityObjObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestRootSecurityObjIdentityDTO {
        return new TestRootSecurityObjIdentityDTO(this.Id());
    }

    public toJs(): TestRootSecurityObjVisualDTO {
        let e = new TestRootSecurityObjVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecurityObjItemObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecurityObjItemObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecurityObjItemObservableIdentityDTO(source.Id);
    }

}

export class TestSecurityObjItemObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestSecurityObjItemObservableSimpleDTO';

    private _testsecurityobjitemobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ITestSecurityObjItemSimpleDTO): TestSecurityObjItemObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecurityObjItemSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecurityObjItemIdentityDTO {
        return new TestSecurityObjItemIdentityDTO(this.Id());
    }

    public toJs(): TestSecurityObjItemSimpleDTO {
        let e = new TestSecurityObjItemSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecurityObjItemObservableFullDTO extends TestSecurityObjItemObservableSimpleDTO {
    public __type = 'TestSecurityObjItemObservableFullDTO';

    private _testsecurityobjitemobservablefulldto: string;

    public FirstMaster = observable<TestRootSecurityObjObservableSimpleDTO>();

    public static fromJs(source: ITestSecurityObjItemFullDTO): TestSecurityObjItemObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecurityObjItemFullDTO): void {
        super.fromJs(source);
        this.FirstMaster(TestRootSecurityObjObservableSimpleDTO.fromJs(source.FirstMaster));
    }

    public toJs(): TestSecurityObjItemFullDTO {
        let e = new TestSecurityObjItemFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecurityObjItemObservableRichDTO extends TestSecurityObjItemObservableFullDTO {
    public __type = 'TestSecurityObjItemObservableRichDTO';

    private _testsecurityobjitemobservablerichdto: string;

    public Items = observableArray<TestSecuritySubObjItemObservableRichDTO>();

    public Items2 = observableArray<TestSecuritySubObjItem2ObservableRichDTO>();

    public Items3 = observableArray<TestSecuritySubObjItem3ObservableRichDTO>();

    public static fromJs(source: ITestSecurityObjItemRichDTO): TestSecurityObjItemObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecurityObjItemRichDTO): void {
        super.fromJs(source);
        if (source.Items) {
            this.Items(source.Items.map(e => {
                    return TestSecuritySubObjItemObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Items2) {
            this.Items2(source.Items2.map(e => {
                    return TestSecuritySubObjItem2ObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Items3) {
            this.Items3(source.Items3.map(e => {
                    return TestSecuritySubObjItem3ObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): TestSecurityObjItemRichDTO {
        let e = new TestSecurityObjItemRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecurityObjItemObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TestSecurityObjItemObservableVisualDTO';

    private _testsecurityobjitemobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecurityObjItemObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecurityObjItemIdentityDTO {
        return new TestSecurityObjItemIdentityDTO(this.Id());
    }

    public toJs(): TestSecurityObjItemVisualDTO {
        let e = new TestSecurityObjItemVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItemObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecuritySubObjItemObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecuritySubObjItemObservableIdentityDTO(source.Id);
    }

}

export class TestSecuritySubObjItemObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestSecuritySubObjItemObservableSimpleDTO';

    private _testsecuritysubobjitemobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ITestSecuritySubObjItemSimpleDTO): TestSecuritySubObjItemObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItemSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecuritySubObjItemIdentityDTO {
        return new TestSecuritySubObjItemIdentityDTO(this.Id());
    }

    public toJs(): TestSecuritySubObjItemSimpleDTO {
        let e = new TestSecuritySubObjItemSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItemObservableFullDTO extends TestSecuritySubObjItemObservableSimpleDTO {
    public __type = 'TestSecuritySubObjItemObservableFullDTO';

    private _testsecuritysubobjitemobservablefulldto: string;

    public InnerMaster = observable<TestSecurityObjItemObservableSimpleDTO>();

    public static fromJs(source: ITestSecuritySubObjItemFullDTO): TestSecuritySubObjItemObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItemFullDTO): void {
        super.fromJs(source);
        this.InnerMaster(TestSecurityObjItemObservableSimpleDTO.fromJs(source.InnerMaster));
    }

    public toJs(): TestSecuritySubObjItemFullDTO {
        let e = new TestSecuritySubObjItemFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItemObservableRichDTO extends TestSecuritySubObjItemObservableFullDTO {
    public __type = 'TestSecuritySubObjItemObservableRichDTO';

    private _testsecuritysubobjitemobservablerichdto: string;

    public static fromJs(source: ITestSecuritySubObjItemRichDTO): TestSecuritySubObjItemObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItemRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): TestSecuritySubObjItemRichDTO {
        let e = new TestSecuritySubObjItemRichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItemObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TestSecuritySubObjItemObservableVisualDTO';

    private _testsecuritysubobjitemobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecuritySubObjItemObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecuritySubObjItemIdentityDTO {
        return new TestSecuritySubObjItemIdentityDTO(this.Id());
    }

    public toJs(): TestSecuritySubObjItemVisualDTO {
        let e = new TestSecuritySubObjItemVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem2ObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecuritySubObjItem2ObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecuritySubObjItem2ObservableIdentityDTO(source.Id);
    }

}

export class TestSecuritySubObjItem2ObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestSecuritySubObjItem2ObservableSimpleDTO';

    private _testsecuritysubobjitem2observablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ITestSecuritySubObjItem2SimpleDTO): TestSecuritySubObjItem2ObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2ObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem2SimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecuritySubObjItem2IdentityDTO {
        return new TestSecuritySubObjItem2IdentityDTO(this.Id());
    }

    public toJs(): TestSecuritySubObjItem2SimpleDTO {
        let e = new TestSecuritySubObjItem2SimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem2ObservableFullDTO extends TestSecuritySubObjItem2ObservableSimpleDTO {
    public __type = 'TestSecuritySubObjItem2ObservableFullDTO';

    private _testsecuritysubobjitem2observablefulldto: string;

    public InnerMaster = observable<TestSecurityObjItemObservableSimpleDTO>();

    public RootSecurityObj = observable<TestRootSecurityObjObservableSimpleDTO>();

    public static fromJs(source: ITestSecuritySubObjItem2FullDTO): TestSecuritySubObjItem2ObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2ObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem2FullDTO): void {
        super.fromJs(source);
        this.InnerMaster(TestSecurityObjItemObservableSimpleDTO.fromJs(source.InnerMaster));
        this.RootSecurityObj(TestRootSecurityObjObservableSimpleDTO.fromJs(source.RootSecurityObj));
    }

    public toJs(): TestSecuritySubObjItem2FullDTO {
        let e = new TestSecuritySubObjItem2FullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem2ObservableRichDTO extends TestSecuritySubObjItem2ObservableFullDTO {
    public __type = 'TestSecuritySubObjItem2ObservableRichDTO';

    private _testsecuritysubobjitem2observablerichdto: string;

    public static fromJs(source: ITestSecuritySubObjItem2RichDTO): TestSecuritySubObjItem2ObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2ObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem2RichDTO): void {
        super.fromJs(source);
    }

    public toJs(): TestSecuritySubObjItem2RichDTO {
        let e = new TestSecuritySubObjItem2RichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem2ObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TestSecuritySubObjItem2ObservableVisualDTO';

    private _testsecuritysubobjitem2observablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecuritySubObjItem2ObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2ObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecuritySubObjItem2IdentityDTO {
        return new TestSecuritySubObjItem2IdentityDTO(this.Id());
    }

    public toJs(): TestSecuritySubObjItem2VisualDTO {
        let e = new TestSecuritySubObjItem2VisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem3ObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TestSecuritySubObjItem3ObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TestSecuritySubObjItem3ObservableIdentityDTO(source.Id);
    }

}

export class TestSecuritySubObjItem3ObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TestSecuritySubObjItem3ObservableSimpleDTO';

    private _testsecuritysubobjitem3observablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: ITestSecuritySubObjItem3SimpleDTO): TestSecuritySubObjItem3ObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3ObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem3SimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecuritySubObjItem3IdentityDTO {
        return new TestSecuritySubObjItem3IdentityDTO(this.Id());
    }

    public toJs(): TestSecuritySubObjItem3SimpleDTO {
        let e = new TestSecuritySubObjItem3SimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem3ObservableFullDTO extends TestSecuritySubObjItem3ObservableSimpleDTO {
    public __type = 'TestSecuritySubObjItem3ObservableFullDTO';

    private _testsecuritysubobjitem3observablefulldto: string;

    public InnerMaster = observable<TestSecurityObjItemObservableSimpleDTO>();

    public static fromJs(source: ITestSecuritySubObjItem3FullDTO): TestSecuritySubObjItem3ObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3ObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem3FullDTO): void {
        super.fromJs(source);
        this.InnerMaster(TestSecurityObjItemObservableSimpleDTO.fromJs(source.InnerMaster));
    }

    public toJs(): TestSecuritySubObjItem3FullDTO {
        let e = new TestSecuritySubObjItem3FullDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem3ObservableRichDTO extends TestSecuritySubObjItem3ObservableFullDTO {
    public __type = 'TestSecuritySubObjItem3ObservableRichDTO';

    private _testsecuritysubobjitem3observablerichdto: string;

    public static fromJs(source: ITestSecuritySubObjItem3RichDTO): TestSecuritySubObjItem3ObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3ObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem3RichDTO): void {
        super.fromJs(source);
    }

    public toJs(): TestSecuritySubObjItem3RichDTO {
        let e = new TestSecuritySubObjItem3RichDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TestSecuritySubObjItem3ObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TestSecuritySubObjItem3ObservableVisualDTO';

    private _testsecuritysubobjitem3observablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecuritySubObjItem3ObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3ObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TestSecuritySubObjItem3IdentityDTO {
        return new TestSecuritySubObjItem3IdentityDTO(this.Id());
    }

    public toJs(): TestSecuritySubObjItem3VisualDTO {
        let e = new TestSecuritySubObjItem3VisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export interface IBaseAbstractDTO {
}

export interface IBasePersistentDTO extends IBaseAbstractDTO {
    Id : Guid;
}

export interface IBaseAuditPersistentDTO extends IBasePersistentDTO {
    Active : boolean;
    CreateDate? : Date;
    CreatedBy : string;
    ModifiedBy : string;
    ModifyDate? : Date;
    Version : number;
}

export class BaseAbstractDTO {
    public __type = 'BaseAbstractDTO';

    private _baseabstractdto: string;

    public static fromJs(source: any): BaseAbstractDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseAbstractDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
    }

    public fromObservable(source: any): void {
    }

    public toJs(): BaseAbstractDTO {
        return this;
    }

    public toNativeJson(): BaseAbstractDTO {
        return this;
    }

}

export class BasePersistentDTO extends BaseAbstractDTO {
    public __type = 'BasePersistentDTO';

    private _basepersistentdto: string;

    public Id: Guid;

    public get IsNew() : boolean {
        return (Guid.Default() === this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): BasePersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BasePersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromJs(source: IBasePersistentDTO): void {
        super.fromJs(source);
        this.Id = source.Id;
    }

    public fromObservable(source: BaseObservablePersistentDTO): void {
        super.fromObservable(source);
        this.Id = unwrap(source.Id);
    }

}

export class BaseAuditPersistentDTO extends BasePersistentDTO {
    public __type = 'BaseAuditPersistentDTO';

    private _baseauditpersistentdto: string;

    public Active: boolean;

    public CreateDate: Date;

    public CreatedBy: string;

    public ModifiedBy: string;

    public ModifyDate: Date;

    public Version: number;

    public static fromJs(source: IBaseAuditPersistentDTO): BaseAuditPersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseAuditPersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
        this.CreateDate = source.CreateDate;
        this.CreatedBy = source.CreatedBy;
        this.ModifiedBy = source.ModifiedBy;
        this.ModifyDate = source.ModifyDate;
        this.Version = source.Version;
    }

    public fromJs(source: IBaseAuditPersistentDTO): void {
        super.fromJs(source);
        this.Active = source.Active;
        this.CreateDate = Convert.toDate(source.CreateDate);
        this.CreatedBy = source.CreatedBy;
        this.ModifiedBy = source.ModifiedBy;
        this.ModifyDate = Convert.toDate(source.ModifyDate);
        this.Version = source.Version;
    }

    public fromObservable(source: BaseObservableAuditPersistentDTO): void {
        super.fromObservable(source);
        this.Active = unwrap(source.Active);
        this.CreateDate = unwrap(source.CreateDate);
        this.CreatedBy = unwrap(source.CreatedBy);
        this.ModifiedBy = unwrap(source.ModifiedBy);
        this.ModifyDate = unwrap(source.ModifyDate);
        this.Version = unwrap(source.Version);
    }

}

export class AddressSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AddressSimpleDTO';

    private _addresssimpledto: string;

    public AddressType: AddressType;

    public CityName: string;

    public RegionName: string;

    public Street: string;

    public Zip: string;

    public static fromJs(source: IAddressSimpleDTO): AddressSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AddressSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAddressSimpleDTO): void {
        super.fromJs(source);
        this.AddressType = source.AddressType;
        this.CityName = source.CityName;
        this.RegionName = source.RegionName;
        this.Street = source.Street;
        this.Zip = source.Zip;
    }

    public fromObservable(source: AddressObservableSimpleDTO): void {
        super.fromObservable(source);
        this.AddressType = unwrap(source.AddressType);
        this.CityName = unwrap(source.CityName);
        this.RegionName = unwrap(source.RegionName);
        this.Street = unwrap(source.Street);
        this.Zip = unwrap(source.Zip);
    }

    public toObservable(): AddressObservableSimpleDTO {
        let e = new AddressObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AddressFullDTO extends AddressSimpleDTO {
    public __type = 'AddressFullDTO';

    private _addressfulldto: string;

    public CountryName: CountrySimpleDTO;

    public LegalEntity: LegalEntityBaseSimpleDTO;

    public static fromJs(source: IAddressFullDTO): AddressFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AddressFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAddressFullDTO): void {
        super.fromJs(source);
        this.CountryName = CountrySimpleDTO.fromJs(source.CountryName);
        this.LegalEntity = LegalEntityBaseSimpleDTO.fromJs(source.LegalEntity);
    }

    public fromObservable(source: AddressObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.CountryName)) {
            this.CountryName = unwrap(source.CountryName).toJs();
        }
        if (unwrap(source.LegalEntity)) {
            this.LegalEntity = unwrap(source.LegalEntity).toJs();
        }
    }

    public toObservable(): AddressObservableFullDTO {
        let e = new AddressObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AddressRichDTO extends AddressFullDTO {
    public __type = 'AddressRichDTO';

    private _addressrichdto: string;

    public static fromJs(source: IAddressRichDTO): AddressRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AddressRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAddressRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: AddressObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): AddressObservableRichDTO {
        let e = new AddressObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitSimpleDTO';

    private _businessunitsimpledto: string;

    public BusinessUnitStatus: BusinessUnitStatus;

    public BusinessUnitTypeName: string;

    public Commission: number;

    public FirstNewBusinessStatusMonth: Date;

    public IsNewBusiness = false;

    public IsPool = false;

    public IsProduction = false;

    public IsSpecialCommission = false;

    public LastBusinessUnitHasNoLinkedProjectsWarningCheckDate: Date;

    public LastNewBusinessStatusMonth: Date;

    public LeastProjectStartDate: Date;

    public LobName: string;

    public Name: string;

    public NeedSendBusinessUnitHasNoLinkedProjectsWarning = false;

    public NewBusinessStatusLeft: number;

    public Options: BusinessUnitOptions;

    public Period = Framework.Core.Period.Eternity;

    public ProjectStartMailList: string;

    public Rank: number;

    public get Identity() : BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id);
    }

    public static fromJs(source: IBusinessUnitSimpleDTO): BusinessUnitSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitSimpleDTO): void {
        super.fromJs(source);
        this.BusinessUnitStatus = source.BusinessUnitStatus;
        this.BusinessUnitTypeName = source.BusinessUnitTypeName;
        this.Commission = source.Commission;
        this.FirstNewBusinessStatusMonth = Convert.toDate(source.FirstNewBusinessStatusMonth);
        this.IsNewBusiness = source.IsNewBusiness;
        this.IsPool = source.IsPool;
        this.IsProduction = source.IsProduction;
        this.IsSpecialCommission = source.IsSpecialCommission;
        this.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = Convert.toDate(source.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate);
        this.LastNewBusinessStatusMonth = Convert.toDate(source.LastNewBusinessStatusMonth);
        this.LeastProjectStartDate = Convert.toDate(source.LeastProjectStartDate);
        this.LobName = source.LobName;
        this.Name = source.Name;
        this.NeedSendBusinessUnitHasNoLinkedProjectsWarning = source.NeedSendBusinessUnitHasNoLinkedProjectsWarning;
        this.NewBusinessStatusLeft = source.NewBusinessStatusLeft;
        this.Options = source.Options;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
        this.ProjectStartMailList = source.ProjectStartMailList;
        this.Rank = source.Rank;
    }

    public fromObservable(source: BusinessUnitObservableSimpleDTO): void {
        super.fromObservable(source);
        this.BusinessUnitStatus = unwrap(source.BusinessUnitStatus);
        this.BusinessUnitTypeName = unwrap(source.BusinessUnitTypeName);
        this.Commission = unwrap(source.Commission);
        this.FirstNewBusinessStatusMonth = unwrap(source.FirstNewBusinessStatusMonth);
        this.IsNewBusiness = unwrap(source.IsNewBusiness);
        this.IsPool = unwrap(source.IsPool);
        this.IsProduction = unwrap(source.IsProduction);
        this.IsSpecialCommission = unwrap(source.IsSpecialCommission);
        this.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate = unwrap(source.LastBusinessUnitHasNoLinkedProjectsWarningCheckDate);
        this.LastNewBusinessStatusMonth = unwrap(source.LastNewBusinessStatusMonth);
        this.LeastProjectStartDate = unwrap(source.LeastProjectStartDate);
        this.LobName = unwrap(source.LobName);
        this.Name = unwrap(source.Name);
        this.NeedSendBusinessUnitHasNoLinkedProjectsWarning = unwrap(source.NeedSendBusinessUnitHasNoLinkedProjectsWarning);
        this.NewBusinessStatusLeft = unwrap(source.NewBusinessStatusLeft);
        this.Options = unwrap(source.Options);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
        this.ProjectStartMailList = unwrap(source.ProjectStartMailList);
        this.Rank = unwrap(source.Rank);
    }

    public toObservable(): BusinessUnitObservableSimpleDTO {
        let e = new BusinessUnitObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitFullDTO extends BusinessUnitSimpleDTO {
    public __type = 'BusinessUnitFullDTO';

    private _businessunitfulldto: string;

    public BusinessUnitForRent: BusinessUnitSimpleDTO;

    public BusinessUnitType: BusinessUnitTypeSimpleDTO;

    public Parent: BusinessUnitSimpleDTO;

    public static fromJs(source: IBusinessUnitFullDTO): BusinessUnitFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitForRent = BusinessUnitSimpleDTO.fromJs(source.BusinessUnitForRent);
        this.BusinessUnitType = BusinessUnitTypeSimpleDTO.fromJs(source.BusinessUnitType);
        this.Parent = BusinessUnitSimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: BusinessUnitObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnitForRent)) {
            this.BusinessUnitForRent = unwrap(source.BusinessUnitForRent).toJs();
        }
        if (unwrap(source.BusinessUnitType)) {
            this.BusinessUnitType = unwrap(source.BusinessUnitType).toJs();
        }
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): BusinessUnitObservableFullDTO {
        let e = new BusinessUnitObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitRichDTO extends BusinessUnitFullDTO {
    public __type = 'BusinessUnitRichDTO';

    private _businessunitrichdto: string;

    public BusinessUnitEmployeeRoles: BusinessUnitEmployeeRoleRichDTO [];

    public Children: BusinessUnitRichDTO [];

    public ManagementUnits: ManagementUnitAndBusinessUnitLinkRichDTO [];

    public ManagerCommissions: BusinessUnitManagerCommissionLinkRichDTO [];

    public static fromJs(source: IBusinessUnitRichDTO): BusinessUnitRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitRichDTO): void {
        super.fromJs(source);
        if (source.BusinessUnitEmployeeRoles) {
            this.BusinessUnitEmployeeRoles = source.BusinessUnitEmployeeRoles.map(e => {
                return BusinessUnitEmployeeRoleRichDTO.fromJs(e);
            });
        }
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return BusinessUnitRichDTO.fromJs(e);
            });
        }
        if (source.ManagementUnits) {
            this.ManagementUnits = source.ManagementUnits.map(e => {
                return ManagementUnitAndBusinessUnitLinkRichDTO.fromJs(e);
            });
        }
        if (source.ManagerCommissions) {
            this.ManagerCommissions = source.ManagerCommissions.map(e => {
                return BusinessUnitManagerCommissionLinkRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: BusinessUnitObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnitEmployeeRoles)) {
            this.BusinessUnitEmployeeRoles = source.BusinessUnitEmployeeRoles().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Children)) {
            this.Children = source.Children().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.ManagementUnits)) {
            this.ManagementUnits = source.ManagementUnits().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.ManagerCommissions)) {
            this.ManagerCommissions = source.ManagerCommissions().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): BusinessUnitObservableRichDTO {
        let e = new BusinessUnitObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitEmployeeRoleSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitEmployeeRoleSimpleDTO';

    private _businessunitemployeerolesimpledto: string;

    public Role: BusinessUnitEmployeeRoleType;

    public static fromJs(source: IBusinessUnitEmployeeRoleSimpleDTO): BusinessUnitEmployeeRoleSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitEmployeeRoleSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitEmployeeRoleSimpleDTO): void {
        super.fromJs(source);
        this.Role = source.Role;
    }

    public fromObservable(source: BusinessUnitEmployeeRoleObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Role = unwrap(source.Role);
    }

    public toObservable(): BusinessUnitEmployeeRoleObservableSimpleDTO {
        let e = new BusinessUnitEmployeeRoleObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitEmployeeRoleFullDTO extends BusinessUnitEmployeeRoleSimpleDTO {
    public __type = 'BusinessUnitEmployeeRoleFullDTO';

    private _businessunitemployeerolefulldto: string;

    public BusinessUnit: BusinessUnitSimpleDTO;

    public Employee: EmployeeSimpleDTO;

    public static fromJs(source: IBusinessUnitEmployeeRoleFullDTO): BusinessUnitEmployeeRoleFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitEmployeeRoleFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitEmployeeRoleFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit = BusinessUnitSimpleDTO.fromJs(source.BusinessUnit);
        this.Employee = EmployeeSimpleDTO.fromJs(source.Employee);
    }

    public fromObservable(source: BusinessUnitEmployeeRoleObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnit)) {
            this.BusinessUnit = unwrap(source.BusinessUnit).toJs();
        }
        if (unwrap(source.Employee)) {
            this.Employee = unwrap(source.Employee).toJs();
        }
    }

    public toObservable(): BusinessUnitEmployeeRoleObservableFullDTO {
        let e = new BusinessUnitEmployeeRoleObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitEmployeeRoleRichDTO extends BusinessUnitEmployeeRoleFullDTO {
    public __type = 'BusinessUnitEmployeeRoleRichDTO';

    private _businessunitemployeerolerichdto: string;

    public static fromJs(source: IBusinessUnitEmployeeRoleRichDTO): BusinessUnitEmployeeRoleRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitEmployeeRoleRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitEmployeeRoleRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitEmployeeRoleObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitEmployeeRoleObservableRichDTO {
        let e = new BusinessUnitEmployeeRoleObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitHrDepartmentSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitHrDepartmentSimpleDTO';

    private _businessunithrdepartmentsimpledto: string;

    public get Identity() : BusinessUnitHrDepartmentIdentityDTO {
        return new BusinessUnitHrDepartmentIdentityDTO(this.Id);
    }

    public static fromJs(source: IBusinessUnitHrDepartmentSimpleDTO): BusinessUnitHrDepartmentSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitHrDepartmentSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitHrDepartmentSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitHrDepartmentObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitHrDepartmentObservableSimpleDTO {
        let e = new BusinessUnitHrDepartmentObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitHrDepartmentFullDTO extends BusinessUnitHrDepartmentSimpleDTO {
    public __type = 'BusinessUnitHrDepartmentFullDTO';

    private _businessunithrdepartmentfulldto: string;

    public BusinessUnit: BusinessUnitSimpleDTO;

    public HRDepartment: HRDepartmentSimpleDTO;

    public static fromJs(source: IBusinessUnitHrDepartmentFullDTO): BusinessUnitHrDepartmentFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitHrDepartmentFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitHrDepartmentFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit = BusinessUnitSimpleDTO.fromJs(source.BusinessUnit);
        this.HRDepartment = HRDepartmentSimpleDTO.fromJs(source.HRDepartment);
    }

    public fromObservable(source: BusinessUnitHrDepartmentObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnit)) {
            this.BusinessUnit = unwrap(source.BusinessUnit).toJs();
        }
        if (unwrap(source.HRDepartment)) {
            this.HRDepartment = unwrap(source.HRDepartment).toJs();
        }
    }

    public toObservable(): BusinessUnitHrDepartmentObservableFullDTO {
        let e = new BusinessUnitHrDepartmentObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitHrDepartmentRichDTO extends BusinessUnitHrDepartmentFullDTO {
    public __type = 'BusinessUnitHrDepartmentRichDTO';

    private _businessunithrdepartmentrichdto: string;

    public static fromJs(source: IBusinessUnitHrDepartmentRichDTO): BusinessUnitHrDepartmentRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitHrDepartmentRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitHrDepartmentRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitHrDepartmentObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitHrDepartmentObservableRichDTO {
        let e = new BusinessUnitHrDepartmentObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitManagerCommissionLinkSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitManagerCommissionLinkSimpleDTO';

    private _businessunitmanagercommissionlinksimpledto: string;

    public Commission: number;

    public Period = Framework.Core.Period.Eternity;

    public get Identity() : BusinessUnitManagerCommissionLinkIdentityDTO {
        return new BusinessUnitManagerCommissionLinkIdentityDTO(this.Id);
    }

    public static fromJs(source: IBusinessUnitManagerCommissionLinkSimpleDTO): BusinessUnitManagerCommissionLinkSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitManagerCommissionLinkSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitManagerCommissionLinkSimpleDTO): void {
        super.fromJs(source);
        this.Commission = source.Commission;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
    }

    public fromObservable(source: BusinessUnitManagerCommissionLinkObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Commission = unwrap(source.Commission);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
    }

    public toObservable(): BusinessUnitManagerCommissionLinkObservableSimpleDTO {
        let e = new BusinessUnitManagerCommissionLinkObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitManagerCommissionLinkFullDTO extends BusinessUnitManagerCommissionLinkSimpleDTO {
    public __type = 'BusinessUnitManagerCommissionLinkFullDTO';

    private _businessunitmanagercommissionlinkfulldto: string;

    public BusinessUnit: BusinessUnitSimpleDTO;

    public Manager: EmployeeSimpleDTO;

    public static fromJs(source: IBusinessUnitManagerCommissionLinkFullDTO): BusinessUnitManagerCommissionLinkFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitManagerCommissionLinkFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitManagerCommissionLinkFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit = BusinessUnitSimpleDTO.fromJs(source.BusinessUnit);
        this.Manager = EmployeeSimpleDTO.fromJs(source.Manager);
    }

    public fromObservable(source: BusinessUnitManagerCommissionLinkObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnit)) {
            this.BusinessUnit = unwrap(source.BusinessUnit).toJs();
        }
        if (unwrap(source.Manager)) {
            this.Manager = unwrap(source.Manager).toJs();
        }
    }

    public toObservable(): BusinessUnitManagerCommissionLinkObservableFullDTO {
        let e = new BusinessUnitManagerCommissionLinkObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitManagerCommissionLinkRichDTO extends BusinessUnitManagerCommissionLinkFullDTO {
    public __type = 'BusinessUnitManagerCommissionLinkRichDTO';

    private _businessunitmanagercommissionlinkrichdto: string;

    public static fromJs(source: IBusinessUnitManagerCommissionLinkRichDTO): BusinessUnitManagerCommissionLinkRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitManagerCommissionLinkRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitManagerCommissionLinkRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitManagerCommissionLinkObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitManagerCommissionLinkObservableRichDTO {
        let e = new BusinessUnitManagerCommissionLinkObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitTypeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitTypeSimpleDTO';

    private _businessunittypesimpledto: string;

    public AdditionalStartConfirm = false;

    public AdditionalTransferConfirm = false;

    public BillingProjectAreNotAllowed = false;

    public CanBeIsSpecialCommission = false;

    public CanBeLinkedToClient = false;

    public CanBeLinkedToDepartment = false;

    public CanBeNewBusiness = false;

    public CanBeResourcePool = false;

    public IsAdministrative = false;

    public Name: string;

    public NeedVertical = false;

    public PossibleStartDate: PossibleStartDate;

    public PossibleTransferDate: PossibleStartDate;

    public PracticeAllowed = false;

    public ProjectStartAllowed = false;

    public StartBOConfirm = false;

    public TransferBOConfirm = false;

    public get Identity() : BusinessUnitTypeIdentityDTO {
        return new BusinessUnitTypeIdentityDTO(this.Id);
    }

    public static fromJs(source: IBusinessUnitTypeSimpleDTO): BusinessUnitTypeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeSimpleDTO): void {
        super.fromJs(source);
        this.AdditionalStartConfirm = source.AdditionalStartConfirm;
        this.AdditionalTransferConfirm = source.AdditionalTransferConfirm;
        this.BillingProjectAreNotAllowed = source.BillingProjectAreNotAllowed;
        this.CanBeIsSpecialCommission = source.CanBeIsSpecialCommission;
        this.CanBeLinkedToClient = source.CanBeLinkedToClient;
        this.CanBeLinkedToDepartment = source.CanBeLinkedToDepartment;
        this.CanBeNewBusiness = source.CanBeNewBusiness;
        this.CanBeResourcePool = source.CanBeResourcePool;
        this.IsAdministrative = source.IsAdministrative;
        this.Name = source.Name;
        this.NeedVertical = source.NeedVertical;
        this.PossibleStartDate = source.PossibleStartDate;
        this.PossibleTransferDate = source.PossibleTransferDate;
        this.PracticeAllowed = source.PracticeAllowed;
        this.ProjectStartAllowed = source.ProjectStartAllowed;
        this.StartBOConfirm = source.StartBOConfirm;
        this.TransferBOConfirm = source.TransferBOConfirm;
    }

    public fromObservable(source: BusinessUnitTypeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.AdditionalStartConfirm = unwrap(source.AdditionalStartConfirm);
        this.AdditionalTransferConfirm = unwrap(source.AdditionalTransferConfirm);
        this.BillingProjectAreNotAllowed = unwrap(source.BillingProjectAreNotAllowed);
        this.CanBeIsSpecialCommission = unwrap(source.CanBeIsSpecialCommission);
        this.CanBeLinkedToClient = unwrap(source.CanBeLinkedToClient);
        this.CanBeLinkedToDepartment = unwrap(source.CanBeLinkedToDepartment);
        this.CanBeNewBusiness = unwrap(source.CanBeNewBusiness);
        this.CanBeResourcePool = unwrap(source.CanBeResourcePool);
        this.IsAdministrative = unwrap(source.IsAdministrative);
        this.Name = unwrap(source.Name);
        this.NeedVertical = unwrap(source.NeedVertical);
        this.PossibleStartDate = unwrap(source.PossibleStartDate);
        this.PossibleTransferDate = unwrap(source.PossibleTransferDate);
        this.PracticeAllowed = unwrap(source.PracticeAllowed);
        this.ProjectStartAllowed = unwrap(source.ProjectStartAllowed);
        this.StartBOConfirm = unwrap(source.StartBOConfirm);
        this.TransferBOConfirm = unwrap(source.TransferBOConfirm);
    }

    public toObservable(): BusinessUnitTypeObservableSimpleDTO {
        let e = new BusinessUnitTypeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitTypeFullDTO extends BusinessUnitTypeSimpleDTO {
    public __type = 'BusinessUnitTypeFullDTO';

    private _businessunittypefulldto: string;

    public static fromJs(source: IBusinessUnitTypeFullDTO): BusinessUnitTypeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitTypeObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitTypeObservableFullDTO {
        let e = new BusinessUnitTypeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitTypeRichDTO extends BusinessUnitTypeFullDTO {
    public __type = 'BusinessUnitTypeRichDTO';

    private _businessunittyperichdto: string;

    public PossibleFinancialProjectTypes: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO [];

    public PossibleParents: BusinessUnitTypeLinkWithPossibleParentRichDTO [];

    public TransferTo: BusinessUnitTypeLinkWithTransferToRichDTO [];

    public static fromJs(source: IBusinessUnitTypeRichDTO): BusinessUnitTypeRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeRichDTO): void {
        super.fromJs(source);
        if (source.PossibleFinancialProjectTypes) {
            this.PossibleFinancialProjectTypes = source.PossibleFinancialProjectTypes.map(e => {
                return BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO.fromJs(e);
            });
        }
        if (source.PossibleParents) {
            this.PossibleParents = source.PossibleParents.map(e => {
                return BusinessUnitTypeLinkWithPossibleParentRichDTO.fromJs(e);
            });
        }
        if (source.TransferTo) {
            this.TransferTo = source.TransferTo.map(e => {
                return BusinessUnitTypeLinkWithTransferToRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: BusinessUnitTypeObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.PossibleFinancialProjectTypes)) {
            this.PossibleFinancialProjectTypes = source.PossibleFinancialProjectTypes().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.PossibleParents)) {
            this.PossibleParents = source.PossibleParents().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.TransferTo)) {
            this.TransferTo = source.TransferTo().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): BusinessUnitTypeObservableRichDTO {
        let e = new BusinessUnitTypeObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttypesimpledto: string;

    public FinancialProjectType: FinancialProjectType;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO): void {
        super.fromJs(source);
        this.FinancialProjectType = source.FinancialProjectType;
    }

    public fromObservable(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.FinancialProjectType = unwrap(source.FinancialProjectType);
    }

    public toObservable(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO extends BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttypefulldto: string;

    public BusinessUnitType: BusinessUnitTypeSimpleDTO;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitType = BusinessUnitTypeSimpleDTO.fromJs(source.BusinessUnitType);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnitType)) {
            this.BusinessUnitType = unwrap(source.BusinessUnitType).toJs();
        }
    }

    public toObservable(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO extends BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttyperichdto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleParentSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentSimpleDTO';

    private _businessunittypelinkwithpossibleparentsimpledto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleParentSimpleDTO): BusinessUnitTypeLinkWithPossibleParentSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleParentSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleParentSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleParentFullDTO extends BusinessUnitTypeLinkWithPossibleParentSimpleDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentFullDTO';

    private _businessunittypelinkwithpossibleparentfulldto: string;

    public BusinessUnitType: BusinessUnitTypeSimpleDTO;

    public PossibleParent: BusinessUnitTypeSimpleDTO;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleParentFullDTO): BusinessUnitTypeLinkWithPossibleParentFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleParentFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleParentFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitType = BusinessUnitTypeSimpleDTO.fromJs(source.BusinessUnitType);
        this.PossibleParent = BusinessUnitTypeSimpleDTO.fromJs(source.PossibleParent);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithPossibleParentObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnitType)) {
            this.BusinessUnitType = unwrap(source.BusinessUnitType).toJs();
        }
        if (unwrap(source.PossibleParent)) {
            this.PossibleParent = unwrap(source.PossibleParent).toJs();
        }
    }

    public toObservable(): BusinessUnitTypeLinkWithPossibleParentObservableFullDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithPossibleParentRichDTO extends BusinessUnitTypeLinkWithPossibleParentFullDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentRichDTO';

    private _businessunittypelinkwithpossibleparentrichdto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithPossibleParentRichDTO): BusinessUnitTypeLinkWithPossibleParentRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithPossibleParentRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithPossibleParentRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithPossibleParentObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitTypeLinkWithPossibleParentObservableRichDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithTransferToSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToSimpleDTO';

    private _businessunittypelinkwithtransfertosimpledto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithTransferToSimpleDTO): BusinessUnitTypeLinkWithTransferToSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithTransferToSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithTransferToSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithTransferToObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitTypeLinkWithTransferToObservableSimpleDTO {
        let e = new BusinessUnitTypeLinkWithTransferToObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithTransferToFullDTO extends BusinessUnitTypeLinkWithTransferToSimpleDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToFullDTO';

    private _businessunittypelinkwithtransfertofulldto: string;

    public BusinessUnitType: BusinessUnitTypeSimpleDTO;

    public TransferTo: BusinessUnitTypeSimpleDTO;

    public static fromJs(source: IBusinessUnitTypeLinkWithTransferToFullDTO): BusinessUnitTypeLinkWithTransferToFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithTransferToFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithTransferToFullDTO): void {
        super.fromJs(source);
        this.BusinessUnitType = BusinessUnitTypeSimpleDTO.fromJs(source.BusinessUnitType);
        this.TransferTo = BusinessUnitTypeSimpleDTO.fromJs(source.TransferTo);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithTransferToObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnitType)) {
            this.BusinessUnitType = unwrap(source.BusinessUnitType).toJs();
        }
        if (unwrap(source.TransferTo)) {
            this.TransferTo = unwrap(source.TransferTo).toJs();
        }
    }

    public toObservable(): BusinessUnitTypeLinkWithTransferToObservableFullDTO {
        let e = new BusinessUnitTypeLinkWithTransferToObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class BusinessUnitTypeLinkWithTransferToRichDTO extends BusinessUnitTypeLinkWithTransferToFullDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToRichDTO';

    private _businessunittypelinkwithtransfertorichdto: string;

    public static fromJs(source: IBusinessUnitTypeLinkWithTransferToRichDTO): BusinessUnitTypeLinkWithTransferToRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeLinkWithTransferToRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBusinessUnitTypeLinkWithTransferToRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitTypeLinkWithTransferToObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitTypeLinkWithTransferToObservableRichDTO {
        let e = new BusinessUnitTypeLinkWithTransferToObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class CompanyLegalEntitySimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'CompanyLegalEntitySimpleDTO';

    private _companylegalentitysimpledto: string;

    public AribaStatus: RevenueDocumentAribaStatus;

    public Code: string;

    public Name: string;

    public NameEnglish: string;

    public Type: CompanyLegalEntityType;

    public get Identity() : CompanyLegalEntityIdentityDTO {
        return new CompanyLegalEntityIdentityDTO(this.Id);
    }

    public static fromJs(source: ICompanyLegalEntitySimpleDTO): CompanyLegalEntitySimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntitySimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICompanyLegalEntitySimpleDTO): void {
        super.fromJs(source);
        this.AribaStatus = RevenueDocumentAribaStatus.fromJs(source.AribaStatus);
        this.Code = source.Code;
        this.Name = source.Name;
        this.NameEnglish = source.NameEnglish;
        this.Type = source.Type;
    }

    public fromObservable(source: CompanyLegalEntityObservableSimpleDTO): void {
        super.fromObservable(source);
        this.AribaStatus = unwrap(source.AribaStatus);
        this.Code = unwrap(source.Code);
        this.Name = unwrap(source.Name);
        this.NameEnglish = unwrap(source.NameEnglish);
        this.Type = unwrap(source.Type);
    }

    public toObservable(): CompanyLegalEntityObservableSimpleDTO {
        let e = new CompanyLegalEntityObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class CompanyLegalEntityFullDTO extends CompanyLegalEntitySimpleDTO {
    public __type = 'CompanyLegalEntityFullDTO';

    private _companylegalentityfulldto: string;

    public BaseObj: TestObjForNestedSimpleDTO;

    public CurrentObj: TestObjForNestedSimpleDTO;

    public Parent: CompanyLegalEntitySimpleDTO;

    public static fromJs(source: ICompanyLegalEntityFullDTO): CompanyLegalEntityFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICompanyLegalEntityFullDTO): void {
        super.fromJs(source);
        this.BaseObj = TestObjForNestedSimpleDTO.fromJs(source.BaseObj);
        this.CurrentObj = TestObjForNestedSimpleDTO.fromJs(source.CurrentObj);
        this.Parent = CompanyLegalEntitySimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: CompanyLegalEntityObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BaseObj)) {
            this.BaseObj = unwrap(source.BaseObj).toJs();
        }
        if (unwrap(source.CurrentObj)) {
            this.CurrentObj = unwrap(source.CurrentObj).toJs();
        }
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): CompanyLegalEntityObservableFullDTO {
        let e = new CompanyLegalEntityObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class CompanyLegalEntityRichDTO extends CompanyLegalEntityFullDTO {
    public __type = 'CompanyLegalEntityRichDTO';

    private _companylegalentityrichdto: string;

    public Addresses: AddressRichDTO [];

    public static fromJs(source: ICompanyLegalEntityRichDTO): CompanyLegalEntityRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICompanyLegalEntityRichDTO): void {
        super.fromJs(source);
        if (source.Addresses) {
            this.Addresses = source.Addresses.map(e => {
                return AddressRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: CompanyLegalEntityObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Addresses)) {
            this.Addresses = source.Addresses().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): CompanyLegalEntityObservableRichDTO {
        let e = new CompanyLegalEntityObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class CountrySimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'CountrySimpleDTO';

    private _countrysimpledto: string;

    public Code: string;

    public Culture: string;

    public Name: string;

    public NameNative: string;

    public get Identity() : CountryIdentityDTO {
        return new CountryIdentityDTO(this.Id);
    }

    public static fromJs(source: ICountrySimpleDTO): CountrySimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountrySimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICountrySimpleDTO): void {
        super.fromJs(source);
        this.Code = source.Code;
        this.Culture = source.Culture;
        this.Name = source.Name;
        this.NameNative = source.NameNative;
    }

    public fromObservable(source: CountryObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Code = unwrap(source.Code);
        this.Culture = unwrap(source.Culture);
        this.Name = unwrap(source.Name);
        this.NameNative = unwrap(source.NameNative);
    }

    public toObservable(): CountryObservableSimpleDTO {
        let e = new CountryObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class CountryFullDTO extends CountrySimpleDTO {
    public __type = 'CountryFullDTO';

    private _countryfulldto: string;

    public static fromJs(source: ICountryFullDTO): CountryFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICountryFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: CountryObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): CountryObservableFullDTO {
        let e = new CountryObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class CountryRichDTO extends CountryFullDTO {
    public __type = 'CountryRichDTO';

    private _countryrichdto: string;

    public static fromJs(source: ICountryRichDTO): CountryRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICountryRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: CountryObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): CountryObservableRichDTO {
        let e = new CountryObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class EmployeeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeeSimpleDTO';

    private _employeesimpledto: string;

    public AccountName: string;

    public Age: number;

    public BirthDate: Date;

    public CanBePPM = false;

    public CellPhone: string;

    public CoreBusinessUnitPeriod = Framework.Core.Period.Eternity;

    public DismissDate: Date;

    public EducationDuration = Framework.Core.Period.Eternity;

    public Email: string;

    public ExternalId: number;

    public Gender: Gender;

    public HireDate: Date;

    public Interphone: string;

    public IsCandidate = false;

    public Landlinephone: string;

    public LastActionDate: Date;

    public LocationCode: number;

    public Login: string;

    public MailAccountName: string;

    public NameEng: FioShort;

    public NameNative: Fio;

    public NameRussian: Fio;

    public NonValidateVirtualProp: Date;

    public PersonalCellPhone: string;

    public Pin: number;

    public PlannedHireDate: Date;

    public ValidateVirtualProp: Date;

    public WorkPeriod = Framework.Core.Period.Eternity;

    public get Identity() : EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeeSimpleDTO): EmployeeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSimpleDTO): void {
        super.fromJs(source);
        this.AccountName = source.AccountName;
        this.Age = source.Age;
        this.BirthDate = Convert.toDate(source.BirthDate);
        this.CanBePPM = source.CanBePPM;
        this.CellPhone = source.CellPhone;
        this.CoreBusinessUnitPeriod = Framework.Core.Period.toPeriod(source.CoreBusinessUnitPeriod);
        this.DismissDate = Convert.toDate(source.DismissDate);
        this.EducationDuration = Framework.Core.Period.toPeriod(source.EducationDuration);
        this.Email = source.Email;
        this.ExternalId = source.ExternalId;
        this.Gender = source.Gender;
        this.HireDate = Convert.toDate(source.HireDate);
        this.Interphone = source.Interphone;
        this.IsCandidate = source.IsCandidate;
        this.Landlinephone = source.Landlinephone;
        this.LastActionDate = Convert.toDate(source.LastActionDate);
        this.LocationCode = source.LocationCode;
        this.Login = source.Login;
        this.MailAccountName = source.MailAccountName;
        this.NameEng = FioShort.fromJs(source.NameEng);
        this.NameNative = Fio.fromJs(source.NameNative);
        this.NameRussian = Fio.fromJs(source.NameRussian);
        this.NonValidateVirtualProp = Convert.toDate(source.NonValidateVirtualProp);
        this.PersonalCellPhone = source.PersonalCellPhone;
        this.Pin = source.Pin;
        this.PlannedHireDate = Convert.toDate(source.PlannedHireDate);
        this.ValidateVirtualProp = Convert.toDate(source.ValidateVirtualProp);
        this.WorkPeriod = Framework.Core.Period.toPeriod(source.WorkPeriod);
    }

    public fromObservable(source: EmployeeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.AccountName = unwrap(source.AccountName);
        this.Age = unwrap(source.Age);
        this.BirthDate = unwrap(source.BirthDate);
        this.CanBePPM = unwrap(source.CanBePPM);
        this.CellPhone = unwrap(source.CellPhone);
        this.CoreBusinessUnitPeriod = Framework.Core.Period.fromObservable(unwrap(source.CoreBusinessUnitPeriod));
        this.DismissDate = unwrap(source.DismissDate);
        this.EducationDuration = Framework.Core.Period.fromObservable(unwrap(source.EducationDuration));
        this.Email = unwrap(source.Email);
        this.ExternalId = unwrap(source.ExternalId);
        this.Gender = unwrap(source.Gender);
        this.HireDate = unwrap(source.HireDate);
        this.Interphone = unwrap(source.Interphone);
        this.IsCandidate = unwrap(source.IsCandidate);
        this.Landlinephone = unwrap(source.Landlinephone);
        this.LastActionDate = unwrap(source.LastActionDate);
        this.LocationCode = unwrap(source.LocationCode);
        this.Login = unwrap(source.Login);
        this.MailAccountName = unwrap(source.MailAccountName);
        this.NameEng = unwrap(source.NameEng);
        this.NameNative = unwrap(source.NameNative);
        this.NameRussian = unwrap(source.NameRussian);
        this.NonValidateVirtualProp = unwrap(source.NonValidateVirtualProp);
        this.PersonalCellPhone = unwrap(source.PersonalCellPhone);
        this.Pin = unwrap(source.Pin);
        this.PlannedHireDate = unwrap(source.PlannedHireDate);
        this.ValidateVirtualProp = unwrap(source.ValidateVirtualProp);
        this.WorkPeriod = Framework.Core.Period.fromObservable(unwrap(source.WorkPeriod));
    }

    public toObservable(): EmployeeObservableSimpleDTO {
        let e = new EmployeeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): EmployeeStrictDTO {
        let e = new EmployeeStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class EmployeeFullDTO extends EmployeeSimpleDTO {
    public __type = 'EmployeeFullDTO';

    private _employeefulldto: string;

    public CoreBusinessUnit: BusinessUnitSimpleDTO;

    public HRDepartment: HRDepartmentSimpleDTO;

    public Location: LocationSimpleDTO;

    public ManagementUnit: ManagementUnitSimpleDTO;

    public PersonalAssistant: EmployeeSimpleDTO;

    public Position: EmployeePositionSimpleDTO;

    public Ppm: EmployeeSimpleDTO;

    public RegistrationType: EmployeeRegistrationTypeSimpleDTO;

    public Role: EmployeeRoleSimpleDTO;

    public RoleDegree: EmployeeRoleDegreeSimpleDTO;

    public VacationApprover: EmployeeSimpleDTO;

    public static fromJs(source: IEmployeeFullDTO): EmployeeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeFullDTO): void {
        super.fromJs(source);
        this.CoreBusinessUnit = BusinessUnitSimpleDTO.fromJs(source.CoreBusinessUnit);
        this.HRDepartment = HRDepartmentSimpleDTO.fromJs(source.HRDepartment);
        this.Location = LocationSimpleDTO.fromJs(source.Location);
        this.ManagementUnit = ManagementUnitSimpleDTO.fromJs(source.ManagementUnit);
        this.PersonalAssistant = EmployeeSimpleDTO.fromJs(source.PersonalAssistant);
        this.Position = EmployeePositionSimpleDTO.fromJs(source.Position);
        this.Ppm = EmployeeSimpleDTO.fromJs(source.Ppm);
        this.RegistrationType = EmployeeRegistrationTypeSimpleDTO.fromJs(source.RegistrationType);
        this.Role = EmployeeRoleSimpleDTO.fromJs(source.Role);
        this.RoleDegree = EmployeeRoleDegreeSimpleDTO.fromJs(source.RoleDegree);
        this.VacationApprover = EmployeeSimpleDTO.fromJs(source.VacationApprover);
    }

    public fromObservable(source: EmployeeObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.CoreBusinessUnit)) {
            this.CoreBusinessUnit = unwrap(source.CoreBusinessUnit).toJs();
        }
        if (unwrap(source.HRDepartment)) {
            this.HRDepartment = unwrap(source.HRDepartment).toJs();
        }
        if (unwrap(source.Location)) {
            this.Location = unwrap(source.Location).toJs();
        }
        if (unwrap(source.ManagementUnit)) {
            this.ManagementUnit = unwrap(source.ManagementUnit).toJs();
        }
        if (unwrap(source.PersonalAssistant)) {
            this.PersonalAssistant = unwrap(source.PersonalAssistant).toJs();
        }
        if (unwrap(source.Position)) {
            this.Position = unwrap(source.Position).toJs();
        }
        if (unwrap(source.Ppm)) {
            this.Ppm = unwrap(source.Ppm).toJs();
        }
        if (unwrap(source.RegistrationType)) {
            this.RegistrationType = unwrap(source.RegistrationType).toJs();
        }
        if (unwrap(source.Role)) {
            this.Role = unwrap(source.Role).toJs();
        }
        if (unwrap(source.RoleDegree)) {
            this.RoleDegree = unwrap(source.RoleDegree).toJs();
        }
        if (unwrap(source.VacationApprover)) {
            this.VacationApprover = unwrap(source.VacationApprover).toJs();
        }
    }

    public toObservable(): EmployeeObservableFullDTO {
        let e = new EmployeeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): EmployeeStrictDTO {
        let e = new EmployeeStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class EmployeeEmailMassChangeModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'EmployeeEmailMassChangeModelSimpleDTO';

    private _employeeemailmasschangemodelsimpledto: string;

    public Email: string;

    public static fromJs(source: IEmployeeEmailMassChangeModelSimpleDTO): EmployeeEmailMassChangeModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeEmailMassChangeModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeEmailMassChangeModelSimpleDTO): void {
        super.fromJs(source);
        this.Email = source.Email;
    }

    public fromObservable(source: EmployeeEmailMassChangeModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Email = unwrap(source.Email);
    }

    public toObservable(): EmployeeEmailMassChangeModelObservableSimpleDTO {
        let e = new EmployeeEmailMassChangeModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class EmployeeEmailMassChangeModelFullDTO extends EmployeeEmailMassChangeModelSimpleDTO {
    public __type = 'EmployeeEmailMassChangeModelFullDTO';

    private _employeeemailmasschangemodelfulldto: string;

    public static fromJs(source: IEmployeeEmailMassChangeModelFullDTO): EmployeeEmailMassChangeModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeEmailMassChangeModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeEmailMassChangeModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeEmailMassChangeModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeEmailMassChangeModelObservableFullDTO {
        let e = new EmployeeEmailMassChangeModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class EmployeeEmailMassChangeModelRichDTO extends EmployeeEmailMassChangeModelFullDTO {
    public __type = 'EmployeeEmailMassChangeModelRichDTO';

    private _employeeemailmasschangemodelrichdto: string;

    public ChangingObjects: EmployeeSimpleDTO [];

    public static fromJs(source: IEmployeeEmailMassChangeModelRichDTO): EmployeeEmailMassChangeModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeEmailMassChangeModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeEmailMassChangeModelRichDTO): void {
        super.fromJs(source);
        if (source.ChangingObjects) {
            this.ChangingObjects = source.ChangingObjects.map(e => {
                return EmployeeSimpleDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: EmployeeEmailMassChangeModelObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ChangingObjects)) {
            this.ChangingObjects = source.ChangingObjects().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): EmployeeEmailMassChangeModelObservableRichDTO {
        let e = new EmployeeEmailMassChangeModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class EmployeeInformationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeeInformationSimpleDTO';

    private _employeeinformationsimpledto: string;

    public Email: string;

    public Name: string;

    public PersonalEmail: string;

    public get Identity() : EmployeeInformationIdentityDTO {
        return new EmployeeInformationIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeeInformationSimpleDTO): EmployeeInformationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeInformationSimpleDTO): void {
        super.fromJs(source);
        this.Email = source.Email;
        this.Name = source.Name;
        this.PersonalEmail = source.PersonalEmail;
    }

    public fromObservable(source: EmployeeInformationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Email = unwrap(source.Email);
        this.Name = unwrap(source.Name);
        this.PersonalEmail = unwrap(source.PersonalEmail);
    }

    public toObservable(): EmployeeInformationObservableSimpleDTO {
        let e = new EmployeeInformationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeInformationFullDTO extends EmployeeInformationSimpleDTO {
    public __type = 'EmployeeInformationFullDTO';

    private _employeeinformationfulldto: string;

    public static fromJs(source: IEmployeeInformationFullDTO): EmployeeInformationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeInformationFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeInformationObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeInformationObservableFullDTO {
        let e = new EmployeeInformationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeInformationRichDTO extends EmployeeInformationFullDTO {
    public __type = 'EmployeeInformationRichDTO';

    private _employeeinformationrichdto: string;

    public static fromJs(source: IEmployeeInformationRichDTO): EmployeeInformationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeInformationRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeInformationObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeInformationObservableRichDTO {
        let e = new EmployeeInformationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeePhotoSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeePhotoSimpleDTO';

    private _employeephotosimpledto: string;

    public ContentType: string;

    public IsDefault = false;

    public Type: EmployeePhotoType;

    public get Identity() : EmployeePhotoIdentityDTO {
        return new EmployeePhotoIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeePhotoSimpleDTO): EmployeePhotoSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePhotoSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePhotoSimpleDTO): void {
        super.fromJs(source);
        this.ContentType = source.ContentType;
        this.IsDefault = source.IsDefault;
        this.Type = source.Type;
    }

    public fromObservable(source: EmployeePhotoObservableSimpleDTO): void {
        super.fromObservable(source);
        this.ContentType = unwrap(source.ContentType);
        this.IsDefault = unwrap(source.IsDefault);
        this.Type = unwrap(source.Type);
    }

    public toObservable(): EmployeePhotoObservableSimpleDTO {
        let e = new EmployeePhotoObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeePhotoFullDTO extends EmployeePhotoSimpleDTO {
    public __type = 'EmployeePhotoFullDTO';

    private _employeephotofulldto: string;

    public Employee: EmployeeSimpleDTO;

    public static fromJs(source: IEmployeePhotoFullDTO): EmployeePhotoFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePhotoFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePhotoFullDTO): void {
        super.fromJs(source);
        this.Employee = EmployeeSimpleDTO.fromJs(source.Employee);
    }

    public fromObservable(source: EmployeePhotoObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Employee)) {
            this.Employee = unwrap(source.Employee).toJs();
        }
    }

    public toObservable(): EmployeePhotoObservableFullDTO {
        let e = new EmployeePhotoObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeePhotoRichDTO extends EmployeePhotoFullDTO {
    public __type = 'EmployeePhotoRichDTO';

    private _employeephotorichdto: string;

    public Data: number [];

    public static fromJs(source: IEmployeePhotoRichDTO): EmployeePhotoRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePhotoRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePhotoRichDTO): void {
        super.fromJs(source);
        if (source.Data) {
            this.Data = source.Data.map(e => {
                return e;
            });
        }
    }

    public fromObservable(source: EmployeePhotoObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Data)) {
            this.Data = source.Data().map(e => {
                return unwrap(e);
            });
        }
    }

    public toObservable(): EmployeePhotoObservableRichDTO {
        let e = new EmployeePhotoObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeePositionSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeePositionSimpleDTO';

    private _employeepositionsimpledto: string;

    public EnglishName: string;

    public ExternalId: number;

    public Name: string;

    public get Identity() : EmployeePositionIdentityDTO {
        return new EmployeePositionIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeePositionSimpleDTO): EmployeePositionSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePositionSimpleDTO): void {
        super.fromJs(source);
        this.EnglishName = source.EnglishName;
        this.ExternalId = source.ExternalId;
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeePositionObservableSimpleDTO): void {
        super.fromObservable(source);
        this.EnglishName = unwrap(source.EnglishName);
        this.ExternalId = unwrap(source.ExternalId);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeePositionObservableSimpleDTO {
        let e = new EmployeePositionObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeePositionFullDTO extends EmployeePositionSimpleDTO {
    public __type = 'EmployeePositionFullDTO';

    private _employeepositionfulldto: string;

    public Location: LocationSimpleDTO;

    public static fromJs(source: IEmployeePositionFullDTO): EmployeePositionFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePositionFullDTO): void {
        super.fromJs(source);
        this.Location = LocationSimpleDTO.fromJs(source.Location);
    }

    public fromObservable(source: EmployeePositionObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Location)) {
            this.Location = unwrap(source.Location).toJs();
        }
    }

    public toObservable(): EmployeePositionObservableFullDTO {
        let e = new EmployeePositionObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeePositionRichDTO extends EmployeePositionFullDTO {
    public __type = 'EmployeePositionRichDTO';

    private _employeepositionrichdto: string;

    public static fromJs(source: IEmployeePositionRichDTO): EmployeePositionRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeePositionRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeePositionObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeePositionObservableRichDTO {
        let e = new EmployeePositionObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRegistrationTypeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeeRegistrationTypeSimpleDTO';

    private _employeeregistrationtypesimpledto: string;

    public ExternalId: number;

    public Name: string;

    public get Identity() : EmployeeRegistrationTypeIdentityDTO {
        return new EmployeeRegistrationTypeIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeeRegistrationTypeSimpleDTO): EmployeeRegistrationTypeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRegistrationTypeSimpleDTO): void {
        super.fromJs(source);
        this.ExternalId = source.ExternalId;
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeRegistrationTypeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.ExternalId = unwrap(source.ExternalId);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeRegistrationTypeObservableSimpleDTO {
        let e = new EmployeeRegistrationTypeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRegistrationTypeFullDTO extends EmployeeRegistrationTypeSimpleDTO {
    public __type = 'EmployeeRegistrationTypeFullDTO';

    private _employeeregistrationtypefulldto: string;

    public static fromJs(source: IEmployeeRegistrationTypeFullDTO): EmployeeRegistrationTypeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRegistrationTypeFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeRegistrationTypeObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeRegistrationTypeObservableFullDTO {
        let e = new EmployeeRegistrationTypeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRegistrationTypeRichDTO extends EmployeeRegistrationTypeFullDTO {
    public __type = 'EmployeeRegistrationTypeRichDTO';

    private _employeeregistrationtyperichdto: string;

    public static fromJs(source: IEmployeeRegistrationTypeRichDTO): EmployeeRegistrationTypeRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRegistrationTypeRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeRegistrationTypeObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeRegistrationTypeObservableRichDTO {
        let e = new EmployeeRegistrationTypeObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRoleSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeeRoleSimpleDTO';

    private _employeerolesimpledto: string;

    public Name: string;

    public get Identity() : EmployeeRoleIdentityDTO {
        return new EmployeeRoleIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeeRoleSimpleDTO): EmployeeRoleSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeRoleObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeRoleObservableSimpleDTO {
        let e = new EmployeeRoleObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRoleFullDTO extends EmployeeRoleSimpleDTO {
    public __type = 'EmployeeRoleFullDTO';

    private _employeerolefulldto: string;

    public static fromJs(source: IEmployeeRoleFullDTO): EmployeeRoleFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeRoleObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeRoleObservableFullDTO {
        let e = new EmployeeRoleObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRoleRichDTO extends EmployeeRoleFullDTO {
    public __type = 'EmployeeRoleRichDTO';

    private _employeerolerichdto: string;

    public static fromJs(source: IEmployeeRoleRichDTO): EmployeeRoleRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeRoleObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeRoleObservableRichDTO {
        let e = new EmployeeRoleObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRoleDegreeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeeRoleDegreeSimpleDTO';

    private _employeeroledegreesimpledto: string;

    public Name: string;

    public get Identity() : EmployeeRoleDegreeIdentityDTO {
        return new EmployeeRoleDegreeIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeeRoleDegreeSimpleDTO): EmployeeRoleDegreeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleDegreeSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeRoleDegreeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeRoleDegreeObservableSimpleDTO {
        let e = new EmployeeRoleDegreeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRoleDegreeFullDTO extends EmployeeRoleDegreeSimpleDTO {
    public __type = 'EmployeeRoleDegreeFullDTO';

    private _employeeroledegreefulldto: string;

    public static fromJs(source: IEmployeeRoleDegreeFullDTO): EmployeeRoleDegreeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleDegreeFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeRoleDegreeObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeRoleDegreeObservableFullDTO {
        let e = new EmployeeRoleDegreeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeRoleDegreeRichDTO extends EmployeeRoleDegreeFullDTO {
    public __type = 'EmployeeRoleDegreeRichDTO';

    private _employeeroledegreerichdto: string;

    public static fromJs(source: IEmployeeRoleDegreeRichDTO): EmployeeRoleDegreeRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeRoleDegreeRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeRoleDegreeObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeRoleDegreeObservableRichDTO {
        let e = new EmployeeRoleDegreeObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeSpecializationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'EmployeeSpecializationSimpleDTO';

    private _employeespecializationsimpledto: string;

    public Name: string;

    public get Identity() : EmployeeSpecializationIdentityDTO {
        return new EmployeeSpecializationIdentityDTO(this.Id);
    }

    public static fromJs(source: IEmployeeSpecializationSimpleDTO): EmployeeSpecializationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSpecializationSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeSpecializationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeSpecializationObservableSimpleDTO {
        let e = new EmployeeSpecializationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeSpecializationFullDTO extends EmployeeSpecializationSimpleDTO {
    public __type = 'EmployeeSpecializationFullDTO';

    private _employeespecializationfulldto: string;

    public static fromJs(source: IEmployeeSpecializationFullDTO): EmployeeSpecializationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSpecializationFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeSpecializationObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeSpecializationObservableFullDTO {
        let e = new EmployeeSpecializationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class EmployeeSpecializationRichDTO extends EmployeeSpecializationFullDTO {
    public __type = 'EmployeeSpecializationRichDTO';

    private _employeespecializationrichdto: string;

    public static fromJs(source: IEmployeeSpecializationRichDTO): EmployeeSpecializationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IEmployeeSpecializationRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: EmployeeSpecializationObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): EmployeeSpecializationObservableRichDTO {
        let e = new EmployeeSpecializationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class Location1676SimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'Location1676SimpleDTO';

    private _location1676simpledto: string;

    public Name: string;

    public get Identity() : Location1676IdentityDTO {
        return new Location1676IdentityDTO(this.Id);
    }

    public static fromJs(source: ILocation1676SimpleDTO): Location1676SimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676SimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocation1676SimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: Location1676ObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): Location1676ObservableSimpleDTO {
        let e = new Location1676ObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class Location1676FullDTO extends Location1676SimpleDTO {
    public __type = 'Location1676FullDTO';

    private _location1676fulldto: string;

    public static fromJs(source: ILocation1676FullDTO): Location1676FullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676FullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocation1676FullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: Location1676ObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): Location1676ObservableFullDTO {
        let e = new Location1676ObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class Location1676RichDTO extends Location1676FullDTO {
    public __type = 'Location1676RichDTO';

    private _location1676richdto: string;

    public Calendar: WorkingCalendar1676RichDTO [];

    public static fromJs(source: ILocation1676RichDTO): Location1676RichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676RichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocation1676RichDTO): void {
        super.fromJs(source);
        if (source.Calendar) {
            this.Calendar = source.Calendar.map(e => {
                return WorkingCalendar1676RichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: Location1676ObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Calendar)) {
            this.Calendar = source.Calendar().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): Location1676ObservableRichDTO {
        let e = new Location1676ObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class WorkingCalendar1676SimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'WorkingCalendar1676SimpleDTO';

    private _workingcalendar1676simpledto: string;

    public Name: string;

    public get Identity() : WorkingCalendar1676IdentityDTO {
        return new WorkingCalendar1676IdentityDTO(this.Id);
    }

    public static fromJs(source: IWorkingCalendar1676SimpleDTO): WorkingCalendar1676SimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676SimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IWorkingCalendar1676SimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: WorkingCalendar1676ObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): WorkingCalendar1676ObservableSimpleDTO {
        let e = new WorkingCalendar1676ObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class WorkingCalendar1676FullDTO extends WorkingCalendar1676SimpleDTO {
    public __type = 'WorkingCalendar1676FullDTO';

    private _workingcalendar1676fulldto: string;

    public Location: Location1676SimpleDTO;

    public static fromJs(source: IWorkingCalendar1676FullDTO): WorkingCalendar1676FullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676FullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IWorkingCalendar1676FullDTO): void {
        super.fromJs(source);
        this.Location = Location1676SimpleDTO.fromJs(source.Location);
    }

    public fromObservable(source: WorkingCalendar1676ObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Location)) {
            this.Location = unwrap(source.Location).toJs();
        }
    }

    public toObservable(): WorkingCalendar1676ObservableFullDTO {
        let e = new WorkingCalendar1676ObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class WorkingCalendar1676RichDTO extends WorkingCalendar1676FullDTO {
    public __type = 'WorkingCalendar1676RichDTO';

    private _workingcalendar1676richdto: string;

    public static fromJs(source: IWorkingCalendar1676RichDTO): WorkingCalendar1676RichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676RichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IWorkingCalendar1676RichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: WorkingCalendar1676ObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): WorkingCalendar1676ObservableRichDTO {
        let e = new WorkingCalendar1676ObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class Example1SimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'Example1SimpleDTO';

    private _example1simpledto: string;

    public Field1: Guid;

    public Field2: Guid;

    public Field3: Guid;

    public get Identity() : Example1IdentityDTO {
        return new Example1IdentityDTO(this.Id);
    }

    public static fromJs(source: IExample1SimpleDTO): Example1SimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example1SimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample1SimpleDTO): void {
        super.fromJs(source);
        this.Field1 = source.Field1;
        this.Field2 = source.Field2;
        this.Field3 = source.Field3;
    }

    public fromObservable(source: Example1ObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Field1 = unwrap(source.Field1);
        this.Field2 = unwrap(source.Field2);
        this.Field3 = unwrap(source.Field3);
    }

    public toObservable(): Example1ObservableSimpleDTO {
        let e = new Example1ObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class Example1FullDTO extends Example1SimpleDTO {
    public __type = 'Example1FullDTO';

    private _example1fulldto: string;

    public static fromJs(source: IExample1FullDTO): Example1FullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example1FullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample1FullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: Example1ObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): Example1ObservableFullDTO {
        let e = new Example1ObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class Example1RichDTO extends Example1FullDTO {
    public __type = 'Example1RichDTO';

    private _example1richdto: string;

    public Items2: Example2RichDTO [];

    public static fromJs(source: IExample1RichDTO): Example1RichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example1RichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample1RichDTO): void {
        super.fromJs(source);
        if (source.Items2) {
            this.Items2 = source.Items2.map(e => {
                return Example2RichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: Example1ObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Items2)) {
            this.Items2 = source.Items2().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): Example1ObservableRichDTO {
        let e = new Example1ObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class Example2SimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'Example2SimpleDTO';

    private _example2simpledto: string;

    public Field1: Guid;

    public Field2: Guid;

    public get Identity() : Example2IdentityDTO {
        return new Example2IdentityDTO(this.Id);
    }

    public static fromJs(source: IExample2SimpleDTO): Example2SimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example2SimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample2SimpleDTO): void {
        super.fromJs(source);
        this.Field1 = source.Field1;
        this.Field2 = source.Field2;
    }

    public fromObservable(source: Example2ObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Field1 = unwrap(source.Field1);
        this.Field2 = unwrap(source.Field2);
    }

    public toObservable(): Example2ObservableSimpleDTO {
        let e = new Example2ObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class Example2FullDTO extends Example2SimpleDTO {
    public __type = 'Example2FullDTO';

    private _example2fulldto: string;

    public Parent: Example1SimpleDTO;

    public static fromJs(source: IExample2FullDTO): Example2FullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example2FullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample2FullDTO): void {
        super.fromJs(source);
        this.Parent = Example1SimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: Example2ObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): Example2ObservableFullDTO {
        let e = new Example2ObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class Example2RichDTO extends Example2FullDTO {
    public __type = 'Example2RichDTO';

    private _example2richdto: string;

    public static fromJs(source: IExample2RichDTO): Example2RichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Example2RichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExample2RichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: Example2ObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): Example2ObservableRichDTO {
        let e = new Example2ObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class HRDepartmentSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'HRDepartmentSimpleDTO';

    private _hrdepartmentsimpledto: string;

    public Code: string;

    public CodeNative: string;

    public CompanyLegalEntityName: string;

    public ExternalId: number;

    public IsLegal = false;

    public IsProduction = false;

    public LocationName: string;

    public Name: string;

    public NameNative: string;

    public get Identity() : HRDepartmentIdentityDTO {
        return new HRDepartmentIdentityDTO(this.Id);
    }

    public static fromJs(source: IHRDepartmentSimpleDTO): HRDepartmentSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentSimpleDTO): void {
        super.fromJs(source);
        this.Code = source.Code;
        this.CodeNative = source.CodeNative;
        this.CompanyLegalEntityName = source.CompanyLegalEntityName;
        this.ExternalId = source.ExternalId;
        this.IsLegal = source.IsLegal;
        this.IsProduction = source.IsProduction;
        this.LocationName = source.LocationName;
        this.Name = source.Name;
        this.NameNative = source.NameNative;
    }

    public fromObservable(source: HRDepartmentObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Code = unwrap(source.Code);
        this.CodeNative = unwrap(source.CodeNative);
        this.CompanyLegalEntityName = unwrap(source.CompanyLegalEntityName);
        this.ExternalId = unwrap(source.ExternalId);
        this.IsLegal = unwrap(source.IsLegal);
        this.IsProduction = unwrap(source.IsProduction);
        this.LocationName = unwrap(source.LocationName);
        this.Name = unwrap(source.Name);
        this.NameNative = unwrap(source.NameNative);
    }

    public toObservable(): HRDepartmentObservableSimpleDTO {
        let e = new HRDepartmentObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class HRDepartmentFullDTO extends HRDepartmentSimpleDTO {
    public __type = 'HRDepartmentFullDTO';

    private _hrdepartmentfulldto: string;

    public ApprovedBy: EmployeeSimpleDTO;

    public CompanyLegalEntity: CompanyLegalEntitySimpleDTO;

    public Head: EmployeeSimpleDTO;

    public Location: LocationSimpleDTO;

    public Parent: HRDepartmentSimpleDTO;

    public static fromJs(source: IHRDepartmentFullDTO): HRDepartmentFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentFullDTO): void {
        super.fromJs(source);
        this.ApprovedBy = EmployeeSimpleDTO.fromJs(source.ApprovedBy);
        this.CompanyLegalEntity = CompanyLegalEntitySimpleDTO.fromJs(source.CompanyLegalEntity);
        this.Head = EmployeeSimpleDTO.fromJs(source.Head);
        this.Location = LocationSimpleDTO.fromJs(source.Location);
        this.Parent = HRDepartmentSimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: HRDepartmentObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ApprovedBy)) {
            this.ApprovedBy = unwrap(source.ApprovedBy).toJs();
        }
        if (unwrap(source.CompanyLegalEntity)) {
            this.CompanyLegalEntity = unwrap(source.CompanyLegalEntity).toJs();
        }
        if (unwrap(source.Head)) {
            this.Head = unwrap(source.Head).toJs();
        }
        if (unwrap(source.Location)) {
            this.Location = unwrap(source.Location).toJs();
        }
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): HRDepartmentObservableFullDTO {
        let e = new HRDepartmentObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class HRDepartmentRichDTO extends HRDepartmentFullDTO {
    public __type = 'HRDepartmentRichDTO';

    private _hrdepartmentrichdto: string;

    public BusinessUnitHrDepartments: BusinessUnitHrDepartmentRichDTO [];

    public Children: HRDepartmentRichDTO [];

    public EmployeePositions: HRDepartmentEmployeePositionRichDTO [];

    public HrDepartmentRoleEmployees: HRDepartmentRoleEmployeeRichDTO [];

    public ManagementUnits: ManagementUnitAndHRDepartmentLinkRichDTO [];

    public static fromJs(source: IHRDepartmentRichDTO): HRDepartmentRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRichDTO): void {
        super.fromJs(source);
        if (source.BusinessUnitHrDepartments) {
            this.BusinessUnitHrDepartments = source.BusinessUnitHrDepartments.map(e => {
                return BusinessUnitHrDepartmentRichDTO.fromJs(e);
            });
        }
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return HRDepartmentRichDTO.fromJs(e);
            });
        }
        if (source.EmployeePositions) {
            this.EmployeePositions = source.EmployeePositions.map(e => {
                return HRDepartmentEmployeePositionRichDTO.fromJs(e);
            });
        }
        if (source.HrDepartmentRoleEmployees) {
            this.HrDepartmentRoleEmployees = source.HrDepartmentRoleEmployees.map(e => {
                return HRDepartmentRoleEmployeeRichDTO.fromJs(e);
            });
        }
        if (source.ManagementUnits) {
            this.ManagementUnits = source.ManagementUnits.map(e => {
                return ManagementUnitAndHRDepartmentLinkRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: HRDepartmentObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnitHrDepartments)) {
            this.BusinessUnitHrDepartments = source.BusinessUnitHrDepartments().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Children)) {
            this.Children = source.Children().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.EmployeePositions)) {
            this.EmployeePositions = source.EmployeePositions().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.HrDepartmentRoleEmployees)) {
            this.HrDepartmentRoleEmployees = source.HrDepartmentRoleEmployees().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.ManagementUnits)) {
            this.ManagementUnits = source.ManagementUnits().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): HRDepartmentObservableRichDTO {
        let e = new HRDepartmentObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class HRDepartmentEmployeePositionSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'HRDepartmentEmployeePositionSimpleDTO';

    private _hrdepartmentemployeepositionsimpledto: string;

    public static fromJs(source: IHRDepartmentEmployeePositionSimpleDTO): HRDepartmentEmployeePositionSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentEmployeePositionSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentEmployeePositionSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: HRDepartmentEmployeePositionObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): HRDepartmentEmployeePositionObservableSimpleDTO {
        let e = new HRDepartmentEmployeePositionObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class HRDepartmentEmployeePositionFullDTO extends HRDepartmentEmployeePositionSimpleDTO {
    public __type = 'HRDepartmentEmployeePositionFullDTO';

    private _hrdepartmentemployeepositionfulldto: string;

    public EmployeePosition: EmployeePositionSimpleDTO;

    public HrDepartment: HRDepartmentSimpleDTO;

    public static fromJs(source: IHRDepartmentEmployeePositionFullDTO): HRDepartmentEmployeePositionFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentEmployeePositionFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentEmployeePositionFullDTO): void {
        super.fromJs(source);
        this.EmployeePosition = EmployeePositionSimpleDTO.fromJs(source.EmployeePosition);
        this.HrDepartment = HRDepartmentSimpleDTO.fromJs(source.HrDepartment);
    }

    public fromObservable(source: HRDepartmentEmployeePositionObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.EmployeePosition)) {
            this.EmployeePosition = unwrap(source.EmployeePosition).toJs();
        }
        if (unwrap(source.HrDepartment)) {
            this.HrDepartment = unwrap(source.HrDepartment).toJs();
        }
    }

    public toObservable(): HRDepartmentEmployeePositionObservableFullDTO {
        let e = new HRDepartmentEmployeePositionObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class HRDepartmentEmployeePositionRichDTO extends HRDepartmentEmployeePositionFullDTO {
    public __type = 'HRDepartmentEmployeePositionRichDTO';

    private _hrdepartmentemployeepositionrichdto: string;

    public static fromJs(source: IHRDepartmentEmployeePositionRichDTO): HRDepartmentEmployeePositionRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentEmployeePositionRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentEmployeePositionRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: HRDepartmentEmployeePositionObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): HRDepartmentEmployeePositionObservableRichDTO {
        let e = new HRDepartmentEmployeePositionObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class HRDepartmentRoleEmployeeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'HRDepartmentRoleEmployeeSimpleDTO';

    private _hrdepartmentroleemployeesimpledto: string;

    public HRDepartmentEmployeeRoleType: HRDepartmentEmployeeRoleType;

    public static fromJs(source: IHRDepartmentRoleEmployeeSimpleDTO): HRDepartmentRoleEmployeeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRoleEmployeeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRoleEmployeeSimpleDTO): void {
        super.fromJs(source);
        this.HRDepartmentEmployeeRoleType = source.HRDepartmentEmployeeRoleType;
    }

    public fromObservable(source: HRDepartmentRoleEmployeeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.HRDepartmentEmployeeRoleType = unwrap(source.HRDepartmentEmployeeRoleType);
    }

    public toObservable(): HRDepartmentRoleEmployeeObservableSimpleDTO {
        let e = new HRDepartmentRoleEmployeeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class HRDepartmentRoleEmployeeFullDTO extends HRDepartmentRoleEmployeeSimpleDTO {
    public __type = 'HRDepartmentRoleEmployeeFullDTO';

    private _hrdepartmentroleemployeefulldto: string;

    public Employee: EmployeeSimpleDTO;

    public HRDepartment: HRDepartmentSimpleDTO;

    public static fromJs(source: IHRDepartmentRoleEmployeeFullDTO): HRDepartmentRoleEmployeeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRoleEmployeeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRoleEmployeeFullDTO): void {
        super.fromJs(source);
        this.Employee = EmployeeSimpleDTO.fromJs(source.Employee);
        this.HRDepartment = HRDepartmentSimpleDTO.fromJs(source.HRDepartment);
    }

    public fromObservable(source: HRDepartmentRoleEmployeeObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Employee)) {
            this.Employee = unwrap(source.Employee).toJs();
        }
        if (unwrap(source.HRDepartment)) {
            this.HRDepartment = unwrap(source.HRDepartment).toJs();
        }
    }

    public toObservable(): HRDepartmentRoleEmployeeObservableFullDTO {
        let e = new HRDepartmentRoleEmployeeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class HRDepartmentRoleEmployeeRichDTO extends HRDepartmentRoleEmployeeFullDTO {
    public __type = 'HRDepartmentRoleEmployeeRichDTO';

    private _hrdepartmentroleemployeerichdto: string;

    public static fromJs(source: IHRDepartmentRoleEmployeeRichDTO): HRDepartmentRoleEmployeeRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentRoleEmployeeRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IHRDepartmentRoleEmployeeRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: HRDepartmentRoleEmployeeObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): HRDepartmentRoleEmployeeObservableRichDTO {
        let e = new HRDepartmentRoleEmployeeObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class IMRequestSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'IMRequestSimpleDTO';

    private _imrequestsimpledto: string;

    public Email: string;

    public Message: string;

    public Name: string;

    public get Identity() : IMRequestIdentityDTO {
        return new IMRequestIdentityDTO(this.Id);
    }

    public static fromJs(source: IIMRequestSimpleDTO): IMRequestSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestSimpleDTO): void {
        super.fromJs(source);
        this.Email = source.Email;
        this.Message = source.Message;
        this.Name = source.Name;
    }

    public fromObservable(source: IMRequestObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Email = unwrap(source.Email);
        this.Message = unwrap(source.Message);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): IMRequestObservableSimpleDTO {
        let e = new IMRequestObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class IMRequestFullDTO extends IMRequestSimpleDTO {
    public __type = 'IMRequestFullDTO';

    private _imrequestfulldto: string;

    public static fromJs(source: IIMRequestFullDTO): IMRequestFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: IMRequestObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): IMRequestObservableFullDTO {
        let e = new IMRequestObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class IMRequestRichDTO extends IMRequestFullDTO {
    public __type = 'IMRequestRichDTO';

    private _imrequestrichdto: string;

    public OneToOneDetail: IMRequestDetailRichDTO;

    public static fromJs(source: IIMRequestRichDTO): IMRequestRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestRichDTO): void {
        super.fromJs(source);
        this.OneToOneDetail = IMRequestDetailRichDTO.fromJs(source.OneToOneDetail);
    }

    public fromObservable(source: IMRequestObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.OneToOneDetail)) {
            this.OneToOneDetail = unwrap(source.OneToOneDetail).toJs();
        }
    }

    public toObservable(): IMRequestObservableRichDTO {
        let e = new IMRequestObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class IMRequestDetailSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'IMRequestDetailSimpleDTO';

    private _imrequestdetailsimpledto: string;

    public static fromJs(source: IIMRequestDetailSimpleDTO): IMRequestDetailSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestDetailSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestDetailSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: IMRequestDetailObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): IMRequestDetailObservableSimpleDTO {
        let e = new IMRequestDetailObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class IMRequestDetailFullDTO extends IMRequestDetailSimpleDTO {
    public __type = 'IMRequestDetailFullDTO';

    private _imrequestdetailfulldto: string;

    public Request: IMRequestSimpleDTO;

    public static fromJs(source: IIMRequestDetailFullDTO): IMRequestDetailFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestDetailFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestDetailFullDTO): void {
        super.fromJs(source);
        this.Request = IMRequestSimpleDTO.fromJs(source.Request);
    }

    public fromObservable(source: IMRequestDetailObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Request)) {
            this.Request = unwrap(source.Request).toJs();
        }
    }

    public toObservable(): IMRequestDetailObservableFullDTO {
        let e = new IMRequestDetailObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class IMRequestDetailRichDTO extends IMRequestDetailFullDTO {
    public __type = 'IMRequestDetailRichDTO';

    private _imrequestdetailrichdto: string;

    public static fromJs(source: IIMRequestDetailRichDTO): IMRequestDetailRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestDetailRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IIMRequestDetailRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: IMRequestDetailObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): IMRequestDetailObservableRichDTO {
        let e = new IMRequestDetailObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class InformationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'InformationSimpleDTO';

    private _informationsimpledto: string;

    public Email: string;

    public Name: string;

    public get Identity() : InformationIdentityDTO {
        return new InformationIdentityDTO(this.Id);
    }

    public static fromJs(source: IInformationSimpleDTO): InformationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IInformationSimpleDTO): void {
        super.fromJs(source);
        this.Email = source.Email;
        this.Name = source.Name;
    }

    public fromObservable(source: InformationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Email = unwrap(source.Email);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): InformationObservableSimpleDTO {
        let e = new InformationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class InformationFullDTO extends InformationSimpleDTO {
    public __type = 'InformationFullDTO';

    private _informationfulldto: string;

    public static fromJs(source: IInformationFullDTO): InformationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IInformationFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: InformationObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): InformationObservableFullDTO {
        let e = new InformationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class InformationRichDTO extends InformationFullDTO {
    public __type = 'InformationRichDTO';

    private _informationrichdto: string;

    public static fromJs(source: IInformationRichDTO): InformationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IInformationRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: InformationObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): InformationObservableRichDTO {
        let e = new InformationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class LegalEntityBaseSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'LegalEntityBaseSimpleDTO';

    private _legalentitybasesimpledto: string;

    public AribaStatus: RevenueDocumentAribaStatus;

    public Name: string;

    public NameEnglish: string;

    public static fromJs(source: ILegalEntityBaseSimpleDTO): LegalEntityBaseSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LegalEntityBaseSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILegalEntityBaseSimpleDTO): void {
        super.fromJs(source);
        this.AribaStatus = RevenueDocumentAribaStatus.fromJs(source.AribaStatus);
        this.Name = source.Name;
        this.NameEnglish = source.NameEnglish;
    }

    public fromObservable(source: LegalEntityBaseObservableSimpleDTO): void {
        super.fromObservable(source);
        this.AribaStatus = unwrap(source.AribaStatus);
        this.Name = unwrap(source.Name);
        this.NameEnglish = unwrap(source.NameEnglish);
    }

    public toObservable(): LegalEntityBaseObservableSimpleDTO {
        let e = new LegalEntityBaseObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class LocationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'LocationSimpleDTO';

    private _locationsimpledto: string;

    public CloseDate: number;

    public Code: number;

    public ContainsOnlyInactiveChildren = false;

    public IsFinancial = false;

    public IsLeaf = false;

    public LocationType: LocationType;

    public Name: string;

    public get Identity() : LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id);
    }

    public static fromJs(source: ILocationSimpleDTO): LocationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocationSimpleDTO): void {
        super.fromJs(source);
        this.CloseDate = source.CloseDate;
        this.Code = source.Code;
        this.ContainsOnlyInactiveChildren = source.ContainsOnlyInactiveChildren;
        this.IsFinancial = source.IsFinancial;
        this.IsLeaf = source.IsLeaf;
        this.LocationType = source.LocationType;
        this.Name = source.Name;
    }

    public fromObservable(source: LocationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.CloseDate = unwrap(source.CloseDate);
        this.Code = unwrap(source.Code);
        this.ContainsOnlyInactiveChildren = unwrap(source.ContainsOnlyInactiveChildren);
        this.IsFinancial = unwrap(source.IsFinancial);
        this.IsLeaf = unwrap(source.IsLeaf);
        this.LocationType = unwrap(source.LocationType);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): LocationObservableSimpleDTO {
        let e = new LocationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class LocationFullDTO extends LocationSimpleDTO {
    public __type = 'LocationFullDTO';

    private _locationfulldto: string;

    public Country: CountrySimpleDTO;

    public Parent: LocationSimpleDTO;

    public static fromJs(source: ILocationFullDTO): LocationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocationFullDTO): void {
        super.fromJs(source);
        this.Country = CountrySimpleDTO.fromJs(source.Country);
        this.Parent = LocationSimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: LocationObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Country)) {
            this.Country = unwrap(source.Country).toJs();
        }
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): LocationObservableFullDTO {
        let e = new LocationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class LocationRichDTO extends LocationFullDTO {
    public __type = 'LocationRichDTO';

    private _locationrichdto: string;

    public BinaryData: number [];

    public Children: LocationRichDTO [];

    public static fromJs(source: ILocationRichDTO): LocationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILocationRichDTO): void {
        super.fromJs(source);
        if (source.BinaryData) {
            this.BinaryData = source.BinaryData.map(e => {
                return e;
            });
        }
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return LocationRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: LocationObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BinaryData)) {
            this.BinaryData = source.BinaryData().map(e => {
                return unwrap(e);
            });
        }
        if (unwrap(source.Children)) {
            this.Children = source.Children().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): LocationObservableRichDTO {
        let e = new LocationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ManagementUnitSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ManagementUnitSimpleDTO';

    private _managementunitsimpledto: string;

    public BusinessUnitStatus: BusinessUnitStatus;

    public IsProduction = false;

    public Name: string;

    public Period = Framework.Core.Period.Eternity;

    public get Identity() : ManagementUnitIdentityDTO {
        return new ManagementUnitIdentityDTO(this.Id);
    }

    public static fromJs(source: IManagementUnitSimpleDTO): ManagementUnitSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitSimpleDTO): void {
        super.fromJs(source);
        this.BusinessUnitStatus = source.BusinessUnitStatus;
        this.IsProduction = source.IsProduction;
        this.Name = source.Name;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
    }

    public fromObservable(source: ManagementUnitObservableSimpleDTO): void {
        super.fromObservable(source);
        this.BusinessUnitStatus = unwrap(source.BusinessUnitStatus);
        this.IsProduction = unwrap(source.IsProduction);
        this.Name = unwrap(source.Name);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
    }

    public toObservable(): ManagementUnitObservableSimpleDTO {
        let e = new ManagementUnitObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ManagementUnitFullDTO extends ManagementUnitSimpleDTO {
    public __type = 'ManagementUnitFullDTO';

    private _managementunitfulldto: string;

    public Parent: ManagementUnitSimpleDTO;

    public static fromJs(source: IManagementUnitFullDTO): ManagementUnitFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitFullDTO): void {
        super.fromJs(source);
        this.Parent = ManagementUnitSimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: ManagementUnitObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): ManagementUnitObservableFullDTO {
        let e = new ManagementUnitObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ManagementUnitRichDTO extends ManagementUnitFullDTO {
    public __type = 'ManagementUnitRichDTO';

    private _managementunitrichdto: string;

    public BusinessUnits: ManagementUnitAndBusinessUnitLinkRichDTO [];

    public Children: ManagementUnitRichDTO [];

    public HRDepartments: ManagementUnitAndHRDepartmentLinkRichDTO [];

    public static fromJs(source: IManagementUnitRichDTO): ManagementUnitRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitRichDTO): void {
        super.fromJs(source);
        if (source.BusinessUnits) {
            this.BusinessUnits = source.BusinessUnits.map(e => {
                return ManagementUnitAndBusinessUnitLinkRichDTO.fromJs(e);
            });
        }
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return ManagementUnitRichDTO.fromJs(e);
            });
        }
        if (source.HRDepartments) {
            this.HRDepartments = source.HRDepartments.map(e => {
                return ManagementUnitAndHRDepartmentLinkRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: ManagementUnitObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnits)) {
            this.BusinessUnits = source.BusinessUnits().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Children)) {
            this.Children = source.Children().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.HRDepartments)) {
            this.HRDepartments = source.HRDepartments().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): ManagementUnitObservableRichDTO {
        let e = new ManagementUnitObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ManagementUnitAndBusinessUnitLinkSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkSimpleDTO';

    private _managementunitandbusinessunitlinksimpledto: string;

    public EqualBU = false;

    public get Identity() : ManagementUnitAndBusinessUnitLinkIdentityDTO {
        return new ManagementUnitAndBusinessUnitLinkIdentityDTO(this.Id);
    }

    public static fromJs(source: IManagementUnitAndBusinessUnitLinkSimpleDTO): ManagementUnitAndBusinessUnitLinkSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndBusinessUnitLinkSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndBusinessUnitLinkSimpleDTO): void {
        super.fromJs(source);
        this.EqualBU = source.EqualBU;
    }

    public fromObservable(source: ManagementUnitAndBusinessUnitLinkObservableSimpleDTO): void {
        super.fromObservable(source);
        this.EqualBU = unwrap(source.EqualBU);
    }

    public toObservable(): ManagementUnitAndBusinessUnitLinkObservableSimpleDTO {
        let e = new ManagementUnitAndBusinessUnitLinkObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ManagementUnitAndBusinessUnitLinkFullDTO extends ManagementUnitAndBusinessUnitLinkSimpleDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkFullDTO';

    private _managementunitandbusinessunitlinkfulldto: string;

    public BusinessUnit: BusinessUnitSimpleDTO;

    public ManagementUnit: ManagementUnitSimpleDTO;

    public static fromJs(source: IManagementUnitAndBusinessUnitLinkFullDTO): ManagementUnitAndBusinessUnitLinkFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndBusinessUnitLinkFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndBusinessUnitLinkFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit = BusinessUnitSimpleDTO.fromJs(source.BusinessUnit);
        this.ManagementUnit = ManagementUnitSimpleDTO.fromJs(source.ManagementUnit);
    }

    public fromObservable(source: ManagementUnitAndBusinessUnitLinkObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnit)) {
            this.BusinessUnit = unwrap(source.BusinessUnit).toJs();
        }
        if (unwrap(source.ManagementUnit)) {
            this.ManagementUnit = unwrap(source.ManagementUnit).toJs();
        }
    }

    public toObservable(): ManagementUnitAndBusinessUnitLinkObservableFullDTO {
        let e = new ManagementUnitAndBusinessUnitLinkObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ManagementUnitAndBusinessUnitLinkRichDTO extends ManagementUnitAndBusinessUnitLinkFullDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkRichDTO';

    private _managementunitandbusinessunitlinkrichdto: string;

    public static fromJs(source: IManagementUnitAndBusinessUnitLinkRichDTO): ManagementUnitAndBusinessUnitLinkRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndBusinessUnitLinkRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndBusinessUnitLinkRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ManagementUnitAndBusinessUnitLinkObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ManagementUnitAndBusinessUnitLinkObservableRichDTO {
        let e = new ManagementUnitAndBusinessUnitLinkObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ManagementUnitAndHRDepartmentLinkSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkSimpleDTO';

    private _managementunitandhrdepartmentlinksimpledto: string;

    public get Identity() : ManagementUnitAndHRDepartmentLinkIdentityDTO {
        return new ManagementUnitAndHRDepartmentLinkIdentityDTO(this.Id);
    }

    public static fromJs(source: IManagementUnitAndHRDepartmentLinkSimpleDTO): ManagementUnitAndHRDepartmentLinkSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndHRDepartmentLinkSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndHRDepartmentLinkSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ManagementUnitAndHRDepartmentLinkObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ManagementUnitAndHRDepartmentLinkObservableSimpleDTO {
        let e = new ManagementUnitAndHRDepartmentLinkObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ManagementUnitAndHRDepartmentLinkFullDTO extends ManagementUnitAndHRDepartmentLinkSimpleDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkFullDTO';

    private _managementunitandhrdepartmentlinkfulldto: string;

    public HRDepartment: HRDepartmentSimpleDTO;

    public ManagementUnit: ManagementUnitSimpleDTO;

    public static fromJs(source: IManagementUnitAndHRDepartmentLinkFullDTO): ManagementUnitAndHRDepartmentLinkFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndHRDepartmentLinkFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndHRDepartmentLinkFullDTO): void {
        super.fromJs(source);
        this.HRDepartment = HRDepartmentSimpleDTO.fromJs(source.HRDepartment);
        this.ManagementUnit = ManagementUnitSimpleDTO.fromJs(source.ManagementUnit);
    }

    public fromObservable(source: ManagementUnitAndHRDepartmentLinkObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.HRDepartment)) {
            this.HRDepartment = unwrap(source.HRDepartment).toJs();
        }
        if (unwrap(source.ManagementUnit)) {
            this.ManagementUnit = unwrap(source.ManagementUnit).toJs();
        }
    }

    public toObservable(): ManagementUnitAndHRDepartmentLinkObservableFullDTO {
        let e = new ManagementUnitAndHRDepartmentLinkObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ManagementUnitAndHRDepartmentLinkRichDTO extends ManagementUnitAndHRDepartmentLinkFullDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkRichDTO';

    private _managementunitandhrdepartmentlinkrichdto: string;

    public static fromJs(source: IManagementUnitAndHRDepartmentLinkRichDTO): ManagementUnitAndHRDepartmentLinkRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitAndHRDepartmentLinkRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitAndHRDepartmentLinkRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ManagementUnitAndHRDepartmentLinkObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ManagementUnitAndHRDepartmentLinkObservableRichDTO {
        let e = new ManagementUnitAndHRDepartmentLinkObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ManagementUnitFluentMappingSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ManagementUnitFluentMappingSimpleDTO';

    private _managementunitfluentmappingsimpledto: string;

    public BusinessUnitStatus: BusinessUnitStatus;

    public IsProduction = false;

    public MuComponent: MuComponent;

    public Name: string;

    public Period = Framework.Core.Period.Eternity;

    public static fromJs(source: IManagementUnitFluentMappingSimpleDTO): ManagementUnitFluentMappingSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitFluentMappingSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IManagementUnitFluentMappingSimpleDTO): void {
        super.fromJs(source);
        this.BusinessUnitStatus = source.BusinessUnitStatus;
        this.IsProduction = source.IsProduction;
        this.MuComponent = MuComponent.fromJs(source.MuComponent);
        this.Name = source.Name;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
    }

    public fromObservable(source: ManagementUnitFluentMappingObservableSimpleDTO): void {
        super.fromObservable(source);
        this.BusinessUnitStatus = unwrap(source.BusinessUnitStatus);
        this.IsProduction = unwrap(source.IsProduction);
        this.MuComponent = unwrap(source.MuComponent);
        this.Name = unwrap(source.Name);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
    }

    public toObservable(): ManagementUnitFluentMappingObservableSimpleDTO {
        let e = new ManagementUnitFluentMappingObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class PrincipalSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'PrincipalSimpleDTO';

    private _principalsimpledto: string;

    public ExternalId: string;

    public get Identity() : PrincipalIdentityDTO {
        return new PrincipalIdentityDTO(this.Id);
    }

    public static fromJs(source: IPrincipalSimpleDTO): PrincipalSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalSimpleDTO): void {
        super.fromJs(source);
        this.ExternalId = source.ExternalId;
    }

    public fromObservable(source: PrincipalObservableSimpleDTO): void {
        super.fromObservable(source);
        this.ExternalId = unwrap(source.ExternalId);
    }

    public toObservable(): PrincipalObservableSimpleDTO {
        let e = new PrincipalObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class PrincipalFullDTO extends PrincipalSimpleDTO {
    public __type = 'PrincipalFullDTO';

    private _principalfulldto: string;

    public static fromJs(source: IPrincipalFullDTO): PrincipalFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: PrincipalObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): PrincipalObservableFullDTO {
        let e = new PrincipalObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class PrincipalRichDTO extends PrincipalFullDTO {
    public __type = 'PrincipalRichDTO';

    private _principalrichdto: string;

    public static fromJs(source: IPrincipalRichDTO): PrincipalRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: PrincipalObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): PrincipalObservableRichDTO {
        let e = new PrincipalObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SqlParserTestObjSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'SqlParserTestObjSimpleDTO';

    private _sqlparsertestobjsimpledto: string;

    public NotNullColumn: string;

    public UniqueColumn: string;

    public get Identity() : SqlParserTestObjIdentityDTO {
        return new SqlParserTestObjIdentityDTO(this.Id);
    }

    public static fromJs(source: ISqlParserTestObjSimpleDTO): SqlParserTestObjSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjSimpleDTO): void {
        super.fromJs(source);
        this.NotNullColumn = source.NotNullColumn;
        this.UniqueColumn = source.UniqueColumn;
    }

    public fromObservable(source: SqlParserTestObjObservableSimpleDTO): void {
        super.fromObservable(source);
        this.NotNullColumn = unwrap(source.NotNullColumn);
        this.UniqueColumn = unwrap(source.UniqueColumn);
    }

    public toObservable(): SqlParserTestObjObservableSimpleDTO {
        let e = new SqlParserTestObjObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SqlParserTestObjFullDTO extends SqlParserTestObjSimpleDTO {
    public __type = 'SqlParserTestObjFullDTO';

    private _sqlparsertestobjfulldto: string;

    public static fromJs(source: ISqlParserTestObjFullDTO): SqlParserTestObjFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SqlParserTestObjObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SqlParserTestObjObservableFullDTO {
        let e = new SqlParserTestObjObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SqlParserTestObjContainerSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'SqlParserTestObjContainerSimpleDTO';

    private _sqlparsertestobjcontainersimpledto: string;

    public get Identity() : SqlParserTestObjContainerIdentityDTO {
        return new SqlParserTestObjContainerIdentityDTO(this.Id);
    }

    public static fromJs(source: ISqlParserTestObjContainerSimpleDTO): SqlParserTestObjContainerSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjContainerSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjContainerSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SqlParserTestObjContainerObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SqlParserTestObjContainerObservableSimpleDTO {
        let e = new SqlParserTestObjContainerObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SqlParserTestObjContainerFullDTO extends SqlParserTestObjContainerSimpleDTO {
    public __type = 'SqlParserTestObjContainerFullDTO';

    private _sqlparsertestobjcontainerfulldto: string;

    public IncludedObject: SqlParserTestObjSimpleDTO;

    public static fromJs(source: ISqlParserTestObjContainerFullDTO): SqlParserTestObjContainerFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SqlParserTestObjContainerFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISqlParserTestObjContainerFullDTO): void {
        super.fromJs(source);
        this.IncludedObject = SqlParserTestObjSimpleDTO.fromJs(source.IncludedObject);
    }

    public fromObservable(source: SqlParserTestObjContainerObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.IncludedObject)) {
            this.IncludedObject = unwrap(source.IncludedObject).toJs();
        }
    }

    public toObservable(): SqlParserTestObjContainerObservableFullDTO {
        let e = new SqlParserTestObjContainerObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class TestCustomContextSecurityObjSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestCustomContextSecurityObjSimpleDTO';

    private _testcustomcontextsecurityobjsimpledto: string;

    public Name: string;

    public get Identity() : TestCustomContextSecurityObjIdentityDTO {
        return new TestCustomContextSecurityObjIdentityDTO(this.Id);
    }

    public static fromJs(source: ITestCustomContextSecurityObjSimpleDTO): TestCustomContextSecurityObjSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestCustomContextSecurityObjSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestCustomContextSecurityObjObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestCustomContextSecurityObjObservableSimpleDTO {
        let e = new TestCustomContextSecurityObjObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestCustomContextSecurityObjFullDTO extends TestCustomContextSecurityObjSimpleDTO {
    public __type = 'TestCustomContextSecurityObjFullDTO';

    private _testcustomcontextsecurityobjfulldto: string;

    public static fromJs(source: ITestCustomContextSecurityObjFullDTO): TestCustomContextSecurityObjFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestCustomContextSecurityObjFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestCustomContextSecurityObjObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestCustomContextSecurityObjObservableFullDTO {
        let e = new TestCustomContextSecurityObjObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestCustomContextSecurityObjRichDTO extends TestCustomContextSecurityObjFullDTO {
    public __type = 'TestCustomContextSecurityObjRichDTO';

    private _testcustomcontextsecurityobjrichdto: string;

    public static fromJs(source: ITestCustomContextSecurityObjRichDTO): TestCustomContextSecurityObjRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestCustomContextSecurityObjRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestCustomContextSecurityObjObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestCustomContextSecurityObjObservableRichDTO {
        let e = new TestCustomContextSecurityObjObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestImmutableObjSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestImmutableObjSimpleDTO';

    private _testimmutableobjsimpledto: string;

    public TestImmutablePrimitiveProperty: string;

    public get Identity() : TestImmutableObjIdentityDTO {
        return new TestImmutableObjIdentityDTO(this.Id);
    }

    public static fromJs(source: ITestImmutableObjSimpleDTO): TestImmutableObjSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestImmutableObjSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestImmutableObjSimpleDTO): void {
        super.fromJs(source);
        this.TestImmutablePrimitiveProperty = source.TestImmutablePrimitiveProperty;
    }

    public fromObservable(source: TestImmutableObjObservableSimpleDTO): void {
        super.fromObservable(source);
        this.TestImmutablePrimitiveProperty = unwrap(source.TestImmutablePrimitiveProperty);
    }

    public toObservable(): TestImmutableObjObservableSimpleDTO {
        let e = new TestImmutableObjObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class TestImmutableObjFullDTO extends TestImmutableObjSimpleDTO {
    public __type = 'TestImmutableObjFullDTO';

    private _testimmutableobjfulldto: string;

    public TestImmutableRefProperty: EmployeeSimpleDTO;

    public static fromJs(source: ITestImmutableObjFullDTO): TestImmutableObjFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestImmutableObjFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestImmutableObjFullDTO): void {
        super.fromJs(source);
        this.TestImmutableRefProperty = EmployeeSimpleDTO.fromJs(source.TestImmutableRefProperty);
    }

    public fromObservable(source: TestImmutableObjObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.TestImmutableRefProperty)) {
            this.TestImmutableRefProperty = unwrap(source.TestImmutableRefProperty).toJs();
        }
    }

    public toObservable(): TestImmutableObjObservableFullDTO {
        let e = new TestImmutableObjObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class TestImmutableObjRichDTO extends TestImmutableObjFullDTO {
    public __type = 'TestImmutableObjRichDTO';

    private _testimmutableobjrichdto: string;

    public static fromJs(source: ITestImmutableObjRichDTO): TestImmutableObjRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestImmutableObjRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestImmutableObjRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestImmutableObjObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestImmutableObjObservableRichDTO {
        let e = new TestImmutableObjObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class TestObjForNestedSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestObjForNestedSimpleDTO';

    private _testobjfornestedsimpledto: string;

    public Name: string;

    public Period = Framework.Core.Period.Eternity;

    public get Identity() : TestObjForNestedIdentityDTO {
        return new TestObjForNestedIdentityDTO(this.Id);
    }

    public static fromJs(source: ITestObjForNestedSimpleDTO): TestObjForNestedSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestObjForNestedSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestObjForNestedSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
    }

    public fromObservable(source: TestObjForNestedObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
    }

    public toObservable(): TestObjForNestedObservableSimpleDTO {
        let e = new TestObjForNestedObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestRootSecurityObjSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestRootSecurityObjSimpleDTO';

    private _testrootsecurityobjsimpledto: string;

    public Name: string;

    public get Identity() : TestRootSecurityObjIdentityDTO {
        return new TestRootSecurityObjIdentityDTO(this.Id);
    }

    public static fromJs(source: ITestRootSecurityObjSimpleDTO): TestRootSecurityObjSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestRootSecurityObjSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestRootSecurityObjObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestRootSecurityObjObservableSimpleDTO {
        let e = new TestRootSecurityObjObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestRootSecurityObjFullDTO extends TestRootSecurityObjSimpleDTO {
    public __type = 'TestRootSecurityObjFullDTO';

    private _testrootsecurityobjfulldto: string;

    public BusinessUnit: BusinessUnitSimpleDTO;

    public Location: LocationSimpleDTO;

    public ManagementUnitFluentMapping: ManagementUnitFluentMappingSimpleDTO;

    public static fromJs(source: ITestRootSecurityObjFullDTO): TestRootSecurityObjFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestRootSecurityObjFullDTO): void {
        super.fromJs(source);
        this.BusinessUnit = BusinessUnitSimpleDTO.fromJs(source.BusinessUnit);
        this.Location = LocationSimpleDTO.fromJs(source.Location);
        this.ManagementUnitFluentMapping = ManagementUnitFluentMappingSimpleDTO.fromJs(source.ManagementUnitFluentMapping);
    }

    public fromObservable(source: TestRootSecurityObjObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.BusinessUnit)) {
            this.BusinessUnit = unwrap(source.BusinessUnit).toJs();
        }
        if (unwrap(source.Location)) {
            this.Location = unwrap(source.Location).toJs();
        }
        if (unwrap(source.ManagementUnitFluentMapping)) {
            this.ManagementUnitFluentMapping = unwrap(source.ManagementUnitFluentMapping).toJs();
        }
    }

    public toObservable(): TestRootSecurityObjObservableFullDTO {
        let e = new TestRootSecurityObjObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestRootSecurityObjRichDTO extends TestRootSecurityObjFullDTO {
    public __type = 'TestRootSecurityObjRichDTO';

    private _testrootsecurityobjrichdto: string;

    public Items: TestSecurityObjItemRichDTO [];

    public static fromJs(source: ITestRootSecurityObjRichDTO): TestRootSecurityObjRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestRootSecurityObjRichDTO): void {
        super.fromJs(source);
        if (source.Items) {
            this.Items = source.Items.map(e => {
                return TestSecurityObjItemRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: TestRootSecurityObjObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Items)) {
            this.Items = source.Items().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): TestRootSecurityObjObservableRichDTO {
        let e = new TestRootSecurityObjObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecurityObjItemSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestSecurityObjItemSimpleDTO';

    private _testsecurityobjitemsimpledto: string;

    public Name: string;

    public get Identity() : TestSecurityObjItemIdentityDTO {
        return new TestSecurityObjItemIdentityDTO(this.Id);
    }

    public static fromJs(source: ITestSecurityObjItemSimpleDTO): TestSecurityObjItemSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecurityObjItemSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecurityObjItemObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecurityObjItemObservableSimpleDTO {
        let e = new TestSecurityObjItemObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecurityObjItemFullDTO extends TestSecurityObjItemSimpleDTO {
    public __type = 'TestSecurityObjItemFullDTO';

    private _testsecurityobjitemfulldto: string;

    public FirstMaster: TestRootSecurityObjSimpleDTO;

    public static fromJs(source: ITestSecurityObjItemFullDTO): TestSecurityObjItemFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecurityObjItemFullDTO): void {
        super.fromJs(source);
        this.FirstMaster = TestRootSecurityObjSimpleDTO.fromJs(source.FirstMaster);
    }

    public fromObservable(source: TestSecurityObjItemObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.FirstMaster)) {
            this.FirstMaster = unwrap(source.FirstMaster).toJs();
        }
    }

    public toObservable(): TestSecurityObjItemObservableFullDTO {
        let e = new TestSecurityObjItemObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecurityObjItemRichDTO extends TestSecurityObjItemFullDTO {
    public __type = 'TestSecurityObjItemRichDTO';

    private _testsecurityobjitemrichdto: string;

    public Items: TestSecuritySubObjItemRichDTO [];

    public Items2: TestSecuritySubObjItem2RichDTO [];

    public Items3: TestSecuritySubObjItem3RichDTO [];

    public static fromJs(source: ITestSecurityObjItemRichDTO): TestSecurityObjItemRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecurityObjItemRichDTO): void {
        super.fromJs(source);
        if (source.Items) {
            this.Items = source.Items.map(e => {
                return TestSecuritySubObjItemRichDTO.fromJs(e);
            });
        }
        if (source.Items2) {
            this.Items2 = source.Items2.map(e => {
                return TestSecuritySubObjItem2RichDTO.fromJs(e);
            });
        }
        if (source.Items3) {
            this.Items3 = source.Items3.map(e => {
                return TestSecuritySubObjItem3RichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: TestSecurityObjItemObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Items)) {
            this.Items = source.Items().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Items2)) {
            this.Items2 = source.Items2().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Items3)) {
            this.Items3 = source.Items3().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): TestSecurityObjItemObservableRichDTO {
        let e = new TestSecurityObjItemObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItemSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestSecuritySubObjItemSimpleDTO';

    private _testsecuritysubobjitemsimpledto: string;

    public Name: string;

    public get Identity() : TestSecuritySubObjItemIdentityDTO {
        return new TestSecuritySubObjItemIdentityDTO(this.Id);
    }

    public static fromJs(source: ITestSecuritySubObjItemSimpleDTO): TestSecuritySubObjItemSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItemSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecuritySubObjItemObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecuritySubObjItemObservableSimpleDTO {
        let e = new TestSecuritySubObjItemObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItemFullDTO extends TestSecuritySubObjItemSimpleDTO {
    public __type = 'TestSecuritySubObjItemFullDTO';

    private _testsecuritysubobjitemfulldto: string;

    public InnerMaster: TestSecurityObjItemSimpleDTO;

    public static fromJs(source: ITestSecuritySubObjItemFullDTO): TestSecuritySubObjItemFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItemFullDTO): void {
        super.fromJs(source);
        this.InnerMaster = TestSecurityObjItemSimpleDTO.fromJs(source.InnerMaster);
    }

    public fromObservable(source: TestSecuritySubObjItemObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.InnerMaster)) {
            this.InnerMaster = unwrap(source.InnerMaster).toJs();
        }
    }

    public toObservable(): TestSecuritySubObjItemObservableFullDTO {
        let e = new TestSecuritySubObjItemObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItemRichDTO extends TestSecuritySubObjItemFullDTO {
    public __type = 'TestSecuritySubObjItemRichDTO';

    private _testsecuritysubobjitemrichdto: string;

    public static fromJs(source: ITestSecuritySubObjItemRichDTO): TestSecuritySubObjItemRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItemRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestSecuritySubObjItemObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestSecuritySubObjItemObservableRichDTO {
        let e = new TestSecuritySubObjItemObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItem2SimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestSecuritySubObjItem2SimpleDTO';

    private _testsecuritysubobjitem2simpledto: string;

    public Name: string;

    public get Identity() : TestSecuritySubObjItem2IdentityDTO {
        return new TestSecuritySubObjItem2IdentityDTO(this.Id);
    }

    public static fromJs(source: ITestSecuritySubObjItem2SimpleDTO): TestSecuritySubObjItem2SimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2SimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem2SimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecuritySubObjItem2ObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecuritySubObjItem2ObservableSimpleDTO {
        let e = new TestSecuritySubObjItem2ObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItem2FullDTO extends TestSecuritySubObjItem2SimpleDTO {
    public __type = 'TestSecuritySubObjItem2FullDTO';

    private _testsecuritysubobjitem2fulldto: string;

    public InnerMaster: TestSecurityObjItemSimpleDTO;

    public RootSecurityObj: TestRootSecurityObjSimpleDTO;

    public static fromJs(source: ITestSecuritySubObjItem2FullDTO): TestSecuritySubObjItem2FullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2FullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem2FullDTO): void {
        super.fromJs(source);
        this.InnerMaster = TestSecurityObjItemSimpleDTO.fromJs(source.InnerMaster);
        this.RootSecurityObj = TestRootSecurityObjSimpleDTO.fromJs(source.RootSecurityObj);
    }

    public fromObservable(source: TestSecuritySubObjItem2ObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.InnerMaster)) {
            this.InnerMaster = unwrap(source.InnerMaster).toJs();
        }
        if (unwrap(source.RootSecurityObj)) {
            this.RootSecurityObj = unwrap(source.RootSecurityObj).toJs();
        }
    }

    public toObservable(): TestSecuritySubObjItem2ObservableFullDTO {
        let e = new TestSecuritySubObjItem2ObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItem2RichDTO extends TestSecuritySubObjItem2FullDTO {
    public __type = 'TestSecuritySubObjItem2RichDTO';

    private _testsecuritysubobjitem2richdto: string;

    public static fromJs(source: ITestSecuritySubObjItem2RichDTO): TestSecuritySubObjItem2RichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2RichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem2RichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestSecuritySubObjItem2ObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestSecuritySubObjItem2ObservableRichDTO {
        let e = new TestSecuritySubObjItem2ObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItem3SimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TestSecuritySubObjItem3SimpleDTO';

    private _testsecuritysubobjitem3simpledto: string;

    public Name: string;

    public get Identity() : TestSecuritySubObjItem3IdentityDTO {
        return new TestSecuritySubObjItem3IdentityDTO(this.Id);
    }

    public static fromJs(source: ITestSecuritySubObjItem3SimpleDTO): TestSecuritySubObjItem3SimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3SimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem3SimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecuritySubObjItem3ObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecuritySubObjItem3ObservableSimpleDTO {
        let e = new TestSecuritySubObjItem3ObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItem3FullDTO extends TestSecuritySubObjItem3SimpleDTO {
    public __type = 'TestSecuritySubObjItem3FullDTO';

    private _testsecuritysubobjitem3fulldto: string;

    public InnerMaster: TestSecurityObjItemSimpleDTO;

    public static fromJs(source: ITestSecuritySubObjItem3FullDTO): TestSecuritySubObjItem3FullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3FullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem3FullDTO): void {
        super.fromJs(source);
        this.InnerMaster = TestSecurityObjItemSimpleDTO.fromJs(source.InnerMaster);
    }

    public fromObservable(source: TestSecuritySubObjItem3ObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.InnerMaster)) {
            this.InnerMaster = unwrap(source.InnerMaster).toJs();
        }
    }

    public toObservable(): TestSecuritySubObjItem3ObservableFullDTO {
        let e = new TestSecuritySubObjItem3ObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecuritySubObjItem3RichDTO extends TestSecuritySubObjItem3FullDTO {
    public __type = 'TestSecuritySubObjItem3RichDTO';

    private _testsecuritysubobjitem3richdto: string;

    public static fromJs(source: ITestSecuritySubObjItem3RichDTO): TestSecuritySubObjItem3RichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3RichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITestSecuritySubObjItem3RichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestSecuritySubObjItem3ObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestSecuritySubObjItem3ObservableRichDTO {
        let e = new TestSecuritySubObjItem3ObservableRichDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IAddressSimpleDTO extends IBaseAuditPersistentDTO {
    AddressType : AddressType;
    CityName : string;
    RegionName : string;
    Street : string;
    Zip : string;
}

export interface IAddressFullDTO extends IAddressSimpleDTO {
    CountryName : CountrySimpleDTO;
    LegalEntity : LegalEntityBaseSimpleDTO;
}

export interface IAddressRichDTO extends IAddressFullDTO {
}

export interface IBusinessUnitSimpleDTO extends IBaseAuditPersistentDTO {
    BusinessUnitStatus : BusinessUnitStatus;
    BusinessUnitTypeName : string;
    Commission : number;
    FirstNewBusinessStatusMonth? : Date;
    IsNewBusiness : boolean;
    IsPool : boolean;
    IsProduction : boolean;
    IsSpecialCommission : boolean;
    LastBusinessUnitHasNoLinkedProjectsWarningCheckDate? : Date;
    LastNewBusinessStatusMonth? : Date;
    LeastProjectStartDate? : Date;
    LobName : string;
    Name : string;
    NeedSendBusinessUnitHasNoLinkedProjectsWarning : boolean;
    NewBusinessStatusLeft : number;
    Options : BusinessUnitOptions;
    Period : Framework.Core.Period;
    ProjectStartMailList : string;
    Rank : number;
}

export interface IBusinessUnitFullDTO extends IBusinessUnitSimpleDTO {
    BusinessUnitForRent : BusinessUnitSimpleDTO;
    BusinessUnitType : BusinessUnitTypeSimpleDTO;
    Parent : BusinessUnitSimpleDTO;
}

export interface IBusinessUnitRichDTO extends IBusinessUnitFullDTO {
    BusinessUnitEmployeeRoles : BusinessUnitEmployeeRoleRichDTO [];
    Children : BusinessUnitRichDTO [];
    ManagementUnits : ManagementUnitAndBusinessUnitLinkRichDTO [];
    ManagerCommissions : BusinessUnitManagerCommissionLinkRichDTO [];
}

export class BusinessUnitVisualDTO extends BasePersistentDTO {
    public __type = 'BusinessUnitVisualDTO';

    private _businessunitvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: BusinessUnitObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): BusinessUnitObservableVisualDTO {
        let e = new BusinessUnitObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IBusinessUnitEmployeeRoleSimpleDTO extends IBaseAuditPersistentDTO {
    Role : BusinessUnitEmployeeRoleType;
}

export interface IBusinessUnitEmployeeRoleFullDTO extends IBusinessUnitEmployeeRoleSimpleDTO {
    BusinessUnit : BusinessUnitSimpleDTO;
    Employee : EmployeeSimpleDTO;
}

export interface IBusinessUnitEmployeeRoleRichDTO extends IBusinessUnitEmployeeRoleFullDTO {
}

export interface IBusinessUnitHrDepartmentSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface IBusinessUnitHrDepartmentFullDTO extends IBusinessUnitHrDepartmentSimpleDTO {
    BusinessUnit : BusinessUnitSimpleDTO;
    HRDepartment : HRDepartmentSimpleDTO;
}

export interface IBusinessUnitHrDepartmentRichDTO extends IBusinessUnitHrDepartmentFullDTO {
}

export interface IBusinessUnitManagerCommissionLinkSimpleDTO extends IBaseAuditPersistentDTO {
    Commission : number;
    Period : Framework.Core.Period;
}

export interface IBusinessUnitManagerCommissionLinkFullDTO extends IBusinessUnitManagerCommissionLinkSimpleDTO {
    BusinessUnit : BusinessUnitSimpleDTO;
    Manager : EmployeeSimpleDTO;
}

export interface IBusinessUnitManagerCommissionLinkRichDTO extends IBusinessUnitManagerCommissionLinkFullDTO {
}

export interface IBusinessUnitTypeSimpleDTO extends IBaseAuditPersistentDTO {
    AdditionalStartConfirm : boolean;
    AdditionalTransferConfirm : boolean;
    BillingProjectAreNotAllowed : boolean;
    CanBeIsSpecialCommission : boolean;
    CanBeLinkedToClient : boolean;
    CanBeLinkedToDepartment : boolean;
    CanBeNewBusiness : boolean;
    CanBeResourcePool : boolean;
    IsAdministrative : boolean;
    Name : string;
    NeedVertical : boolean;
    PossibleStartDate? : PossibleStartDate;
    PossibleTransferDate? : PossibleStartDate;
    PracticeAllowed : boolean;
    ProjectStartAllowed : boolean;
    StartBOConfirm : boolean;
    TransferBOConfirm : boolean;
}

export interface IBusinessUnitTypeFullDTO extends IBusinessUnitTypeSimpleDTO {
}

export interface IBusinessUnitTypeRichDTO extends IBusinessUnitTypeFullDTO {
    PossibleFinancialProjectTypes : BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO [];
    PossibleParents : BusinessUnitTypeLinkWithPossibleParentRichDTO [];
    TransferTo : BusinessUnitTypeLinkWithTransferToRichDTO [];
}

export class BusinessUnitTypeVisualDTO extends BasePersistentDTO {
    public __type = 'BusinessUnitTypeVisualDTO';

    private _businessunittypevisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitTypeVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitTypeVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: BusinessUnitTypeObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): BusinessUnitTypeObservableVisualDTO {
        let e = new BusinessUnitTypeObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO extends IBaseAuditPersistentDTO {
    FinancialProjectType : FinancialProjectType;
}

export interface IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO extends IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO {
    BusinessUnitType : BusinessUnitTypeSimpleDTO;
}

export interface IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO extends IBusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO {
}

export interface IBusinessUnitTypeLinkWithPossibleParentSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface IBusinessUnitTypeLinkWithPossibleParentFullDTO extends IBusinessUnitTypeLinkWithPossibleParentSimpleDTO {
    BusinessUnitType : BusinessUnitTypeSimpleDTO;
    PossibleParent : BusinessUnitTypeSimpleDTO;
}

export interface IBusinessUnitTypeLinkWithPossibleParentRichDTO extends IBusinessUnitTypeLinkWithPossibleParentFullDTO {
}

export interface IBusinessUnitTypeLinkWithTransferToSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface IBusinessUnitTypeLinkWithTransferToFullDTO extends IBusinessUnitTypeLinkWithTransferToSimpleDTO {
    BusinessUnitType : BusinessUnitTypeSimpleDTO;
    TransferTo : BusinessUnitTypeSimpleDTO;
}

export interface IBusinessUnitTypeLinkWithTransferToRichDTO extends IBusinessUnitTypeLinkWithTransferToFullDTO {
}

export interface ICompanyLegalEntitySimpleDTO extends IBaseAuditPersistentDTO {
    AribaStatus : RevenueDocumentAribaStatus;
    Code : string;
    Name : string;
    NameEnglish : string;
    Type : CompanyLegalEntityType;
}

export interface ICompanyLegalEntityFullDTO extends ICompanyLegalEntitySimpleDTO {
    BaseObj : TestObjForNestedSimpleDTO;
    CurrentObj : TestObjForNestedSimpleDTO;
    Parent : CompanyLegalEntitySimpleDTO;
}

export interface ICompanyLegalEntityRichDTO extends ICompanyLegalEntityFullDTO {
    Addresses : AddressRichDTO [];
}

export class CompanyLegalEntityVisualDTO extends BasePersistentDTO {
    public __type = 'CompanyLegalEntityVisualDTO';

    private _companylegalentityvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): CompanyLegalEntityVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CompanyLegalEntityVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: CompanyLegalEntityObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): CompanyLegalEntityObservableVisualDTO {
        let e = new CompanyLegalEntityObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ICountrySimpleDTO extends IBaseAuditPersistentDTO {
    Code : string;
    Culture : string;
    Name : string;
    NameNative : string;
}

export interface ICountryFullDTO extends ICountrySimpleDTO {
}

export interface ICountryRichDTO extends ICountryFullDTO {
}

export class CountryVisualDTO extends BasePersistentDTO {
    public __type = 'CountryVisualDTO';

    private _countryvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): CountryVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CountryVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: CountryObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): CountryObservableVisualDTO {
        let e = new CountryObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IEmployeeSimpleDTO extends IBaseAuditPersistentDTO {
    AccountName : string;
    Age : number;
    BirthDate? : Date;
    CanBePPM : boolean;
    CellPhone : string;
    CoreBusinessUnitPeriod? : Framework.Core.Period;
    DismissDate? : Date;
    EducationDuration : Framework.Core.Period;
    Email : string;
    ExternalId : number;
    Gender : Gender;
    HireDate? : Date;
    Interphone : string;
    IsCandidate : boolean;
    Landlinephone : string;
    LastActionDate? : Date;
    LocationCode? : number;
    Login : string;
    MailAccountName : string;
    NameEng : FioShort;
    NameNative : Fio;
    NameRussian : Fio;
    NonValidateVirtualProp : Date;
    PersonalCellPhone : string;
    Pin? : number;
    PlannedHireDate? : Date;
    ValidateVirtualProp : Date;
    WorkPeriod : Framework.Core.Period;
}

export interface IEmployeeFullDTO extends IEmployeeSimpleDTO {
    CoreBusinessUnit : BusinessUnitSimpleDTO;
    HRDepartment : HRDepartmentSimpleDTO;
    Location : LocationSimpleDTO;
    ManagementUnit : ManagementUnitSimpleDTO;
    PersonalAssistant : EmployeeSimpleDTO;
    Position : EmployeePositionSimpleDTO;
    Ppm : EmployeeSimpleDTO;
    RegistrationType : EmployeeRegistrationTypeSimpleDTO;
    Role : EmployeeRoleSimpleDTO;
    RoleDegree : EmployeeRoleDegreeSimpleDTO;
    VacationApprover : EmployeeSimpleDTO;
}

export interface IEmployeeEmailMassChangeModelSimpleDTO extends IBaseAbstractDTO {
    Email : string;
}

export interface IEmployeeEmailMassChangeModelFullDTO extends IEmployeeEmailMassChangeModelSimpleDTO {
}

export interface IEmployeeEmailMassChangeModelRichDTO extends IEmployeeEmailMassChangeModelFullDTO {
    ChangingObjects : EmployeeSimpleDTO [];
}

export interface IEmployeeInformationSimpleDTO extends IBaseAuditPersistentDTO {
    Email : string;
    Name : string;
    PersonalEmail : string;
}

export interface IEmployeeInformationFullDTO extends IEmployeeInformationSimpleDTO {
}

export interface IEmployeeInformationRichDTO extends IEmployeeInformationFullDTO {
}

export class EmployeeInformationVisualDTO extends BasePersistentDTO {
    public __type = 'EmployeeInformationVisualDTO';

    private _employeeinformationvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeInformationVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeInformationVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeInformationObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeInformationObservableVisualDTO {
        let e = new EmployeeInformationObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IEmployeePhotoSimpleDTO extends IBaseAuditPersistentDTO {
    ContentType : string;
    IsDefault : boolean;
    Type : EmployeePhotoType;
}

export interface IEmployeePhotoFullDTO extends IEmployeePhotoSimpleDTO {
    Employee : EmployeeSimpleDTO;
}

export interface IEmployeePhotoRichDTO extends IEmployeePhotoFullDTO {
    Data : number [];
}

export interface IEmployeePositionSimpleDTO extends IBaseAuditPersistentDTO {
    EnglishName : string;
    ExternalId : number;
    Name : string;
}

export interface IEmployeePositionFullDTO extends IEmployeePositionSimpleDTO {
    Location : LocationSimpleDTO;
}

export interface IEmployeePositionRichDTO extends IEmployeePositionFullDTO {
}

export class EmployeePositionVisualDTO extends BasePersistentDTO {
    public __type = 'EmployeePositionVisualDTO';

    private _employeepositionvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeePositionVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeePositionVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeePositionObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeePositionObservableVisualDTO {
        let e = new EmployeePositionObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IEmployeeRegistrationTypeSimpleDTO extends IBaseAuditPersistentDTO {
    ExternalId : number;
    Name : string;
}

export interface IEmployeeRegistrationTypeFullDTO extends IEmployeeRegistrationTypeSimpleDTO {
}

export interface IEmployeeRegistrationTypeRichDTO extends IEmployeeRegistrationTypeFullDTO {
}

export class EmployeeRegistrationTypeVisualDTO extends BasePersistentDTO {
    public __type = 'EmployeeRegistrationTypeVisualDTO';

    private _employeeregistrationtypevisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeRegistrationTypeVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRegistrationTypeVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeRegistrationTypeObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeRegistrationTypeObservableVisualDTO {
        let e = new EmployeeRegistrationTypeObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IEmployeeRoleSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IEmployeeRoleFullDTO extends IEmployeeRoleSimpleDTO {
}

export interface IEmployeeRoleRichDTO extends IEmployeeRoleFullDTO {
}

export class EmployeeRoleVisualDTO extends BasePersistentDTO {
    public __type = 'EmployeeRoleVisualDTO';

    private _employeerolevisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeRoleVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeRoleObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeRoleObservableVisualDTO {
        let e = new EmployeeRoleObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IEmployeeRoleDegreeSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IEmployeeRoleDegreeFullDTO extends IEmployeeRoleDegreeSimpleDTO {
}

export interface IEmployeeRoleDegreeRichDTO extends IEmployeeRoleDegreeFullDTO {
}

export class EmployeeRoleDegreeVisualDTO extends BasePersistentDTO {
    public __type = 'EmployeeRoleDegreeVisualDTO';

    private _employeeroledegreevisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeRoleDegreeVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeRoleDegreeVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeRoleDegreeObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeRoleDegreeObservableVisualDTO {
        let e = new EmployeeRoleDegreeObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IEmployeeSpecializationSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IEmployeeSpecializationFullDTO extends IEmployeeSpecializationSimpleDTO {
}

export interface IEmployeeSpecializationRichDTO extends IEmployeeSpecializationFullDTO {
}

export class EmployeeSpecializationVisualDTO extends BasePersistentDTO {
    public __type = 'EmployeeSpecializationVisualDTO';

    private _employeespecializationvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): EmployeeSpecializationVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new EmployeeSpecializationVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: EmployeeSpecializationObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): EmployeeSpecializationObservableVisualDTO {
        let e = new EmployeeSpecializationObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ILocation1676SimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ILocation1676FullDTO extends ILocation1676SimpleDTO {
}

export interface ILocation1676RichDTO extends ILocation1676FullDTO {
    Calendar : WorkingCalendar1676RichDTO [];
}

export class Location1676VisualDTO extends BasePersistentDTO {
    public __type = 'Location1676VisualDTO';

    private _location1676visualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): Location1676VisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new Location1676VisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: Location1676ObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): Location1676ObservableVisualDTO {
        let e = new Location1676ObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IWorkingCalendar1676SimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IWorkingCalendar1676FullDTO extends IWorkingCalendar1676SimpleDTO {
    Location : Location1676SimpleDTO;
}

export interface IWorkingCalendar1676RichDTO extends IWorkingCalendar1676FullDTO {
}

export class WorkingCalendar1676VisualDTO extends BasePersistentDTO {
    public __type = 'WorkingCalendar1676VisualDTO';

    private _workingcalendar1676visualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): WorkingCalendar1676VisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new WorkingCalendar1676VisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: WorkingCalendar1676ObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): WorkingCalendar1676ObservableVisualDTO {
        let e = new WorkingCalendar1676ObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IExample1SimpleDTO extends IBaseAuditPersistentDTO {
    Field1 : Guid;
    Field2 : Guid;
    Field3 : Guid;
}

export interface IExample1FullDTO extends IExample1SimpleDTO {
}

export interface IExample1RichDTO extends IExample1FullDTO {
    Items2 : Example2RichDTO [];
}

export interface IExample2SimpleDTO extends IBaseAuditPersistentDTO {
    Field1 : Guid;
    Field2 : Guid;
}

export interface IExample2FullDTO extends IExample2SimpleDTO {
    Parent : Example1SimpleDTO;
}

export interface IExample2RichDTO extends IExample2FullDTO {
}

export interface IHRDepartmentSimpleDTO extends IBaseAuditPersistentDTO {
    Code : string;
    CodeNative : string;
    CompanyLegalEntityName : string;
    ExternalId : number;
    IsLegal : boolean;
    IsProduction : boolean;
    LocationName : string;
    Name : string;
    NameNative : string;
}

export interface IHRDepartmentFullDTO extends IHRDepartmentSimpleDTO {
    ApprovedBy : EmployeeSimpleDTO;
    CompanyLegalEntity : CompanyLegalEntitySimpleDTO;
    Head : EmployeeSimpleDTO;
    Location : LocationSimpleDTO;
    Parent : HRDepartmentSimpleDTO;
}

export interface IHRDepartmentRichDTO extends IHRDepartmentFullDTO {
    BusinessUnitHrDepartments : BusinessUnitHrDepartmentRichDTO [];
    Children : HRDepartmentRichDTO [];
    EmployeePositions : HRDepartmentEmployeePositionRichDTO [];
    HrDepartmentRoleEmployees : HRDepartmentRoleEmployeeRichDTO [];
    ManagementUnits : ManagementUnitAndHRDepartmentLinkRichDTO [];
}

export class HRDepartmentVisualDTO extends BasePersistentDTO {
    public __type = 'HRDepartmentVisualDTO';

    private _hrdepartmentvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): HRDepartmentVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new HRDepartmentVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: HRDepartmentObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): HRDepartmentObservableVisualDTO {
        let e = new HRDepartmentObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IHRDepartmentEmployeePositionSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface IHRDepartmentEmployeePositionFullDTO extends IHRDepartmentEmployeePositionSimpleDTO {
    EmployeePosition : EmployeePositionSimpleDTO;
    HrDepartment : HRDepartmentSimpleDTO;
}

export interface IHRDepartmentEmployeePositionRichDTO extends IHRDepartmentEmployeePositionFullDTO {
}

export interface IHRDepartmentRoleEmployeeSimpleDTO extends IBaseAuditPersistentDTO {
    HRDepartmentEmployeeRoleType : HRDepartmentEmployeeRoleType;
}

export interface IHRDepartmentRoleEmployeeFullDTO extends IHRDepartmentRoleEmployeeSimpleDTO {
    Employee : EmployeeSimpleDTO;
    HRDepartment : HRDepartmentSimpleDTO;
}

export interface IHRDepartmentRoleEmployeeRichDTO extends IHRDepartmentRoleEmployeeFullDTO {
}

export interface IIMRequestSimpleDTO extends IBaseAuditPersistentDTO {
    Email : string;
    Message : string;
    Name : string;
}

export interface IIMRequestFullDTO extends IIMRequestSimpleDTO {
}

export interface IIMRequestRichDTO extends IIMRequestFullDTO {
    OneToOneDetail : IMRequestDetailRichDTO;
}

export class IMRequestVisualDTO extends BasePersistentDTO {
    public __type = 'IMRequestVisualDTO';

    private _imrequestvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): IMRequestVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new IMRequestVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: IMRequestObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): IMRequestObservableVisualDTO {
        let e = new IMRequestObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IIMRequestDetailSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface IIMRequestDetailFullDTO extends IIMRequestDetailSimpleDTO {
    Request : IMRequestSimpleDTO;
}

export interface IIMRequestDetailRichDTO extends IIMRequestDetailFullDTO {
}

export interface IInformationSimpleDTO extends IBaseAuditPersistentDTO {
    Email : string;
    Name : string;
}

export interface IInformationFullDTO extends IInformationSimpleDTO {
}

export interface IInformationRichDTO extends IInformationFullDTO {
}

export class InformationVisualDTO extends BasePersistentDTO {
    public __type = 'InformationVisualDTO';

    private _informationvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): InformationVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new InformationVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: InformationObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): InformationObservableVisualDTO {
        let e = new InformationObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ILegalEntityBaseSimpleDTO extends IBaseAuditPersistentDTO {
    AribaStatus : RevenueDocumentAribaStatus;
    Name : string;
    NameEnglish : string;
}

export interface ILocationSimpleDTO extends IBaseAuditPersistentDTO {
    CloseDate : number;
    Code : number;
    ContainsOnlyInactiveChildren : boolean;
    IsFinancial : boolean;
    IsLeaf : boolean;
    LocationType : LocationType;
    Name : string;
}

export interface ILocationFullDTO extends ILocationSimpleDTO {
    Country : CountrySimpleDTO;
    Parent : LocationSimpleDTO;
}

export interface ILocationRichDTO extends ILocationFullDTO {
    BinaryData : number [];
    Children : LocationRichDTO [];
}

export class LocationVisualDTO extends BasePersistentDTO {
    public __type = 'LocationVisualDTO';

    private _locationvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): LocationVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LocationVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: LocationObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): LocationObservableVisualDTO {
        let e = new LocationObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IManagementUnitSimpleDTO extends IBaseAuditPersistentDTO {
    BusinessUnitStatus : BusinessUnitStatus;
    IsProduction : boolean;
    Name : string;
    Period : Framework.Core.Period;
}

export interface IManagementUnitFullDTO extends IManagementUnitSimpleDTO {
    Parent : ManagementUnitSimpleDTO;
}

export interface IManagementUnitRichDTO extends IManagementUnitFullDTO {
    BusinessUnits : ManagementUnitAndBusinessUnitLinkRichDTO [];
    Children : ManagementUnitRichDTO [];
    HRDepartments : ManagementUnitAndHRDepartmentLinkRichDTO [];
}

export class ManagementUnitVisualDTO extends BasePersistentDTO {
    public __type = 'ManagementUnitVisualDTO';

    private _managementunitvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): ManagementUnitVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ManagementUnitVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: ManagementUnitObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): ManagementUnitObservableVisualDTO {
        let e = new ManagementUnitObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IManagementUnitAndBusinessUnitLinkSimpleDTO extends IBaseAuditPersistentDTO {
    EqualBU : boolean;
}

export interface IManagementUnitAndBusinessUnitLinkFullDTO extends IManagementUnitAndBusinessUnitLinkSimpleDTO {
    BusinessUnit : BusinessUnitSimpleDTO;
    ManagementUnit : ManagementUnitSimpleDTO;
}

export interface IManagementUnitAndBusinessUnitLinkRichDTO extends IManagementUnitAndBusinessUnitLinkFullDTO {
}

export interface IManagementUnitAndHRDepartmentLinkSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface IManagementUnitAndHRDepartmentLinkFullDTO extends IManagementUnitAndHRDepartmentLinkSimpleDTO {
    HRDepartment : HRDepartmentSimpleDTO;
    ManagementUnit : ManagementUnitSimpleDTO;
}

export interface IManagementUnitAndHRDepartmentLinkRichDTO extends IManagementUnitAndHRDepartmentLinkFullDTO {
}

export interface IManagementUnitFluentMappingSimpleDTO extends IBaseAuditPersistentDTO {
    BusinessUnitStatus : BusinessUnitStatus;
    IsProduction : boolean;
    MuComponent : MuComponent;
    Name : string;
    Period : Framework.Core.Period;
}

export interface IPrincipalSimpleDTO extends IBaseAuditPersistentDTO {
    ExternalId : string;
}

export interface IPrincipalFullDTO extends IPrincipalSimpleDTO {
}

export interface IPrincipalRichDTO extends IPrincipalFullDTO {
}

export interface ISqlParserTestObjSimpleDTO extends IBaseAuditPersistentDTO {
    NotNullColumn : string;
    UniqueColumn : string;
}

export interface ISqlParserTestObjFullDTO extends ISqlParserTestObjSimpleDTO {
}

export interface ISqlParserTestObjContainerSimpleDTO extends IBaseAuditPersistentDTO {
}

export interface ISqlParserTestObjContainerFullDTO extends ISqlParserTestObjContainerSimpleDTO {
    IncludedObject : SqlParserTestObjSimpleDTO;
}

export interface ITestCustomContextSecurityObjSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ITestCustomContextSecurityObjFullDTO extends ITestCustomContextSecurityObjSimpleDTO {
}

export interface ITestCustomContextSecurityObjRichDTO extends ITestCustomContextSecurityObjFullDTO {
}

export class TestCustomContextSecurityObjVisualDTO extends BasePersistentDTO {
    public __type = 'TestCustomContextSecurityObjVisualDTO';

    private _testcustomcontextsecurityobjvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestCustomContextSecurityObjVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestCustomContextSecurityObjObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestCustomContextSecurityObjObservableVisualDTO {
        let e = new TestCustomContextSecurityObjObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ITestImmutableObjSimpleDTO extends IBaseAuditPersistentDTO {
    TestImmutablePrimitiveProperty : string;
}

export interface ITestImmutableObjFullDTO extends ITestImmutableObjSimpleDTO {
    TestImmutableRefProperty : EmployeeSimpleDTO;
}

export interface ITestImmutableObjRichDTO extends ITestImmutableObjFullDTO {
}

export interface ITestObjForNestedSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
    Period : Framework.Core.Period;
}

export interface ITestRootSecurityObjSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ITestRootSecurityObjFullDTO extends ITestRootSecurityObjSimpleDTO {
    BusinessUnit : BusinessUnitSimpleDTO;
    Location : LocationSimpleDTO;
    ManagementUnitFluentMapping : ManagementUnitFluentMappingSimpleDTO;
}

export interface ITestRootSecurityObjRichDTO extends ITestRootSecurityObjFullDTO {
    Items : TestSecurityObjItemRichDTO [];
}

export class TestRootSecurityObjVisualDTO extends BasePersistentDTO {
    public __type = 'TestRootSecurityObjVisualDTO';

    private _testrootsecurityobjvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestRootSecurityObjVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestRootSecurityObjVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestRootSecurityObjObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestRootSecurityObjObservableVisualDTO {
        let e = new TestRootSecurityObjObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ITestSecurityObjItemSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ITestSecurityObjItemFullDTO extends ITestSecurityObjItemSimpleDTO {
    FirstMaster : TestRootSecurityObjSimpleDTO;
}

export interface ITestSecurityObjItemRichDTO extends ITestSecurityObjItemFullDTO {
    Items : TestSecuritySubObjItemRichDTO [];
    Items2 : TestSecuritySubObjItem2RichDTO [];
    Items3 : TestSecuritySubObjItem3RichDTO [];
}

export class TestSecurityObjItemVisualDTO extends BasePersistentDTO {
    public __type = 'TestSecurityObjItemVisualDTO';

    private _testsecurityobjitemvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecurityObjItemVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecurityObjItemObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecurityObjItemObservableVisualDTO {
        let e = new TestSecurityObjItemObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ITestSecuritySubObjItemSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ITestSecuritySubObjItemFullDTO extends ITestSecuritySubObjItemSimpleDTO {
    InnerMaster : TestSecurityObjItemSimpleDTO;
}

export interface ITestSecuritySubObjItemRichDTO extends ITestSecuritySubObjItemFullDTO {
}

export class TestSecuritySubObjItemVisualDTO extends BasePersistentDTO {
    public __type = 'TestSecuritySubObjItemVisualDTO';

    private _testsecuritysubobjitemvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecuritySubObjItemVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItemVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecuritySubObjItemObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecuritySubObjItemObservableVisualDTO {
        let e = new TestSecuritySubObjItemObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ITestSecuritySubObjItem2SimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ITestSecuritySubObjItem2FullDTO extends ITestSecuritySubObjItem2SimpleDTO {
    InnerMaster : TestSecurityObjItemSimpleDTO;
    RootSecurityObj : TestRootSecurityObjSimpleDTO;
}

export interface ITestSecuritySubObjItem2RichDTO extends ITestSecuritySubObjItem2FullDTO {
}

export class TestSecuritySubObjItem2VisualDTO extends BasePersistentDTO {
    public __type = 'TestSecuritySubObjItem2VisualDTO';

    private _testsecuritysubobjitem2visualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecuritySubObjItem2VisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem2VisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecuritySubObjItem2ObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecuritySubObjItem2ObservableVisualDTO {
        let e = new TestSecuritySubObjItem2ObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ITestSecuritySubObjItem3SimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface ITestSecuritySubObjItem3FullDTO extends ITestSecuritySubObjItem3SimpleDTO {
    InnerMaster : TestSecurityObjItemSimpleDTO;
}

export interface ITestSecuritySubObjItem3RichDTO extends ITestSecuritySubObjItem3FullDTO {
}

export class TestSecuritySubObjItem3VisualDTO extends BasePersistentDTO {
    public __type = 'TestSecuritySubObjItem3VisualDTO';

    private _testsecuritysubobjitem3visualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestSecuritySubObjItem3VisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecuritySubObjItem3VisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecuritySubObjItem3ObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecuritySubObjItem3ObservableVisualDTO {
        let e = new TestSecuritySubObjItem3ObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export class AddressStrictDTO {
    public __type = 'AddressStrictDTO';

    private _addressstrictdto: string;

    public AddressType: AddressType;

    public CityName: string;

    public CountryName: CountryIdentityDTO;

    public Id: Guid;

    public RegionName: string;

    public Street: string;

    public Version: number;

    public Zip: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AddressFullDTO): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AddressRichDTO): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AddressSimpleDTO): AddressStrictDTO {
        let e = new AddressStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AddressFullDTO): void {
        this.fromSimple(source);
        if (source.CountryName) {
            this.CountryName = source.CountryName.Identity;
        }
    }

    public fromRich(source: AddressRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: AddressSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.AddressType = source.AddressType;
        this.CityName = source.CityName;
        this.RegionName = source.RegionName;
        this.Street = source.Street;
        this.Zip = source.Zip;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.AddressType = this.AddressType;
        result.CityName = this.CityName;
        if (this.CountryName) {
            result.CountryName = this.CountryName.toNativeJson();
        }
        result.Id = this.Id;
        result.RegionName = this.RegionName;
        result.Street = this.Street;
        result.Version = this.Version;
        result.Zip = this.Zip;
        return result;
    }

}

export class BusinessUnitStrictDTO {
    public __type = 'BusinessUnitStrictDTO';

    private _businessunitstrictdto: string;

    public BusinessUnitEmployeeRoles: BusinessUnitEmployeeRoleStrictDTO [];

    public BusinessUnitForRent: BusinessUnitIdentityDTO;

    public BusinessUnitStatus: BusinessUnitStatus;

    public Commission: number;

    public FirstNewBusinessStatusMonth: Date;

    public Id: Guid;

    public IsNewBusiness: boolean;

    public IsPool: boolean;

    public IsProduction: boolean;

    public IsSpecialCommission: boolean;

    public LeastProjectStartDate: Date;

    public ManagementUnits: ManagementUnitAndBusinessUnitLinkStrictDTO [];

    public ManagerCommissions: BusinessUnitManagerCommissionLinkStrictDTO [];

    public Name: string;

    public NewBusinessStatusLeft: number;

    public Options: BusinessUnitOptions;

    public ProjectStartMailList: string;

    public Rank: number;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitFullDTO): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitRichDTO): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitSimpleDTO): BusinessUnitStrictDTO {
        let e = new BusinessUnitStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnitForRent) {
            this.BusinessUnitForRent = source.BusinessUnitForRent.Identity;
        }
    }

    public fromRich(source: BusinessUnitRichDTO): void {
        this.fromFull(source);
        if (source.BusinessUnitEmployeeRoles) {
            this.BusinessUnitEmployeeRoles = source.BusinessUnitEmployeeRoles.map(e => {
                return e.toStrict();
            });
        }
        if (source.ManagementUnits) {
            this.ManagementUnits = source.ManagementUnits.map(e => {
                return e.toStrict();
            });
        }
        if (source.ManagerCommissions) {
            this.ManagerCommissions = source.ManagerCommissions.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: BusinessUnitSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.BusinessUnitStatus = source.BusinessUnitStatus;
        this.Commission = source.Commission;
        this.FirstNewBusinessStatusMonth = source.FirstNewBusinessStatusMonth;
        this.IsNewBusiness = source.IsNewBusiness;
        this.IsPool = source.IsPool;
        this.IsProduction = source.IsProduction;
        this.IsSpecialCommission = source.IsSpecialCommission;
        this.LeastProjectStartDate = source.LeastProjectStartDate;
        this.Name = source.Name;
        this.NewBusinessStatusLeft = source.NewBusinessStatusLeft;
        this.Options = source.Options;
        this.ProjectStartMailList = source.ProjectStartMailList;
        this.Rank = source.Rank;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnitEmployeeRoles) {
            result.BusinessUnitEmployeeRoles = this.BusinessUnitEmployeeRoles.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.BusinessUnitForRent) {
            result.BusinessUnitForRent = this.BusinessUnitForRent.toNativeJson();
        }
        result.BusinessUnitStatus = this.BusinessUnitStatus;
        result.Commission = this.Commission;
        result.FirstNewBusinessStatusMonth = Convert.toOData(this.FirstNewBusinessStatusMonth);
        result.Id = this.Id;
        result.IsNewBusiness = this.IsNewBusiness;
        result.IsPool = this.IsPool;
        result.IsProduction = this.IsProduction;
        result.IsSpecialCommission = this.IsSpecialCommission;
        result.LeastProjectStartDate = Convert.toOData(this.LeastProjectStartDate);
        if (this.ManagementUnits) {
            result.ManagementUnits = this.ManagementUnits.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.ManagerCommissions) {
            result.ManagerCommissions = this.ManagerCommissions.map(e => {
                return e.toNativeJson();
            });
        }
        result.Name = this.Name;
        result.NewBusinessStatusLeft = this.NewBusinessStatusLeft;
        result.Options = this.Options;
        result.ProjectStartMailList = this.ProjectStartMailList;
        result.Rank = this.Rank;
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitEmployeeRoleStrictDTO {
    public __type = 'BusinessUnitEmployeeRoleStrictDTO';

    private _businessunitemployeerolestrictdto: string;

    public Employee: EmployeeIdentityDTO;

    public Id: Guid;

    public Role: BusinessUnitEmployeeRoleType;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitEmployeeRoleFullDTO): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitEmployeeRoleRichDTO): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitEmployeeRoleSimpleDTO): BusinessUnitEmployeeRoleStrictDTO {
        let e = new BusinessUnitEmployeeRoleStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitEmployeeRoleFullDTO): void {
        this.fromSimple(source);
        if (source.Employee) {
            this.Employee = source.Employee.Identity;
        }
    }

    public fromRich(source: BusinessUnitEmployeeRoleRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: BusinessUnitEmployeeRoleSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Role = source.Role;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Employee) {
            result.Employee = this.Employee.toNativeJson();
        }
        result.Id = this.Id;
        result.Role = this.Role;
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitHrDepartmentStrictDTO {
    public __type = 'BusinessUnitHrDepartmentStrictDTO';

    private _businessunithrdepartmentstrictdto: string;

    public BusinessUnit: BusinessUnitIdentityDTO;

    public HRDepartment: HRDepartmentIdentityDTO;

    public Id: Guid;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitHrDepartmentFullDTO): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitHrDepartmentRichDTO): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitHrDepartmentSimpleDTO): BusinessUnitHrDepartmentStrictDTO {
        let e = new BusinessUnitHrDepartmentStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitHrDepartmentFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnit) {
            this.BusinessUnit = source.BusinessUnit.Identity;
        }
        if (source.HRDepartment) {
            this.HRDepartment = source.HRDepartment.Identity;
        }
    }

    public fromRich(source: BusinessUnitHrDepartmentRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: BusinessUnitHrDepartmentSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnit) {
            result.BusinessUnit = this.BusinessUnit.toNativeJson();
        }
        if (this.HRDepartment) {
            result.HRDepartment = this.HRDepartment.toNativeJson();
        }
        result.Id = this.Id;
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitManagerCommissionLinkStrictDTO {
    public __type = 'BusinessUnitManagerCommissionLinkStrictDTO';

    private _businessunitmanagercommissionlinkstrictdto: string;

    public BusinessUnit: BusinessUnitIdentityDTO;

    public Commission: number;

    public Id: Guid;

    public Manager: EmployeeIdentityDTO;

    public Period: Framework.Core.Period;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitManagerCommissionLinkFullDTO): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitManagerCommissionLinkRichDTO): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitManagerCommissionLinkSimpleDTO): BusinessUnitManagerCommissionLinkStrictDTO {
        let e = new BusinessUnitManagerCommissionLinkStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitManagerCommissionLinkFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnit) {
            this.BusinessUnit = source.BusinessUnit.Identity;
        }
        if (source.Manager) {
            this.Manager = source.Manager.Identity;
        }
    }

    public fromRich(source: BusinessUnitManagerCommissionLinkRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: BusinessUnitManagerCommissionLinkSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Commission = source.Commission;
        this.Period = source.Period;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnit) {
            result.BusinessUnit = this.BusinessUnit.toNativeJson();
        }
        result.Commission = this.Commission;
        result.Id = this.Id;
        if (this.Manager) {
            result.Manager = this.Manager.toNativeJson();
        }
        result.Period = Framework.Core.Period.toOData(this.Period);
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitRootFilterModelStrictDTO {
    public __type = 'BusinessUnitRootFilterModelStrictDTO';

    private _businessunitrootfiltermodelstrictdto: string;

    public ArrayDays: Date [];

    public ArrayPeriods: Framework.Core.Period [];

    public Employee: EmployeeIdentityDTO;

    public ListDays: Date [];

    public ListPeriods: Framework.Core.Period [];

    public toNativeJson(): any {
        let result:any = {};
        if (this.ArrayDays) {
            result.ArrayDays = this.ArrayDays.map(e => {
                return Convert.toOData(e);
            });
        }
        if (this.ArrayPeriods) {
            result.ArrayPeriods = this.ArrayPeriods.map(e => {
                return Framework.Core.Period.toOData(e);
            });
        }
        if (this.Employee) {
            result.Employee = this.Employee.toNativeJson();
        }
        if (this.ListDays) {
            result.ListDays = this.ListDays.map(e => {
                return Convert.toOData(e);
            });
        }
        if (this.ListPeriods) {
            result.ListPeriods = this.ListPeriods.map(e => {
                return Framework.Core.Period.toOData(e);
            });
        }
        return result;
    }

}

export class BusinessUnitTypeStrictDTO {
    public __type = 'BusinessUnitTypeStrictDTO';

    private _businessunittypestrictdto: string;

    public AdditionalStartConfirm: boolean;

    public AdditionalTransferConfirm: boolean;

    public BillingProjectAreNotAllowed: boolean;

    public CanBeIsSpecialCommission: boolean;

    public CanBeLinkedToClient: boolean;

    public CanBeLinkedToDepartment: boolean;

    public CanBeNewBusiness: boolean;

    public CanBeResourcePool: boolean;

    public Id: Guid;

    public IsAdministrative: boolean;

    public Name: string;

    public NeedVertical: boolean;

    public PossibleFinancialProjectTypes: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO [];

    public PossibleParents: BusinessUnitTypeLinkWithPossibleParentStrictDTO [];

    public PossibleStartDate: PossibleStartDate;

    public PossibleTransferDate: PossibleStartDate;

    public PracticeAllowed: boolean;

    public ProjectStartAllowed: boolean;

    public StartBOConfirm: boolean;

    public TransferBOConfirm: boolean;

    public TransferTo: BusinessUnitTypeLinkWithTransferToStrictDTO [];

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitTypeFullDTO): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitTypeRichDTO): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitTypeSimpleDTO): BusinessUnitTypeStrictDTO {
        let e = new BusinessUnitTypeStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitTypeFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: BusinessUnitTypeRichDTO): void {
        this.fromFull(source);
        if (source.PossibleFinancialProjectTypes) {
            this.PossibleFinancialProjectTypes = source.PossibleFinancialProjectTypes.map(e => {
                return e.toStrict();
            });
        }
        if (source.PossibleParents) {
            this.PossibleParents = source.PossibleParents.map(e => {
                return e.toStrict();
            });
        }
        if (source.TransferTo) {
            this.TransferTo = source.TransferTo.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: BusinessUnitTypeSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.AdditionalStartConfirm = source.AdditionalStartConfirm;
        this.AdditionalTransferConfirm = source.AdditionalTransferConfirm;
        this.BillingProjectAreNotAllowed = source.BillingProjectAreNotAllowed;
        this.CanBeIsSpecialCommission = source.CanBeIsSpecialCommission;
        this.CanBeLinkedToClient = source.CanBeLinkedToClient;
        this.CanBeLinkedToDepartment = source.CanBeLinkedToDepartment;
        this.CanBeNewBusiness = source.CanBeNewBusiness;
        this.CanBeResourcePool = source.CanBeResourcePool;
        this.IsAdministrative = source.IsAdministrative;
        this.Name = source.Name;
        this.NeedVertical = source.NeedVertical;
        this.PossibleStartDate = source.PossibleStartDate;
        this.PossibleTransferDate = source.PossibleTransferDate;
        this.PracticeAllowed = source.PracticeAllowed;
        this.ProjectStartAllowed = source.ProjectStartAllowed;
        this.StartBOConfirm = source.StartBOConfirm;
        this.TransferBOConfirm = source.TransferBOConfirm;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.AdditionalStartConfirm = this.AdditionalStartConfirm;
        result.AdditionalTransferConfirm = this.AdditionalTransferConfirm;
        result.BillingProjectAreNotAllowed = this.BillingProjectAreNotAllowed;
        result.CanBeIsSpecialCommission = this.CanBeIsSpecialCommission;
        result.CanBeLinkedToClient = this.CanBeLinkedToClient;
        result.CanBeLinkedToDepartment = this.CanBeLinkedToDepartment;
        result.CanBeNewBusiness = this.CanBeNewBusiness;
        result.CanBeResourcePool = this.CanBeResourcePool;
        result.Id = this.Id;
        result.IsAdministrative = this.IsAdministrative;
        result.Name = this.Name;
        result.NeedVertical = this.NeedVertical;
        if (this.PossibleFinancialProjectTypes) {
            result.PossibleFinancialProjectTypes = this.PossibleFinancialProjectTypes.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.PossibleParents) {
            result.PossibleParents = this.PossibleParents.map(e => {
                return e.toNativeJson();
            });
        }
        result.PossibleStartDate = this.PossibleStartDate;
        result.PossibleTransferDate = this.PossibleTransferDate;
        result.PracticeAllowed = this.PracticeAllowed;
        result.ProjectStartAllowed = this.ProjectStartAllowed;
        result.StartBOConfirm = this.StartBOConfirm;
        result.TransferBOConfirm = this.TransferBOConfirm;
        if (this.TransferTo) {
            result.TransferTo = this.TransferTo.map(e => {
                return e.toNativeJson();
            });
        }
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO';

    private _businessunittypelinkwithpossiblefinancialprojecttypestrictdto: string;

    public BusinessUnitType: BusinessUnitTypeIdentityDTO;

    public FinancialProjectType: FinancialProjectType;

    public Id: Guid;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO): BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleFinancialProjectTypeStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnitType) {
            this.BusinessUnitType = source.BusinessUnitType.Identity;
        }
    }

    public fromRich(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: BusinessUnitTypeLinkWithPossibleFinancialProjectTypeSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.FinancialProjectType = source.FinancialProjectType;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnitType) {
            result.BusinessUnitType = this.BusinessUnitType.toNativeJson();
        }
        result.FinancialProjectType = this.FinancialProjectType;
        result.Id = this.Id;
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitTypeLinkWithPossibleParentStrictDTO {
    public __type = 'BusinessUnitTypeLinkWithPossibleParentStrictDTO';

    private _businessunittypelinkwithpossibleparentstrictdto: string;

    public BusinessUnitType: BusinessUnitTypeIdentityDTO;

    public Id: Guid;

    public PossibleParent: BusinessUnitTypeIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitTypeLinkWithPossibleParentFullDTO): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitTypeLinkWithPossibleParentRichDTO): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitTypeLinkWithPossibleParentSimpleDTO): BusinessUnitTypeLinkWithPossibleParentStrictDTO {
        let e = new BusinessUnitTypeLinkWithPossibleParentStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitTypeLinkWithPossibleParentFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnitType) {
            this.BusinessUnitType = source.BusinessUnitType.Identity;
        }
        if (source.PossibleParent) {
            this.PossibleParent = source.PossibleParent.Identity;
        }
    }

    public fromRich(source: BusinessUnitTypeLinkWithPossibleParentRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: BusinessUnitTypeLinkWithPossibleParentSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnitType) {
            result.BusinessUnitType = this.BusinessUnitType.toNativeJson();
        }
        result.Id = this.Id;
        if (this.PossibleParent) {
            result.PossibleParent = this.PossibleParent.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitTypeLinkWithTransferToStrictDTO {
    public __type = 'BusinessUnitTypeLinkWithTransferToStrictDTO';

    private _businessunittypelinkwithtransfertostrictdto: string;

    public BusinessUnitType: BusinessUnitTypeIdentityDTO;

    public Id: Guid;

    public TransferTo: BusinessUnitTypeIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: BusinessUnitTypeLinkWithTransferToFullDTO): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: BusinessUnitTypeLinkWithTransferToRichDTO): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: BusinessUnitTypeLinkWithTransferToSimpleDTO): BusinessUnitTypeLinkWithTransferToStrictDTO {
        let e = new BusinessUnitTypeLinkWithTransferToStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: BusinessUnitTypeLinkWithTransferToFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnitType) {
            this.BusinessUnitType = source.BusinessUnitType.Identity;
        }
        if (source.TransferTo) {
            this.TransferTo = source.TransferTo.Identity;
        }
    }

    public fromRich(source: BusinessUnitTypeLinkWithTransferToRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: BusinessUnitTypeLinkWithTransferToSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnitType) {
            result.BusinessUnitType = this.BusinessUnitType.toNativeJson();
        }
        result.Id = this.Id;
        if (this.TransferTo) {
            result.TransferTo = this.TransferTo.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class CompanyLegalEntityStrictDTO {
    public __type = 'CompanyLegalEntityStrictDTO';

    private _companylegalentitystrictdto: string;

    public Active: boolean;

    public Addresses: AddressStrictDTO [];

    public BaseObj: TestObjForNestedIdentityDTO;

    public Code: string;

    public CurrentObj: TestObjForNestedIdentityDTO;

    public Id: Guid;

    public Name: string;

    public NameEnglish: string;

    public Parent: CompanyLegalEntityIdentityDTO;

    public Type: CompanyLegalEntityType;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: CompanyLegalEntityFullDTO): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: CompanyLegalEntityRichDTO): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: CompanyLegalEntitySimpleDTO): CompanyLegalEntityStrictDTO {
        let e = new CompanyLegalEntityStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: CompanyLegalEntityFullDTO): void {
        this.fromSimple(source);
        if (source.BaseObj) {
            this.BaseObj = source.BaseObj.Identity;
        }
        if (source.CurrentObj) {
            this.CurrentObj = source.CurrentObj.Identity;
        }
        if (source.Parent) {
            this.Parent = source.Parent.Identity;
        }
    }

    public fromRich(source: CompanyLegalEntityRichDTO): void {
        this.fromFull(source);
        if (source.Addresses) {
            this.Addresses = source.Addresses.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: CompanyLegalEntitySimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Code = source.Code;
        this.Name = source.Name;
        this.NameEnglish = source.NameEnglish;
        this.Type = source.Type;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Active = this.Active;
        if (this.Addresses) {
            result.Addresses = this.Addresses.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.BaseObj) {
            result.BaseObj = this.BaseObj.toNativeJson();
        }
        result.Code = this.Code;
        if (this.CurrentObj) {
            result.CurrentObj = this.CurrentObj.toNativeJson();
        }
        result.Id = this.Id;
        result.Name = this.Name;
        result.NameEnglish = this.NameEnglish;
        if (this.Parent) {
            result.Parent = this.Parent.toNativeJson();
        }
        result.Type = this.Type;
        result.Version = this.Version;
        return result;
    }

}

export class CountryStrictDTO {
    public __type = 'CountryStrictDTO';

    private _countrystrictdto: string;

    public Code: string;

    public Culture: string;

    public Id: Guid;

    public Name: string;

    public NameNative: string;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: CountryFullDTO): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: CountryRichDTO): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: CountrySimpleDTO): CountryStrictDTO {
        let e = new CountryStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: CountryFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: CountryRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: CountrySimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Code = source.Code;
        this.Culture = source.Culture;
        this.Name = source.Name;
        this.NameNative = source.NameNative;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Code = this.Code;
        result.Culture = this.Culture;
        result.Id = this.Id;
        result.Name = this.Name;
        result.NameNative = this.NameNative;
        result.Version = this.Version;
        return result;
    }

}

export class EmployeeStrictDTO {
    public __type = 'EmployeeStrictDTO';

    private _employeestrictdto: string;

    public Age: number;

    public BirthDate: Date;

    public CanBePPM: boolean;

    public CellPhones: EmployeeCellPhoneStrictDTO [];

    public EducationDuration: Framework.Core.Period;

    public Email: string;

    public EmployeeToEmployeeLinks: EmployeeToEmployeeLinkStrictDTO [];

    public ExternalId: number;

    public Gender: Gender;

    public Id: Guid;

    public Interphone: string;

    public Landlinephone: string;

    public LastActionDate: Date;

    public Login: string;

    public NameEng: FioShort;

    public NameNative: Fio;

    public NameRussian: Fio;

    public NonValidateVirtualProp: Date;

    public PersonalCellPhones: EmployeePersonalCellPhoneStrictDTO [];

    public Pin: number;

    public PlannedHireDate: Date;

    public Position: EmployeePositionIdentityDTO;

    public Ppm: EmployeeIdentityDTO;

    public RegistrationType: EmployeeRegistrationTypeIdentityDTO;

    public Role: EmployeeRoleIdentityDTO;

    public RoleDegree: EmployeeRoleDegreeIdentityDTO;

    public Specializations: EmployeeAndEmployeeSpecializationLinkStrictDTO [];

    public VacationApprover: EmployeeIdentityDTO;

    public ValidateVirtualProp: Date;

    public Version: number;

    public WorkPeriod: Framework.Core.Period;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): EmployeeStrictDTO {
        let e = new EmployeeStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): EmployeeStrictDTO {
        let e = new EmployeeStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: EmployeeFullDTO): EmployeeStrictDTO {
        let e = new EmployeeStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromSimple(source: EmployeeSimpleDTO): EmployeeStrictDTO {
        let e = new EmployeeStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: EmployeeFullDTO): void {
        this.fromSimple(source);
        if (source.Position) {
            this.Position = source.Position.Identity;
        }
        if (source.Ppm) {
            this.Ppm = source.Ppm.Identity;
        }
        if (source.RegistrationType) {
            this.RegistrationType = source.RegistrationType.Identity;
        }
        if (source.Role) {
            this.Role = source.Role.Identity;
        }
        if (source.RoleDegree) {
            this.RoleDegree = source.RoleDegree.Identity;
        }
        if (source.VacationApprover) {
            this.VacationApprover = source.VacationApprover.Identity;
        }
    }

    public fromSimple(source: EmployeeSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Age = source.Age;
        this.BirthDate = source.BirthDate;
        this.CanBePPM = source.CanBePPM;
        this.EducationDuration = source.EducationDuration;
        this.Email = source.Email;
        this.ExternalId = source.ExternalId;
        this.Gender = source.Gender;
        this.Interphone = source.Interphone;
        this.Landlinephone = source.Landlinephone;
        this.LastActionDate = source.LastActionDate;
        this.Login = source.Login;
        if (source.NameEng) {
            this.NameEng = source.NameEng;
        }
        if (source.NameNative) {
            this.NameNative = source.NameNative;
        }
        if (source.NameRussian) {
            this.NameRussian = source.NameRussian;
        }
        this.NonValidateVirtualProp = source.NonValidateVirtualProp;
        this.Pin = source.Pin;
        this.PlannedHireDate = source.PlannedHireDate;
        this.ValidateVirtualProp = source.ValidateVirtualProp;
        this.WorkPeriod = source.WorkPeriod;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Age = this.Age;
        result.BirthDate = Convert.toOData(this.BirthDate);
        result.CanBePPM = this.CanBePPM;
        if (this.CellPhones) {
            result.CellPhones = this.CellPhones.map(e => {
                return e.toNativeJson();
            });
        }
        result.EducationDuration = Framework.Core.Period.toOData(this.EducationDuration);
        result.Email = this.Email;
        if (this.EmployeeToEmployeeLinks) {
            result.EmployeeToEmployeeLinks = this.EmployeeToEmployeeLinks.map(e => {
                return e.toNativeJson();
            });
        }
        result.ExternalId = this.ExternalId;
        result.Gender = this.Gender;
        result.Id = this.Id;
        result.Interphone = this.Interphone;
        result.Landlinephone = this.Landlinephone;
        result.LastActionDate = Convert.toOData(this.LastActionDate);
        result.Login = this.Login;
        if (this.NameEng) {
            result.NameEng = this.NameEng.toNativeJson();
        }
        if (this.NameNative) {
            result.NameNative = this.NameNative.toNativeJson();
        }
        if (this.NameRussian) {
            result.NameRussian = this.NameRussian.toNativeJson();
        }
        result.NonValidateVirtualProp = Convert.toOData(this.NonValidateVirtualProp);
        if (this.PersonalCellPhones) {
            result.PersonalCellPhones = this.PersonalCellPhones.map(e => {
                return e.toNativeJson();
            });
        }
        result.Pin = this.Pin;
        result.PlannedHireDate = Convert.toOData(this.PlannedHireDate);
        if (this.Position) {
            result.Position = this.Position.toNativeJson();
        }
        if (this.Ppm) {
            result.Ppm = this.Ppm.toNativeJson();
        }
        if (this.RegistrationType) {
            result.RegistrationType = this.RegistrationType.toNativeJson();
        }
        if (this.Role) {
            result.Role = this.Role.toNativeJson();
        }
        if (this.RoleDegree) {
            result.RoleDegree = this.RoleDegree.toNativeJson();
        }
        if (this.Specializations) {
            result.Specializations = this.Specializations.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.VacationApprover) {
            result.VacationApprover = this.VacationApprover.toNativeJson();
        }
        result.ValidateVirtualProp = Convert.toOData(this.ValidateVirtualProp);
        result.Version = this.Version;
        result.WorkPeriod = Framework.Core.Period.toOData(this.WorkPeriod);
        return result;
    }

}

export class EmployeeUpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'EmployeeUpdateDTO';

    private _employeeupdatedto: string;

    public Age: number;

    public BirthDate: Date;

    public CanBePPM: boolean;

    public CellPhones: Array<FrameworkCore.UpdateItemData<EmployeeCellPhoneUpdateDTO, EmployeeCellPhoneIdentityDTO>>;

    public EducationDuration: Framework.Core.Period;

    public Email: string;

    public EmployeeToEmployeeLinks: Array<FrameworkCore.UpdateItemData<EmployeeToEmployeeLinkUpdateDTO, EmployeeToEmployeeLinkIdentityDTO>>;

    public ExternalId: number;

    public Gender: Gender;

    public Id: Guid;

    public Interphone: string;

    public Landlinephone: string;

    public LastActionDate: Date;

    public Login: string;

    public NameEng: FioShort;

    public NameNative: Fio;

    public NameRussian: Fio;

    public NonValidateVirtualProp: Date;

    public PersonalCellPhones: Array<FrameworkCore.UpdateItemData<EmployeePersonalCellPhoneUpdateDTO, EmployeePersonalCellPhoneIdentityDTO>>;

    public Pin: number;

    public PlannedHireDate: Date;

    public Position: EmployeePositionIdentityDTO;

    public Ppm: EmployeeIdentityDTO;

    public RegistrationType: EmployeeRegistrationTypeIdentityDTO;

    public Role: EmployeeRoleIdentityDTO;

    public RoleDegree: EmployeeRoleDegreeIdentityDTO;

    public Specializations: Array<FrameworkCore.UpdateItemData<EmployeeAndEmployeeSpecializationLinkUpdateDTO, EmployeeAndEmployeeSpecializationLinkIdentityDTO>>;

    public VacationApprover: EmployeeIdentityDTO;

    public ValidateVirtualProp: Date;

    public Version: number;

    public WorkPeriod: Framework.Core.Period;

    public get Identity() : EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.Age === 'undefined') && (typeof this.BirthDate === 'undefined') && (typeof this.CanBePPM === 'undefined') && (this.CellPhones.length === 0) && (typeof this.EducationDuration === 'undefined') && (typeof this.Email === 'undefined') && (this.EmployeeToEmployeeLinks.length === 0) && (typeof this.ExternalId === 'undefined') && (typeof this.Gender === 'undefined') && (typeof this.Interphone === 'undefined') && (typeof this.Landlinephone === 'undefined') && (typeof this.LastActionDate === 'undefined') && (typeof this.Login === 'undefined') && (typeof this.NameEng === 'undefined') && (typeof this.NameNative === 'undefined') && (typeof this.NameRussian === 'undefined') && (typeof this.NonValidateVirtualProp === 'undefined') && (this.PersonalCellPhones.length === 0) && (typeof this.Pin === 'undefined') && (typeof this.PlannedHireDate === 'undefined') && (typeof this.Position === 'undefined') && (typeof this.Ppm === 'undefined') && (typeof this.RegistrationType === 'undefined') && (typeof this.Role === 'undefined') && (typeof this.RoleDegree === 'undefined') && (this.Specializations.length === 0) && (typeof this.VacationApprover === 'undefined') && (typeof this.ValidateVirtualProp === 'undefined') && (typeof this.WorkPeriod === 'undefined');
    }

    public static fromStrict(source: EmployeeStrictDTO, baseSource: EmployeeStrictDTO, mappingService: ISampleSystemClientDTOMappingService): EmployeeUpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new EmployeeUpdateDTO();
        mappingService.mapUpdateFromStrictForEmployee(result, source, baseSource);
        return result;
    }

    public compress() {
        FrameworkCore.UpdateExtensions.Compress<EmployeeCellPhoneUpdateDTO, EmployeeCellPhoneIdentityDTO>(this.CellPhones);
        FrameworkCore.UpdateExtensions.Compress<EmployeeToEmployeeLinkUpdateDTO, EmployeeToEmployeeLinkIdentityDTO>(this.EmployeeToEmployeeLinks);
        FrameworkCore.UpdateExtensions.Compress<EmployeePersonalCellPhoneUpdateDTO, EmployeePersonalCellPhoneIdentityDTO>(this.PersonalCellPhones);
        FrameworkCore.UpdateExtensions.Compress<EmployeeAndEmployeeSpecializationLinkUpdateDTO, EmployeeAndEmployeeSpecializationLinkIdentityDTO>(this.Specializations);
    }

}

export class EmployeeAndEmployeeSpecializationLinkStrictDTO {
    public __type = 'EmployeeAndEmployeeSpecializationLinkStrictDTO';

    private _employeeandemployeespecializationlinkstrictdto: string;

    public Employee: EmployeeIdentityDTO;

    public Id: Guid;

    public Specialization: EmployeeSpecializationIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): EmployeeAndEmployeeSpecializationLinkStrictDTO {
        let e = new EmployeeAndEmployeeSpecializationLinkStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): EmployeeAndEmployeeSpecializationLinkStrictDTO {
        let e = new EmployeeAndEmployeeSpecializationLinkStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Employee) {
            result.Employee = this.Employee.toNativeJson();
        }
        result.Id = this.Id;
        if (this.Specialization) {
            result.Specialization = this.Specialization.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class EmployeeAndEmployeeSpecializationLinkUpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'EmployeeAndEmployeeSpecializationLinkUpdateDTO';

    private _employeeandemployeespecializationlinkupdatedto: string;

    public Employee: EmployeeIdentityDTO;

    public Id: Guid;

    public Specialization: EmployeeSpecializationIdentityDTO;

    public Version: number;

    public get Identity() : EmployeeAndEmployeeSpecializationLinkIdentityDTO {
        return new EmployeeAndEmployeeSpecializationLinkIdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.Employee === 'undefined') && (typeof this.Specialization === 'undefined');
    }

    public static fromStrict(source: EmployeeAndEmployeeSpecializationLinkStrictDTO, baseSource: EmployeeAndEmployeeSpecializationLinkStrictDTO, mappingService: ISampleSystemClientDTOMappingService): EmployeeAndEmployeeSpecializationLinkUpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new EmployeeAndEmployeeSpecializationLinkUpdateDTO();
        mappingService.mapUpdateFromStrictForEmployeeAndEmployeeSpecializationLink(result, source, baseSource);
        return result;
    }

    public compress() {
    }

}

export class EmployeeCellPhoneStrictDTO {
    public __type = 'EmployeeCellPhoneStrictDTO';

    private _employeecellphonestrictdto: string;

    public CityCode: string;

    public CountryCode: string;

    public Id: Guid;

    public Number: string;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): EmployeeCellPhoneStrictDTO {
        let e = new EmployeeCellPhoneStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): EmployeeCellPhoneStrictDTO {
        let e = new EmployeeCellPhoneStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.CityCode = this.CityCode;
        result.CountryCode = this.CountryCode;
        result.Id = this.Id;
        result.Number = this.Number;
        result.Version = this.Version;
        return result;
    }

}

export class EmployeeCellPhoneUpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'EmployeeCellPhoneUpdateDTO';

    private _employeecellphoneupdatedto: string;

    public CityCode: string;

    public CountryCode: string;

    public Id: Guid;

    public Number: string;

    public Version: number;

    public get Identity() : EmployeeCellPhoneIdentityDTO {
        return new EmployeeCellPhoneIdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.CityCode === 'undefined') && (typeof this.CountryCode === 'undefined') && (typeof this.Number === 'undefined');
    }

    public static fromStrict(source: EmployeeCellPhoneStrictDTO, baseSource: EmployeeCellPhoneStrictDTO, mappingService: ISampleSystemClientDTOMappingService): EmployeeCellPhoneUpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new EmployeeCellPhoneUpdateDTO();
        mappingService.mapUpdateFromStrictForEmployeeCellPhone(result, source, baseSource);
        return result;
    }

    public compress() {
    }

}

export class EmployeeComplexChangeModelStrictDTO {
    public __type = 'EmployeeComplexChangeModelStrictDTO';

    private _employeecomplexchangemodelstrictdto: string;

    public Email: string;

    public PrimaryChangingObject: EmployeeIdentityDTO;

    public SecondaryChangingObjects: EmployeeIdentityDTO [];

    public toNativeJson(): any {
        let result:any = {};
        result.Email = this.Email;
        if (this.PrimaryChangingObject) {
            result.PrimaryChangingObject = this.PrimaryChangingObject.toNativeJson();
        }
        if (this.SecondaryChangingObjects) {
            result.SecondaryChangingObjects = this.SecondaryChangingObjects.map(e => {
                return e.toNativeJson();
            });
        }
        return result;
    }

}

export class EmployeeEmailChangeModelStrictDTO {
    public __type = 'EmployeeEmailChangeModelStrictDTO';

    private _employeeemailchangemodelstrictdto: string;

    public ChangingObject: EmployeeIdentityDTO;

    public Email: string;

    public toNativeJson(): any {
        let result:any = {};
        if (this.ChangingObject) {
            result.ChangingObject = this.ChangingObject.toNativeJson();
        }
        result.Email = this.Email;
        return result;
    }

}

export class EmployeeEmailMassChangeModelStrictDTO {
    public __type = 'EmployeeEmailMassChangeModelStrictDTO';

    private _employeeemailmasschangemodelstrictdto: string;

    public ChangingObjects: EmployeeIdentityDTO [];

    public Email: string;

    public static fromFull(source: EmployeeEmailMassChangeModelFullDTO): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: EmployeeEmailMassChangeModelRichDTO): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: EmployeeEmailMassChangeModelSimpleDTO): EmployeeEmailMassChangeModelStrictDTO {
        let e = new EmployeeEmailMassChangeModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: EmployeeEmailMassChangeModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: EmployeeEmailMassChangeModelRichDTO): void {
        this.fromFull(source);
        if (source.ChangingObjects) {
            this.ChangingObjects = source.ChangingObjects.map(e => {
                return e.Identity;
            });
        }
    }

    public fromSimple(source: EmployeeEmailMassChangeModelSimpleDTO): void {
        this.Email = source.Email;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.ChangingObjects) {
            result.ChangingObjects = this.ChangingObjects.map(e => {
                return e.toNativeJson();
            });
        }
        result.Email = this.Email;
        return result;
    }

}

export class EmployeePersonalCellPhoneStrictDTO {
    public __type = 'EmployeePersonalCellPhoneStrictDTO';

    private _employeepersonalcellphonestrictdto: string;

    public CityCode: string;

    public CountryCode: string;

    public Id: Guid;

    public Number: string;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): EmployeePersonalCellPhoneStrictDTO {
        let e = new EmployeePersonalCellPhoneStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): EmployeePersonalCellPhoneStrictDTO {
        let e = new EmployeePersonalCellPhoneStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.CityCode = this.CityCode;
        result.CountryCode = this.CountryCode;
        result.Id = this.Id;
        result.Number = this.Number;
        result.Version = this.Version;
        return result;
    }

}

export class EmployeePersonalCellPhoneUpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'EmployeePersonalCellPhoneUpdateDTO';

    private _employeepersonalcellphoneupdatedto: string;

    public CityCode: string;

    public CountryCode: string;

    public Id: Guid;

    public Number: string;

    public Version: number;

    public get Identity() : EmployeePersonalCellPhoneIdentityDTO {
        return new EmployeePersonalCellPhoneIdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.CityCode === 'undefined') && (typeof this.CountryCode === 'undefined') && (typeof this.Number === 'undefined');
    }

    public static fromStrict(source: EmployeePersonalCellPhoneStrictDTO, baseSource: EmployeePersonalCellPhoneStrictDTO, mappingService: ISampleSystemClientDTOMappingService): EmployeePersonalCellPhoneUpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new EmployeePersonalCellPhoneUpdateDTO();
        mappingService.mapUpdateFromStrictForEmployeePersonalCellPhone(result, source, baseSource);
        return result;
    }

    public compress() {
    }

}

export class EmployeeRootFilterModelStrictDTO {
    public __type = 'EmployeeRootFilterModelStrictDTO';

    private _employeerootfiltermodelstrictdto: string;

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class EmployeeToEmployeeLinkStrictDTO {
    public __type = 'EmployeeToEmployeeLinkStrictDTO';

    private _employeetoemployeelinkstrictdto: string;

    public EmployeeLinkType: EmployeeLinkType;

    public Id: Guid;

    public LinkedEmployee: EmployeeIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): EmployeeToEmployeeLinkStrictDTO {
        let e = new EmployeeToEmployeeLinkStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): EmployeeToEmployeeLinkStrictDTO {
        let e = new EmployeeToEmployeeLinkStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.EmployeeLinkType = this.EmployeeLinkType;
        result.Id = this.Id;
        if (this.LinkedEmployee) {
            result.LinkedEmployee = this.LinkedEmployee.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class EmployeeToEmployeeLinkUpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'EmployeeToEmployeeLinkUpdateDTO';

    private _employeetoemployeelinkupdatedto: string;

    public EmployeeLinkType: EmployeeLinkType;

    public Id: Guid;

    public LinkedEmployee: EmployeeIdentityDTO;

    public Version: number;

    public get Identity() : EmployeeToEmployeeLinkIdentityDTO {
        return new EmployeeToEmployeeLinkIdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.EmployeeLinkType === 'undefined') && (typeof this.LinkedEmployee === 'undefined');
    }

    public static fromStrict(source: EmployeeToEmployeeLinkStrictDTO, baseSource: EmployeeToEmployeeLinkStrictDTO, mappingService: ISampleSystemClientDTOMappingService): EmployeeToEmployeeLinkUpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new EmployeeToEmployeeLinkUpdateDTO();
        mappingService.mapUpdateFromStrictForEmployeeToEmployeeLink(result, source, baseSource);
        return result;
    }

    public compress() {
    }

}

export class Example1StrictDTO {
    public __type = 'Example1StrictDTO';

    private _example1strictdto: string;

    public Field1: Guid;

    public Field2: Guid;

    public Field3: Guid;

    public Id: Guid;

    public Items2: Example2StrictDTO [];

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: Example1FullDTO): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: Example1RichDTO): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: Example1SimpleDTO): Example1StrictDTO {
        let e = new Example1StrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: Example1FullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: Example1RichDTO): void {
        this.fromFull(source);
        if (source.Items2) {
            this.Items2 = source.Items2.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: Example1SimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Field1 = source.Field1;
        this.Field2 = source.Field2;
        this.Field3 = source.Field3;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Field1 = this.Field1;
        result.Field2 = this.Field2;
        result.Field3 = this.Field3;
        result.Id = this.Id;
        if (this.Items2) {
            result.Items2 = this.Items2.map(e => {
                return e.toNativeJson();
            });
        }
        result.Version = this.Version;
        return result;
    }

}

export class Example1UpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'Example1UpdateDTO';

    private _example1updatedto: string;

    public Field1: Guid;

    public Field2: Guid;

    public Field3: Guid;

    public Id: Guid;

    public Items2: Array<FrameworkCore.UpdateItemData<Example2UpdateDTO, Example2IdentityDTO>>;

    public Version: number;

    public get Identity() : Example1IdentityDTO {
        return new Example1IdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.Field1 === 'undefined') && (typeof this.Field2 === 'undefined') && (typeof this.Field3 === 'undefined') && (this.Items2.length === 0);
    }

    public static fromStrict(source: Example1StrictDTO, baseSource: Example1StrictDTO, mappingService: ISampleSystemClientDTOMappingService): Example1UpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new Example1UpdateDTO();
        mappingService.mapUpdateFromStrictForExample1(result, source, baseSource);
        return result;
    }

    public compress() {
        FrameworkCore.UpdateExtensions.Compress<Example2UpdateDTO, Example2IdentityDTO>(this.Items2);
    }

}

export class Example2StrictDTO {
    public __type = 'Example2StrictDTO';

    private _example2strictdto: string;

    public Field1: Guid;

    public Field2: Guid;

    public Id: Guid;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: Example2FullDTO): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: Example2RichDTO): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: Example2SimpleDTO): Example2StrictDTO {
        let e = new Example2StrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: Example2FullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: Example2RichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: Example2SimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Field1 = source.Field1;
        this.Field2 = source.Field2;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Field1 = this.Field1;
        result.Field2 = this.Field2;
        result.Id = this.Id;
        result.Version = this.Version;
        return result;
    }

}

export class Example2UpdateDTO implements FrameworkCore.IUpdateDTO {
    public __type = 'Example2UpdateDTO';

    private _example2updatedto: string;

    public Field1: Guid;

    public Field2: Guid;

    public Id: Guid;

    public Version: number;

    public get Identity() : Example2IdentityDTO {
        return new Example2IdentityDTO(this.Id);
    }

    public get IsEmpty() : boolean {
        return (typeof this.Field1 === 'undefined') && (typeof this.Field2 === 'undefined');
    }

    public static fromStrict(source: Example2StrictDTO, baseSource: Example2StrictDTO, mappingService: ISampleSystemClientDTOMappingService): Example2UpdateDTO {
        if (!(mappingService)) {
            mappingService = SampleSystemClientPrimitiveDTOMappingService.Default;
        }
        let result = new Example2UpdateDTO();
        mappingService.mapUpdateFromStrictForExample2(result, source, baseSource);
        return result;
    }

    public compress() {
    }

}

export class HRDepartmentStrictDTO {
    public __type = 'HRDepartmentStrictDTO';

    private _hrdepartmentstrictdto: string;

    public Active: boolean;

    public ApprovedBy: EmployeeIdentityDTO;

    public BusinessUnitHrDepartments: BusinessUnitHrDepartmentStrictDTO [];

    public Code: string;

    public CodeNative: string;

    public CompanyLegalEntity: CompanyLegalEntityIdentityDTO;

    public EmployeePositions: HRDepartmentEmployeePositionStrictDTO [];

    public ExternalId: number;

    public Head: EmployeeIdentityDTO;

    public HrDepartmentRoleEmployees: HRDepartmentRoleEmployeeStrictDTO [];

    public Id: Guid;

    public IsLegal: boolean;

    public IsProduction: boolean;

    public ManagementUnits: ManagementUnitAndHRDepartmentLinkStrictDTO [];

    public Name: string;

    public NameNative: string;

    public Parent: HRDepartmentIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: HRDepartmentFullDTO): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: HRDepartmentRichDTO): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: HRDepartmentSimpleDTO): HRDepartmentStrictDTO {
        let e = new HRDepartmentStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: HRDepartmentFullDTO): void {
        this.fromSimple(source);
        if (source.ApprovedBy) {
            this.ApprovedBy = source.ApprovedBy.Identity;
        }
        if (source.CompanyLegalEntity) {
            this.CompanyLegalEntity = source.CompanyLegalEntity.Identity;
        }
        if (source.Head) {
            this.Head = source.Head.Identity;
        }
        if (source.Parent) {
            this.Parent = source.Parent.Identity;
        }
    }

    public fromRich(source: HRDepartmentRichDTO): void {
        this.fromFull(source);
        if (source.BusinessUnitHrDepartments) {
            this.BusinessUnitHrDepartments = source.BusinessUnitHrDepartments.map(e => {
                return e.toStrict();
            });
        }
        if (source.EmployeePositions) {
            this.EmployeePositions = source.EmployeePositions.map(e => {
                return e.toStrict();
            });
        }
        if (source.HrDepartmentRoleEmployees) {
            this.HrDepartmentRoleEmployees = source.HrDepartmentRoleEmployees.map(e => {
                return e.toStrict();
            });
        }
        if (source.ManagementUnits) {
            this.ManagementUnits = source.ManagementUnits.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: HRDepartmentSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Code = source.Code;
        this.CodeNative = source.CodeNative;
        this.ExternalId = source.ExternalId;
        this.IsLegal = source.IsLegal;
        this.IsProduction = source.IsProduction;
        this.Name = source.Name;
        this.NameNative = source.NameNative;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Active = this.Active;
        if (this.ApprovedBy) {
            result.ApprovedBy = this.ApprovedBy.toNativeJson();
        }
        if (this.BusinessUnitHrDepartments) {
            result.BusinessUnitHrDepartments = this.BusinessUnitHrDepartments.map(e => {
                return e.toNativeJson();
            });
        }
        result.Code = this.Code;
        result.CodeNative = this.CodeNative;
        if (this.CompanyLegalEntity) {
            result.CompanyLegalEntity = this.CompanyLegalEntity.toNativeJson();
        }
        if (this.EmployeePositions) {
            result.EmployeePositions = this.EmployeePositions.map(e => {
                return e.toNativeJson();
            });
        }
        result.ExternalId = this.ExternalId;
        if (this.Head) {
            result.Head = this.Head.toNativeJson();
        }
        if (this.HrDepartmentRoleEmployees) {
            result.HrDepartmentRoleEmployees = this.HrDepartmentRoleEmployees.map(e => {
                return e.toNativeJson();
            });
        }
        result.Id = this.Id;
        result.IsLegal = this.IsLegal;
        result.IsProduction = this.IsProduction;
        if (this.ManagementUnits) {
            result.ManagementUnits = this.ManagementUnits.map(e => {
                return e.toNativeJson();
            });
        }
        result.Name = this.Name;
        result.NameNative = this.NameNative;
        if (this.Parent) {
            result.Parent = this.Parent.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class HRDepartmentEmployeePositionStrictDTO {
    public __type = 'HRDepartmentEmployeePositionStrictDTO';

    private _hrdepartmentemployeepositionstrictdto: string;

    public EmployeePosition: EmployeePositionIdentityDTO;

    public HrDepartment: HRDepartmentIdentityDTO;

    public Id: Guid;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: HRDepartmentEmployeePositionFullDTO): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: HRDepartmentEmployeePositionRichDTO): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: HRDepartmentEmployeePositionSimpleDTO): HRDepartmentEmployeePositionStrictDTO {
        let e = new HRDepartmentEmployeePositionStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: HRDepartmentEmployeePositionFullDTO): void {
        this.fromSimple(source);
        if (source.EmployeePosition) {
            this.EmployeePosition = source.EmployeePosition.Identity;
        }
        if (source.HrDepartment) {
            this.HrDepartment = source.HrDepartment.Identity;
        }
    }

    public fromRich(source: HRDepartmentEmployeePositionRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: HRDepartmentEmployeePositionSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.EmployeePosition) {
            result.EmployeePosition = this.EmployeePosition.toNativeJson();
        }
        if (this.HrDepartment) {
            result.HrDepartment = this.HrDepartment.toNativeJson();
        }
        result.Id = this.Id;
        result.Version = this.Version;
        return result;
    }

}

export class HRDepartmentRoleEmployeeStrictDTO {
    public __type = 'HRDepartmentRoleEmployeeStrictDTO';

    private _hrdepartmentroleemployeestrictdto: string;

    public Employee: EmployeeIdentityDTO;

    public HRDepartmentEmployeeRoleType: HRDepartmentEmployeeRoleType;

    public Id: Guid;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: HRDepartmentRoleEmployeeFullDTO): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: HRDepartmentRoleEmployeeRichDTO): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: HRDepartmentRoleEmployeeSimpleDTO): HRDepartmentRoleEmployeeStrictDTO {
        let e = new HRDepartmentRoleEmployeeStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: HRDepartmentRoleEmployeeFullDTO): void {
        this.fromSimple(source);
        if (source.Employee) {
            this.Employee = source.Employee.Identity;
        }
    }

    public fromRich(source: HRDepartmentRoleEmployeeRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: HRDepartmentRoleEmployeeSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.HRDepartmentEmployeeRoleType = source.HRDepartmentEmployeeRoleType;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Employee) {
            result.Employee = this.Employee.toNativeJson();
        }
        result.HRDepartmentEmployeeRoleType = this.HRDepartmentEmployeeRoleType;
        result.Id = this.Id;
        result.Version = this.Version;
        return result;
    }

}

export class LocationStrictDTO {
    public __type = 'LocationStrictDTO';

    private _locationstrictdto: string;

    public Active: boolean;

    public BinaryData: number [];

    public CloseDate: number;

    public Code: number;

    public Country: CountryIdentityDTO;

    public Id: Guid;

    public IsFinancial: boolean;

    public LocationType: LocationType;

    public Name: string;

    public Parent: LocationIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: LocationFullDTO): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: LocationRichDTO): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: LocationSimpleDTO): LocationStrictDTO {
        let e = new LocationStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: LocationFullDTO): void {
        this.fromSimple(source);
        if (source.Country) {
            this.Country = source.Country.Identity;
        }
        if (source.Parent) {
            this.Parent = source.Parent.Identity;
        }
    }

    public fromRich(source: LocationRichDTO): void {
        this.fromFull(source);
        if (source.BinaryData) {
            this.BinaryData = source.BinaryData.map(e => {
                return e;
            });
        }
    }

    public fromSimple(source: LocationSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.CloseDate = source.CloseDate;
        this.Code = source.Code;
        this.IsFinancial = source.IsFinancial;
        this.LocationType = source.LocationType;
        this.Name = source.Name;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Active = this.Active;
        if (this.BinaryData) {
            result.BinaryData = this.BinaryData.map(e => {
                return e;
            });
        }
        result.CloseDate = this.CloseDate;
        result.Code = this.Code;
        if (this.Country) {
            result.Country = this.Country.toNativeJson();
        }
        result.Id = this.Id;
        result.IsFinancial = this.IsFinancial;
        result.LocationType = this.LocationType;
        result.Name = this.Name;
        if (this.Parent) {
            result.Parent = this.Parent.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class ManagementUnitStrictDTO {
    public __type = 'ManagementUnitStrictDTO';

    private _managementunitstrictdto: string;

    public BusinessUnits: ManagementUnitAndBusinessUnitLinkStrictDTO [];

    public BusinessUnitStatus: BusinessUnitStatus;

    public HRDepartments: ManagementUnitAndHRDepartmentLinkStrictDTO [];

    public Id: Guid;

    public IsProduction: boolean;

    public Name: string;

    public Period: Framework.Core.Period;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ManagementUnitFullDTO): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ManagementUnitRichDTO): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ManagementUnitSimpleDTO): ManagementUnitStrictDTO {
        let e = new ManagementUnitStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ManagementUnitFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ManagementUnitRichDTO): void {
        this.fromFull(source);
        if (source.BusinessUnits) {
            this.BusinessUnits = source.BusinessUnits.map(e => {
                return e.toStrict();
            });
        }
        if (source.HRDepartments) {
            this.HRDepartments = source.HRDepartments.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: ManagementUnitSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.BusinessUnitStatus = source.BusinessUnitStatus;
        this.IsProduction = source.IsProduction;
        this.Name = source.Name;
        this.Period = source.Period;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnits) {
            result.BusinessUnits = this.BusinessUnits.map(e => {
                return e.toNativeJson();
            });
        }
        result.BusinessUnitStatus = this.BusinessUnitStatus;
        if (this.HRDepartments) {
            result.HRDepartments = this.HRDepartments.map(e => {
                return e.toNativeJson();
            });
        }
        result.Id = this.Id;
        result.IsProduction = this.IsProduction;
        result.Name = this.Name;
        result.Period = Framework.Core.Period.toOData(this.Period);
        result.Version = this.Version;
        return result;
    }

}

export class ManagementUnitAndBusinessUnitLinkStrictDTO {
    public __type = 'ManagementUnitAndBusinessUnitLinkStrictDTO';

    private _managementunitandbusinessunitlinkstrictdto: string;

    public BusinessUnit: BusinessUnitIdentityDTO;

    public EqualBU: boolean;

    public Id: Guid;

    public ManagementUnit: ManagementUnitIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ManagementUnitAndBusinessUnitLinkFullDTO): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ManagementUnitAndBusinessUnitLinkRichDTO): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ManagementUnitAndBusinessUnitLinkSimpleDTO): ManagementUnitAndBusinessUnitLinkStrictDTO {
        let e = new ManagementUnitAndBusinessUnitLinkStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ManagementUnitAndBusinessUnitLinkFullDTO): void {
        this.fromSimple(source);
        if (source.BusinessUnit) {
            this.BusinessUnit = source.BusinessUnit.Identity;
        }
        if (source.ManagementUnit) {
            this.ManagementUnit = source.ManagementUnit.Identity;
        }
    }

    public fromRich(source: ManagementUnitAndBusinessUnitLinkRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ManagementUnitAndBusinessUnitLinkSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.EqualBU = source.EqualBU;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnit) {
            result.BusinessUnit = this.BusinessUnit.toNativeJson();
        }
        result.EqualBU = this.EqualBU;
        result.Id = this.Id;
        if (this.ManagementUnit) {
            result.ManagementUnit = this.ManagementUnit.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class ManagementUnitAndHRDepartmentLinkStrictDTO {
    public __type = 'ManagementUnitAndHRDepartmentLinkStrictDTO';

    private _managementunitandhrdepartmentlinkstrictdto: string;

    public HRDepartment: HRDepartmentIdentityDTO;

    public Id: Guid;

    public ManagementUnit: ManagementUnitIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ManagementUnitAndHRDepartmentLinkFullDTO): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ManagementUnitAndHRDepartmentLinkRichDTO): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ManagementUnitAndHRDepartmentLinkSimpleDTO): ManagementUnitAndHRDepartmentLinkStrictDTO {
        let e = new ManagementUnitAndHRDepartmentLinkStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ManagementUnitAndHRDepartmentLinkFullDTO): void {
        this.fromSimple(source);
        if (source.HRDepartment) {
            this.HRDepartment = source.HRDepartment.Identity;
        }
        if (source.ManagementUnit) {
            this.ManagementUnit = source.ManagementUnit.Identity;
        }
    }

    public fromRich(source: ManagementUnitAndHRDepartmentLinkRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ManagementUnitAndHRDepartmentLinkSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.HRDepartment) {
            result.HRDepartment = this.HRDepartment.toNativeJson();
        }
        result.Id = this.Id;
        if (this.ManagementUnit) {
            result.ManagementUnit = this.ManagementUnit.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class BusinessUnitProgramClassFilterModelStrictDTO {
    public __type = 'BusinessUnitProgramClassFilterModelStrictDTO';

    private _businessunitprogramclassfiltermodelstrictdto: string;

    public AncestorIdent: Guid;

    public FilterVirtualName: string;

    public toNativeJson(): any {
        let result:any = {};
        result.AncestorIdent = this.AncestorIdent;
        result.FilterVirtualName = this.FilterVirtualName;
        return result;
    }

}

export class EmployeeFilterModelStrictDTO {
    public __type = 'EmployeeFilterModelStrictDTO';

    private _employeefiltermodelstrictdto: string;

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class HierarchicalBusinessUnitFilterModelStrictDTO {
    public __type = 'HierarchicalBusinessUnitFilterModelStrictDTO';

    private _hierarchicalbusinessunitfiltermodelstrictdto: string;

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class SingleEmployeeFilterModelStrictDTO {
    public __type = 'SingleEmployeeFilterModelStrictDTO';

    private _singleemployeefiltermodelstrictdto: string;

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class PrincipalStrictDTO {
    public __type = 'PrincipalStrictDTO';

    private _principalstrictdto: string;

    public ExternalId: string;

    public Id: Guid;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: PrincipalFullDTO): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: PrincipalRichDTO): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: PrincipalSimpleDTO): PrincipalStrictDTO {
        let e = new PrincipalStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: PrincipalFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: PrincipalRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: PrincipalSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.ExternalId = source.ExternalId;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.ExternalId = this.ExternalId;
        result.Id = this.Id;
        result.Version = this.Version;
        return result;
    }

}

export class SqlParserTestObjStrictDTO {
    public __type = 'SqlParserTestObjStrictDTO';

    private _sqlparsertestobjstrictdto: string;

    public Id: Guid;

    public NotNullColumn: string;

    public UniqueColumn: string;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: SqlParserTestObjFullDTO): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromSimple(source: SqlParserTestObjSimpleDTO): SqlParserTestObjStrictDTO {
        let e = new SqlParserTestObjStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: SqlParserTestObjFullDTO): void {
        this.fromSimple(source);
    }

    public fromSimple(source: SqlParserTestObjSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.NotNullColumn = source.NotNullColumn;
        this.UniqueColumn = source.UniqueColumn;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.NotNullColumn = this.NotNullColumn;
        result.UniqueColumn = this.UniqueColumn;
        result.Version = this.Version;
        return result;
    }

}

export class SqlParserTestObjContainerStrictDTO {
    public __type = 'SqlParserTestObjContainerStrictDTO';

    private _sqlparsertestobjcontainerstrictdto: string;

    public Id: Guid;

    public IncludedObject: SqlParserTestObjIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: SqlParserTestObjContainerFullDTO): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromSimple(source: SqlParserTestObjContainerSimpleDTO): SqlParserTestObjContainerStrictDTO {
        let e = new SqlParserTestObjContainerStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: SqlParserTestObjContainerFullDTO): void {
        this.fromSimple(source);
        if (source.IncludedObject) {
            this.IncludedObject = source.IncludedObject.Identity;
        }
    }

    public fromSimple(source: SqlParserTestObjContainerSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        if (this.IncludedObject) {
            result.IncludedObject = this.IncludedObject.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class TestEmployeeFilterStrictDTO {
    public __type = 'TestEmployeeFilterStrictDTO';

    private _testemployeefilterstrictdto: string;

    public BusinessUnit: BusinessUnitIdentityDTO;

    public SampleStruct: SampleStruct;

    public TestValue: boolean;

    public toNativeJson(): any {
        let result:any = {};
        if (this.BusinessUnit) {
            result.BusinessUnit = this.BusinessUnit.toNativeJson();
        }
        if (this.SampleStruct) {
            result.SampleStruct = this.SampleStruct.toNativeJson();
        }
        result.TestValue = this.TestValue;
        return result;
    }

}

export class TestImmutableObjStrictDTO {
    public __type = 'TestImmutableObjStrictDTO';

    private _testimmutableobjstrictdto: string;

    public Id: Guid;

    public TestImmutablePrimitiveProperty: string;

    public TestImmutableRefProperty: EmployeeIdentityDTO;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: TestImmutableObjFullDTO): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: TestImmutableObjRichDTO): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: TestImmutableObjSimpleDTO): TestImmutableObjStrictDTO {
        let e = new TestImmutableObjStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Version = source.Version;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: TestImmutableObjFullDTO): void {
        this.fromSimple(source);
        if (source.TestImmutableRefProperty) {
            this.TestImmutableRefProperty = source.TestImmutableRefProperty.Identity;
        }
    }

    public fromRich(source: TestImmutableObjRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: TestImmutableObjSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.TestImmutablePrimitiveProperty = source.TestImmutablePrimitiveProperty;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.TestImmutablePrimitiveProperty = this.TestImmutablePrimitiveProperty;
        if (this.TestImmutableRefProperty) {
            result.TestImmutableRefProperty = this.TestImmutableRefProperty.toNativeJson();
        }
        result.Version = this.Version;
        return result;
    }

}

export class FioShort {
    public __type = 'FioShort';

    private _fioshort: string;

    public FirstName: string;

    public FullName: string;

    public LastName: string;

    public static fromJs(source: any): FioShort {
        if (!(source)) {
            return undefined;
        }
        let e = new FioShort();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        this.FirstName = source.FirstName;
        this.FullName = source.FullName;
        this.LastName = source.LastName;
    }

    public toJs(): FioShort {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.FirstName = this.FirstName;
        result.FullName = this.FullName;
        result.LastName = this.LastName;
        return result;
    }

}

export class Fio extends FioShort {
    public __type = 'Fio';

    private _fio: string;

    public FullName: string;

    public MiddleName: string;

    public static fromJs(source: any): Fio {
        if (!(source)) {
            return undefined;
        }
        let e = new Fio();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.FullName = source.FullName;
        this.MiddleName = source.MiddleName;
    }

    public toJs(): Fio {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.FullName = this.FullName;
        result.MiddleName = this.MiddleName;
        return result;
    }

}

export class MuComponent {
    public __type = 'MuComponent';

    private _mucomponent: string;

    public LuxoftSignsFirst: boolean;

    public static fromJs(source: any): MuComponent {
        if (!(source)) {
            return undefined;
        }
        let e = new MuComponent();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        this.LuxoftSignsFirst = source.LuxoftSignsFirst;
    }

    public toJs(): MuComponent {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.LuxoftSignsFirst = this.LuxoftSignsFirst;
        return result;
    }

}

export class RevenueDocumentAribaStatus {
    public __type = 'RevenueDocumentAribaStatus';

    private _revenuedocumentaribastatus: string;

    public Date: Date;

    public Description: string;

    public Type: AribaStatusType;

    public static fromJs(source: any): RevenueDocumentAribaStatus {
        if (!(source)) {
            return undefined;
        }
        let e = new RevenueDocumentAribaStatus();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        this.Date = Convert.toDate(source.Date);
        this.Description = source.Description;
        this.Type = source.Type;
    }

    public toJs(): RevenueDocumentAribaStatus {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Date = Convert.toOData(this.Date);
        result.Description = this.Description;
        result.Type = this.Type;
        return result;
    }

}

export class SampleStruct {
    public __type = 'SampleStruct';

    private _samplestruct: string;

    public SampleEnum: SampleEnumForStructDependency;

    public static fromJs(source: any): SampleStruct {
        if (!(source)) {
            return undefined;
        }
        let e = new SampleStruct();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        this.SampleEnum = source.SampleEnum;
    }

    public toJs(): SampleStruct {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.SampleEnum = this.SampleEnum;
        return result;
    }

}

export class TestManualEmployeeProjectionDTO extends BasePersistentDTO {
    public __type = 'TestManualEmployeeProjectionDTO';

    private _testmanualemployeeprojectiondto: string;

    public Login: string;

    constructor () {
        super();

    }

    public get Identity() : EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestManualEmployeeProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestManualEmployeeProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Login = source.Login;
    }

    public fromObservable(source: TestManualEmployeeObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Login = unwrap(source.Login);
    }

    public toObservable(): TestManualEmployeeObservableProjectionDTO {
        let e = new TestManualEmployeeObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class BusinessUnitIdentityProjectionDTO extends BasePersistentDTO {
    public __type = 'BusinessUnitIdentityProjectionDTO';

    private _businessunitidentityprojectiondto: string;

    constructor () {
        super();

    }

    public get Identity() : BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitIdentityProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitIdentityProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
    }

    public fromObservable(source: BusinessUnitIdentityObservableProjectionDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): BusinessUnitIdentityObservableProjectionDTO {
        let e = new BusinessUnitIdentityObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class BusinessUnitProgramClassProjectionDTO extends BasePersistentDTO {
    public __type = 'BusinessUnitProgramClassProjectionDTO';

    private _businessunitprogramclassprojectiondto: string;

    public IsNewBusiness: boolean;

    public Name: string;

    public VirtualName: string;

    public VirtualValue: string;

    constructor () {
        super();

    }

    public get Identity() : BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): BusinessUnitProgramClassProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BusinessUnitProgramClassProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.IsNewBusiness = source.IsNewBusiness;
        this.Name = source.Name;
        this.VirtualName = source.VirtualName;
        this.VirtualValue = source.VirtualValue;
    }

    public fromObservable(source: BusinessUnitProgramClassObservableProjectionDTO): void {
        super.fromObservable(source);
        this.IsNewBusiness = unwrap(source.IsNewBusiness);
        this.Name = unwrap(source.Name);
        this.VirtualName = unwrap(source.VirtualName);
        this.VirtualValue = unwrap(source.VirtualValue);
    }

    public toObservable(): BusinessUnitProgramClassObservableProjectionDTO {
        let e = new BusinessUnitProgramClassObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class CustomCompanyLegalEntityProjectionDTO extends BasePersistentDTO {
    public __type = 'CustomCompanyLegalEntityProjectionDTO';

    private _customcompanylegalentityprojectiondto: string;

    public AribaStatusDescription: string;

    public AribaStatusType: AribaStatusType;

    public BaseObj: CustomTestObjForNestedProjectionDTO;

    public Code: string;

    public CurrentObj: CustomTestObjForNestedProjectionDTO;

    public Name: string;

    public NameEnglish: string;

    constructor () {
        super();

    }

    public get Identity() : CompanyLegalEntityIdentityDTO {
        return new CompanyLegalEntityIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): CustomCompanyLegalEntityProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CustomCompanyLegalEntityProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.AribaStatusDescription = source.AribaStatusDescription;
        this.AribaStatusType = source.AribaStatusType;
        this.BaseObj = CustomTestObjForNestedProjectionDTO.fromJs(source.BaseObj);
        this.Code = source.Code;
        this.CurrentObj = CustomTestObjForNestedProjectionDTO.fromJs(source.CurrentObj);
        this.Name = source.Name;
        this.NameEnglish = source.NameEnglish;
    }

    public fromObservable(source: CustomCompanyLegalEntityObservableProjectionDTO): void {
        super.fromObservable(source);
        this.AribaStatusDescription = unwrap(source.AribaStatusDescription);
        this.AribaStatusType = unwrap(source.AribaStatusType);
        if (unwrap(source.BaseObj)) {
            this.BaseObj = unwrap(source.BaseObj).toJs();
        }
        this.Code = unwrap(source.Code);
        if (unwrap(source.CurrentObj)) {
            this.CurrentObj = unwrap(source.CurrentObj).toJs();
        }
        this.Name = unwrap(source.Name);
        this.NameEnglish = unwrap(source.NameEnglish);
    }

    public toObservable(): CustomCompanyLegalEntityObservableProjectionDTO {
        let e = new CustomCompanyLegalEntityObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class CustomTestObjForNestedProjectionDTO extends BasePersistentDTO {
    public __type = 'CustomTestObjForNestedProjectionDTO';

    private _customtestobjfornestedprojectiondto: string;

    public Name: string;

    public PeriodStartDateXXX: Date;

    constructor () {
        super();

    }

    public get Identity() : TestObjForNestedIdentityDTO {
        return new TestObjForNestedIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): CustomTestObjForNestedProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CustomTestObjForNestedProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
        this.PeriodStartDateXXX = Convert.toDate(source.PeriodStartDateXXX);
    }

    public fromObservable(source: CustomTestObjForNestedObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
        this.PeriodStartDateXXX = unwrap(source.PeriodStartDateXXX);
    }

    public toObservable(): CustomTestObjForNestedObservableProjectionDTO {
        let e = new CustomTestObjForNestedObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestBusinessUnitProjectionDTO extends BasePersistentDTO {
    public __type = 'TestBusinessUnitProjectionDTO';

    private _testbusinessunitprojectiondto: string;

    public CalcMatrix: string[][];

    public CalcProjectionProp: TestBusinessUnitTypeProjectionDTO;

    public CalcProp: string;

    public Employees: string;

    public HerBusinessUnit_Full: string;

    public Name: string;

    public ParentPeriodStartDate: Date;

    public PeriodEndDate: Date;

    constructor () {
        super();

    }

    public get Identity() : BusinessUnitIdentityDTO {
        return new BusinessUnitIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestBusinessUnitProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestBusinessUnitProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        if (source.CalcMatrix) {
            this.CalcMatrix = source.CalcMatrix.map(e => {
                return e.map(x => {
                    return x;
                });
            });
        }
        this.CalcProjectionProp = TestBusinessUnitTypeProjectionDTO.fromJs(source.CalcProjectionProp);
        this.CalcProp = source.CalcProp;
        this.Employees = source.Employees;
        this.HerBusinessUnit_Full = source.HerBusinessUnit_Full;
        this.Name = source.Name;
        this.ParentPeriodStartDate = Convert.toDate(source.ParentPeriodStartDate);
        this.PeriodEndDate = Convert.toDate(source.PeriodEndDate);
    }

    public fromObservable(source: TestBusinessUnitObservableProjectionDTO): void {
        super.fromObservable(source);
        if (unwrap(source.CalcMatrix)) {
            this.CalcMatrix = source.CalcMatrix().map(e => {
                return e.map(x => {
                    return x;
                });
            });
        }
        if (unwrap(source.CalcProjectionProp)) {
            this.CalcProjectionProp = unwrap(source.CalcProjectionProp).toJs();
        }
        this.CalcProp = unwrap(source.CalcProp);
        this.Employees = unwrap(source.Employees);
        this.HerBusinessUnit_Full = unwrap(source.HerBusinessUnit_Full);
        this.Name = unwrap(source.Name);
        this.ParentPeriodStartDate = unwrap(source.ParentPeriodStartDate);
        this.PeriodEndDate = unwrap(source.PeriodEndDate);
    }

    public toObservable(): TestBusinessUnitObservableProjectionDTO {
        let e = new TestBusinessUnitObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestBusinessUnitTypeProjectionDTO extends BasePersistentDTO {
    public __type = 'TestBusinessUnitTypeProjectionDTO';

    private _testbusinessunittypeprojectiondto: string;

    public Name: string;

    constructor () {
        super();

    }

    public get Identity() : BusinessUnitTypeIdentityDTO {
        return new BusinessUnitTypeIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestBusinessUnitTypeProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestBusinessUnitTypeProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestBusinessUnitTypeObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestBusinessUnitTypeObservableProjectionDTO {
        let e = new TestBusinessUnitTypeObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestCustomContextSecurityObjProjectionDTO extends BasePersistentDTO {
    public __type = 'TestCustomContextSecurityObjProjectionDTO';

    private _testcustomcontextsecurityobjprojectiondto: string;

    public Name: string;

    constructor () {
        super();

    }

    public get Identity() : TestCustomContextSecurityObjIdentityDTO {
        return new TestCustomContextSecurityObjIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestCustomContextSecurityObjProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestCustomContextSecurityObjProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestCustomContextSecurityObjObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestCustomContextSecurityObjObservableProjectionDTO {
        let e = new TestCustomContextSecurityObjObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestDepartmentProjectionDTO extends BasePersistentDTO {
    public __type = 'TestDepartmentProjectionDTO';

    private _testdepartmentprojectiondto: string;

    public Location: TestLocationProjectionDTO;

    public LocationBinaryData: number[];

    public Name: string;

    constructor () {
        super();

    }

    public get Identity() : HRDepartmentIdentityDTO {
        return new HRDepartmentIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestDepartmentProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestDepartmentProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Location = TestLocationProjectionDTO.fromJs(source.Location);
        if (source.LocationBinaryData) {
            this.LocationBinaryData = source.LocationBinaryData.map(e => {
                return e;
            });
        }
        this.Name = source.Name;
    }

    public fromObservable(source: TestDepartmentObservableProjectionDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Location)) {
            this.Location = unwrap(source.Location).toJs();
        }
        if (unwrap(source.LocationBinaryData)) {
            this.LocationBinaryData = source.LocationBinaryData().map(e => {
                return unwrap(e);
            });
        }
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestDepartmentObservableProjectionDTO {
        let e = new TestDepartmentObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestEmployeeProjectionDTO extends BasePersistentDTO {
    public __type = 'TestEmployeeProjectionDTO';

    private _testemployeeprojectiondto: string;

    public BuEndDate: Date;

    public CoreBusinessUnit: BusinessUnitIdentityProjectionDTO;

    public CoreBusinessUnitName: string;

    public CoreBusinessUnitProjects: Array<VisualProjectProjectionDTO>;

    public Login: string;

    public NameEngFirstName: string;

    public PositionName: string;

    public PpmNameNativeMiddleName: string;

    public RoleId: Guid;

    public RoleName: string;

    constructor () {
        super();

    }

    public get Identity() : EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestEmployeeProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestEmployeeProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.BuEndDate = Convert.toDate(source.BuEndDate);
        this.CoreBusinessUnit = BusinessUnitIdentityProjectionDTO.fromJs(source.CoreBusinessUnit);
        this.CoreBusinessUnitName = source.CoreBusinessUnitName;
        if (source.CoreBusinessUnitProjects) {
            this.CoreBusinessUnitProjects = source.CoreBusinessUnitProjects.map(e => {
                return VisualProjectProjectionDTO.fromJs(e);
            });
        }
        this.Login = source.Login;
        this.NameEngFirstName = source.NameEngFirstName;
        this.PositionName = source.PositionName;
        this.PpmNameNativeMiddleName = source.PpmNameNativeMiddleName;
        this.RoleId = source.RoleId;
        this.RoleName = source.RoleName;
    }

    public fromObservable(source: TestEmployeeObservableProjectionDTO): void {
        super.fromObservable(source);
        this.BuEndDate = unwrap(source.BuEndDate);
        if (unwrap(source.CoreBusinessUnit)) {
            this.CoreBusinessUnit = unwrap(source.CoreBusinessUnit).toJs();
        }
        this.CoreBusinessUnitName = unwrap(source.CoreBusinessUnitName);
        if (unwrap(source.CoreBusinessUnitProjects)) {
            this.CoreBusinessUnitProjects = source.CoreBusinessUnitProjects().map(e => {
                return e.toJs();
            });
        }
        this.Login = unwrap(source.Login);
        this.NameEngFirstName = unwrap(source.NameEngFirstName);
        this.PositionName = unwrap(source.PositionName);
        this.PpmNameNativeMiddleName = unwrap(source.PpmNameNativeMiddleName);
        this.RoleId = unwrap(source.RoleId);
        this.RoleName = unwrap(source.RoleName);
    }

    public toObservable(): TestEmployeeObservableProjectionDTO {
        let e = new TestEmployeeObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestIMRequestProjectionDTO extends BasePersistentDTO {
    public __type = 'TestIMRequestProjectionDTO';

    private _testimrequestprojectiondto: string;

    public Message: string;

    public OneToOneDetail: TestIMRequestDetailProjectionDTO;

    constructor () {
        super();

    }

    public get Identity() : IMRequestIdentityDTO {
        return new IMRequestIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestIMRequestProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestIMRequestProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Message = source.Message;
        this.OneToOneDetail = TestIMRequestDetailProjectionDTO.fromJs(source.OneToOneDetail);
    }

    public fromObservable(source: TestIMRequestObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Message = unwrap(source.Message);
        if (unwrap(source.OneToOneDetail)) {
            this.OneToOneDetail = unwrap(source.OneToOneDetail).toJs();
        }
    }

    public toObservable(): TestIMRequestObservableProjectionDTO {
        let e = new TestIMRequestObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestIMRequestDetailProjectionDTO extends BasePersistentDTO {
    public __type = 'TestIMRequestDetailProjectionDTO';

    private _testimrequestdetailprojectiondto: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TestIMRequestDetailProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestIMRequestDetailProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
    }

    public fromObservable(source: TestIMRequestDetailObservableProjectionDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TestIMRequestDetailObservableProjectionDTO {
        let e = new TestIMRequestDetailObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestLegacyEmployeeProjectionDTO extends BasePersistentDTO {
    public __type = 'TestLegacyEmployeeProjectionDTO';

    private _testlegacyemployeeprojectiondto: string;

    public Login: string;

    public RoleId: Guid;

    public RoleName: string;

    constructor () {
        super();

    }

    public get Identity() : EmployeeIdentityDTO {
        return new EmployeeIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestLegacyEmployeeProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestLegacyEmployeeProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Login = source.Login;
        this.RoleId = source.RoleId;
        this.RoleName = source.RoleName;
    }

    public fromObservable(source: TestLegacyEmployeeObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Login = unwrap(source.Login);
        this.RoleId = unwrap(source.RoleId);
        this.RoleName = unwrap(source.RoleName);
    }

    public toObservable(): TestLegacyEmployeeObservableProjectionDTO {
        let e = new TestLegacyEmployeeObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestLocationProjectionDTO extends BasePersistentDTO {
    public __type = 'TestLocationProjectionDTO';

    private _testlocationprojectiondto: string;

    public Name: string;

    constructor () {
        super();

    }

    public get Identity() : LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestLocationProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestLocationProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestLocationObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestLocationObservableProjectionDTO {
        let e = new TestLocationObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestLocationCollectionPropertiesProjectionDTO extends BasePersistentDTO {
    public __type = 'TestLocationCollectionPropertiesProjectionDTO';

    private _testlocationcollectionpropertiesprojectiondto: string;

    public Child_Identities: Guid[];

    public Child_Periods: Framework.Core.Period[];

    public Children: Array<TestLocationProjectionDTO>;

    public Date_Intervals: Date[];

    public Name: string;

    public Security_Codes: SampleSystemSecurityOperationCode[];

    constructor () {
        super();

    }

    public get Identity() : LocationIdentityDTO {
        return new LocationIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestLocationCollectionPropertiesProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestLocationCollectionPropertiesProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        if (source.Child_Identities) {
            this.Child_Identities = source.Child_Identities.map(e => {
                return e;
            });
        }
        if (source.Child_Periods) {
            this.Child_Periods = source.Child_Periods.map(e => {
                return Framework.Core.Period.toPeriod(e);
            });
        }
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return TestLocationProjectionDTO.fromJs(e);
            });
        }
        if (source.Date_Intervals) {
            this.Date_Intervals = source.Date_Intervals.map(e => {
                return Convert.toDate(e);
            });
        }
        this.Name = source.Name;
        if (source.Security_Codes) {
            this.Security_Codes = source.Security_Codes.map(e => {
                return e;
            });
        }
    }

    public fromObservable(source: TestLocationCollectionPropertiesObservableProjectionDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Child_Identities)) {
            this.Child_Identities = source.Child_Identities().map(e => {
                return unwrap(e);
            });
        }
        if (unwrap(source.Child_Periods)) {
            this.Child_Periods = source.Child_Periods().map(e => {
                return Framework.Core.Period.fromObservable(unwrap(e));
            });
        }
        if (unwrap(source.Children)) {
            this.Children = source.Children().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Date_Intervals)) {
            this.Date_Intervals = source.Date_Intervals().map(e => {
                return unwrap(e);
            });
        }
        this.Name = unwrap(source.Name);
        if (unwrap(source.Security_Codes)) {
            this.Security_Codes = source.Security_Codes().map(e => {
                return unwrap(e);
            });
        }
    }

    public toObservable(): TestLocationCollectionPropertiesObservableProjectionDTO {
        let e = new TestLocationCollectionPropertiesObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class TestSecurityObjItemProjectionDTO extends BasePersistentDTO {
    public __type = 'TestSecurityObjItemProjectionDTO';

    private _testsecurityobjitemprojectiondto: string;

    public Name: string;

    constructor () {
        super();

    }

    public get Identity() : TestSecurityObjItemIdentityDTO {
        return new TestSecurityObjItemIdentityDTO(this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): TestSecurityObjItemProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TestSecurityObjItemProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TestSecurityObjItemObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TestSecurityObjItemObservableProjectionDTO {
        let e = new TestSecurityObjItemObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export class VisualProjectProjectionDTO extends BasePersistentDTO {
    public __type = 'VisualProjectProjectionDTO';

    private _visualprojectprojectiondto: string;

    public Code: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): VisualProjectProjectionDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new VisualProjectProjectionDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Code = source.Code;
    }

    public fromObservable(source: VisualProjectObservableProjectionDTO): void {
        super.fromObservable(source);
        this.Code = unwrap(source.Code);
    }

    public toObservable(): VisualProjectObservableProjectionDTO {
        let e = new VisualProjectObservableProjectionDTO();
        e.fromJs(this);
        return e;
    }

}

export enum AribaStatusType {
    Approved = 5,
    ErrorSending = 2,
    Invalid = 9,
    Manual = 10,
    Paid = 7,
    Paying = 6,
    Processing = 4,
    Rejected = 8,
    SendingToAriba = 1,
    SentToAriba = 3,
    UnSynchronized = 0,
}

export enum AddressType {
    Legal = 1,
    Postal = 2,
    Undefired = 0,
}

export enum BusinessUnitEmployeeRoleType {
    DeliveryManager = 3,
    Manager = 1,
    ManagerDelegated = 2,
    None = 0,
    SnBApprover = 4,
}

export enum BusinessUnitOptions {
    AccountStartAllowed = 4,
    CreatePreviousPtsCorrection = 64,
    DoNotPrintNameOnLabel = 128,
    IsResourcePool = 1,
    IsSpecialCommission = 16,
    None = 0,
    ProgramStartAllowed = 8,
    TransferNeedApprove = 2,
    UseExistsFinancialProject = 32,
}

export enum BusinessUnitStatus {
    Current = 0,
    Planned = 1,
}

export enum CompanyLegalEntityType {
    Affiliate = 1,
    Holding = 2,
    LegalEntity = 0,
}

export enum EmployeeLinkType {
    PersonalAssistant = 0,
}

export enum EmployeePhotoType {
    AD = 1,
    Default = 0,
}

export enum FinancialProjectType {
    Administrative = 1,
    Commercial = 0,
    Investment = 2,
    RnD = 4,
}

export enum HRDepartmentEmployeeRoleType {
    Head = 2,
    Inspector = 1,
    None = 0,
    SpecialistOfOperationsDepartment = 3,
}

export enum LocationType {
    City = 1,
    Company = 3,
    Country = 2,
}

export enum PossibleStartDate {
    AnyDay = 0,
    FinYearStart = 2,
    FirstDayOfMonth = 1,
}

export enum Gender {
    Female = 1,
    Male = 0,
}

export enum SampleEnumForStructDependency {
    A = 0,
    B = 1,
    C = 2,
}

export enum SampleSystemSecurityOperationCode {
    AuthorizationImpersonate = 46,
    BusinessUnitEdit = 4,
    BusinessUnitHrDepartmentEdit = 11,
    BusinessUnitHrDepartmentView = 10,
    BusinessUnitManagerCommissionLinkEdit = 9,
    BusinessUnitManagerCommissionLinkView = 8,
    BusinessUnitTypeEdit = 7,
    BusinessUnitTypeModuleOpen = 5,
    BusinessUnitTypeView = 6,
    BusinessUnitView = 3,
    CompanyLegalEntityEdit = 42,
    CompanyLegalEntityOpenModule = 40,
    CompanyLegalEntityView = 41,
    CountryEdit = 37,
    CountryEditAttachment = 39,
    CountryOpenModule = 35,
    CountryView = 36,
    CountryViewAttachment = 38,
    CreateManagementUnitStart = 17,
    Disabled = 0,
    EmployeeEdit = 2,
    EmployeePersonalCellPhoneEdit = 48,
    EmployeePersonalCellPhoneView = 47,
    EmployeePositionEdit = 45,
    EmployeePositionOpenModule = 43,
    EmployeePositionView = 44,
    EmployeeRoleDegreeOpenModule = 26,
    EmployeeRoleDegreeView = 27,
    EmployeeRoleOpenModule = 24,
    EmployeeRoleView = 25,
    EmployeeSpecializationOpenModule = 22,
    EmployeeSpecializationView = 23,
    EmployeeView = 1,
    HRDepartmentAdvancedEdit = 31,
    HRDepartmentEdit = 30,
    HRDepartmentOpenModule = 28,
    HRDepartmentView = 29,
    LocationEdit = 34,
    LocationOpenModule = 32,
    LocationView = 33,
    ManagementUnitAndBusinessUnitLinkEdit = 19,
    ManagementUnitAndBusinessUnitLinkView = 18,
    ManagementUnitAndHRDepartmentLinkEdit = 21,
    ManagementUnitAndHRDepartmentLinkView = 20,
    ManagementUnitChangeEdit = 15,
    ManagementUnitChangeView = 16,
    ManagementUnitEdit = 14,
    ManagementUnitOpenModule = 12,
    ManagementUnitView = 13,
    SystemIntegration = 49,
}

