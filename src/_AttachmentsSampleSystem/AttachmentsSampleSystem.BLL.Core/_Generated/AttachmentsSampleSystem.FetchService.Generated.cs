//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AttachmentsSampleSystem.BLL
{
    
    
    public partial class AttachmentsSampleSystemMainFetchServiceBase : Framework.DomainDriven.MainFetchServiceBase<AttachmentsSampleSystem.Domain.PersistentDomainObjectBase>
    {
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.BusinessUnitAncestorLink> GetBusinessUnitAncestorLinkContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.BusinessUnitAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.BusinessUnitAncestorLink>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.BusinessUnitAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Ancestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Child));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.BusinessUnitAncestorLink>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Ancestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitAncestorLink => businessUnitAncestorLink.Child));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.BusinessUnit> GetBusinessUnitContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.BusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.BusinessUnit>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.BusinessUnit>(fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.BusinessUnit>(
                    fetchRootRule => fetchRootRule.SelectMany(businessUnit => businessUnit.Children),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnit => businessUnit.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.BusinessUnitToAncestorChildView> GetBusinessUnitToAncestorChildViewContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.BusinessUnitToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.BusinessUnitToAncestorChildView>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.BusinessUnitToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.ChildOrAncestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.Source));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.BusinessUnitToAncestorChildView>(
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.ChildOrAncestor),
                    fetchRootRule => fetchRootRule.SelectNested(businessUnitToAncestorChildView => businessUnitToAncestorChildView.Source));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected override Framework.DomainDriven.IFetchContainer<TDomainObject> GetContainer<TDomainObject>(Framework.Transfering.ViewDTOType rule)
        {
            if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.BusinessUnit)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.BusinessUnitAncestorLink)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitAncestorLinkContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.BusinessUnitToAncestorChildView)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessUnitToAncestorChildViewContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.Employee)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEmployeeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.HRDepartment)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetHRDepartmentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.Location)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetLocationContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(AttachmentsSampleSystem.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetNamedLockContainer(rule)));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("TDomainObject");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.Employee> GetEmployeeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.Employee>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.Employee>(fetchRootRule => fetchRootRule.SelectNested(employee => employee.CoreBusinessUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.Employee>(
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Ppm).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.VacationApprover).SelectNested(employee => employee.CoreBusinessUnit));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.Employee>(
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.HRDepartment).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.Ppm).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(employee => employee.VacationApprover).SelectNested(employee => employee.CoreBusinessUnit));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.HRDepartment> GetHRDepartmentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.HRDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.HRDepartment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.HRDepartment>(
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.HRDepartment>(
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectMany(hRDepartment => hRDepartment.Children).SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Head).SelectNested(employee => employee.CoreBusinessUnit),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Location),
                    fetchRootRule => fetchRootRule.SelectNested(hRDepartment => hRDepartment.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.Location> GetLocationContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.Location>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.Location>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.Location>(fetchRootRule => fetchRootRule.SelectNested(location => location.Parent));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<AttachmentsSampleSystem.Domain.Location>(
                    fetchRootRule => fetchRootRule.SelectMany(location => location.Children),
                    fetchRootRule => fetchRootRule.SelectNested(location => location.Parent));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<AttachmentsSampleSystem.Domain.NamedLock> GetNamedLockContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.NamedLock>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<AttachmentsSampleSystem.Domain.NamedLock>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
    }
    
    public partial class AttachmentsSampleSystemMainFetchService : AttachmentsSampleSystem.BLL.AttachmentsSampleSystemMainFetchServiceBase
    {
    }
}
