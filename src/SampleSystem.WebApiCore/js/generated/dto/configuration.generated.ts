// ------------------------------------------------------------------------------
/// <auto-generated>
/// This code was generated by a tool.
///
/// Changes to this file may cause incorrect behavior and will be lost if
/// the code is regenerated.
/// </auto-generated>
// ------------------------------------------------------------------------------

// tslint:disable
/* eslint-disable */

import { Guid, Convert } from 'luxite/system';
import * as Framework from 'luxite/framework/framework';
import { observable, observableArray, unwrap } from 'knockout';
import { Core } from 'luxite/framework/framework';

export class AttachmentIdentityDTO {
    public static Empty = new AttachmentIdentityDTO(Guid.Empty);

    public __type = 'AttachmentIdentityDTO';

    private _attachmentidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentIdentityDTO(source.Id);
    }

    public toNativeJson(): AttachmentIdentityDTO {
        return this;
    }

}

export class AttachmentContainerIdentityDTO {
    public static Empty = new AttachmentContainerIdentityDTO(Guid.Empty);

    public __type = 'AttachmentContainerIdentityDTO';

    private _attachmentcontaineridentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentContainerIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentContainerIdentityDTO(source.Id);
    }

    public toNativeJson(): AttachmentContainerIdentityDTO {
        return this;
    }

}

export class AttachmentTagIdentityDTO {
    public static Empty = new AttachmentTagIdentityDTO(Guid.Empty);

    public __type = 'AttachmentTagIdentityDTO';

    private _attachmenttagidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentTagIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentTagIdentityDTO(source.Id);
    }

    public toNativeJson(): AttachmentTagIdentityDTO {
        return this;
    }

}

export class CodeFirstSubscriptionIdentityDTO {
    public static Empty = new CodeFirstSubscriptionIdentityDTO(Guid.Empty);

    public __type = 'CodeFirstSubscriptionIdentityDTO';

    private _codefirstsubscriptionidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CodeFirstSubscriptionIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CodeFirstSubscriptionIdentityDTO(source.Id);
    }

    public toNativeJson(): CodeFirstSubscriptionIdentityDTO {
        return this;
    }

}

export class ControlSettingsIdentityDTO {
    public static Empty = new ControlSettingsIdentityDTO(Guid.Empty);

    public __type = 'ControlSettingsIdentityDTO';

    private _controlsettingsidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ControlSettingsIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ControlSettingsIdentityDTO(source.Id);
    }

    public toNativeJson(): ControlSettingsIdentityDTO {
        return this;
    }

}

export class ControlSettingsParamIdentityDTO {
    public static Empty = new ControlSettingsParamIdentityDTO(Guid.Empty);

    public __type = 'ControlSettingsParamIdentityDTO';

    private _controlsettingsparamidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ControlSettingsParamIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ControlSettingsParamIdentityDTO(source.Id);
    }

    public toNativeJson(): ControlSettingsParamIdentityDTO {
        return this;
    }

}

export class ControlSettingsParamValueIdentityDTO {
    public static Empty = new ControlSettingsParamValueIdentityDTO(Guid.Empty);

    public __type = 'ControlSettingsParamValueIdentityDTO';

    private _controlsettingsparamvalueidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ControlSettingsParamValueIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ControlSettingsParamValueIdentityDTO(source.Id);
    }

    public toNativeJson(): ControlSettingsParamValueIdentityDTO {
        return this;
    }

}

export class DomainObjectEventIdentityDTO {
    public static Empty = new DomainObjectEventIdentityDTO(Guid.Empty);

    public __type = 'DomainObjectEventIdentityDTO';

    private _domainobjecteventidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainObjectEventIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainObjectEventIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainObjectEventIdentityDTO {
        return this;
    }

}

export class DomainObjectModificationIdentityDTO {
    public static Empty = new DomainObjectModificationIdentityDTO(Guid.Empty);

    public __type = 'DomainObjectModificationIdentityDTO';

    private _domainobjectmodificationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainObjectModificationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainObjectModificationIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainObjectModificationIdentityDTO {
        return this;
    }

}

export class DomainObjectNotificationIdentityDTO {
    public static Empty = new DomainObjectNotificationIdentityDTO(Guid.Empty);

    public __type = 'DomainObjectNotificationIdentityDTO';

    private _domainobjectnotificationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainObjectNotificationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainObjectNotificationIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainObjectNotificationIdentityDTO {
        return this;
    }

}

export class DomainTypeIdentityDTO {
    public static Empty = new DomainTypeIdentityDTO(Guid.Empty);

    public __type = 'DomainTypeIdentityDTO';

    private _domaintypeidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainTypeIdentityDTO {
        return this;
    }

}

export class DomainTypeEventOperationIdentityDTO {
    public static Empty = new DomainTypeEventOperationIdentityDTO(Guid.Empty);

    public __type = 'DomainTypeEventOperationIdentityDTO';

    private _domaintypeeventoperationidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeEventOperationIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeEventOperationIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainTypeEventOperationIdentityDTO {
        return this;
    }

}

export class ExceptionMessageIdentityDTO {
    public static Empty = new ExceptionMessageIdentityDTO(Guid.Empty);

    public __type = 'ExceptionMessageIdentityDTO';

    private _exceptionmessageidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ExceptionMessageIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ExceptionMessageIdentityDTO(source.Id);
    }

    public toNativeJson(): ExceptionMessageIdentityDTO {
        return this;
    }

}

export class LogMessageIdentityDTO {
    public static Empty = new LogMessageIdentityDTO(Guid.Empty);

    public __type = 'LogMessageIdentityDTO';

    private _logmessageidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): LogMessageIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new LogMessageIdentityDTO(source.Id);
    }

    public toNativeJson(): LogMessageIdentityDTO {
        return this;
    }

}

export class NamedLockIdentityDTO {
    public static Empty = new NamedLockIdentityDTO(Guid.Empty);

    public __type = 'NamedLockIdentityDTO';

    private _namedlockidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): NamedLockIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new NamedLockIdentityDTO(source.Id);
    }

    public toNativeJson(): NamedLockIdentityDTO {
        return this;
    }

}

export class AccessableBusinessRoleReportRightIdentityDTO {
    public static Empty = new AccessableBusinessRoleReportRightIdentityDTO(Guid.Empty);

    public __type = 'AccessableBusinessRoleReportRightIdentityDTO';

    private _accessablebusinessrolereportrightidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AccessableBusinessRoleReportRightIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AccessableBusinessRoleReportRightIdentityDTO(source.Id);
    }

    public toNativeJson(): AccessableBusinessRoleReportRightIdentityDTO {
        return this;
    }

}

export class AccessableOperationReportRightIdentityDTO {
    public static Empty = new AccessableOperationReportRightIdentityDTO(Guid.Empty);

    public __type = 'AccessableOperationReportRightIdentityDTO';

    private _accessableoperationreportrightidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AccessableOperationReportRightIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AccessableOperationReportRightIdentityDTO(source.Id);
    }

    public toNativeJson(): AccessableOperationReportRightIdentityDTO {
        return this;
    }

}

export class AccessablePrincipalReportRightIdentityDTO {
    public static Empty = new AccessablePrincipalReportRightIdentityDTO(Guid.Empty);

    public __type = 'AccessablePrincipalReportRightIdentityDTO';

    private _accessableprincipalreportrightidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AccessablePrincipalReportRightIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AccessablePrincipalReportRightIdentityDTO(source.Id);
    }

    public toNativeJson(): AccessablePrincipalReportRightIdentityDTO {
        return this;
    }

}

export class ReportIdentityDTO {
    public static Empty = new ReportIdentityDTO(Guid.Empty);

    public __type = 'ReportIdentityDTO';

    private _reportidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportIdentityDTO {
        return this;
    }

}

export class ReportFilterIdentityDTO {
    public static Empty = new ReportFilterIdentityDTO(Guid.Empty);

    public __type = 'ReportFilterIdentityDTO';

    private _reportfilteridentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportFilterIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportFilterIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportFilterIdentityDTO {
        return this;
    }

}

export class ReportParameterIdentityDTO {
    public static Empty = new ReportParameterIdentityDTO(Guid.Empty);

    public __type = 'ReportParameterIdentityDTO';

    private _reportparameteridentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportParameterIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportParameterIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportParameterIdentityDTO {
        return this;
    }

}

export class ReportPropertyIdentityDTO {
    public static Empty = new ReportPropertyIdentityDTO(Guid.Empty);

    public __type = 'ReportPropertyIdentityDTO';

    private _reportpropertyidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportPropertyIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportPropertyIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportPropertyIdentityDTO {
        return this;
    }

}

export class SentMessageIdentityDTO {
    public static Empty = new SentMessageIdentityDTO(Guid.Empty);

    public __type = 'SentMessageIdentityDTO';

    private _sentmessageidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SentMessageIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SentMessageIdentityDTO(source.Id);
    }

    public toNativeJson(): SentMessageIdentityDTO {
        return this;
    }

}

export class SequenceIdentityDTO {
    public static Empty = new SequenceIdentityDTO(Guid.Empty);

    public __type = 'SequenceIdentityDTO';

    private _sequenceidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SequenceIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SequenceIdentityDTO(source.Id);
    }

    public toNativeJson(): SequenceIdentityDTO {
        return this;
    }

}

export class SystemConstantIdentityDTO {
    public static Empty = new SystemConstantIdentityDTO(Guid.Empty);

    public __type = 'SystemConstantIdentityDTO';

    private _systemconstantidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SystemConstantIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SystemConstantIdentityDTO(source.Id);
    }

    public toNativeJson(): SystemConstantIdentityDTO {
        return this;
    }

}

export class TargetSystemIdentityDTO {
    public static Empty = new TargetSystemIdentityDTO(Guid.Empty);

    public __type = 'TargetSystemIdentityDTO';

    private _targetsystemidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TargetSystemIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TargetSystemIdentityDTO(source.Id);
    }

    public toNativeJson(): TargetSystemIdentityDTO {
        return this;
    }

}

export class UserActionIdentityDTO {
    public static Empty = new UserActionIdentityDTO(Guid.Empty);

    public __type = 'UserActionIdentityDTO';

    private _useractionidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionIdentityDTO(source.Id);
    }

    public toNativeJson(): UserActionIdentityDTO {
        return this;
    }

}

export class UserActionObjectIdentityDTO {
    public static Empty = new UserActionObjectIdentityDTO(Guid.Empty);

    public __type = 'UserActionObjectIdentityDTO';

    private _useractionobjectidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObjectIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObjectIdentityDTO(source.Id);
    }

    public toNativeJson(): UserActionObjectIdentityDTO {
        return this;
    }

}

export class BaseObservableAbstractDTO {
    public __type = 'BaseObservableAbstractDTO';

    private _baseobservableabstractdto: string;

    public static fromJs(source: any): BaseObservableAbstractDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservableAbstractDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
    }

    public fromObservable(source: any): void {
    }

}

export class BaseObservablePersistentDTO extends BaseObservableAbstractDTO {
    public __type = 'BaseObservablePersistentDTO';

    private _baseobservablepersistentdto: string;

    public Id = observable<Guid>();

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): BaseObservablePersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservablePersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBasePersistentDTO): void {
        super.fromJs(source);
        this.Id(source.Id);
    }

}

export class BaseObservableAuditPersistentDTO extends BaseObservablePersistentDTO {
    public __type = 'BaseObservableAuditPersistentDTO';

    private _baseobservableauditpersistentdto: string;

    public Active = observable<boolean>(true);

    public CreateDate = observable<Date>();

    public CreatedBy = observable<string>();

    public ModifiedBy = observable<string>();

    public ModifyDate = observable<Date>();

    public static fromJs(source: IBaseAuditPersistentDTO): BaseObservableAuditPersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservableAuditPersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBaseAuditPersistentDTO): void {
        super.fromJs(source);
        this.Active(source.Active);
        this.CreateDate(Convert.toDate(source.CreateDate));
        this.CreatedBy(source.CreatedBy);
        this.ModifiedBy(source.ModifiedBy);
        this.ModifyDate(Convert.toDate(source.ModifyDate));
    }

}

export class AttachmentObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentObservableIdentityDTO(source.Id);
    }

}

export class AttachmentObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AttachmentObservableSimpleDTO';

    private _attachmentobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IAttachmentSimpleDTO): AttachmentObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): AttachmentIdentityDTO {
        return new AttachmentIdentityDTO(this.Id());
    }

    public toJs(): AttachmentSimpleDTO {
        let e = new AttachmentSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentStrictDTO {
        let e = new AttachmentSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentObservableFullDTO extends AttachmentObservableSimpleDTO {
    public __type = 'AttachmentObservableFullDTO';

    private _attachmentobservablefulldto: string;

    public Container = observable<AttachmentContainerObservableSimpleDTO>();

    public static fromJs(source: IAttachmentFullDTO): AttachmentObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentFullDTO): void {
        super.fromJs(source);
        this.Container(AttachmentContainerObservableSimpleDTO.fromJs(source.Container));
    }

    public toJs(): AttachmentFullDTO {
        let e = new AttachmentFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentStrictDTO {
        let e = new AttachmentFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentObservableRichDTO extends AttachmentObservableFullDTO {
    public __type = 'AttachmentObservableRichDTO';

    private _attachmentobservablerichdto: string;

    public Content = observableArray<number>();

    public Tags = observableArray<AttachmentTagObservableRichDTO>();

    public static fromJs(source: IAttachmentRichDTO): AttachmentObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentRichDTO): void {
        super.fromJs(source);
        if (source.Content) {
            this.Content(source.Content.map(e => {
                    return e;
                }));
        }
        if (source.Tags) {
            this.Tags(source.Tags.map(e => {
                    return AttachmentTagObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): AttachmentRichDTO {
        let e = new AttachmentRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentStrictDTO {
        let e = new AttachmentRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'AttachmentObservableVisualDTO';

    private _attachmentobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): AttachmentObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): AttachmentIdentityDTO {
        return new AttachmentIdentityDTO(this.Id());
    }

    public toJs(): AttachmentVisualDTO {
        let e = new AttachmentVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class AttachmentContainerObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentContainerObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentContainerObservableIdentityDTO(source.Id);
    }

}

export class AttachmentContainerObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AttachmentContainerObservableSimpleDTO';

    private _attachmentcontainerobservablesimpledto: string;

    public ObjectId = observable<Guid>();

    public static fromJs(source: IAttachmentContainerSimpleDTO): AttachmentContainerObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerSimpleDTO): void {
        super.fromJs(source);
        this.ObjectId(source.ObjectId);
    }

    public identity(): AttachmentContainerIdentityDTO {
        return new AttachmentContainerIdentityDTO(this.Id());
    }

    public toJs(): AttachmentContainerSimpleDTO {
        let e = new AttachmentContainerSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentContainerObservableFullDTO extends AttachmentContainerObservableSimpleDTO {
    public __type = 'AttachmentContainerObservableFullDTO';

    private _attachmentcontainerobservablefulldto: string;

    public DomainType = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: IAttachmentContainerFullDTO): AttachmentContainerObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerFullDTO): void {
        super.fromJs(source);
        this.DomainType(DomainTypeObservableSimpleDTO.fromJs(source.DomainType));
    }

    public toJs(): AttachmentContainerFullDTO {
        let e = new AttachmentContainerFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentContainerObservableRichDTO extends AttachmentContainerObservableFullDTO {
    public __type = 'AttachmentContainerObservableRichDTO';

    private _attachmentcontainerobservablerichdto: string;

    public Attachments = observableArray<AttachmentObservableRichDTO>();

    public static fromJs(source: IAttachmentContainerRichDTO): AttachmentContainerObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerRichDTO): void {
        super.fromJs(source);
        if (source.Attachments) {
            this.Attachments(source.Attachments.map(e => {
                    return AttachmentObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): AttachmentContainerRichDTO {
        let e = new AttachmentContainerRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentContainerReferenceObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentContainerReferenceObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentContainerReferenceObservableIdentityDTO(source.Id);
    }

}

export class AttachmentContainerReferenceObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'AttachmentContainerReferenceObservableSimpleDTO';

    private _attachmentcontainerreferenceobservablesimpledto: string;

    public ObjectId = observable<Guid>();

    public static fromJs(source: IAttachmentContainerReferenceSimpleDTO): AttachmentContainerReferenceObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerReferenceObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerReferenceSimpleDTO): void {
        super.fromJs(source);
        this.ObjectId(source.ObjectId);
    }

    public toJs(): AttachmentContainerReferenceSimpleDTO {
        let e = new AttachmentContainerReferenceSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentContainerReferenceObservableFullDTO extends AttachmentContainerReferenceObservableSimpleDTO {
    public __type = 'AttachmentContainerReferenceObservableFullDTO';

    private _attachmentcontainerreferenceobservablefulldto: string;

    public DomainType = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: IAttachmentContainerReferenceFullDTO): AttachmentContainerReferenceObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerReferenceObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerReferenceFullDTO): void {
        super.fromJs(source);
        this.DomainType(DomainTypeObservableSimpleDTO.fromJs(source.DomainType));
    }

    public toJs(): AttachmentContainerReferenceFullDTO {
        let e = new AttachmentContainerReferenceFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentContainerReferenceObservableRichDTO extends AttachmentContainerReferenceObservableFullDTO {
    public __type = 'AttachmentContainerReferenceObservableRichDTO';

    private _attachmentcontainerreferenceobservablerichdto: string;

    public static fromJs(source: IAttachmentContainerReferenceRichDTO): AttachmentContainerReferenceObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerReferenceObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerReferenceRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): AttachmentContainerReferenceRichDTO {
        let e = new AttachmentContainerReferenceRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentTagObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentTagObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentTagObservableIdentityDTO(source.Id);
    }

}

export class AttachmentTagObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AttachmentTagObservableSimpleDTO';

    private _attachmenttagobservablesimpledto: string;

    public Name = observable<string>();

    public Value = observable<string>();

    public static fromJs(source: IAttachmentTagSimpleDTO): AttachmentTagObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentTagSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
        this.Value(source.Value);
    }

    public identity(): AttachmentTagIdentityDTO {
        return new AttachmentTagIdentityDTO(this.Id());
    }

    public toJs(): AttachmentTagSimpleDTO {
        let e = new AttachmentTagSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentTagStrictDTO {
        let e = new AttachmentTagSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentTagObservableFullDTO extends AttachmentTagObservableSimpleDTO {
    public __type = 'AttachmentTagObservableFullDTO';

    private _attachmenttagobservablefulldto: string;

    public Attachment = observable<AttachmentObservableSimpleDTO>();

    public static fromJs(source: IAttachmentTagFullDTO): AttachmentTagObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentTagFullDTO): void {
        super.fromJs(source);
        this.Attachment(AttachmentObservableSimpleDTO.fromJs(source.Attachment));
    }

    public toJs(): AttachmentTagFullDTO {
        let e = new AttachmentTagFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentTagStrictDTO {
        let e = new AttachmentTagFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentTagObservableRichDTO extends AttachmentTagObservableFullDTO {
    public __type = 'AttachmentTagObservableRichDTO';

    private _attachmenttagobservablerichdto: string;

    public static fromJs(source: IAttachmentTagRichDTO): AttachmentTagObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentTagRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): AttachmentTagRichDTO {
        let e = new AttachmentTagRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AttachmentTagStrictDTO {
        let e = new AttachmentTagRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AttachmentTagObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'AttachmentTagObservableVisualDTO';

    private _attachmenttagobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): AttachmentTagObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): AttachmentTagIdentityDTO {
        return new AttachmentTagIdentityDTO(this.Id());
    }

    public toJs(): AttachmentTagVisualDTO {
        let e = new AttachmentTagVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class CodeFirstSubscriptionObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CodeFirstSubscriptionObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CodeFirstSubscriptionObservableIdentityDTO(source.Id);
    }

}

export class CodeFirstSubscriptionObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'CodeFirstSubscriptionObservableSimpleDTO';

    private _codefirstsubscriptionobservablesimpledto: string;

    public Code = observable<string>();

    public static fromJs(source: ICodeFirstSubscriptionSimpleDTO): CodeFirstSubscriptionObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionSimpleDTO): void {
        super.fromJs(source);
        this.Code(source.Code);
    }

    public identity(): CodeFirstSubscriptionIdentityDTO {
        return new CodeFirstSubscriptionIdentityDTO(this.Id());
    }

    public toJs(): CodeFirstSubscriptionSimpleDTO {
        let e = new CodeFirstSubscriptionSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CodeFirstSubscriptionObservableFullDTO extends CodeFirstSubscriptionObservableSimpleDTO {
    public __type = 'CodeFirstSubscriptionObservableFullDTO';

    private _codefirstsubscriptionobservablefulldto: string;

    public DomainType = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: ICodeFirstSubscriptionFullDTO): CodeFirstSubscriptionObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionFullDTO): void {
        super.fromJs(source);
        this.DomainType(DomainTypeObservableSimpleDTO.fromJs(source.DomainType));
    }

    public toJs(): CodeFirstSubscriptionFullDTO {
        let e = new CodeFirstSubscriptionFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CodeFirstSubscriptionObservableRichDTO extends CodeFirstSubscriptionObservableFullDTO {
    public __type = 'CodeFirstSubscriptionObservableRichDTO';

    private _codefirstsubscriptionobservablerichdto: string;

    public static fromJs(source: ICodeFirstSubscriptionRichDTO): CodeFirstSubscriptionObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): CodeFirstSubscriptionRichDTO {
        let e = new CodeFirstSubscriptionRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CodeFirstSubscriptionRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CodeFirstSubscriptionRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CodeFirstSubscriptionRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class CodeFirstSubscriptionRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelObservableSimpleDTO';

    private _codefirstsubscriptionrootfiltermodelobservablesimpledto: string;

    public static fromJs(source: ICodeFirstSubscriptionRootFilterModelSimpleDTO): CodeFirstSubscriptionRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): CodeFirstSubscriptionRootFilterModelSimpleDTO {
        let e = new CodeFirstSubscriptionRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CodeFirstSubscriptionRootFilterModelObservableFullDTO extends CodeFirstSubscriptionRootFilterModelObservableSimpleDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelObservableFullDTO';

    private _codefirstsubscriptionrootfiltermodelobservablefulldto: string;

    public static fromJs(source: ICodeFirstSubscriptionRootFilterModelFullDTO): CodeFirstSubscriptionRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): CodeFirstSubscriptionRootFilterModelFullDTO {
        let e = new CodeFirstSubscriptionRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class CodeFirstSubscriptionRootFilterModelObservableRichDTO extends CodeFirstSubscriptionRootFilterModelObservableFullDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelObservableRichDTO';

    private _codefirstsubscriptionrootfiltermodelobservablerichdto: string;

    public static fromJs(source: ICodeFirstSubscriptionRootFilterModelRichDTO): CodeFirstSubscriptionRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): CodeFirstSubscriptionRootFilterModelRichDTO {
        let e = new CodeFirstSubscriptionRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ControlSettingsObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ControlSettingsObservableIdentityDTO(source.Id);
    }

}

export class ControlSettingsObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ControlSettingsObservableSimpleDTO';

    private _controlsettingsobservablesimpledto: string;

    public AccountName = observable<string>();

    public Name = observable<string>();

    public Type = observable<ControlSettingsType>();

    public static fromJs(source: IControlSettingsSimpleDTO): ControlSettingsObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsSimpleDTO): void {
        super.fromJs(source);
        this.AccountName(source.AccountName);
        this.Name(source.Name);
        this.Type(source.Type);
    }

    public identity(): ControlSettingsIdentityDTO {
        return new ControlSettingsIdentityDTO(this.Id());
    }

    public toJs(): ControlSettingsSimpleDTO {
        let e = new ControlSettingsSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsStrictDTO {
        let e = new ControlSettingsSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsObservableFullDTO extends ControlSettingsObservableSimpleDTO {
    public __type = 'ControlSettingsObservableFullDTO';

    private _controlsettingsobservablefulldto: string;

    public Parent = observable<ControlSettingsObservableSimpleDTO>();

    public static fromJs(source: IControlSettingsFullDTO): ControlSettingsObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsFullDTO): void {
        super.fromJs(source);
        this.Parent(ControlSettingsObservableSimpleDTO.fromJs(source.Parent));
    }

    public toJs(): ControlSettingsFullDTO {
        let e = new ControlSettingsFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsStrictDTO {
        let e = new ControlSettingsFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsObservableRichDTO extends ControlSettingsObservableFullDTO {
    public __type = 'ControlSettingsObservableRichDTO';

    private _controlsettingsobservablerichdto: string;

    public Children = observableArray<ControlSettingsObservableRichDTO>();

    public ControlSettingsParams = observableArray<ControlSettingsParamObservableRichDTO>();

    public static fromJs(source: IControlSettingsRichDTO): ControlSettingsObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsRichDTO): void {
        super.fromJs(source);
        if (source.Children) {
            this.Children(source.Children.map(e => {
                    return ControlSettingsObservableRichDTO.fromJs(e);
                }));
        }
        if (source.ControlSettingsParams) {
            this.ControlSettingsParams(source.ControlSettingsParams.map(e => {
                    return ControlSettingsParamObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): ControlSettingsRichDTO {
        let e = new ControlSettingsRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsStrictDTO {
        let e = new ControlSettingsRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'ControlSettingsObservableVisualDTO';

    private _controlsettingsobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): ControlSettingsObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): ControlSettingsIdentityDTO {
        return new ControlSettingsIdentityDTO(this.Id());
    }

    public toJs(): ControlSettingsVisualDTO {
        let e = new ControlSettingsVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class ControlSettingsParamObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ControlSettingsParamObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ControlSettingsParamObservableIdentityDTO(source.Id);
    }

}

export class ControlSettingsParamObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ControlSettingsParamObservableSimpleDTO';

    private _controlsettingsparamobservablesimpledto: string;

    public Type = observable<ControlSettingParamType>();

    public static fromJs(source: IControlSettingsParamSimpleDTO): ControlSettingsParamObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamSimpleDTO): void {
        super.fromJs(source);
        this.Type(source.Type);
    }

    public identity(): ControlSettingsParamIdentityDTO {
        return new ControlSettingsParamIdentityDTO(this.Id());
    }

    public toJs(): ControlSettingsParamSimpleDTO {
        let e = new ControlSettingsParamSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsParamObservableFullDTO extends ControlSettingsParamObservableSimpleDTO {
    public __type = 'ControlSettingsParamObservableFullDTO';

    private _controlsettingsparamobservablefulldto: string;

    public ControlSettings = observable<ControlSettingsObservableSimpleDTO>();

    public static fromJs(source: IControlSettingsParamFullDTO): ControlSettingsParamObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamFullDTO): void {
        super.fromJs(source);
        this.ControlSettings(ControlSettingsObservableSimpleDTO.fromJs(source.ControlSettings));
    }

    public toJs(): ControlSettingsParamFullDTO {
        let e = new ControlSettingsParamFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsParamObservableRichDTO extends ControlSettingsParamObservableFullDTO {
    public __type = 'ControlSettingsParamObservableRichDTO';

    private _controlsettingsparamobservablerichdto: string;

    public ControlSettingsParamValues = observableArray<ControlSettingsParamValueObservableRichDTO>();

    public static fromJs(source: IControlSettingsParamRichDTO): ControlSettingsParamObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamRichDTO): void {
        super.fromJs(source);
        if (source.ControlSettingsParamValues) {
            this.ControlSettingsParamValues(source.ControlSettingsParamValues.map(e => {
                    return ControlSettingsParamValueObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): ControlSettingsParamRichDTO {
        let e = new ControlSettingsParamRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsParamValueObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ControlSettingsParamValueObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ControlSettingsParamValueObservableIdentityDTO(source.Id);
    }

}

export class ControlSettingsParamValueObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ControlSettingsParamValueObservableSimpleDTO';

    private _controlsettingsparamvalueobservablesimpledto: string;

    public Culture = observable<string>();

    public Value = observable<string>();

    public ValueTypeName = observable<string>();

    public static fromJs(source: IControlSettingsParamValueSimpleDTO): ControlSettingsParamValueObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamValueObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamValueSimpleDTO): void {
        super.fromJs(source);
        this.Culture(source.Culture);
        this.Value(source.Value);
        this.ValueTypeName(source.ValueTypeName);
    }

    public identity(): ControlSettingsParamValueIdentityDTO {
        return new ControlSettingsParamValueIdentityDTO(this.Id());
    }

    public toJs(): ControlSettingsParamValueSimpleDTO {
        let e = new ControlSettingsParamValueSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsParamValueObservableFullDTO extends ControlSettingsParamValueObservableSimpleDTO {
    public __type = 'ControlSettingsParamValueObservableFullDTO';

    private _controlsettingsparamvalueobservablefulldto: string;

    public ControlSettingsParam = observable<ControlSettingsParamObservableSimpleDTO>();

    public static fromJs(source: IControlSettingsParamValueFullDTO): ControlSettingsParamValueObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamValueObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamValueFullDTO): void {
        super.fromJs(source);
        this.ControlSettingsParam(ControlSettingsParamObservableSimpleDTO.fromJs(source.ControlSettingsParam));
    }

    public toJs(): ControlSettingsParamValueFullDTO {
        let e = new ControlSettingsParamValueFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ControlSettingsParamValueObservableRichDTO extends ControlSettingsParamValueObservableFullDTO {
    public __type = 'ControlSettingsParamValueObservableRichDTO';

    private _controlsettingsparamvalueobservablerichdto: string;

    public static fromJs(source: IControlSettingsParamValueRichDTO): ControlSettingsParamValueObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamValueObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamValueRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ControlSettingsParamValueRichDTO {
        let e = new ControlSettingsParamValueRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectEventObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainObjectEventObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainObjectEventObservableIdentityDTO(source.Id);
    }

}

export class DomainObjectEventObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'DomainObjectEventObservableSimpleDTO';

    private _domainobjecteventobservablesimpledto: string;

    public DomainObjectId = observable<Guid>();

    public HostName = observable<string>();

    public ProcessDate = observable<Date>();

    public QueueTag = observable<string>();

    public Revision = observable<number>();

    public SerializeData = observable<string>();

    public SerializeType = observable<string>();

    public Size = observable<number>();

    public Status = observable<QueueProgressStatus>();

    public static fromJs(source: IDomainObjectEventSimpleDTO): DomainObjectEventObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectEventObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectEventSimpleDTO): void {
        super.fromJs(source);
        this.DomainObjectId(source.DomainObjectId);
        this.HostName(source.HostName);
        this.ProcessDate(Convert.toDate(source.ProcessDate));
        this.QueueTag(source.QueueTag);
        this.Revision(source.Revision);
        this.SerializeData(source.SerializeData);
        this.SerializeType(source.SerializeType);
        this.Size(source.Size);
        this.Status(source.Status);
    }

    public identity(): DomainObjectEventIdentityDTO {
        return new DomainObjectEventIdentityDTO(this.Id());
    }

    public toJs(): DomainObjectEventSimpleDTO {
        let e = new DomainObjectEventSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectEventObservableFullDTO extends DomainObjectEventObservableSimpleDTO {
    public __type = 'DomainObjectEventObservableFullDTO';

    private _domainobjecteventobservablefulldto: string;

    public Operation = observable<DomainTypeEventOperationObservableSimpleDTO>();

    public static fromJs(source: IDomainObjectEventFullDTO): DomainObjectEventObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectEventObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectEventFullDTO): void {
        super.fromJs(source);
        this.Operation(DomainTypeEventOperationObservableSimpleDTO.fromJs(source.Operation));
    }

    public toJs(): DomainObjectEventFullDTO {
        let e = new DomainObjectEventFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectEventObservableRichDTO extends DomainObjectEventObservableFullDTO {
    public __type = 'DomainObjectEventObservableRichDTO';

    private _domainobjecteventobservablerichdto: string;

    public static fromJs(source: IDomainObjectEventRichDTO): DomainObjectEventObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectEventObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectEventRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainObjectEventRichDTO {
        let e = new DomainObjectEventRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectModificationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainObjectModificationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainObjectModificationObservableIdentityDTO(source.Id);
    }

}

export class DomainObjectModificationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'DomainObjectModificationObservableSimpleDTO';

    private _domainobjectmodificationobservablesimpledto: string;

    public DomainObjectId = observable<Guid>();

    public Processed = observable<boolean>(false);

    public Revision = observable<number>();

    public Type = observable<ModificationType>();

    public Version = observable<number>();

    public static fromJs(source: IDomainObjectModificationSimpleDTO): DomainObjectModificationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectModificationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectModificationSimpleDTO): void {
        super.fromJs(source);
        this.DomainObjectId(source.DomainObjectId);
        this.Processed(source.Processed);
        this.Revision(source.Revision);
        this.Type(source.Type);
        this.Version(source.Version);
    }

    public identity(): DomainObjectModificationIdentityDTO {
        return new DomainObjectModificationIdentityDTO(this.Id());
    }

    public toJs(): DomainObjectModificationSimpleDTO {
        let e = new DomainObjectModificationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectModificationObservableFullDTO extends DomainObjectModificationObservableSimpleDTO {
    public __type = 'DomainObjectModificationObservableFullDTO';

    private _domainobjectmodificationobservablefulldto: string;

    public DomainType = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: IDomainObjectModificationFullDTO): DomainObjectModificationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectModificationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectModificationFullDTO): void {
        super.fromJs(source);
        this.DomainType(DomainTypeObservableSimpleDTO.fromJs(source.DomainType));
    }

    public toJs(): DomainObjectModificationFullDTO {
        let e = new DomainObjectModificationFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectModificationObservableRichDTO extends DomainObjectModificationObservableFullDTO {
    public __type = 'DomainObjectModificationObservableRichDTO';

    private _domainobjectmodificationobservablerichdto: string;

    public static fromJs(source: IDomainObjectModificationRichDTO): DomainObjectModificationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectModificationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectModificationRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainObjectModificationRichDTO {
        let e = new DomainObjectModificationRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectNotificationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainObjectNotificationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainObjectNotificationObservableIdentityDTO(source.Id);
    }

}

export class DomainObjectNotificationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'DomainObjectNotificationObservableSimpleDTO';

    private _domainobjectnotificationobservablesimpledto: string;

    public HostName = observable<string>();

    public ProcessDate = observable<Date>();

    public SerializeData = observable<string>();

    public Size = observable<number>();

    public Status = observable<QueueProgressStatus>();

    public static fromJs(source: IDomainObjectNotificationSimpleDTO): DomainObjectNotificationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectNotificationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectNotificationSimpleDTO): void {
        super.fromJs(source);
        this.HostName(source.HostName);
        this.ProcessDate(Convert.toDate(source.ProcessDate));
        this.SerializeData(source.SerializeData);
        this.Size(source.Size);
        this.Status(source.Status);
    }

    public identity(): DomainObjectNotificationIdentityDTO {
        return new DomainObjectNotificationIdentityDTO(this.Id());
    }

    public toJs(): DomainObjectNotificationSimpleDTO {
        let e = new DomainObjectNotificationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectNotificationObservableFullDTO extends DomainObjectNotificationObservableSimpleDTO {
    public __type = 'DomainObjectNotificationObservableFullDTO';

    private _domainobjectnotificationobservablefulldto: string;

    public static fromJs(source: IDomainObjectNotificationFullDTO): DomainObjectNotificationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectNotificationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectNotificationFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainObjectNotificationFullDTO {
        let e = new DomainObjectNotificationFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainObjectNotificationObservableRichDTO extends DomainObjectNotificationObservableFullDTO {
    public __type = 'DomainObjectNotificationObservableRichDTO';

    private _domainobjectnotificationobservablerichdto: string;

    public static fromJs(source: IDomainObjectNotificationRichDTO): DomainObjectNotificationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectNotificationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectNotificationRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainObjectNotificationRichDTO {
        let e = new DomainObjectNotificationRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeObservableIdentityDTO(source.Id);
    }

}

export class DomainTypeObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'DomainTypeObservableSimpleDTO';

    private _domaintypeobservablesimpledto: string;

    public FullTypeName = observable<string>();

    public HasSecurityAttachment = observable<boolean>(false);

    public Name = observable<string>();

    public NameSpace = observable<string>();

    public static fromJs(source: IDomainTypeSimpleDTO): DomainTypeObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeSimpleDTO): void {
        super.fromJs(source);
        this.FullTypeName(source.FullTypeName);
        this.HasSecurityAttachment(source.HasSecurityAttachment);
        this.Name(source.Name);
        this.NameSpace(source.NameSpace);
    }

    public identity(): DomainTypeIdentityDTO {
        return new DomainTypeIdentityDTO(this.Id());
    }

    public toJs(): DomainTypeSimpleDTO {
        let e = new DomainTypeSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeStrictDTO {
        let e = new DomainTypeSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeObservableFullDTO extends DomainTypeObservableSimpleDTO {
    public __type = 'DomainTypeObservableFullDTO';

    private _domaintypeobservablefulldto: string;

    public TargetSystem = observable<TargetSystemObservableSimpleDTO>();

    public static fromJs(source: IDomainTypeFullDTO): DomainTypeObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeFullDTO): void {
        super.fromJs(source);
        this.TargetSystem(TargetSystemObservableSimpleDTO.fromJs(source.TargetSystem));
    }

    public toJs(): DomainTypeFullDTO {
        let e = new DomainTypeFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeStrictDTO {
        let e = new DomainTypeFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeObservableRichDTO extends DomainTypeObservableFullDTO {
    public __type = 'DomainTypeObservableRichDTO';

    private _domaintypeobservablerichdto: string;

    public EventOperations = observableArray<DomainTypeEventOperationObservableRichDTO>();

    public static fromJs(source: IDomainTypeRichDTO): DomainTypeObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRichDTO): void {
        super.fromJs(source);
        if (source.EventOperations) {
            this.EventOperations(source.EventOperations.map(e => {
                    return DomainTypeEventOperationObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): DomainTypeRichDTO {
        let e = new DomainTypeRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeStrictDTO {
        let e = new DomainTypeRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'DomainTypeObservableVisualDTO';

    private _domaintypeobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): DomainTypeObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): DomainTypeIdentityDTO {
        return new DomainTypeIdentityDTO(this.Id());
    }

    public toJs(): DomainTypeVisualDTO {
        let e = new DomainTypeVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class DomainTypeEventModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeEventModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeEventModelObservableIdentityDTO(source.Id);
    }

}

export class DomainTypeEventModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'DomainTypeEventModelObservableSimpleDTO';

    private _domaintypeeventmodelobservablesimpledto: string;

    public Revision = observable<number>();

    public static fromJs(source: IDomainTypeEventModelSimpleDTO): DomainTypeEventModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventModelSimpleDTO): void {
        super.fromJs(source);
        this.Revision(source.Revision);
    }

    public toJs(): DomainTypeEventModelSimpleDTO {
        let e = new DomainTypeEventModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeEventModelObservableFullDTO extends DomainTypeEventModelObservableSimpleDTO {
    public __type = 'DomainTypeEventModelObservableFullDTO';

    private _domaintypeeventmodelobservablefulldto: string;

    public Operation = observable<DomainTypeEventOperationObservableSimpleDTO>();

    public static fromJs(source: IDomainTypeEventModelFullDTO): DomainTypeEventModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventModelFullDTO): void {
        super.fromJs(source);
        this.Operation(DomainTypeEventOperationObservableSimpleDTO.fromJs(source.Operation));
    }

    public toJs(): DomainTypeEventModelFullDTO {
        let e = new DomainTypeEventModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeEventModelObservableRichDTO extends DomainTypeEventModelObservableFullDTO {
    public __type = 'DomainTypeEventModelObservableRichDTO';

    private _domaintypeeventmodelobservablerichdto: string;

    public DomainObjectIdents = observableArray<Guid>();

    public static fromJs(source: IDomainTypeEventModelRichDTO): DomainTypeEventModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventModelRichDTO): void {
        super.fromJs(source);
        if (source.DomainObjectIdents) {
            this.DomainObjectIdents(source.DomainObjectIdents.map(e => {
                    return e;
                }));
        }
    }

    public toJs(): DomainTypeEventModelRichDTO {
        let e = new DomainTypeEventModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeEventOperationObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeEventOperationObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeEventOperationObservableIdentityDTO(source.Id);
    }

}

export class DomainTypeEventOperationObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'DomainTypeEventOperationObservableSimpleDTO';

    private _domaintypeeventoperationobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IDomainTypeEventOperationSimpleDTO): DomainTypeEventOperationObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventOperationSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): DomainTypeEventOperationIdentityDTO {
        return new DomainTypeEventOperationIdentityDTO(this.Id());
    }

    public toJs(): DomainTypeEventOperationSimpleDTO {
        let e = new DomainTypeEventOperationSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeEventOperationObservableFullDTO extends DomainTypeEventOperationObservableSimpleDTO {
    public __type = 'DomainTypeEventOperationObservableFullDTO';

    private _domaintypeeventoperationobservablefulldto: string;

    public DomainType = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: IDomainTypeEventOperationFullDTO): DomainTypeEventOperationObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventOperationFullDTO): void {
        super.fromJs(source);
        this.DomainType(DomainTypeObservableSimpleDTO.fromJs(source.DomainType));
    }

    public toJs(): DomainTypeEventOperationFullDTO {
        let e = new DomainTypeEventOperationFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeEventOperationObservableRichDTO extends DomainTypeEventOperationObservableFullDTO {
    public __type = 'DomainTypeEventOperationObservableRichDTO';

    private _domaintypeeventoperationobservablerichdto: string;

    public static fromJs(source: IDomainTypeEventOperationRichDTO): DomainTypeEventOperationObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventOperationRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainTypeEventOperationRichDTO {
        let e = new DomainTypeEventOperationRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeEventOperationObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'DomainTypeEventOperationObservableVisualDTO';

    private _domaintypeeventoperationobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): DomainTypeEventOperationObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): DomainTypeEventOperationIdentityDTO {
        return new DomainTypeEventOperationIdentityDTO(this.Id());
    }

    public toJs(): DomainTypeEventOperationVisualDTO {
        let e = new DomainTypeEventOperationVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class DomainTypeRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class DomainTypeRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'DomainTypeRootFilterModelObservableSimpleDTO';

    private _domaintyperootfiltermodelobservablesimpledto: string;

    public static fromJs(source: IDomainTypeRootFilterModelSimpleDTO): DomainTypeRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainTypeRootFilterModelSimpleDTO {
        let e = new DomainTypeRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeRootFilterModelObservableFullDTO extends DomainTypeRootFilterModelObservableSimpleDTO {
    public __type = 'DomainTypeRootFilterModelObservableFullDTO';

    private _domaintyperootfiltermodelobservablefulldto: string;

    public TargetSystem = observable<TargetSystemObservableSimpleDTO>();

    public static fromJs(source: IDomainTypeRootFilterModelFullDTO): DomainTypeRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRootFilterModelFullDTO): void {
        super.fromJs(source);
        this.TargetSystem(TargetSystemObservableSimpleDTO.fromJs(source.TargetSystem));
    }

    public toJs(): DomainTypeRootFilterModelFullDTO {
        let e = new DomainTypeRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class DomainTypeRootFilterModelObservableRichDTO extends DomainTypeRootFilterModelObservableFullDTO {
    public __type = 'DomainTypeRootFilterModelObservableRichDTO';

    private _domaintyperootfiltermodelobservablerichdto: string;

    public static fromJs(source: IDomainTypeRootFilterModelRichDTO): DomainTypeRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): DomainTypeRootFilterModelRichDTO {
        let e = new DomainTypeRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ExceptionMessageObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ExceptionMessageObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ExceptionMessageObservableIdentityDTO(source.Id);
    }

}

export class ExceptionMessageObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ExceptionMessageObservableSimpleDTO';

    private _exceptionmessageobservablesimpledto: string;

    public IsClient = observable<boolean>(false);

    public IsRoot = observable<boolean>(false);

    public Message = observable<string>();

    public MessageType = observable<string>();

    public StackTrace = observable<string>();

    public static fromJs(source: IExceptionMessageSimpleDTO): ExceptionMessageObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageSimpleDTO): void {
        super.fromJs(source);
        this.IsClient(source.IsClient);
        this.IsRoot(source.IsRoot);
        this.Message(source.Message);
        this.MessageType(source.MessageType);
        this.StackTrace(source.StackTrace);
    }

    public identity(): ExceptionMessageIdentityDTO {
        return new ExceptionMessageIdentityDTO(this.Id());
    }

    public toJs(): ExceptionMessageSimpleDTO {
        let e = new ExceptionMessageSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ExceptionMessageObservableFullDTO extends ExceptionMessageObservableSimpleDTO {
    public __type = 'ExceptionMessageObservableFullDTO';

    private _exceptionmessageobservablefulldto: string;

    public static fromJs(source: IExceptionMessageFullDTO): ExceptionMessageObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): ExceptionMessageFullDTO {
        let e = new ExceptionMessageFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ExceptionMessageObservableRichDTO extends ExceptionMessageObservableFullDTO {
    public __type = 'ExceptionMessageObservableRichDTO';

    private _exceptionmessageobservablerichdto: string;

    public InnerException = observable<ExceptionMessageObservableRichDTO>();

    public static fromJs(source: IExceptionMessageRichDTO): ExceptionMessageObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRichDTO): void {
        super.fromJs(source);
        this.InnerException(ExceptionMessageObservableRichDTO.fromJs(source.InnerException));
    }

    public toJs(): ExceptionMessageRichDTO {
        let e = new ExceptionMessageRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ExceptionMessageRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ExceptionMessageRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ExceptionMessageRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class ExceptionMessageRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'ExceptionMessageRootFilterModelObservableSimpleDTO';

    private _exceptionmessagerootfiltermodelobservablesimpledto: string;

    public IsRoot = observable<boolean>(false);

    public Period = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: IExceptionMessageRootFilterModelSimpleDTO): ExceptionMessageRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRootFilterModelSimpleDTO): void {
        super.fromJs(source);
        this.IsRoot(source.IsRoot);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
    }

    public toJs(): ExceptionMessageRootFilterModelSimpleDTO {
        let e = new ExceptionMessageRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ExceptionMessageRootFilterModelObservableFullDTO extends ExceptionMessageRootFilterModelObservableSimpleDTO {
    public __type = 'ExceptionMessageRootFilterModelObservableFullDTO';

    private _exceptionmessagerootfiltermodelobservablefulldto: string;

    public static fromJs(source: IExceptionMessageRootFilterModelFullDTO): ExceptionMessageRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): ExceptionMessageRootFilterModelFullDTO {
        let e = new ExceptionMessageRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ExceptionMessageRootFilterModelObservableRichDTO extends ExceptionMessageRootFilterModelObservableFullDTO {
    public __type = 'ExceptionMessageRootFilterModelObservableRichDTO';

    private _exceptionmessagerootfiltermodelobservablerichdto: string;

    public static fromJs(source: IExceptionMessageRootFilterModelRichDTO): ExceptionMessageRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ExceptionMessageRootFilterModelRichDTO {
        let e = new ExceptionMessageRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class LogMessageObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): LogMessageObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new LogMessageObservableIdentityDTO(source.Id);
    }

}

export class LogMessageObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'LogMessageObservableSimpleDTO';

    private _logmessageobservablesimpledto: string;

    public Action = observable<string>();

    public InputMessage = observable<string>();

    public OutputMessage = observable<string>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public UserName = observable<string>();

    public static fromJs(source: ILogMessageSimpleDTO): LogMessageObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LogMessageObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILogMessageSimpleDTO): void {
        super.fromJs(source);
        this.Action(source.Action);
        this.InputMessage(source.InputMessage);
        this.OutputMessage(source.OutputMessage);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
        this.UserName(source.UserName);
    }

    public identity(): LogMessageIdentityDTO {
        return new LogMessageIdentityDTO(this.Id());
    }

    public toJs(): LogMessageSimpleDTO {
        let e = new LogMessageSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): LogMessageStrictDTO {
        let e = new LogMessageSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class LogMessageObservableFullDTO extends LogMessageObservableSimpleDTO {
    public __type = 'LogMessageObservableFullDTO';

    private _logmessageobservablefulldto: string;

    public static fromJs(source: ILogMessageFullDTO): LogMessageObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LogMessageObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILogMessageFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): LogMessageFullDTO {
        let e = new LogMessageFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): LogMessageStrictDTO {
        let e = new LogMessageFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class LogMessageObservableRichDTO extends LogMessageObservableFullDTO {
    public __type = 'LogMessageObservableRichDTO';

    private _logmessageobservablerichdto: string;

    public static fromJs(source: ILogMessageRichDTO): LogMessageObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LogMessageObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILogMessageRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): LogMessageRichDTO {
        let e = new LogMessageRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): LogMessageStrictDTO {
        let e = new LogMessageRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionCreateModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionCreateModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionCreateModelObservableIdentityDTO(source.Id);
    }

}

export class UserActionCreateModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'UserActionCreateModelObservableSimpleDTO';

    private _useractioncreatemodelobservablesimpledto: string;

    public DomainType = observable<string>();

    public Name = observable<string>();

    public static fromJs(source: IUserActionCreateModelSimpleDTO): UserActionCreateModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionCreateModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionCreateModelSimpleDTO): void {
        super.fromJs(source);
        this.DomainType(source.DomainType);
        this.Name(source.Name);
    }

    public toJs(): UserActionCreateModelSimpleDTO {
        let e = new UserActionCreateModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionCreateModelObservableFullDTO extends UserActionCreateModelObservableSimpleDTO {
    public __type = 'UserActionCreateModelObservableFullDTO';

    private _useractioncreatemodelobservablefulldto: string;

    public static fromJs(source: IUserActionCreateModelFullDTO): UserActionCreateModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionCreateModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionCreateModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): UserActionCreateModelFullDTO {
        let e = new UserActionCreateModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionCreateModelObservableRichDTO extends UserActionCreateModelObservableFullDTO {
    public __type = 'UserActionCreateModelObservableRichDTO';

    private _useractioncreatemodelobservablerichdto: string;

    public ObjectIdentities = observableArray<UserActionObjectModelObservableRichDTO>();

    public static fromJs(source: IUserActionCreateModelRichDTO): UserActionCreateModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionCreateModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionCreateModelRichDTO): void {
        super.fromJs(source);
        if (source.ObjectIdentities) {
            this.ObjectIdentities(source.ObjectIdentities.map(e => {
                    return UserActionObjectModelObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): UserActionCreateModelRichDTO {
        let e = new UserActionCreateModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObjectModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObjectModelObservableIdentityDTO(source.Id);
    }

}

export class UserActionObjectModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'UserActionObjectModelObservableSimpleDTO';

    private _useractionobjectmodelobservablesimpledto: string;

    public Name = observable<string>();

    public ObjectIdentity = observable<Guid>();

    public static fromJs(source: IUserActionObjectModelSimpleDTO): UserActionObjectModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectModelSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
        this.ObjectIdentity(source.ObjectIdentity);
    }

    public toJs(): UserActionObjectModelSimpleDTO {
        let e = new UserActionObjectModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectModelObservableFullDTO extends UserActionObjectModelObservableSimpleDTO {
    public __type = 'UserActionObjectModelObservableFullDTO';

    private _useractionobjectmodelobservablefulldto: string;

    public static fromJs(source: IUserActionObjectModelFullDTO): UserActionObjectModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): UserActionObjectModelFullDTO {
        let e = new UserActionObjectModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectModelObservableRichDTO extends UserActionObjectModelObservableFullDTO {
    public __type = 'UserActionObjectModelObservableRichDTO';

    private _useractionobjectmodelobservablerichdto: string;

    public static fromJs(source: IUserActionObjectModelRichDTO): UserActionObjectModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): UserActionObjectModelRichDTO {
        let e = new UserActionObjectModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportGenerationModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportGenerationModelObservableIdentityDTO(source.Id);
    }

}

export class ReportGenerationModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'ReportGenerationModelObservableSimpleDTO';

    private _reportgenerationmodelobservablesimpledto: string;

    public static fromJs(source: IReportGenerationModelSimpleDTO): ReportGenerationModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportGenerationModelSimpleDTO {
        let e = new ReportGenerationModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationModelObservableFullDTO extends ReportGenerationModelObservableSimpleDTO {
    public __type = 'ReportGenerationModelObservableFullDTO';

    private _reportgenerationmodelobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IReportGenerationModelFullDTO): ReportGenerationModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationModelFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): ReportGenerationModelFullDTO {
        let e = new ReportGenerationModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationModelObservableRichDTO extends ReportGenerationModelObservableFullDTO {
    public __type = 'ReportGenerationModelObservableRichDTO';

    private _reportgenerationmodelobservablerichdto: string;

    public Items = observableArray<ReportGenerationValueObservableRichDTO>();

    public static fromJs(source: IReportGenerationModelRichDTO): ReportGenerationModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationModelRichDTO): void {
        super.fromJs(source);
        if (source.Items) {
            this.Items(source.Items.map(e => {
                    return ReportGenerationValueObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): ReportGenerationModelRichDTO {
        let e = new ReportGenerationModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationRequestModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportGenerationRequestModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportGenerationRequestModelObservableIdentityDTO(source.Id);
    }

}

export class ReportGenerationRequestModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'ReportGenerationRequestModelObservableSimpleDTO';

    private _reportgenerationrequestmodelobservablesimpledto: string;

    public static fromJs(source: IReportGenerationRequestModelSimpleDTO): ReportGenerationRequestModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationRequestModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationRequestModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportGenerationRequestModelSimpleDTO {
        let e = new ReportGenerationRequestModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationRequestModelObservableFullDTO extends ReportGenerationRequestModelObservableSimpleDTO {
    public __type = 'ReportGenerationRequestModelObservableFullDTO';

    private _reportgenerationrequestmodelobservablefulldto: string;

    public static fromJs(source: IReportGenerationRequestModelFullDTO): ReportGenerationRequestModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationRequestModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationRequestModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportGenerationRequestModelFullDTO {
        let e = new ReportGenerationRequestModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationRequestModelObservableRichDTO extends ReportGenerationRequestModelObservableFullDTO {
    public __type = 'ReportGenerationRequestModelObservableRichDTO';

    private _reportgenerationrequestmodelobservablerichdto: string;

    public Parameters = observableArray<ReportParameterObservableSimpleDTO>();

    public TypeMetadatas = observableArray<TypeMetadata>();

    public static fromJs(source: IReportGenerationRequestModelRichDTO): ReportGenerationRequestModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationRequestModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationRequestModelRichDTO): void {
        super.fromJs(source);
        if (source.Parameters) {
            this.Parameters(source.Parameters.map(e => {
                    return ReportParameterObservableSimpleDTO.fromJs(e);
                }));
        }
        if (source.TypeMetadatas) {
            this.TypeMetadatas(source.TypeMetadatas.map(e => {
                    return TypeMetadata.fromJs(e);
                }));
        }
    }

    public toJs(): ReportGenerationRequestModelRichDTO {
        let e = new ReportGenerationRequestModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationValueObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportGenerationValueObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportGenerationValueObservableIdentityDTO(source.Id);
    }

}

export class ReportGenerationValueObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'ReportGenerationValueObservableSimpleDTO';

    private _reportgenerationvalueobservablesimpledto: string;

    public DesignValue = observable<string>();

    public Value = observable<string>();

    public static fromJs(source: IReportGenerationValueSimpleDTO): ReportGenerationValueObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationValueObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationValueSimpleDTO): void {
        super.fromJs(source);
        this.DesignValue(source.DesignValue);
        this.Value(source.Value);
    }

    public toJs(): ReportGenerationValueSimpleDTO {
        let e = new ReportGenerationValueSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationValueObservableFullDTO extends ReportGenerationValueObservableSimpleDTO {
    public __type = 'ReportGenerationValueObservableFullDTO';

    private _reportgenerationvalueobservablefulldto: string;

    public Parameter = observable<ReportParameterObservableSimpleDTO>();

    public static fromJs(source: IReportGenerationValueFullDTO): ReportGenerationValueObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationValueObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationValueFullDTO): void {
        super.fromJs(source);
        this.Parameter(ReportParameterObservableSimpleDTO.fromJs(source.Parameter));
    }

    public toJs(): ReportGenerationValueFullDTO {
        let e = new ReportGenerationValueFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportGenerationValueObservableRichDTO extends ReportGenerationValueObservableFullDTO {
    public __type = 'ReportGenerationValueObservableRichDTO';

    private _reportgenerationvalueobservablerichdto: string;

    public static fromJs(source: IReportGenerationValueRichDTO): ReportGenerationValueObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationValueObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationValueRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportGenerationValueRichDTO {
        let e = new ReportGenerationValueRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportParameterValueObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportParameterValueObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportParameterValueObservableIdentityDTO(source.Id);
    }

}

export class ReportParameterValueObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'ReportParameterValueObservableSimpleDTO';

    private _reportparametervalueobservablesimpledto: string;

    public DesignValue = observable<string>();

    public Value = observable<string>();

    public static fromJs(source: IReportParameterValueSimpleDTO): ReportParameterValueObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterValueObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterValueSimpleDTO): void {
        super.fromJs(source);
        this.DesignValue(source.DesignValue);
        this.Value(source.Value);
    }

    public toJs(): ReportParameterValueSimpleDTO {
        let e = new ReportParameterValueSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportParameterValueObservableFullDTO extends ReportParameterValueObservableSimpleDTO {
    public __type = 'ReportParameterValueObservableFullDTO';

    private _reportparametervalueobservablefulldto: string;

    public ReportParameter = observable<ReportParameterObservableSimpleDTO>();

    public static fromJs(source: IReportParameterValueFullDTO): ReportParameterValueObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterValueObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterValueFullDTO): void {
        super.fromJs(source);
        this.ReportParameter(ReportParameterObservableSimpleDTO.fromJs(source.ReportParameter));
    }

    public toJs(): ReportParameterValueFullDTO {
        let e = new ReportParameterValueFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportParameterValueObservableRichDTO extends ReportParameterValueObservableFullDTO {
    public __type = 'ReportParameterValueObservableRichDTO';

    private _reportparametervalueobservablerichdto: string;

    public static fromJs(source: IReportParameterValueRichDTO): ReportParameterValueObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterValueObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterValueRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportParameterValueRichDTO {
        let e = new ReportParameterValueRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObjectRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObjectRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class UserActionObjectRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'UserActionObjectRootFilterModelObservableSimpleDTO';

    private _useractionobjectrootfiltermodelobservablesimpledto: string;

    public CountingEntities = observable<number>();

    public Period = observable<Framework.Core.ObservablePeriod>();

    public static fromJs(source: IUserActionObjectRootFilterModelSimpleDTO): UserActionObjectRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRootFilterModelSimpleDTO): void {
        super.fromJs(source);
        this.CountingEntities(source.CountingEntities);
        this.Period(Framework.Core.ObservablePeriod.toPeriod(source.Period));
    }

    public toJs(): UserActionObjectRootFilterModelSimpleDTO {
        let e = new UserActionObjectRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectRootFilterModelObservableFullDTO extends UserActionObjectRootFilterModelObservableSimpleDTO {
    public __type = 'UserActionObjectRootFilterModelObservableFullDTO';

    private _useractionobjectrootfiltermodelobservablefulldto: string;

    public static fromJs(source: IUserActionObjectRootFilterModelFullDTO): UserActionObjectRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): UserActionObjectRootFilterModelFullDTO {
        let e = new UserActionObjectRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectRootFilterModelObservableRichDTO extends UserActionObjectRootFilterModelObservableFullDTO {
    public __type = 'UserActionObjectRootFilterModelObservableRichDTO';

    private _useractionobjectrootfiltermodelobservablerichdto: string;

    public ActionNames = observableArray<string>();

    public DomainTypeNames = observableArray<string>();

    public static fromJs(source: IUserActionObjectRootFilterModelRichDTO): UserActionObjectRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRootFilterModelRichDTO): void {
        super.fromJs(source);
        if (source.ActionNames) {
            this.ActionNames(source.ActionNames.map(e => {
                    return e;
                }));
        }
        if (source.DomainTypeNames) {
            this.DomainTypeNames(source.DomainTypeNames.map(e => {
                    return e;
                }));
        }
    }

    public toJs(): UserActionObjectRootFilterModelRichDTO {
        let e = new UserActionObjectRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class NamedLockObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): NamedLockObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new NamedLockObservableIdentityDTO(source.Id);
    }

}

export class NamedLockObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'NamedLockObservableSimpleDTO';

    private _namedlockobservablesimpledto: string;

    public LockOperation = observable<NamedLockOperation>();

    public static fromJs(source: INamedLockSimpleDTO): NamedLockObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new NamedLockObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: INamedLockSimpleDTO): void {
        super.fromJs(source);
        this.LockOperation(source.LockOperation);
    }

    public identity(): NamedLockIdentityDTO {
        return new NamedLockIdentityDTO(this.Id());
    }

    public toJs(): NamedLockSimpleDTO {
        let e = new NamedLockSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): NamedLockStrictDTO {
        let e = new NamedLockSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class NamedLockObservableFullDTO extends NamedLockObservableSimpleDTO {
    public __type = 'NamedLockObservableFullDTO';

    private _namedlockobservablefulldto: string;

    public static fromJs(source: INamedLockFullDTO): NamedLockObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new NamedLockObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: INamedLockFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): NamedLockFullDTO {
        let e = new NamedLockFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): NamedLockStrictDTO {
        let e = new NamedLockFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class NamedLockObservableRichDTO extends NamedLockObservableFullDTO {
    public __type = 'NamedLockObservableRichDTO';

    private _namedlockobservablerichdto: string;

    public static fromJs(source: INamedLockRichDTO): NamedLockObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new NamedLockObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: INamedLockRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): NamedLockRichDTO {
        let e = new NamedLockRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): NamedLockStrictDTO {
        let e = new NamedLockRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class QueueProcessingStateObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): QueueProcessingStateObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new QueueProcessingStateObservableIdentityDTO(source.Id);
    }

}

export class QueueProcessingStateObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'QueueProcessingStateObservableSimpleDTO';

    private _queueprocessingstateobservablesimpledto: string;

    public LastProcessedItemDateTime = observable<Date>();

    public UnprocessedCount = observable<number>();

    public static fromJs(source: IQueueProcessingStateSimpleDTO): QueueProcessingStateObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new QueueProcessingStateObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IQueueProcessingStateSimpleDTO): void {
        super.fromJs(source);
        this.LastProcessedItemDateTime(Convert.toDate(source.LastProcessedItemDateTime));
        this.UnprocessedCount(source.UnprocessedCount);
    }

    public toJs(): QueueProcessingStateSimpleDTO {
        let e = new QueueProcessingStateSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class QueueProcessingStateObservableFullDTO extends QueueProcessingStateObservableSimpleDTO {
    public __type = 'QueueProcessingStateObservableFullDTO';

    private _queueprocessingstateobservablefulldto: string;

    public static fromJs(source: IQueueProcessingStateFullDTO): QueueProcessingStateObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new QueueProcessingStateObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IQueueProcessingStateFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): QueueProcessingStateFullDTO {
        let e = new QueueProcessingStateFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class QueueProcessingStateObservableRichDTO extends QueueProcessingStateObservableFullDTO {
    public __type = 'QueueProcessingStateObservableRichDTO';

    private _queueprocessingstateobservablerichdto: string;

    public static fromJs(source: IQueueProcessingStateRichDTO): QueueProcessingStateObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new QueueProcessingStateObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IQueueProcessingStateRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): QueueProcessingStateRichDTO {
        let e = new QueueProcessingStateRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessableBusinessRoleReportRightObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AccessableBusinessRoleReportRightObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AccessableBusinessRoleReportRightObservableIdentityDTO(source.Id);
    }

}

export class AccessableBusinessRoleReportRightObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AccessableBusinessRoleReportRightObservableSimpleDTO';

    private _accessablebusinessrolereportrightobservablesimpledto: string;

    public Value = observable<Guid>();

    public static fromJs(source: IAccessableBusinessRoleReportRightSimpleDTO): AccessableBusinessRoleReportRightObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableBusinessRoleReportRightObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableBusinessRoleReportRightSimpleDTO): void {
        super.fromJs(source);
        this.Value(source.Value);
    }

    public identity(): AccessableBusinessRoleReportRightIdentityDTO {
        return new AccessableBusinessRoleReportRightIdentityDTO(this.Id());
    }

    public toJs(): AccessableBusinessRoleReportRightSimpleDTO {
        let e = new AccessableBusinessRoleReportRightSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessableBusinessRoleReportRightObservableFullDTO extends AccessableBusinessRoleReportRightObservableSimpleDTO {
    public __type = 'AccessableBusinessRoleReportRightObservableFullDTO';

    private _accessablebusinessrolereportrightobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IAccessableBusinessRoleReportRightFullDTO): AccessableBusinessRoleReportRightObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableBusinessRoleReportRightObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableBusinessRoleReportRightFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): AccessableBusinessRoleReportRightFullDTO {
        let e = new AccessableBusinessRoleReportRightFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessableBusinessRoleReportRightObservableRichDTO extends AccessableBusinessRoleReportRightObservableFullDTO {
    public __type = 'AccessableBusinessRoleReportRightObservableRichDTO';

    private _accessablebusinessrolereportrightobservablerichdto: string;

    public static fromJs(source: IAccessableBusinessRoleReportRightRichDTO): AccessableBusinessRoleReportRightObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableBusinessRoleReportRightObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableBusinessRoleReportRightRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): AccessableBusinessRoleReportRightRichDTO {
        let e = new AccessableBusinessRoleReportRightRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessableOperationReportRightObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AccessableOperationReportRightObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AccessableOperationReportRightObservableIdentityDTO(source.Id);
    }

}

export class AccessableOperationReportRightObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AccessableOperationReportRightObservableSimpleDTO';

    private _accessableoperationreportrightobservablesimpledto: string;

    public Value = observable<Guid>();

    public static fromJs(source: IAccessableOperationReportRightSimpleDTO): AccessableOperationReportRightObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableOperationReportRightObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableOperationReportRightSimpleDTO): void {
        super.fromJs(source);
        this.Value(source.Value);
    }

    public identity(): AccessableOperationReportRightIdentityDTO {
        return new AccessableOperationReportRightIdentityDTO(this.Id());
    }

    public toJs(): AccessableOperationReportRightSimpleDTO {
        let e = new AccessableOperationReportRightSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessableOperationReportRightObservableFullDTO extends AccessableOperationReportRightObservableSimpleDTO {
    public __type = 'AccessableOperationReportRightObservableFullDTO';

    private _accessableoperationreportrightobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IAccessableOperationReportRightFullDTO): AccessableOperationReportRightObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableOperationReportRightObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableOperationReportRightFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): AccessableOperationReportRightFullDTO {
        let e = new AccessableOperationReportRightFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessableOperationReportRightObservableRichDTO extends AccessableOperationReportRightObservableFullDTO {
    public __type = 'AccessableOperationReportRightObservableRichDTO';

    private _accessableoperationreportrightobservablerichdto: string;

    public static fromJs(source: IAccessableOperationReportRightRichDTO): AccessableOperationReportRightObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableOperationReportRightObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableOperationReportRightRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): AccessableOperationReportRightRichDTO {
        let e = new AccessableOperationReportRightRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessablePrincipalReportRightObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AccessablePrincipalReportRightObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AccessablePrincipalReportRightObservableIdentityDTO(source.Id);
    }

}

export class AccessablePrincipalReportRightObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'AccessablePrincipalReportRightObservableSimpleDTO';

    private _accessableprincipalreportrightobservablesimpledto: string;

    public Value = observable<string>();

    public static fromJs(source: IAccessablePrincipalReportRightSimpleDTO): AccessablePrincipalReportRightObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessablePrincipalReportRightObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessablePrincipalReportRightSimpleDTO): void {
        super.fromJs(source);
        this.Value(source.Value);
    }

    public identity(): AccessablePrincipalReportRightIdentityDTO {
        return new AccessablePrincipalReportRightIdentityDTO(this.Id());
    }

    public toJs(): AccessablePrincipalReportRightSimpleDTO {
        let e = new AccessablePrincipalReportRightSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessablePrincipalReportRightObservableFullDTO extends AccessablePrincipalReportRightObservableSimpleDTO {
    public __type = 'AccessablePrincipalReportRightObservableFullDTO';

    private _accessableprincipalreportrightobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IAccessablePrincipalReportRightFullDTO): AccessablePrincipalReportRightObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessablePrincipalReportRightObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessablePrincipalReportRightFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): AccessablePrincipalReportRightFullDTO {
        let e = new AccessablePrincipalReportRightFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class AccessablePrincipalReportRightObservableRichDTO extends AccessablePrincipalReportRightObservableFullDTO {
    public __type = 'AccessablePrincipalReportRightObservableRichDTO';

    private _accessableprincipalreportrightobservablerichdto: string;

    public static fromJs(source: IAccessablePrincipalReportRightRichDTO): AccessablePrincipalReportRightObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessablePrincipalReportRightObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessablePrincipalReportRightRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): AccessablePrincipalReportRightRichDTO {
        let e = new AccessablePrincipalReportRightRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportObservableIdentityDTO(source.Id);
    }

}

export class ReportObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ReportObservableSimpleDTO';

    private _reportobservablesimpledto: string;

    public Description = observable<string>();

    public DomainTypeName = observable<string>();

    public Name = observable<string>();

    public Owner = observable<string>();

    public ReportType = observable<ReportType>();

    public SecurityOperationCode = observable<number>();

    public SortBy = observable<string>();

    public Version = observable<number>();

    public static fromJs(source: IReportSimpleDTO): ReportObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportSimpleDTO): void {
        super.fromJs(source);
        this.Description(source.Description);
        this.DomainTypeName(source.DomainTypeName);
        this.Name(source.Name);
        this.Owner(source.Owner);
        this.ReportType(source.ReportType);
        this.SecurityOperationCode(source.SecurityOperationCode);
        this.SortBy(source.SortBy);
        this.Version(source.Version);
    }

    public identity(): ReportIdentityDTO {
        return new ReportIdentityDTO(this.Id());
    }

    public toJs(): ReportSimpleDTO {
        let e = new ReportSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportStrictDTO {
        let e = new ReportSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportObservableFullDTO extends ReportObservableSimpleDTO {
    public __type = 'ReportObservableFullDTO';

    private _reportobservablefulldto: string;

    public static fromJs(source: IReportFullDTO): ReportObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportFullDTO {
        let e = new ReportFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportStrictDTO {
        let e = new ReportFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportObservableRichDTO extends ReportObservableFullDTO {
    public __type = 'ReportObservableRichDTO';

    private _reportobservablerichdto: string;

    public AccessableBusinessRoles = observableArray<AccessableBusinessRoleReportRightObservableRichDTO>();

    public AccessableOperations = observableArray<AccessableOperationReportRightObservableRichDTO>();

    public AccessablePrincipals = observableArray<AccessablePrincipalReportRightObservableRichDTO>();

    public Filters = observableArray<ReportFilterObservableRichDTO>();

    public Parameters = observableArray<ReportParameterObservableRichDTO>();

    public Properties = observableArray<ReportPropertyObservableRichDTO>();

    public static fromJs(source: IReportRichDTO): ReportObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportRichDTO): void {
        super.fromJs(source);
        if (source.AccessableBusinessRoles) {
            this.AccessableBusinessRoles(source.AccessableBusinessRoles.map(e => {
                    return AccessableBusinessRoleReportRightObservableRichDTO.fromJs(e);
                }));
        }
        if (source.AccessableOperations) {
            this.AccessableOperations(source.AccessableOperations.map(e => {
                    return AccessableOperationReportRightObservableRichDTO.fromJs(e);
                }));
        }
        if (source.AccessablePrincipals) {
            this.AccessablePrincipals(source.AccessablePrincipals.map(e => {
                    return AccessablePrincipalReportRightObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Filters) {
            this.Filters(source.Filters.map(e => {
                    return ReportFilterObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Parameters) {
            this.Parameters(source.Parameters.map(e => {
                    return ReportParameterObservableRichDTO.fromJs(e);
                }));
        }
        if (source.Properties) {
            this.Properties(source.Properties.map(e => {
                    return ReportPropertyObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): ReportRichDTO {
        let e = new ReportRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportStrictDTO {
        let e = new ReportRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportFilterObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportFilterObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportFilterObservableIdentityDTO(source.Id);
    }

}

export class ReportFilterObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ReportFilterObservableSimpleDTO';

    private _reportfilterobservablesimpledto: string;

    public FilterOperator = observable<string>();

    public FilterOperatorViewName = observable<string>();

    public IsValueFromParameters = observable<boolean>(false);

    public Property = observable<string>();

    public Value = observable<string>();

    public static fromJs(source: IReportFilterSimpleDTO): ReportFilterObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFilterObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFilterSimpleDTO): void {
        super.fromJs(source);
        this.FilterOperator(source.FilterOperator);
        this.FilterOperatorViewName(source.FilterOperatorViewName);
        this.IsValueFromParameters(source.IsValueFromParameters);
        this.Property(source.Property);
        this.Value(source.Value);
    }

    public identity(): ReportFilterIdentityDTO {
        return new ReportFilterIdentityDTO(this.Id());
    }

    public toJs(): ReportFilterSimpleDTO {
        let e = new ReportFilterSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportFilterStrictDTO {
        let e = new ReportFilterSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportFilterObservableFullDTO extends ReportFilterObservableSimpleDTO {
    public __type = 'ReportFilterObservableFullDTO';

    private _reportfilterobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IReportFilterFullDTO): ReportFilterObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFilterObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFilterFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): ReportFilterFullDTO {
        let e = new ReportFilterFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportFilterStrictDTO {
        let e = new ReportFilterFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportFilterObservableRichDTO extends ReportFilterObservableFullDTO {
    public __type = 'ReportFilterObservableRichDTO';

    private _reportfilterobservablerichdto: string;

    public static fromJs(source: IReportFilterRichDTO): ReportFilterObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFilterObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFilterRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportFilterRichDTO {
        let e = new ReportFilterRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportFilterStrictDTO {
        let e = new ReportFilterRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportParameterObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportParameterObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportParameterObservableIdentityDTO(source.Id);
    }

}

export class ReportParameterObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ReportParameterObservableSimpleDTO';

    private _reportparameterobservablesimpledto: string;

    public DisplayValueProperty = observable<string>();

    public IsCollection = observable<boolean>(false);

    public IsRequired = observable<boolean>(false);

    public Name = observable<string>();

    public Order = observable<number>();

    public TypeName = observable<string>();

    public static fromJs(source: IReportParameterSimpleDTO): ReportParameterObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterSimpleDTO): void {
        super.fromJs(source);
        this.DisplayValueProperty(source.DisplayValueProperty);
        this.IsCollection(source.IsCollection);
        this.IsRequired(source.IsRequired);
        this.Name(source.Name);
        this.Order(source.Order);
        this.TypeName(source.TypeName);
    }

    public identity(): ReportParameterIdentityDTO {
        return new ReportParameterIdentityDTO(this.Id());
    }

    public toJs(): ReportParameterSimpleDTO {
        let e = new ReportParameterSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportParameterStrictDTO {
        let e = new ReportParameterSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportParameterObservableFullDTO extends ReportParameterObservableSimpleDTO {
    public __type = 'ReportParameterObservableFullDTO';

    private _reportparameterobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IReportParameterFullDTO): ReportParameterObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): ReportParameterFullDTO {
        let e = new ReportParameterFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportParameterStrictDTO {
        let e = new ReportParameterFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportParameterObservableRichDTO extends ReportParameterObservableFullDTO {
    public __type = 'ReportParameterObservableRichDTO';

    private _reportparameterobservablerichdto: string;

    public static fromJs(source: IReportParameterRichDTO): ReportParameterObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportParameterRichDTO {
        let e = new ReportParameterRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportParameterStrictDTO {
        let e = new ReportParameterRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportPropertyObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportPropertyObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportPropertyObservableIdentityDTO(source.Id);
    }

}

export class ReportPropertyObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'ReportPropertyObservableSimpleDTO';

    private _reportpropertyobservablesimpledto: string;

    public Alias = observable<string>();

    public Formula = observable<string>();

    public Order = observable<number>();

    public PropertyPath = observable<string>();

    public SortOrdered = observable<number>();

    public SortType = observable<number>();

    public static fromJs(source: IReportPropertySimpleDTO): ReportPropertyObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportPropertyObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportPropertySimpleDTO): void {
        super.fromJs(source);
        this.Alias(source.Alias);
        this.Formula(source.Formula);
        this.Order(source.Order);
        this.PropertyPath(source.PropertyPath);
        this.SortOrdered(source.SortOrdered);
        this.SortType(source.SortType);
    }

    public identity(): ReportPropertyIdentityDTO {
        return new ReportPropertyIdentityDTO(this.Id());
    }

    public toJs(): ReportPropertySimpleDTO {
        let e = new ReportPropertySimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportPropertyStrictDTO {
        let e = new ReportPropertySimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportPropertyObservableFullDTO extends ReportPropertyObservableSimpleDTO {
    public __type = 'ReportPropertyObservableFullDTO';

    private _reportpropertyobservablefulldto: string;

    public Report = observable<ReportObservableSimpleDTO>();

    public static fromJs(source: IReportPropertyFullDTO): ReportPropertyObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportPropertyObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportPropertyFullDTO): void {
        super.fromJs(source);
        this.Report(ReportObservableSimpleDTO.fromJs(source.Report));
    }

    public toJs(): ReportPropertyFullDTO {
        let e = new ReportPropertyFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportPropertyStrictDTO {
        let e = new ReportPropertyFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class ReportPropertyObservableRichDTO extends ReportPropertyObservableFullDTO {
    public __type = 'ReportPropertyObservableRichDTO';

    private _reportpropertyobservablerichdto: string;

    public static fromJs(source: IReportPropertyRichDTO): ReportPropertyObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportPropertyObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportPropertyRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): ReportPropertyRichDTO {
        let e = new ReportPropertyRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): ReportPropertyStrictDTO {
        let e = new ReportPropertyRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SentMessageObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SentMessageObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SentMessageObservableIdentityDTO(source.Id);
    }

}

export class SentMessageObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'SentMessageObservableSimpleDTO';

    private _sentmessageobservablesimpledto: string;

    public Comment = observable<string>();

    public ContextObjectId = observable<Guid>();

    public ContextObjectType = observable<string>();

    public Copy = observable<string>();

    public From = observable<string>();

    public Message = observable<string>();

    public ReplyTo = observable<string>();

    public Subject = observable<string>();

    public TemplateName = observable<string>();

    public To = observable<string>();

    public static fromJs(source: ISentMessageSimpleDTO): SentMessageObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SentMessageObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISentMessageSimpleDTO): void {
        super.fromJs(source);
        this.Comment(source.Comment);
        this.ContextObjectId(source.ContextObjectId);
        this.ContextObjectType(source.ContextObjectType);
        this.Copy(source.Copy);
        this.From(source.From);
        this.Message(source.Message);
        this.ReplyTo(source.ReplyTo);
        this.Subject(source.Subject);
        this.TemplateName(source.TemplateName);
        this.To(source.To);
    }

    public identity(): SentMessageIdentityDTO {
        return new SentMessageIdentityDTO(this.Id());
    }

    public toJs(): SentMessageSimpleDTO {
        let e = new SentMessageSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SentMessageStrictDTO {
        let e = new SentMessageSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SentMessageObservableFullDTO extends SentMessageObservableSimpleDTO {
    public __type = 'SentMessageObservableFullDTO';

    private _sentmessageobservablefulldto: string;

    public static fromJs(source: ISentMessageFullDTO): SentMessageObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SentMessageObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISentMessageFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): SentMessageFullDTO {
        let e = new SentMessageFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SentMessageStrictDTO {
        let e = new SentMessageFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SentMessageObservableRichDTO extends SentMessageObservableFullDTO {
    public __type = 'SentMessageObservableRichDTO';

    private _sentmessageobservablerichdto: string;

    public static fromJs(source: ISentMessageRichDTO): SentMessageObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SentMessageObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISentMessageRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): SentMessageRichDTO {
        let e = new SentMessageRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SentMessageStrictDTO {
        let e = new SentMessageRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SequenceObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SequenceObservableIdentityDTO(source.Id);
    }

}

export class SequenceObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'SequenceObservableSimpleDTO';

    private _sequenceobservablesimpledto: string;

    public Name = observable<string>();

    public Number = observable<number>();

    public static fromJs(source: ISequenceSimpleDTO): SequenceObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
        this.Number(source.Number);
    }

    public identity(): SequenceIdentityDTO {
        return new SequenceIdentityDTO(this.Id());
    }

    public toJs(): SequenceSimpleDTO {
        let e = new SequenceSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceStrictDTO {
        let e = new SequenceSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceObservableFullDTO extends SequenceObservableSimpleDTO {
    public __type = 'SequenceObservableFullDTO';

    private _sequenceobservablefulldto: string;

    public static fromJs(source: ISequenceFullDTO): SequenceObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceFullDTO {
        let e = new SequenceFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceStrictDTO {
        let e = new SequenceFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceObservableRichDTO extends SequenceObservableFullDTO {
    public __type = 'SequenceObservableRichDTO';

    private _sequenceobservablerichdto: string;

    public static fromJs(source: ISequenceRichDTO): SequenceObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceRichDTO {
        let e = new SequenceRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceStrictDTO {
        let e = new SequenceRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'SequenceObservableVisualDTO';

    private _sequenceobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): SequenceObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): SequenceIdentityDTO {
        return new SequenceIdentityDTO(this.Id());
    }

    public toJs(): SequenceVisualDTO {
        let e = new SequenceVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class SequenceCreateModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SequenceCreateModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SequenceCreateModelObservableIdentityDTO(source.Id);
    }

}

export class SequenceCreateModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'SequenceCreateModelObservableSimpleDTO';

    private _sequencecreatemodelobservablesimpledto: string;

    public static fromJs(source: ISequenceCreateModelSimpleDTO): SequenceCreateModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceCreateModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceCreateModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceCreateModelSimpleDTO {
        let e = new SequenceCreateModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceCreateModelObservableFullDTO extends SequenceCreateModelObservableSimpleDTO {
    public __type = 'SequenceCreateModelObservableFullDTO';

    private _sequencecreatemodelobservablefulldto: string;

    public static fromJs(source: ISequenceCreateModelFullDTO): SequenceCreateModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceCreateModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceCreateModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceCreateModelFullDTO {
        let e = new SequenceCreateModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceCreateModelObservableRichDTO extends SequenceCreateModelObservableFullDTO {
    public __type = 'SequenceCreateModelObservableRichDTO';

    private _sequencecreatemodelobservablerichdto: string;

    public static fromJs(source: ISequenceCreateModelRichDTO): SequenceCreateModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceCreateModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceCreateModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceCreateModelRichDTO {
        let e = new SequenceCreateModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SequenceRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SequenceRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class SequenceRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'SequenceRootFilterModelObservableSimpleDTO';

    private _sequencerootfiltermodelobservablesimpledto: string;

    public static fromJs(source: ISequenceRootFilterModelSimpleDTO): SequenceRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceRootFilterModelSimpleDTO {
        let e = new SequenceRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceRootFilterModelObservableFullDTO extends SequenceRootFilterModelObservableSimpleDTO {
    public __type = 'SequenceRootFilterModelObservableFullDTO';

    private _sequencerootfiltermodelobservablefulldto: string;

    public static fromJs(source: ISequenceRootFilterModelFullDTO): SequenceRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceRootFilterModelFullDTO {
        let e = new SequenceRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SequenceRootFilterModelObservableRichDTO extends SequenceRootFilterModelObservableFullDTO {
    public __type = 'SequenceRootFilterModelObservableRichDTO';

    private _sequencerootfiltermodelobservablerichdto: string;

    public static fromJs(source: ISequenceRootFilterModelRichDTO): SequenceRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): SequenceRootFilterModelRichDTO {
        let e = new SequenceRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SystemConstantObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SystemConstantObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SystemConstantObservableIdentityDTO(source.Id);
    }

}

export class SystemConstantObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'SystemConstantObservableSimpleDTO';

    private _systemconstantobservablesimpledto: string;

    public Code = observable<string>();

    public Description = observable<string>();

    public IsManual = observable<boolean>(false);

    public Value = observable<string>();

    public static fromJs(source: ISystemConstantSimpleDTO): SystemConstantObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantSimpleDTO): void {
        super.fromJs(source);
        this.Code(source.Code);
        this.Description(source.Description);
        this.IsManual(source.IsManual);
        this.Value(source.Value);
    }

    public identity(): SystemConstantIdentityDTO {
        return new SystemConstantIdentityDTO(this.Id());
    }

    public toJs(): SystemConstantSimpleDTO {
        let e = new SystemConstantSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SystemConstantStrictDTO {
        let e = new SystemConstantSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SystemConstantObservableFullDTO extends SystemConstantObservableSimpleDTO {
    public __type = 'SystemConstantObservableFullDTO';

    private _systemconstantobservablefulldto: string;

    public Type = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: ISystemConstantFullDTO): SystemConstantObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantFullDTO): void {
        super.fromJs(source);
        this.Type(DomainTypeObservableSimpleDTO.fromJs(source.Type));
    }

    public toJs(): SystemConstantFullDTO {
        let e = new SystemConstantFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SystemConstantStrictDTO {
        let e = new SystemConstantFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SystemConstantObservableRichDTO extends SystemConstantObservableFullDTO {
    public __type = 'SystemConstantObservableRichDTO';

    private _systemconstantobservablerichdto: string;

    public static fromJs(source: ISystemConstantRichDTO): SystemConstantObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): SystemConstantRichDTO {
        let e = new SystemConstantRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SystemConstantStrictDTO {
        let e = new SystemConstantRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SystemConstantObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'SystemConstantObservableVisualDTO';

    private _systemconstantobservablevisualdto: string;

    public Code = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): SystemConstantObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Code(source.Code);
    }

    public identity(): SystemConstantIdentityDTO {
        return new SystemConstantIdentityDTO(this.Id());
    }

    public toJs(): SystemConstantVisualDTO {
        let e = new SystemConstantVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class SystemConstantRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SystemConstantRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SystemConstantRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class SystemConstantRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'SystemConstantRootFilterModelObservableSimpleDTO';

    private _systemconstantrootfiltermodelobservablesimpledto: string;

    public static fromJs(source: ISystemConstantRootFilterModelSimpleDTO): SystemConstantRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public toJs(): SystemConstantRootFilterModelSimpleDTO {
        let e = new SystemConstantRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SystemConstantRootFilterModelObservableFullDTO extends SystemConstantRootFilterModelObservableSimpleDTO {
    public __type = 'SystemConstantRootFilterModelObservableFullDTO';

    private _systemconstantrootfiltermodelobservablefulldto: string;

    public static fromJs(source: ISystemConstantRootFilterModelFullDTO): SystemConstantRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): SystemConstantRootFilterModelFullDTO {
        let e = new SystemConstantRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class SystemConstantRootFilterModelObservableRichDTO extends SystemConstantRootFilterModelObservableFullDTO {
    public __type = 'SystemConstantRootFilterModelObservableRichDTO';

    private _systemconstantrootfiltermodelobservablerichdto: string;

    public static fromJs(source: ISystemConstantRootFilterModelRichDTO): SystemConstantRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): SystemConstantRootFilterModelRichDTO {
        let e = new SystemConstantRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TargetSystemObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TargetSystemObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TargetSystemObservableIdentityDTO(source.Id);
    }

}

export class TargetSystemObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'TargetSystemObservableSimpleDTO';

    private _targetsystemobservablesimpledto: string;

    public IsBase = observable<boolean>(false);

    public IsMain = observable<boolean>(false);

    public IsRevision = observable<boolean>(false);

    public Name = observable<string>();

    public SubscriptionEnabled = observable<boolean>(false);

    public static fromJs(source: ITargetSystemSimpleDTO): TargetSystemObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemSimpleDTO): void {
        super.fromJs(source);
        this.IsBase(source.IsBase);
        this.IsMain(source.IsMain);
        this.IsRevision(source.IsRevision);
        this.Name(source.Name);
        this.SubscriptionEnabled(source.SubscriptionEnabled);
    }

    public identity(): TargetSystemIdentityDTO {
        return new TargetSystemIdentityDTO(this.Id());
    }

    public toJs(): TargetSystemSimpleDTO {
        let e = new TargetSystemSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TargetSystemStrictDTO {
        let e = new TargetSystemSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TargetSystemObservableFullDTO extends TargetSystemObservableSimpleDTO {
    public __type = 'TargetSystemObservableFullDTO';

    private _targetsystemobservablefulldto: string;

    public static fromJs(source: ITargetSystemFullDTO): TargetSystemObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): TargetSystemFullDTO {
        let e = new TargetSystemFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TargetSystemStrictDTO {
        let e = new TargetSystemFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TargetSystemObservableRichDTO extends TargetSystemObservableFullDTO {
    public __type = 'TargetSystemObservableRichDTO';

    private _targetsystemobservablerichdto: string;

    public DomainTypes = observableArray<DomainTypeObservableRichDTO>();

    public static fromJs(source: ITargetSystemRichDTO): TargetSystemObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRichDTO): void {
        super.fromJs(source);
        if (source.DomainTypes) {
            this.DomainTypes(source.DomainTypes.map(e => {
                    return DomainTypeObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): TargetSystemRichDTO {
        let e = new TargetSystemRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TargetSystemStrictDTO {
        let e = new TargetSystemRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TargetSystemObservableVisualDTO extends BaseObservablePersistentDTO {
    public __type = 'TargetSystemObservableVisualDTO';

    private _targetsystemobservablevisualdto: string;

    public Name = observable<string>();

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TargetSystemObservableVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemObservableVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): TargetSystemIdentityDTO {
        return new TargetSystemIdentityDTO(this.Id());
    }

    public toJs(): TargetSystemVisualDTO {
        let e = new TargetSystemVisualDTO();
        e.fromObservable(this);
        return e;
    }

}

export class TargetSystemRootFilterModelObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TargetSystemRootFilterModelObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TargetSystemRootFilterModelObservableIdentityDTO(source.Id);
    }

}

export class TargetSystemRootFilterModelObservableSimpleDTO extends BaseObservableAbstractDTO {
    public __type = 'TargetSystemRootFilterModelObservableSimpleDTO';

    private _targetsystemrootfiltermodelobservablesimpledto: string;

    public IsMain = observable<boolean>();

    public IsRevision = observable<boolean>();

    public SubscriptionEnabled = observable<boolean>();

    public static fromJs(source: ITargetSystemRootFilterModelSimpleDTO): TargetSystemRootFilterModelObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRootFilterModelObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRootFilterModelSimpleDTO): void {
        super.fromJs(source);
        this.IsMain(source.IsMain);
        this.IsRevision(source.IsRevision);
        this.SubscriptionEnabled(source.SubscriptionEnabled);
    }

    public toJs(): TargetSystemRootFilterModelSimpleDTO {
        let e = new TargetSystemRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TargetSystemRootFilterModelObservableFullDTO extends TargetSystemRootFilterModelObservableSimpleDTO {
    public __type = 'TargetSystemRootFilterModelObservableFullDTO';

    private _targetsystemrootfiltermodelobservablefulldto: string;

    public static fromJs(source: ITargetSystemRootFilterModelFullDTO): TargetSystemRootFilterModelObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRootFilterModelObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public toJs(): TargetSystemRootFilterModelFullDTO {
        let e = new TargetSystemRootFilterModelFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class TargetSystemRootFilterModelObservableRichDTO extends TargetSystemRootFilterModelObservableFullDTO {
    public __type = 'TargetSystemRootFilterModelObservableRichDTO';

    private _targetsystemrootfiltermodelobservablerichdto: string;

    public static fromJs(source: ITargetSystemRootFilterModelRichDTO): TargetSystemRootFilterModelObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRootFilterModelObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): TargetSystemRootFilterModelRichDTO {
        let e = new TargetSystemRootFilterModelRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObservableIdentityDTO(source.Id);
    }

}

export class UserActionObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'UserActionObservableSimpleDTO';

    private _useractionobservablesimpledto: string;

    public Name = observable<string>();

    public static fromJs(source: IUserActionSimpleDTO): UserActionObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionSimpleDTO): void {
        super.fromJs(source);
        this.Name(source.Name);
    }

    public identity(): UserActionIdentityDTO {
        return new UserActionIdentityDTO(this.Id());
    }

    public toJs(): UserActionSimpleDTO {
        let e = new UserActionSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionStrictDTO {
        let e = new UserActionSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObservableFullDTO extends UserActionObservableSimpleDTO {
    public __type = 'UserActionObservableFullDTO';

    private _useractionobservablefulldto: string;

    public DomainType = observable<DomainTypeObservableSimpleDTO>();

    public static fromJs(source: IUserActionFullDTO): UserActionObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionFullDTO): void {
        super.fromJs(source);
        this.DomainType(DomainTypeObservableSimpleDTO.fromJs(source.DomainType));
    }

    public toJs(): UserActionFullDTO {
        let e = new UserActionFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionStrictDTO {
        let e = new UserActionFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObservableRichDTO extends UserActionObservableFullDTO {
    public __type = 'UserActionObservableRichDTO';

    private _useractionobservablerichdto: string;

    public ObjectIdentities = observableArray<UserActionObjectObservableRichDTO>();

    public static fromJs(source: IUserActionRichDTO): UserActionObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionRichDTO): void {
        super.fromJs(source);
        if (source.ObjectIdentities) {
            this.ObjectIdentities(source.ObjectIdentities.map(e => {
                    return UserActionObjectObservableRichDTO.fromJs(e);
                }));
        }
    }

    public toJs(): UserActionRichDTO {
        let e = new UserActionRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionStrictDTO {
        let e = new UserActionRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectObservableIdentityDTO {
    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObjectObservableIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObjectObservableIdentityDTO(source.Id);
    }

}

export class UserActionObjectObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'UserActionObjectObservableSimpleDTO';

    private _useractionobjectobservablesimpledto: string;

    public DomainTypeName = observable<string>();

    public Name = observable<string>();

    public ObjectIdentity = observable<Guid>();

    public UserActionName = observable<string>();

    public static fromJs(source: IUserActionObjectSimpleDTO): UserActionObjectObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectSimpleDTO): void {
        super.fromJs(source);
        this.DomainTypeName(source.DomainTypeName);
        this.Name(source.Name);
        this.ObjectIdentity(source.ObjectIdentity);
        this.UserActionName(source.UserActionName);
    }

    public identity(): UserActionObjectIdentityDTO {
        return new UserActionObjectIdentityDTO(this.Id());
    }

    public toJs(): UserActionObjectSimpleDTO {
        let e = new UserActionObjectSimpleDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectStrictDTO {
        let e = new UserActionObjectSimpleDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectObservableFullDTO extends UserActionObjectObservableSimpleDTO {
    public __type = 'UserActionObjectObservableFullDTO';

    private _useractionobjectobservablefulldto: string;

    public UserAction = observable<UserActionObservableSimpleDTO>();

    public static fromJs(source: IUserActionObjectFullDTO): UserActionObjectObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectFullDTO): void {
        super.fromJs(source);
        this.UserAction(UserActionObservableSimpleDTO.fromJs(source.UserAction));
    }

    public toJs(): UserActionObjectFullDTO {
        let e = new UserActionObjectFullDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectStrictDTO {
        let e = new UserActionObjectFullDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export class UserActionObjectObservableRichDTO extends UserActionObjectObservableFullDTO {
    public __type = 'UserActionObjectObservableRichDTO';

    private _useractionobjectobservablerichdto: string;

    public static fromJs(source: IUserActionObjectRichDTO): UserActionObjectObservableRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectObservableRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRichDTO): void {
        super.fromJs(source);
    }

    public toJs(): UserActionObjectRichDTO {
        let e = new UserActionObjectRichDTO();
        e.fromObservable(this);
        return e;
    }

    public toStrict(): UserActionObjectStrictDTO {
        let e = new UserActionObjectRichDTO();
        e.fromObservable(this);
        return e.toStrict();
    }

}

export interface IBaseAbstractDTO {
}

export interface IBasePersistentDTO extends IBaseAbstractDTO {
    Id : Guid;
}

export interface IBaseAuditPersistentDTO extends IBasePersistentDTO {
    Active : boolean;
    CreateDate? : Date;
    CreatedBy : string;
    ModifiedBy : string;
    ModifyDate? : Date;
}

export class BaseAbstractDTO {
    public __type = 'BaseAbstractDTO';

    private _baseabstractdto: string;

    public static fromJs(source: any): BaseAbstractDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseAbstractDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
    }

    public fromObservable(source: any): void {
    }

    public toJs(): BaseAbstractDTO {
        return this;
    }

    public toNativeJson(): BaseAbstractDTO {
        return this;
    }

}

export class BasePersistentDTO extends BaseAbstractDTO {
    public __type = 'BasePersistentDTO';

    private _basepersistentdto: string;

    public Id: Guid;

    public get IsNew() : boolean {
        return (Guid.Default() === this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): BasePersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BasePersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromJs(source: IBasePersistentDTO): void {
        super.fromJs(source);
        this.Id = source.Id;
    }

    public fromObservable(source: BaseObservablePersistentDTO): void {
        super.fromObservable(source);
        this.Id = unwrap(source.Id);
    }

}

export class BaseAuditPersistentDTO extends BasePersistentDTO {
    public __type = 'BaseAuditPersistentDTO';

    private _baseauditpersistentdto: string;

    public Active: boolean;

    public CreateDate: Date;

    public CreatedBy: string;

    public ModifiedBy: string;

    public ModifyDate: Date;

    public static fromJs(source: IBaseAuditPersistentDTO): BaseAuditPersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseAuditPersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
        this.CreateDate = source.CreateDate;
        this.CreatedBy = source.CreatedBy;
        this.ModifiedBy = source.ModifiedBy;
        this.ModifyDate = source.ModifyDate;
    }

    public fromJs(source: IBaseAuditPersistentDTO): void {
        super.fromJs(source);
        this.Active = source.Active;
        this.CreateDate = Convert.toDate(source.CreateDate);
        this.CreatedBy = source.CreatedBy;
        this.ModifiedBy = source.ModifiedBy;
        this.ModifyDate = Convert.toDate(source.ModifyDate);
    }

    public fromObservable(source: BaseObservableAuditPersistentDTO): void {
        super.fromObservable(source);
        this.Active = unwrap(source.Active);
        this.CreateDate = unwrap(source.CreateDate);
        this.CreatedBy = unwrap(source.CreatedBy);
        this.ModifiedBy = unwrap(source.ModifiedBy);
        this.ModifyDate = unwrap(source.ModifyDate);
    }

}

export class AttachmentSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AttachmentSimpleDTO';

    private _attachmentsimpledto: string;

    public Name: string;

    public get Identity() : AttachmentIdentityDTO {
        return new AttachmentIdentityDTO(this.Id);
    }

    public static fromJs(source: IAttachmentSimpleDTO): AttachmentSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: AttachmentObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): AttachmentObservableSimpleDTO {
        let e = new AttachmentObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AttachmentFullDTO extends AttachmentSimpleDTO {
    public __type = 'AttachmentFullDTO';

    private _attachmentfulldto: string;

    public Container: AttachmentContainerSimpleDTO;

    public static fromJs(source: IAttachmentFullDTO): AttachmentFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentFullDTO): void {
        super.fromJs(source);
        this.Container = AttachmentContainerSimpleDTO.fromJs(source.Container);
    }

    public fromObservable(source: AttachmentObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Container)) {
            this.Container = unwrap(source.Container).toJs();
        }
    }

    public toObservable(): AttachmentObservableFullDTO {
        let e = new AttachmentObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AttachmentRichDTO extends AttachmentFullDTO {
    public __type = 'AttachmentRichDTO';

    private _attachmentrichdto: string;

    public Content: number [];

    public Tags: AttachmentTagRichDTO [];

    public static fromJs(source: IAttachmentRichDTO): AttachmentRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentRichDTO): void {
        super.fromJs(source);
        if (source.Content) {
            this.Content = source.Content.map(e => {
                return e;
            });
        }
        if (source.Tags) {
            this.Tags = source.Tags.map(e => {
                return AttachmentTagRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: AttachmentObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Content)) {
            this.Content = source.Content().map(e => {
                return unwrap(e);
            });
        }
        if (unwrap(source.Tags)) {
            this.Tags = source.Tags().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): AttachmentObservableRichDTO {
        let e = new AttachmentObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class AttachmentContainerSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AttachmentContainerSimpleDTO';

    private _attachmentcontainersimpledto: string;

    public ObjectId: Guid;

    public get Identity() : AttachmentContainerIdentityDTO {
        return new AttachmentContainerIdentityDTO(this.Id);
    }

    public static fromJs(source: IAttachmentContainerSimpleDTO): AttachmentContainerSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerSimpleDTO): void {
        super.fromJs(source);
        this.ObjectId = source.ObjectId;
    }

    public fromObservable(source: AttachmentContainerObservableSimpleDTO): void {
        super.fromObservable(source);
        this.ObjectId = unwrap(source.ObjectId);
    }

    public toObservable(): AttachmentContainerObservableSimpleDTO {
        let e = new AttachmentContainerObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AttachmentContainerFullDTO extends AttachmentContainerSimpleDTO {
    public __type = 'AttachmentContainerFullDTO';

    private _attachmentcontainerfulldto: string;

    public DomainType: DomainTypeSimpleDTO;

    public static fromJs(source: IAttachmentContainerFullDTO): AttachmentContainerFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerFullDTO): void {
        super.fromJs(source);
        this.DomainType = DomainTypeSimpleDTO.fromJs(source.DomainType);
    }

    public fromObservable(source: AttachmentContainerObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainType)) {
            this.DomainType = unwrap(source.DomainType).toJs();
        }
    }

    public toObservable(): AttachmentContainerObservableFullDTO {
        let e = new AttachmentContainerObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AttachmentContainerRichDTO extends AttachmentContainerFullDTO {
    public __type = 'AttachmentContainerRichDTO';

    private _attachmentcontainerrichdto: string;

    public Attachments: AttachmentRichDTO [];

    public static fromJs(source: IAttachmentContainerRichDTO): AttachmentContainerRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerRichDTO): void {
        super.fromJs(source);
        if (source.Attachments) {
            this.Attachments = source.Attachments.map(e => {
                return AttachmentRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: AttachmentContainerObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Attachments)) {
            this.Attachments = source.Attachments().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): AttachmentContainerObservableRichDTO {
        let e = new AttachmentContainerObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class AttachmentContainerReferenceSimpleDTO extends BaseAbstractDTO {
    public __type = 'AttachmentContainerReferenceSimpleDTO';

    private _attachmentcontainerreferencesimpledto: string;

    public ObjectId: Guid;

    public static fromJs(source: IAttachmentContainerReferenceSimpleDTO): AttachmentContainerReferenceSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerReferenceSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerReferenceSimpleDTO): void {
        super.fromJs(source);
        this.ObjectId = source.ObjectId;
    }

    public fromObservable(source: AttachmentContainerReferenceObservableSimpleDTO): void {
        super.fromObservable(source);
        this.ObjectId = unwrap(source.ObjectId);
    }

    public toObservable(): AttachmentContainerReferenceObservableSimpleDTO {
        let e = new AttachmentContainerReferenceObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AttachmentContainerReferenceFullDTO extends AttachmentContainerReferenceSimpleDTO {
    public __type = 'AttachmentContainerReferenceFullDTO';

    private _attachmentcontainerreferencefulldto: string;

    public DomainType: DomainTypeSimpleDTO;

    public static fromJs(source: IAttachmentContainerReferenceFullDTO): AttachmentContainerReferenceFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerReferenceFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerReferenceFullDTO): void {
        super.fromJs(source);
        this.DomainType = DomainTypeSimpleDTO.fromJs(source.DomainType);
    }

    public fromObservable(source: AttachmentContainerReferenceObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainType)) {
            this.DomainType = unwrap(source.DomainType).toJs();
        }
    }

    public toObservable(): AttachmentContainerReferenceObservableFullDTO {
        let e = new AttachmentContainerReferenceObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AttachmentContainerReferenceRichDTO extends AttachmentContainerReferenceFullDTO {
    public __type = 'AttachmentContainerReferenceRichDTO';

    private _attachmentcontainerreferencerichdto: string;

    public static fromJs(source: IAttachmentContainerReferenceRichDTO): AttachmentContainerReferenceRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentContainerReferenceRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentContainerReferenceRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: AttachmentContainerReferenceObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): AttachmentContainerReferenceObservableRichDTO {
        let e = new AttachmentContainerReferenceObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class AttachmentContainerReferenceIdentityDTO {
    public static Empty = new AttachmentContainerReferenceIdentityDTO(Guid.Empty);

    public __type = 'AttachmentContainerReferenceIdentityDTO';

    private _attachmentcontainerreferenceidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): AttachmentContainerReferenceIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new AttachmentContainerReferenceIdentityDTO(source.Id);
    }

    public toNativeJson(): AttachmentContainerReferenceIdentityDTO {
        return this;
    }

}

export class AttachmentTagSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AttachmentTagSimpleDTO';

    private _attachmenttagsimpledto: string;

    public Name: string;

    public Value: string;

    public get Identity() : AttachmentTagIdentityDTO {
        return new AttachmentTagIdentityDTO(this.Id);
    }

    public static fromJs(source: IAttachmentTagSimpleDTO): AttachmentTagSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentTagSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
        this.Value = source.Value;
    }

    public fromObservable(source: AttachmentTagObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): AttachmentTagObservableSimpleDTO {
        let e = new AttachmentTagObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AttachmentTagFullDTO extends AttachmentTagSimpleDTO {
    public __type = 'AttachmentTagFullDTO';

    private _attachmenttagfulldto: string;

    public Attachment: AttachmentSimpleDTO;

    public static fromJs(source: IAttachmentTagFullDTO): AttachmentTagFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentTagFullDTO): void {
        super.fromJs(source);
        this.Attachment = AttachmentSimpleDTO.fromJs(source.Attachment);
    }

    public fromObservable(source: AttachmentTagObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Attachment)) {
            this.Attachment = unwrap(source.Attachment).toJs();
        }
    }

    public toObservable(): AttachmentTagObservableFullDTO {
        let e = new AttachmentTagObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AttachmentTagRichDTO extends AttachmentTagFullDTO {
    public __type = 'AttachmentTagRichDTO';

    private _attachmenttagrichdto: string;

    public static fromJs(source: IAttachmentTagRichDTO): AttachmentTagRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAttachmentTagRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: AttachmentTagObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): AttachmentTagObservableRichDTO {
        let e = new AttachmentTagObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class CodeFirstSubscriptionSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'CodeFirstSubscriptionSimpleDTO';

    private _codefirstsubscriptionsimpledto: string;

    public Code: string;

    public get Identity() : CodeFirstSubscriptionIdentityDTO {
        return new CodeFirstSubscriptionIdentityDTO(this.Id);
    }

    public static fromJs(source: ICodeFirstSubscriptionSimpleDTO): CodeFirstSubscriptionSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionSimpleDTO): void {
        super.fromJs(source);
        this.Code = source.Code;
    }

    public fromObservable(source: CodeFirstSubscriptionObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Code = unwrap(source.Code);
    }

    public toObservable(): CodeFirstSubscriptionObservableSimpleDTO {
        let e = new CodeFirstSubscriptionObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class CodeFirstSubscriptionFullDTO extends CodeFirstSubscriptionSimpleDTO {
    public __type = 'CodeFirstSubscriptionFullDTO';

    private _codefirstsubscriptionfulldto: string;

    public DomainType: DomainTypeSimpleDTO;

    public static fromJs(source: ICodeFirstSubscriptionFullDTO): CodeFirstSubscriptionFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionFullDTO): void {
        super.fromJs(source);
        this.DomainType = DomainTypeSimpleDTO.fromJs(source.DomainType);
    }

    public fromObservable(source: CodeFirstSubscriptionObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainType)) {
            this.DomainType = unwrap(source.DomainType).toJs();
        }
    }

    public toObservable(): CodeFirstSubscriptionObservableFullDTO {
        let e = new CodeFirstSubscriptionObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class CodeFirstSubscriptionRichDTO extends CodeFirstSubscriptionFullDTO {
    public __type = 'CodeFirstSubscriptionRichDTO';

    private _codefirstsubscriptionrichdto: string;

    public static fromJs(source: ICodeFirstSubscriptionRichDTO): CodeFirstSubscriptionRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: CodeFirstSubscriptionObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): CodeFirstSubscriptionObservableRichDTO {
        let e = new CodeFirstSubscriptionObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class CodeFirstSubscriptionRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelSimpleDTO';

    private _codefirstsubscriptionrootfiltermodelsimpledto: string;

    public static fromJs(source: ICodeFirstSubscriptionRootFilterModelSimpleDTO): CodeFirstSubscriptionRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: CodeFirstSubscriptionRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): CodeFirstSubscriptionRootFilterModelObservableSimpleDTO {
        let e = new CodeFirstSubscriptionRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class CodeFirstSubscriptionRootFilterModelFullDTO extends CodeFirstSubscriptionRootFilterModelSimpleDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelFullDTO';

    private _codefirstsubscriptionrootfiltermodelfulldto: string;

    public static fromJs(source: ICodeFirstSubscriptionRootFilterModelFullDTO): CodeFirstSubscriptionRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: CodeFirstSubscriptionRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): CodeFirstSubscriptionRootFilterModelObservableFullDTO {
        let e = new CodeFirstSubscriptionRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class CodeFirstSubscriptionRootFilterModelRichDTO extends CodeFirstSubscriptionRootFilterModelFullDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelRichDTO';

    private _codefirstsubscriptionrootfiltermodelrichdto: string;

    public static fromJs(source: ICodeFirstSubscriptionRootFilterModelRichDTO): CodeFirstSubscriptionRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new CodeFirstSubscriptionRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ICodeFirstSubscriptionRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: CodeFirstSubscriptionRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): CodeFirstSubscriptionRootFilterModelObservableRichDTO {
        let e = new CodeFirstSubscriptionRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class CodeFirstSubscriptionRootFilterModelIdentityDTO {
    public static Empty = new CodeFirstSubscriptionRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'CodeFirstSubscriptionRootFilterModelIdentityDTO';

    private _codefirstsubscriptionrootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): CodeFirstSubscriptionRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new CodeFirstSubscriptionRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): CodeFirstSubscriptionRootFilterModelIdentityDTO {
        return this;
    }

}

export class ControlSettingsSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ControlSettingsSimpleDTO';

    private _controlsettingssimpledto: string;

    public AccountName: string;

    public Name: string;

    public Type: ControlSettingsType;

    public get Identity() : ControlSettingsIdentityDTO {
        return new ControlSettingsIdentityDTO(this.Id);
    }

    public static fromJs(source: IControlSettingsSimpleDTO): ControlSettingsSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsSimpleDTO): void {
        super.fromJs(source);
        this.AccountName = source.AccountName;
        this.Name = source.Name;
        this.Type = source.Type;
    }

    public fromObservable(source: ControlSettingsObservableSimpleDTO): void {
        super.fromObservable(source);
        this.AccountName = unwrap(source.AccountName);
        this.Name = unwrap(source.Name);
        this.Type = unwrap(source.Type);
    }

    public toObservable(): ControlSettingsObservableSimpleDTO {
        let e = new ControlSettingsObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ControlSettingsFullDTO extends ControlSettingsSimpleDTO {
    public __type = 'ControlSettingsFullDTO';

    private _controlsettingsfulldto: string;

    public Parent: ControlSettingsSimpleDTO;

    public static fromJs(source: IControlSettingsFullDTO): ControlSettingsFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsFullDTO): void {
        super.fromJs(source);
        this.Parent = ControlSettingsSimpleDTO.fromJs(source.Parent);
    }

    public fromObservable(source: ControlSettingsObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Parent)) {
            this.Parent = unwrap(source.Parent).toJs();
        }
    }

    public toObservable(): ControlSettingsObservableFullDTO {
        let e = new ControlSettingsObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ControlSettingsRichDTO extends ControlSettingsFullDTO {
    public __type = 'ControlSettingsRichDTO';

    private _controlsettingsrichdto: string;

    public Children: ControlSettingsRichDTO [];

    public ControlSettingsParams: ControlSettingsParamRichDTO [];

    public static fromJs(source: IControlSettingsRichDTO): ControlSettingsRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsRichDTO): void {
        super.fromJs(source);
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return ControlSettingsRichDTO.fromJs(e);
            });
        }
        if (source.ControlSettingsParams) {
            this.ControlSettingsParams = source.ControlSettingsParams.map(e => {
                return ControlSettingsParamRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: ControlSettingsObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Children)) {
            this.Children = source.Children().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.ControlSettingsParams)) {
            this.ControlSettingsParams = source.ControlSettingsParams().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): ControlSettingsObservableRichDTO {
        let e = new ControlSettingsObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ControlSettingsParamSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ControlSettingsParamSimpleDTO';

    private _controlsettingsparamsimpledto: string;

    public Type: ControlSettingParamType;

    public get Identity() : ControlSettingsParamIdentityDTO {
        return new ControlSettingsParamIdentityDTO(this.Id);
    }

    public static fromJs(source: IControlSettingsParamSimpleDTO): ControlSettingsParamSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamSimpleDTO): void {
        super.fromJs(source);
        this.Type = source.Type;
    }

    public fromObservable(source: ControlSettingsParamObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Type = unwrap(source.Type);
    }

    public toObservable(): ControlSettingsParamObservableSimpleDTO {
        let e = new ControlSettingsParamObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ControlSettingsParamFullDTO extends ControlSettingsParamSimpleDTO {
    public __type = 'ControlSettingsParamFullDTO';

    private _controlsettingsparamfulldto: string;

    public ControlSettings: ControlSettingsSimpleDTO;

    public static fromJs(source: IControlSettingsParamFullDTO): ControlSettingsParamFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamFullDTO): void {
        super.fromJs(source);
        this.ControlSettings = ControlSettingsSimpleDTO.fromJs(source.ControlSettings);
    }

    public fromObservable(source: ControlSettingsParamObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ControlSettings)) {
            this.ControlSettings = unwrap(source.ControlSettings).toJs();
        }
    }

    public toObservable(): ControlSettingsParamObservableFullDTO {
        let e = new ControlSettingsParamObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ControlSettingsParamRichDTO extends ControlSettingsParamFullDTO {
    public __type = 'ControlSettingsParamRichDTO';

    private _controlsettingsparamrichdto: string;

    public ControlSettingsParamValues: ControlSettingsParamValueRichDTO [];

    public static fromJs(source: IControlSettingsParamRichDTO): ControlSettingsParamRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamRichDTO): void {
        super.fromJs(source);
        if (source.ControlSettingsParamValues) {
            this.ControlSettingsParamValues = source.ControlSettingsParamValues.map(e => {
                return ControlSettingsParamValueRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: ControlSettingsParamObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ControlSettingsParamValues)) {
            this.ControlSettingsParamValues = source.ControlSettingsParamValues().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): ControlSettingsParamObservableRichDTO {
        let e = new ControlSettingsParamObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ControlSettingsParamValueSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ControlSettingsParamValueSimpleDTO';

    private _controlsettingsparamvaluesimpledto: string;

    public Culture: string;

    public Value: string;

    public ValueTypeName: string;

    public get Identity() : ControlSettingsParamValueIdentityDTO {
        return new ControlSettingsParamValueIdentityDTO(this.Id);
    }

    public static fromJs(source: IControlSettingsParamValueSimpleDTO): ControlSettingsParamValueSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamValueSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamValueSimpleDTO): void {
        super.fromJs(source);
        this.Culture = source.Culture;
        this.Value = source.Value;
        this.ValueTypeName = source.ValueTypeName;
    }

    public fromObservable(source: ControlSettingsParamValueObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Culture = unwrap(source.Culture);
        this.Value = unwrap(source.Value);
        this.ValueTypeName = unwrap(source.ValueTypeName);
    }

    public toObservable(): ControlSettingsParamValueObservableSimpleDTO {
        let e = new ControlSettingsParamValueObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ControlSettingsParamValueFullDTO extends ControlSettingsParamValueSimpleDTO {
    public __type = 'ControlSettingsParamValueFullDTO';

    private _controlsettingsparamvaluefulldto: string;

    public ControlSettingsParam: ControlSettingsParamSimpleDTO;

    public static fromJs(source: IControlSettingsParamValueFullDTO): ControlSettingsParamValueFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamValueFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamValueFullDTO): void {
        super.fromJs(source);
        this.ControlSettingsParam = ControlSettingsParamSimpleDTO.fromJs(source.ControlSettingsParam);
    }

    public fromObservable(source: ControlSettingsParamValueObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ControlSettingsParam)) {
            this.ControlSettingsParam = unwrap(source.ControlSettingsParam).toJs();
        }
    }

    public toObservable(): ControlSettingsParamValueObservableFullDTO {
        let e = new ControlSettingsParamValueObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ControlSettingsParamValueRichDTO extends ControlSettingsParamValueFullDTO {
    public __type = 'ControlSettingsParamValueRichDTO';

    private _controlsettingsparamvaluerichdto: string;

    public static fromJs(source: IControlSettingsParamValueRichDTO): ControlSettingsParamValueRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsParamValueRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IControlSettingsParamValueRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ControlSettingsParamValueObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ControlSettingsParamValueObservableRichDTO {
        let e = new ControlSettingsParamValueObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainObjectEventSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'DomainObjectEventSimpleDTO';

    private _domainobjecteventsimpledto: string;

    public DomainObjectId: Guid;

    public HostName: string;

    public ProcessDate: Date;

    public QueueTag: string;

    public Revision: number;

    public SerializeData: string;

    public SerializeType: string;

    public Size: number;

    public Status: QueueProgressStatus;

    public get Identity() : DomainObjectEventIdentityDTO {
        return new DomainObjectEventIdentityDTO(this.Id);
    }

    public static fromJs(source: IDomainObjectEventSimpleDTO): DomainObjectEventSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectEventSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectEventSimpleDTO): void {
        super.fromJs(source);
        this.DomainObjectId = source.DomainObjectId;
        this.HostName = source.HostName;
        this.ProcessDate = Convert.toDate(source.ProcessDate);
        this.QueueTag = source.QueueTag;
        this.Revision = source.Revision;
        this.SerializeData = source.SerializeData;
        this.SerializeType = source.SerializeType;
        this.Size = source.Size;
        this.Status = source.Status;
    }

    public fromObservable(source: DomainObjectEventObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DomainObjectId = unwrap(source.DomainObjectId);
        this.HostName = unwrap(source.HostName);
        this.ProcessDate = unwrap(source.ProcessDate);
        this.QueueTag = unwrap(source.QueueTag);
        this.Revision = unwrap(source.Revision);
        this.SerializeData = unwrap(source.SerializeData);
        this.SerializeType = unwrap(source.SerializeType);
        this.Size = unwrap(source.Size);
        this.Status = unwrap(source.Status);
    }

    public toObservable(): DomainObjectEventObservableSimpleDTO {
        let e = new DomainObjectEventObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainObjectEventFullDTO extends DomainObjectEventSimpleDTO {
    public __type = 'DomainObjectEventFullDTO';

    private _domainobjecteventfulldto: string;

    public Operation: DomainTypeEventOperationSimpleDTO;

    public static fromJs(source: IDomainObjectEventFullDTO): DomainObjectEventFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectEventFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectEventFullDTO): void {
        super.fromJs(source);
        this.Operation = DomainTypeEventOperationSimpleDTO.fromJs(source.Operation);
    }

    public fromObservable(source: DomainObjectEventObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Operation)) {
            this.Operation = unwrap(source.Operation).toJs();
        }
    }

    public toObservable(): DomainObjectEventObservableFullDTO {
        let e = new DomainObjectEventObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainObjectEventRichDTO extends DomainObjectEventFullDTO {
    public __type = 'DomainObjectEventRichDTO';

    private _domainobjecteventrichdto: string;

    public static fromJs(source: IDomainObjectEventRichDTO): DomainObjectEventRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectEventRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectEventRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainObjectEventObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainObjectEventObservableRichDTO {
        let e = new DomainObjectEventObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainObjectModificationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'DomainObjectModificationSimpleDTO';

    private _domainobjectmodificationsimpledto: string;

    public DomainObjectId: Guid;

    public Processed = false;

    public Revision: number;

    public Type: ModificationType;

    public Version: number;

    public get Identity() : DomainObjectModificationIdentityDTO {
        return new DomainObjectModificationIdentityDTO(this.Id);
    }

    public static fromJs(source: IDomainObjectModificationSimpleDTO): DomainObjectModificationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectModificationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectModificationSimpleDTO): void {
        super.fromJs(source);
        this.DomainObjectId = source.DomainObjectId;
        this.Processed = source.Processed;
        this.Revision = source.Revision;
        this.Type = source.Type;
        this.Version = source.Version;
    }

    public fromObservable(source: DomainObjectModificationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DomainObjectId = unwrap(source.DomainObjectId);
        this.Processed = unwrap(source.Processed);
        this.Revision = unwrap(source.Revision);
        this.Type = unwrap(source.Type);
        this.Version = unwrap(source.Version);
    }

    public toObservable(): DomainObjectModificationObservableSimpleDTO {
        let e = new DomainObjectModificationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainObjectModificationFullDTO extends DomainObjectModificationSimpleDTO {
    public __type = 'DomainObjectModificationFullDTO';

    private _domainobjectmodificationfulldto: string;

    public DomainType: DomainTypeSimpleDTO;

    public static fromJs(source: IDomainObjectModificationFullDTO): DomainObjectModificationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectModificationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectModificationFullDTO): void {
        super.fromJs(source);
        this.DomainType = DomainTypeSimpleDTO.fromJs(source.DomainType);
    }

    public fromObservable(source: DomainObjectModificationObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainType)) {
            this.DomainType = unwrap(source.DomainType).toJs();
        }
    }

    public toObservable(): DomainObjectModificationObservableFullDTO {
        let e = new DomainObjectModificationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainObjectModificationRichDTO extends DomainObjectModificationFullDTO {
    public __type = 'DomainObjectModificationRichDTO';

    private _domainobjectmodificationrichdto: string;

    public static fromJs(source: IDomainObjectModificationRichDTO): DomainObjectModificationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectModificationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectModificationRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainObjectModificationObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainObjectModificationObservableRichDTO {
        let e = new DomainObjectModificationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainObjectNotificationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'DomainObjectNotificationSimpleDTO';

    private _domainobjectnotificationsimpledto: string;

    public HostName: string;

    public ProcessDate: Date;

    public SerializeData: string;

    public Size: number;

    public Status: QueueProgressStatus;

    public get Identity() : DomainObjectNotificationIdentityDTO {
        return new DomainObjectNotificationIdentityDTO(this.Id);
    }

    public static fromJs(source: IDomainObjectNotificationSimpleDTO): DomainObjectNotificationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectNotificationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectNotificationSimpleDTO): void {
        super.fromJs(source);
        this.HostName = source.HostName;
        this.ProcessDate = Convert.toDate(source.ProcessDate);
        this.SerializeData = source.SerializeData;
        this.Size = source.Size;
        this.Status = source.Status;
    }

    public fromObservable(source: DomainObjectNotificationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.HostName = unwrap(source.HostName);
        this.ProcessDate = unwrap(source.ProcessDate);
        this.SerializeData = unwrap(source.SerializeData);
        this.Size = unwrap(source.Size);
        this.Status = unwrap(source.Status);
    }

    public toObservable(): DomainObjectNotificationObservableSimpleDTO {
        let e = new DomainObjectNotificationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainObjectNotificationFullDTO extends DomainObjectNotificationSimpleDTO {
    public __type = 'DomainObjectNotificationFullDTO';

    private _domainobjectnotificationfulldto: string;

    public static fromJs(source: IDomainObjectNotificationFullDTO): DomainObjectNotificationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectNotificationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectNotificationFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainObjectNotificationObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainObjectNotificationObservableFullDTO {
        let e = new DomainObjectNotificationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainObjectNotificationRichDTO extends DomainObjectNotificationFullDTO {
    public __type = 'DomainObjectNotificationRichDTO';

    private _domainobjectnotificationrichdto: string;

    public static fromJs(source: IDomainObjectNotificationRichDTO): DomainObjectNotificationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainObjectNotificationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainObjectNotificationRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainObjectNotificationObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainObjectNotificationObservableRichDTO {
        let e = new DomainObjectNotificationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainTypeSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'DomainTypeSimpleDTO';

    private _domaintypesimpledto: string;

    public FullTypeName: string;

    public HasSecurityAttachment = false;

    public Name: string;

    public NameSpace: string;

    public get Identity() : DomainTypeIdentityDTO {
        return new DomainTypeIdentityDTO(this.Id);
    }

    public static fromJs(source: IDomainTypeSimpleDTO): DomainTypeSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeSimpleDTO): void {
        super.fromJs(source);
        this.FullTypeName = source.FullTypeName;
        this.HasSecurityAttachment = source.HasSecurityAttachment;
        this.Name = source.Name;
        this.NameSpace = source.NameSpace;
    }

    public fromObservable(source: DomainTypeObservableSimpleDTO): void {
        super.fromObservable(source);
        this.FullTypeName = unwrap(source.FullTypeName);
        this.HasSecurityAttachment = unwrap(source.HasSecurityAttachment);
        this.Name = unwrap(source.Name);
        this.NameSpace = unwrap(source.NameSpace);
    }

    public toObservable(): DomainTypeObservableSimpleDTO {
        let e = new DomainTypeObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainTypeFullDTO extends DomainTypeSimpleDTO {
    public __type = 'DomainTypeFullDTO';

    private _domaintypefulldto: string;

    public TargetSystem: TargetSystemSimpleDTO;

    public static fromJs(source: IDomainTypeFullDTO): DomainTypeFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeFullDTO): void {
        super.fromJs(source);
        this.TargetSystem = TargetSystemSimpleDTO.fromJs(source.TargetSystem);
    }

    public fromObservable(source: DomainTypeObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.TargetSystem)) {
            this.TargetSystem = unwrap(source.TargetSystem).toJs();
        }
    }

    public toObservable(): DomainTypeObservableFullDTO {
        let e = new DomainTypeObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainTypeRichDTO extends DomainTypeFullDTO {
    public __type = 'DomainTypeRichDTO';

    private _domaintyperichdto: string;

    public EventOperations: DomainTypeEventOperationRichDTO [];

    public static fromJs(source: IDomainTypeRichDTO): DomainTypeRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRichDTO): void {
        super.fromJs(source);
        if (source.EventOperations) {
            this.EventOperations = source.EventOperations.map(e => {
                return DomainTypeEventOperationRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: DomainTypeObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.EventOperations)) {
            this.EventOperations = source.EventOperations().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): DomainTypeObservableRichDTO {
        let e = new DomainTypeObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainTypeEventModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'DomainTypeEventModelSimpleDTO';

    private _domaintypeeventmodelsimpledto: string;

    public Revision: number;

    public static fromJs(source: IDomainTypeEventModelSimpleDTO): DomainTypeEventModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventModelSimpleDTO): void {
        super.fromJs(source);
        this.Revision = source.Revision;
    }

    public fromObservable(source: DomainTypeEventModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Revision = unwrap(source.Revision);
    }

    public toObservable(): DomainTypeEventModelObservableSimpleDTO {
        let e = new DomainTypeEventModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainTypeEventModelFullDTO extends DomainTypeEventModelSimpleDTO {
    public __type = 'DomainTypeEventModelFullDTO';

    private _domaintypeeventmodelfulldto: string;

    public Operation: DomainTypeEventOperationSimpleDTO;

    public static fromJs(source: IDomainTypeEventModelFullDTO): DomainTypeEventModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventModelFullDTO): void {
        super.fromJs(source);
        this.Operation = DomainTypeEventOperationSimpleDTO.fromJs(source.Operation);
    }

    public fromObservable(source: DomainTypeEventModelObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Operation)) {
            this.Operation = unwrap(source.Operation).toJs();
        }
    }

    public toObservable(): DomainTypeEventModelObservableFullDTO {
        let e = new DomainTypeEventModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainTypeEventModelRichDTO extends DomainTypeEventModelFullDTO {
    public __type = 'DomainTypeEventModelRichDTO';

    private _domaintypeeventmodelrichdto: string;

    public DomainObjectIdents: Guid [];

    public static fromJs(source: IDomainTypeEventModelRichDTO): DomainTypeEventModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventModelRichDTO): void {
        super.fromJs(source);
        if (source.DomainObjectIdents) {
            this.DomainObjectIdents = source.DomainObjectIdents.map(e => {
                return e;
            });
        }
    }

    public fromObservable(source: DomainTypeEventModelObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainObjectIdents)) {
            this.DomainObjectIdents = source.DomainObjectIdents().map(e => {
                return unwrap(e);
            });
        }
    }

    public toObservable(): DomainTypeEventModelObservableRichDTO {
        let e = new DomainTypeEventModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainTypeEventModelIdentityDTO {
    public static Empty = new DomainTypeEventModelIdentityDTO(Guid.Empty);

    public __type = 'DomainTypeEventModelIdentityDTO';

    private _domaintypeeventmodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeEventModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeEventModelIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainTypeEventModelIdentityDTO {
        return this;
    }

}

export class DomainTypeEventOperationSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'DomainTypeEventOperationSimpleDTO';

    private _domaintypeeventoperationsimpledto: string;

    public Name: string;

    public get Identity() : DomainTypeEventOperationIdentityDTO {
        return new DomainTypeEventOperationIdentityDTO(this.Id);
    }

    public static fromJs(source: IDomainTypeEventOperationSimpleDTO): DomainTypeEventOperationSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventOperationSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: DomainTypeEventOperationObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): DomainTypeEventOperationObservableSimpleDTO {
        let e = new DomainTypeEventOperationObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainTypeEventOperationFullDTO extends DomainTypeEventOperationSimpleDTO {
    public __type = 'DomainTypeEventOperationFullDTO';

    private _domaintypeeventoperationfulldto: string;

    public DomainType: DomainTypeSimpleDTO;

    public static fromJs(source: IDomainTypeEventOperationFullDTO): DomainTypeEventOperationFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventOperationFullDTO): void {
        super.fromJs(source);
        this.DomainType = DomainTypeSimpleDTO.fromJs(source.DomainType);
    }

    public fromObservable(source: DomainTypeEventOperationObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainType)) {
            this.DomainType = unwrap(source.DomainType).toJs();
        }
    }

    public toObservable(): DomainTypeEventOperationObservableFullDTO {
        let e = new DomainTypeEventOperationObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainTypeEventOperationRichDTO extends DomainTypeEventOperationFullDTO {
    public __type = 'DomainTypeEventOperationRichDTO';

    private _domaintypeeventoperationrichdto: string;

    public static fromJs(source: IDomainTypeEventOperationRichDTO): DomainTypeEventOperationRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeEventOperationRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainTypeEventOperationObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainTypeEventOperationObservableRichDTO {
        let e = new DomainTypeEventOperationObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainTypeRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'DomainTypeRootFilterModelSimpleDTO';

    private _domaintyperootfiltermodelsimpledto: string;

    public static fromJs(source: IDomainTypeRootFilterModelSimpleDTO): DomainTypeRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainTypeRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainTypeRootFilterModelObservableSimpleDTO {
        let e = new DomainTypeRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class DomainTypeRootFilterModelFullDTO extends DomainTypeRootFilterModelSimpleDTO {
    public __type = 'DomainTypeRootFilterModelFullDTO';

    private _domaintyperootfiltermodelfulldto: string;

    public TargetSystem: TargetSystemSimpleDTO;

    public static fromJs(source: IDomainTypeRootFilterModelFullDTO): DomainTypeRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRootFilterModelFullDTO): void {
        super.fromJs(source);
        this.TargetSystem = TargetSystemSimpleDTO.fromJs(source.TargetSystem);
    }

    public fromObservable(source: DomainTypeRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.TargetSystem)) {
            this.TargetSystem = unwrap(source.TargetSystem).toJs();
        }
    }

    public toObservable(): DomainTypeRootFilterModelObservableFullDTO {
        let e = new DomainTypeRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class DomainTypeRootFilterModelRichDTO extends DomainTypeRootFilterModelFullDTO {
    public __type = 'DomainTypeRootFilterModelRichDTO';

    private _domaintyperootfiltermodelrichdto: string;

    public static fromJs(source: IDomainTypeRootFilterModelRichDTO): DomainTypeRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IDomainTypeRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: DomainTypeRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): DomainTypeRootFilterModelObservableRichDTO {
        let e = new DomainTypeRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class DomainTypeRootFilterModelIdentityDTO {
    public static Empty = new DomainTypeRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'DomainTypeRootFilterModelIdentityDTO';

    private _domaintyperootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): DomainTypeRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new DomainTypeRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): DomainTypeRootFilterModelIdentityDTO {
        return this;
    }

}

export class ExceptionMessageSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ExceptionMessageSimpleDTO';

    private _exceptionmessagesimpledto: string;

    public IsClient = false;

    public IsRoot = false;

    public Message: string;

    public MessageType: string;

    public StackTrace: string;

    public get Identity() : ExceptionMessageIdentityDTO {
        return new ExceptionMessageIdentityDTO(this.Id);
    }

    public static fromJs(source: IExceptionMessageSimpleDTO): ExceptionMessageSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageSimpleDTO): void {
        super.fromJs(source);
        this.IsClient = source.IsClient;
        this.IsRoot = source.IsRoot;
        this.Message = source.Message;
        this.MessageType = source.MessageType;
        this.StackTrace = source.StackTrace;
    }

    public fromObservable(source: ExceptionMessageObservableSimpleDTO): void {
        super.fromObservable(source);
        this.IsClient = unwrap(source.IsClient);
        this.IsRoot = unwrap(source.IsRoot);
        this.Message = unwrap(source.Message);
        this.MessageType = unwrap(source.MessageType);
        this.StackTrace = unwrap(source.StackTrace);
    }

    public toObservable(): ExceptionMessageObservableSimpleDTO {
        let e = new ExceptionMessageObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ExceptionMessageFullDTO extends ExceptionMessageSimpleDTO {
    public __type = 'ExceptionMessageFullDTO';

    private _exceptionmessagefulldto: string;

    public static fromJs(source: IExceptionMessageFullDTO): ExceptionMessageFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ExceptionMessageObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ExceptionMessageObservableFullDTO {
        let e = new ExceptionMessageObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ExceptionMessageRichDTO extends ExceptionMessageFullDTO {
    public __type = 'ExceptionMessageRichDTO';

    private _exceptionmessagerichdto: string;

    public InnerException: ExceptionMessageRichDTO;

    public static fromJs(source: IExceptionMessageRichDTO): ExceptionMessageRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRichDTO): void {
        super.fromJs(source);
        this.InnerException = ExceptionMessageRichDTO.fromJs(source.InnerException);
    }

    public fromObservable(source: ExceptionMessageObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.InnerException)) {
            this.InnerException = unwrap(source.InnerException).toJs();
        }
    }

    public toObservable(): ExceptionMessageObservableRichDTO {
        let e = new ExceptionMessageObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ExceptionMessageRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'ExceptionMessageRootFilterModelSimpleDTO';

    private _exceptionmessagerootfiltermodelsimpledto: string;

    public IsRoot = false;

    public Period = Framework.Core.Period.Eternity;

    public static fromJs(source: IExceptionMessageRootFilterModelSimpleDTO): ExceptionMessageRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRootFilterModelSimpleDTO): void {
        super.fromJs(source);
        this.IsRoot = source.IsRoot;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
    }

    public fromObservable(source: ExceptionMessageRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.IsRoot = unwrap(source.IsRoot);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
    }

    public toObservable(): ExceptionMessageRootFilterModelObservableSimpleDTO {
        let e = new ExceptionMessageRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ExceptionMessageRootFilterModelFullDTO extends ExceptionMessageRootFilterModelSimpleDTO {
    public __type = 'ExceptionMessageRootFilterModelFullDTO';

    private _exceptionmessagerootfiltermodelfulldto: string;

    public static fromJs(source: IExceptionMessageRootFilterModelFullDTO): ExceptionMessageRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ExceptionMessageRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ExceptionMessageRootFilterModelObservableFullDTO {
        let e = new ExceptionMessageRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ExceptionMessageRootFilterModelRichDTO extends ExceptionMessageRootFilterModelFullDTO {
    public __type = 'ExceptionMessageRootFilterModelRichDTO';

    private _exceptionmessagerootfiltermodelrichdto: string;

    public static fromJs(source: IExceptionMessageRootFilterModelRichDTO): ExceptionMessageRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ExceptionMessageRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IExceptionMessageRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ExceptionMessageRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ExceptionMessageRootFilterModelObservableRichDTO {
        let e = new ExceptionMessageRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ExceptionMessageRootFilterModelIdentityDTO {
    public static Empty = new ExceptionMessageRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'ExceptionMessageRootFilterModelIdentityDTO';

    private _exceptionmessagerootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ExceptionMessageRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ExceptionMessageRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): ExceptionMessageRootFilterModelIdentityDTO {
        return this;
    }

}

export class LogMessageSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'LogMessageSimpleDTO';

    private _logmessagesimpledto: string;

    public Action: string;

    public InputMessage: string;

    public OutputMessage: string;

    public Period = Framework.Core.Period.Eternity;

    public UserName: string;

    public get Identity() : LogMessageIdentityDTO {
        return new LogMessageIdentityDTO(this.Id);
    }

    public static fromJs(source: ILogMessageSimpleDTO): LogMessageSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LogMessageSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILogMessageSimpleDTO): void {
        super.fromJs(source);
        this.Action = source.Action;
        this.InputMessage = source.InputMessage;
        this.OutputMessage = source.OutputMessage;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
        this.UserName = source.UserName;
    }

    public fromObservable(source: LogMessageObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Action = unwrap(source.Action);
        this.InputMessage = unwrap(source.InputMessage);
        this.OutputMessage = unwrap(source.OutputMessage);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
        this.UserName = unwrap(source.UserName);
    }

    public toObservable(): LogMessageObservableSimpleDTO {
        let e = new LogMessageObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class LogMessageFullDTO extends LogMessageSimpleDTO {
    public __type = 'LogMessageFullDTO';

    private _logmessagefulldto: string;

    public static fromJs(source: ILogMessageFullDTO): LogMessageFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LogMessageFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILogMessageFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: LogMessageObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): LogMessageObservableFullDTO {
        let e = new LogMessageObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class LogMessageRichDTO extends LogMessageFullDTO {
    public __type = 'LogMessageRichDTO';

    private _logmessagerichdto: string;

    public static fromJs(source: ILogMessageRichDTO): LogMessageRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new LogMessageRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ILogMessageRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: LogMessageObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): LogMessageObservableRichDTO {
        let e = new LogMessageObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class UserActionCreateModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'UserActionCreateModelSimpleDTO';

    private _useractioncreatemodelsimpledto: string;

    public DomainType: string;

    public Name: string;

    public static fromJs(source: IUserActionCreateModelSimpleDTO): UserActionCreateModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionCreateModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionCreateModelSimpleDTO): void {
        super.fromJs(source);
        this.DomainType = source.DomainType;
        this.Name = source.Name;
    }

    public fromObservable(source: UserActionCreateModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DomainType = unwrap(source.DomainType);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): UserActionCreateModelObservableSimpleDTO {
        let e = new UserActionCreateModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class UserActionCreateModelFullDTO extends UserActionCreateModelSimpleDTO {
    public __type = 'UserActionCreateModelFullDTO';

    private _useractioncreatemodelfulldto: string;

    public static fromJs(source: IUserActionCreateModelFullDTO): UserActionCreateModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionCreateModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionCreateModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: UserActionCreateModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): UserActionCreateModelObservableFullDTO {
        let e = new UserActionCreateModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class UserActionCreateModelRichDTO extends UserActionCreateModelFullDTO {
    public __type = 'UserActionCreateModelRichDTO';

    private _useractioncreatemodelrichdto: string;

    public ObjectIdentities: UserActionObjectModelRichDTO [];

    public static fromJs(source: IUserActionCreateModelRichDTO): UserActionCreateModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionCreateModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionCreateModelRichDTO): void {
        super.fromJs(source);
        if (source.ObjectIdentities) {
            this.ObjectIdentities = source.ObjectIdentities.map(e => {
                return UserActionObjectModelRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: UserActionCreateModelObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ObjectIdentities)) {
            this.ObjectIdentities = source.ObjectIdentities().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): UserActionCreateModelObservableRichDTO {
        let e = new UserActionCreateModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class UserActionCreateModelIdentityDTO {
    public static Empty = new UserActionCreateModelIdentityDTO(Guid.Empty);

    public __type = 'UserActionCreateModelIdentityDTO';

    private _useractioncreatemodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionCreateModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionCreateModelIdentityDTO(source.Id);
    }

    public toNativeJson(): UserActionCreateModelIdentityDTO {
        return this;
    }

}

export class UserActionObjectModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'UserActionObjectModelSimpleDTO';

    private _useractionobjectmodelsimpledto: string;

    public Name: string;

    public ObjectIdentity: Guid;

    public static fromJs(source: IUserActionObjectModelSimpleDTO): UserActionObjectModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectModelSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
        this.ObjectIdentity = source.ObjectIdentity;
    }

    public fromObservable(source: UserActionObjectModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
        this.ObjectIdentity = unwrap(source.ObjectIdentity);
    }

    public toObservable(): UserActionObjectModelObservableSimpleDTO {
        let e = new UserActionObjectModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class UserActionObjectModelFullDTO extends UserActionObjectModelSimpleDTO {
    public __type = 'UserActionObjectModelFullDTO';

    private _useractionobjectmodelfulldto: string;

    public static fromJs(source: IUserActionObjectModelFullDTO): UserActionObjectModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: UserActionObjectModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): UserActionObjectModelObservableFullDTO {
        let e = new UserActionObjectModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class UserActionObjectModelRichDTO extends UserActionObjectModelFullDTO {
    public __type = 'UserActionObjectModelRichDTO';

    private _useractionobjectmodelrichdto: string;

    public static fromJs(source: IUserActionObjectModelRichDTO): UserActionObjectModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: UserActionObjectModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): UserActionObjectModelObservableRichDTO {
        let e = new UserActionObjectModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class UserActionObjectModelIdentityDTO {
    public static Empty = new UserActionObjectModelIdentityDTO(Guid.Empty);

    public __type = 'UserActionObjectModelIdentityDTO';

    private _useractionobjectmodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObjectModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObjectModelIdentityDTO(source.Id);
    }

    public toNativeJson(): UserActionObjectModelIdentityDTO {
        return this;
    }

}

export class ReportGenerationModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'ReportGenerationModelSimpleDTO';

    private _reportgenerationmodelsimpledto: string;

    public static fromJs(source: IReportGenerationModelSimpleDTO): ReportGenerationModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportGenerationModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportGenerationModelObservableSimpleDTO {
        let e = new ReportGenerationModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportGenerationModelFullDTO extends ReportGenerationModelSimpleDTO {
    public __type = 'ReportGenerationModelFullDTO';

    private _reportgenerationmodelfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IReportGenerationModelFullDTO): ReportGenerationModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationModelFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: ReportGenerationModelObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): ReportGenerationModelObservableFullDTO {
        let e = new ReportGenerationModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportGenerationModelRichDTO extends ReportGenerationModelFullDTO {
    public __type = 'ReportGenerationModelRichDTO';

    private _reportgenerationmodelrichdto: string;

    public Items: ReportGenerationValueRichDTO [];

    public static fromJs(source: IReportGenerationModelRichDTO): ReportGenerationModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationModelRichDTO): void {
        super.fromJs(source);
        if (source.Items) {
            this.Items = source.Items.map(e => {
                return ReportGenerationValueRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: ReportGenerationModelObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Items)) {
            this.Items = source.Items().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): ReportGenerationModelObservableRichDTO {
        let e = new ReportGenerationModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportGenerationModelIdentityDTO {
    public static Empty = new ReportGenerationModelIdentityDTO(Guid.Empty);

    public __type = 'ReportGenerationModelIdentityDTO';

    private _reportgenerationmodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportGenerationModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportGenerationModelIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportGenerationModelIdentityDTO {
        return this;
    }

}

export class ReportGenerationRequestModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'ReportGenerationRequestModelSimpleDTO';

    private _reportgenerationrequestmodelsimpledto: string;

    public static fromJs(source: IReportGenerationRequestModelSimpleDTO): ReportGenerationRequestModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationRequestModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationRequestModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportGenerationRequestModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportGenerationRequestModelObservableSimpleDTO {
        let e = new ReportGenerationRequestModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportGenerationRequestModelFullDTO extends ReportGenerationRequestModelSimpleDTO {
    public __type = 'ReportGenerationRequestModelFullDTO';

    private _reportgenerationrequestmodelfulldto: string;

    public static fromJs(source: IReportGenerationRequestModelFullDTO): ReportGenerationRequestModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationRequestModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationRequestModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportGenerationRequestModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportGenerationRequestModelObservableFullDTO {
        let e = new ReportGenerationRequestModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportGenerationRequestModelRichDTO extends ReportGenerationRequestModelFullDTO {
    public __type = 'ReportGenerationRequestModelRichDTO';

    private _reportgenerationrequestmodelrichdto: string;

    public Parameters: ReportParameterSimpleDTO [];

    public TypeMetadatas: TypeMetadata [];

    public static fromJs(source: IReportGenerationRequestModelRichDTO): ReportGenerationRequestModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationRequestModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationRequestModelRichDTO): void {
        super.fromJs(source);
        if (source.Parameters) {
            this.Parameters = source.Parameters.map(e => {
                return ReportParameterSimpleDTO.fromJs(e);
            });
        }
        if (source.TypeMetadatas) {
            this.TypeMetadatas = source.TypeMetadatas.map(e => {
                return TypeMetadata.fromJs(e);
            });
        }
    }

    public fromObservable(source: ReportGenerationRequestModelObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Parameters)) {
            this.Parameters = source.Parameters().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.TypeMetadatas)) {
            this.TypeMetadatas = source.TypeMetadatas().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): ReportGenerationRequestModelObservableRichDTO {
        let e = new ReportGenerationRequestModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportGenerationRequestModelIdentityDTO {
    public static Empty = new ReportGenerationRequestModelIdentityDTO(Guid.Empty);

    public __type = 'ReportGenerationRequestModelIdentityDTO';

    private _reportgenerationrequestmodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportGenerationRequestModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportGenerationRequestModelIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportGenerationRequestModelIdentityDTO {
        return this;
    }

}

export class ReportGenerationValueSimpleDTO extends BaseAbstractDTO {
    public __type = 'ReportGenerationValueSimpleDTO';

    private _reportgenerationvaluesimpledto: string;

    public DesignValue: string;

    public Value: string;

    public static fromJs(source: IReportGenerationValueSimpleDTO): ReportGenerationValueSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationValueSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationValueSimpleDTO): void {
        super.fromJs(source);
        this.DesignValue = source.DesignValue;
        this.Value = source.Value;
    }

    public fromObservable(source: ReportGenerationValueObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DesignValue = unwrap(source.DesignValue);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): ReportGenerationValueObservableSimpleDTO {
        let e = new ReportGenerationValueObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportGenerationValueFullDTO extends ReportGenerationValueSimpleDTO {
    public __type = 'ReportGenerationValueFullDTO';

    private _reportgenerationvaluefulldto: string;

    public Parameter: ReportParameterSimpleDTO;

    public static fromJs(source: IReportGenerationValueFullDTO): ReportGenerationValueFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationValueFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationValueFullDTO): void {
        super.fromJs(source);
        this.Parameter = ReportParameterSimpleDTO.fromJs(source.Parameter);
    }

    public fromObservable(source: ReportGenerationValueObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Parameter)) {
            this.Parameter = unwrap(source.Parameter).toJs();
        }
    }

    public toObservable(): ReportGenerationValueObservableFullDTO {
        let e = new ReportGenerationValueObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportGenerationValueRichDTO extends ReportGenerationValueFullDTO {
    public __type = 'ReportGenerationValueRichDTO';

    private _reportgenerationvaluerichdto: string;

    public static fromJs(source: IReportGenerationValueRichDTO): ReportGenerationValueRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportGenerationValueRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportGenerationValueRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportGenerationValueObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportGenerationValueObservableRichDTO {
        let e = new ReportGenerationValueObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportGenerationValueIdentityDTO {
    public static Empty = new ReportGenerationValueIdentityDTO(Guid.Empty);

    public __type = 'ReportGenerationValueIdentityDTO';

    private _reportgenerationvalueidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportGenerationValueIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportGenerationValueIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportGenerationValueIdentityDTO {
        return this;
    }

}

export class ReportParameterValueSimpleDTO extends BaseAbstractDTO {
    public __type = 'ReportParameterValueSimpleDTO';

    private _reportparametervaluesimpledto: string;

    public DesignValue: string;

    public Value: string;

    public static fromJs(source: IReportParameterValueSimpleDTO): ReportParameterValueSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterValueSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterValueSimpleDTO): void {
        super.fromJs(source);
        this.DesignValue = source.DesignValue;
        this.Value = source.Value;
    }

    public fromObservable(source: ReportParameterValueObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DesignValue = unwrap(source.DesignValue);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): ReportParameterValueObservableSimpleDTO {
        let e = new ReportParameterValueObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportParameterValueFullDTO extends ReportParameterValueSimpleDTO {
    public __type = 'ReportParameterValueFullDTO';

    private _reportparametervaluefulldto: string;

    public ReportParameter: ReportParameterSimpleDTO;

    public static fromJs(source: IReportParameterValueFullDTO): ReportParameterValueFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterValueFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterValueFullDTO): void {
        super.fromJs(source);
        this.ReportParameter = ReportParameterSimpleDTO.fromJs(source.ReportParameter);
    }

    public fromObservable(source: ReportParameterValueObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ReportParameter)) {
            this.ReportParameter = unwrap(source.ReportParameter).toJs();
        }
    }

    public toObservable(): ReportParameterValueObservableFullDTO {
        let e = new ReportParameterValueObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportParameterValueRichDTO extends ReportParameterValueFullDTO {
    public __type = 'ReportParameterValueRichDTO';

    private _reportparametervaluerichdto: string;

    public static fromJs(source: IReportParameterValueRichDTO): ReportParameterValueRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterValueRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterValueRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportParameterValueObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportParameterValueObservableRichDTO {
        let e = new ReportParameterValueObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportParameterValueIdentityDTO {
    public static Empty = new ReportParameterValueIdentityDTO(Guid.Empty);

    public __type = 'ReportParameterValueIdentityDTO';

    private _reportparametervalueidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): ReportParameterValueIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new ReportParameterValueIdentityDTO(source.Id);
    }

    public toNativeJson(): ReportParameterValueIdentityDTO {
        return this;
    }

}

export class UserActionObjectRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'UserActionObjectRootFilterModelSimpleDTO';

    private _useractionobjectrootfiltermodelsimpledto: string;

    public CountingEntities: number;

    public Period = Framework.Core.Period.Eternity;

    public static fromJs(source: IUserActionObjectRootFilterModelSimpleDTO): UserActionObjectRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRootFilterModelSimpleDTO): void {
        super.fromJs(source);
        this.CountingEntities = source.CountingEntities;
        this.Period = Framework.Core.Period.toPeriod(source.Period);
    }

    public fromObservable(source: UserActionObjectRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.CountingEntities = unwrap(source.CountingEntities);
        this.Period = Framework.Core.Period.fromObservable(unwrap(source.Period));
    }

    public toObservable(): UserActionObjectRootFilterModelObservableSimpleDTO {
        let e = new UserActionObjectRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class UserActionObjectRootFilterModelFullDTO extends UserActionObjectRootFilterModelSimpleDTO {
    public __type = 'UserActionObjectRootFilterModelFullDTO';

    private _useractionobjectrootfiltermodelfulldto: string;

    public static fromJs(source: IUserActionObjectRootFilterModelFullDTO): UserActionObjectRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: UserActionObjectRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): UserActionObjectRootFilterModelObservableFullDTO {
        let e = new UserActionObjectRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class UserActionObjectRootFilterModelRichDTO extends UserActionObjectRootFilterModelFullDTO {
    public __type = 'UserActionObjectRootFilterModelRichDTO';

    private _useractionobjectrootfiltermodelrichdto: string;

    public ActionNames: string [];

    public DomainTypeNames: string [];

    public static fromJs(source: IUserActionObjectRootFilterModelRichDTO): UserActionObjectRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRootFilterModelRichDTO): void {
        super.fromJs(source);
        if (source.ActionNames) {
            this.ActionNames = source.ActionNames.map(e => {
                return e;
            });
        }
        if (source.DomainTypeNames) {
            this.DomainTypeNames = source.DomainTypeNames.map(e => {
                return e;
            });
        }
    }

    public fromObservable(source: UserActionObjectRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ActionNames)) {
            this.ActionNames = source.ActionNames().map(e => {
                return unwrap(e);
            });
        }
        if (unwrap(source.DomainTypeNames)) {
            this.DomainTypeNames = source.DomainTypeNames().map(e => {
                return unwrap(e);
            });
        }
    }

    public toObservable(): UserActionObjectRootFilterModelObservableRichDTO {
        let e = new UserActionObjectRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class UserActionObjectRootFilterModelIdentityDTO {
    public static Empty = new UserActionObjectRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'UserActionObjectRootFilterModelIdentityDTO';

    private _useractionobjectrootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): UserActionObjectRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new UserActionObjectRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): UserActionObjectRootFilterModelIdentityDTO {
        return this;
    }

}

export class NamedLockSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'NamedLockSimpleDTO';

    private _namedlocksimpledto: string;

    public LockOperation: NamedLockOperation;

    public get Identity() : NamedLockIdentityDTO {
        return new NamedLockIdentityDTO(this.Id);
    }

    public static fromJs(source: INamedLockSimpleDTO): NamedLockSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new NamedLockSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: INamedLockSimpleDTO): void {
        super.fromJs(source);
        this.LockOperation = source.LockOperation;
    }

    public fromObservable(source: NamedLockObservableSimpleDTO): void {
        super.fromObservable(source);
        this.LockOperation = unwrap(source.LockOperation);
    }

    public toObservable(): NamedLockObservableSimpleDTO {
        let e = new NamedLockObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class NamedLockFullDTO extends NamedLockSimpleDTO {
    public __type = 'NamedLockFullDTO';

    private _namedlockfulldto: string;

    public static fromJs(source: INamedLockFullDTO): NamedLockFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new NamedLockFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: INamedLockFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: NamedLockObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): NamedLockObservableFullDTO {
        let e = new NamedLockObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class NamedLockRichDTO extends NamedLockFullDTO {
    public __type = 'NamedLockRichDTO';

    private _namedlockrichdto: string;

    public static fromJs(source: INamedLockRichDTO): NamedLockRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new NamedLockRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: INamedLockRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: NamedLockObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): NamedLockObservableRichDTO {
        let e = new NamedLockObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class QueueProcessingStateSimpleDTO extends BaseAbstractDTO {
    public __type = 'QueueProcessingStateSimpleDTO';

    private _queueprocessingstatesimpledto: string;

    public LastProcessedItemDateTime: Date;

    public UnprocessedCount: number;

    public static fromJs(source: IQueueProcessingStateSimpleDTO): QueueProcessingStateSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new QueueProcessingStateSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IQueueProcessingStateSimpleDTO): void {
        super.fromJs(source);
        this.LastProcessedItemDateTime = Convert.toDate(source.LastProcessedItemDateTime);
        this.UnprocessedCount = source.UnprocessedCount;
    }

    public fromObservable(source: QueueProcessingStateObservableSimpleDTO): void {
        super.fromObservable(source);
        this.LastProcessedItemDateTime = unwrap(source.LastProcessedItemDateTime);
        this.UnprocessedCount = unwrap(source.UnprocessedCount);
    }

    public toObservable(): QueueProcessingStateObservableSimpleDTO {
        let e = new QueueProcessingStateObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class QueueProcessingStateFullDTO extends QueueProcessingStateSimpleDTO {
    public __type = 'QueueProcessingStateFullDTO';

    private _queueprocessingstatefulldto: string;

    public static fromJs(source: IQueueProcessingStateFullDTO): QueueProcessingStateFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new QueueProcessingStateFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IQueueProcessingStateFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: QueueProcessingStateObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): QueueProcessingStateObservableFullDTO {
        let e = new QueueProcessingStateObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class QueueProcessingStateRichDTO extends QueueProcessingStateFullDTO {
    public __type = 'QueueProcessingStateRichDTO';

    private _queueprocessingstaterichdto: string;

    public static fromJs(source: IQueueProcessingStateRichDTO): QueueProcessingStateRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new QueueProcessingStateRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IQueueProcessingStateRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: QueueProcessingStateObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): QueueProcessingStateObservableRichDTO {
        let e = new QueueProcessingStateObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class QueueProcessingStateIdentityDTO {
    public static Empty = new QueueProcessingStateIdentityDTO(Guid.Empty);

    public __type = 'QueueProcessingStateIdentityDTO';

    private _queueprocessingstateidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): QueueProcessingStateIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new QueueProcessingStateIdentityDTO(source.Id);
    }

    public toNativeJson(): QueueProcessingStateIdentityDTO {
        return this;
    }

}

export class AccessableBusinessRoleReportRightSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AccessableBusinessRoleReportRightSimpleDTO';

    private _accessablebusinessrolereportrightsimpledto: string;

    public Value: Guid;

    public get Identity() : AccessableBusinessRoleReportRightIdentityDTO {
        return new AccessableBusinessRoleReportRightIdentityDTO(this.Id);
    }

    public static fromJs(source: IAccessableBusinessRoleReportRightSimpleDTO): AccessableBusinessRoleReportRightSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableBusinessRoleReportRightSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableBusinessRoleReportRightSimpleDTO): void {
        super.fromJs(source);
        this.Value = source.Value;
    }

    public fromObservable(source: AccessableBusinessRoleReportRightObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): AccessableBusinessRoleReportRightObservableSimpleDTO {
        let e = new AccessableBusinessRoleReportRightObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AccessableBusinessRoleReportRightFullDTO extends AccessableBusinessRoleReportRightSimpleDTO {
    public __type = 'AccessableBusinessRoleReportRightFullDTO';

    private _accessablebusinessrolereportrightfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IAccessableBusinessRoleReportRightFullDTO): AccessableBusinessRoleReportRightFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableBusinessRoleReportRightFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableBusinessRoleReportRightFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: AccessableBusinessRoleReportRightObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): AccessableBusinessRoleReportRightObservableFullDTO {
        let e = new AccessableBusinessRoleReportRightObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AccessableBusinessRoleReportRightRichDTO extends AccessableBusinessRoleReportRightFullDTO {
    public __type = 'AccessableBusinessRoleReportRightRichDTO';

    private _accessablebusinessrolereportrightrichdto: string;

    public static fromJs(source: IAccessableBusinessRoleReportRightRichDTO): AccessableBusinessRoleReportRightRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableBusinessRoleReportRightRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableBusinessRoleReportRightRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: AccessableBusinessRoleReportRightObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): AccessableBusinessRoleReportRightObservableRichDTO {
        let e = new AccessableBusinessRoleReportRightObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class AccessableOperationReportRightSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AccessableOperationReportRightSimpleDTO';

    private _accessableoperationreportrightsimpledto: string;

    public Value: Guid;

    public get Identity() : AccessableOperationReportRightIdentityDTO {
        return new AccessableOperationReportRightIdentityDTO(this.Id);
    }

    public static fromJs(source: IAccessableOperationReportRightSimpleDTO): AccessableOperationReportRightSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableOperationReportRightSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableOperationReportRightSimpleDTO): void {
        super.fromJs(source);
        this.Value = source.Value;
    }

    public fromObservable(source: AccessableOperationReportRightObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): AccessableOperationReportRightObservableSimpleDTO {
        let e = new AccessableOperationReportRightObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AccessableOperationReportRightFullDTO extends AccessableOperationReportRightSimpleDTO {
    public __type = 'AccessableOperationReportRightFullDTO';

    private _accessableoperationreportrightfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IAccessableOperationReportRightFullDTO): AccessableOperationReportRightFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableOperationReportRightFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableOperationReportRightFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: AccessableOperationReportRightObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): AccessableOperationReportRightObservableFullDTO {
        let e = new AccessableOperationReportRightObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AccessableOperationReportRightRichDTO extends AccessableOperationReportRightFullDTO {
    public __type = 'AccessableOperationReportRightRichDTO';

    private _accessableoperationreportrightrichdto: string;

    public static fromJs(source: IAccessableOperationReportRightRichDTO): AccessableOperationReportRightRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessableOperationReportRightRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessableOperationReportRightRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: AccessableOperationReportRightObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): AccessableOperationReportRightObservableRichDTO {
        let e = new AccessableOperationReportRightObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class AccessablePrincipalReportRightSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'AccessablePrincipalReportRightSimpleDTO';

    private _accessableprincipalreportrightsimpledto: string;

    public Value: string;

    public get Identity() : AccessablePrincipalReportRightIdentityDTO {
        return new AccessablePrincipalReportRightIdentityDTO(this.Id);
    }

    public static fromJs(source: IAccessablePrincipalReportRightSimpleDTO): AccessablePrincipalReportRightSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessablePrincipalReportRightSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessablePrincipalReportRightSimpleDTO): void {
        super.fromJs(source);
        this.Value = source.Value;
    }

    public fromObservable(source: AccessablePrincipalReportRightObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): AccessablePrincipalReportRightObservableSimpleDTO {
        let e = new AccessablePrincipalReportRightObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class AccessablePrincipalReportRightFullDTO extends AccessablePrincipalReportRightSimpleDTO {
    public __type = 'AccessablePrincipalReportRightFullDTO';

    private _accessableprincipalreportrightfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IAccessablePrincipalReportRightFullDTO): AccessablePrincipalReportRightFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessablePrincipalReportRightFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessablePrincipalReportRightFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: AccessablePrincipalReportRightObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): AccessablePrincipalReportRightObservableFullDTO {
        let e = new AccessablePrincipalReportRightObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class AccessablePrincipalReportRightRichDTO extends AccessablePrincipalReportRightFullDTO {
    public __type = 'AccessablePrincipalReportRightRichDTO';

    private _accessableprincipalreportrightrichdto: string;

    public static fromJs(source: IAccessablePrincipalReportRightRichDTO): AccessablePrincipalReportRightRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AccessablePrincipalReportRightRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IAccessablePrincipalReportRightRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: AccessablePrincipalReportRightObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): AccessablePrincipalReportRightObservableRichDTO {
        let e = new AccessablePrincipalReportRightObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ReportSimpleDTO';

    private _reportsimpledto: string;

    public Description: string;

    public DomainTypeName: string;

    public Name: string;

    public Owner: string;

    public ReportType: ReportType;

    public SecurityOperationCode: number;

    public SortBy: string;

    public Version: number;

    public get Identity() : ReportIdentityDTO {
        return new ReportIdentityDTO(this.Id);
    }

    public static fromJs(source: IReportSimpleDTO): ReportSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportSimpleDTO): void {
        super.fromJs(source);
        this.Description = source.Description;
        this.DomainTypeName = source.DomainTypeName;
        this.Name = source.Name;
        this.Owner = source.Owner;
        this.ReportType = source.ReportType;
        this.SecurityOperationCode = source.SecurityOperationCode;
        this.SortBy = source.SortBy;
        this.Version = source.Version;
    }

    public fromObservable(source: ReportObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Description = unwrap(source.Description);
        this.DomainTypeName = unwrap(source.DomainTypeName);
        this.Name = unwrap(source.Name);
        this.Owner = unwrap(source.Owner);
        this.ReportType = unwrap(source.ReportType);
        this.SecurityOperationCode = unwrap(source.SecurityOperationCode);
        this.SortBy = unwrap(source.SortBy);
        this.Version = unwrap(source.Version);
    }

    public toObservable(): ReportObservableSimpleDTO {
        let e = new ReportObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportFullDTO extends ReportSimpleDTO {
    public __type = 'ReportFullDTO';

    private _reportfulldto: string;

    public static fromJs(source: IReportFullDTO): ReportFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportObservableFullDTO {
        let e = new ReportObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportRichDTO extends ReportFullDTO {
    public __type = 'ReportRichDTO';

    private _reportrichdto: string;

    public AccessableBusinessRoles: AccessableBusinessRoleReportRightRichDTO [];

    public AccessableOperations: AccessableOperationReportRightRichDTO [];

    public AccessablePrincipals: AccessablePrincipalReportRightRichDTO [];

    public Filters: ReportFilterRichDTO [];

    public Parameters: ReportParameterRichDTO [];

    public Properties: ReportPropertyRichDTO [];

    public static fromJs(source: IReportRichDTO): ReportRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportRichDTO): void {
        super.fromJs(source);
        if (source.AccessableBusinessRoles) {
            this.AccessableBusinessRoles = source.AccessableBusinessRoles.map(e => {
                return AccessableBusinessRoleReportRightRichDTO.fromJs(e);
            });
        }
        if (source.AccessableOperations) {
            this.AccessableOperations = source.AccessableOperations.map(e => {
                return AccessableOperationReportRightRichDTO.fromJs(e);
            });
        }
        if (source.AccessablePrincipals) {
            this.AccessablePrincipals = source.AccessablePrincipals.map(e => {
                return AccessablePrincipalReportRightRichDTO.fromJs(e);
            });
        }
        if (source.Filters) {
            this.Filters = source.Filters.map(e => {
                return ReportFilterRichDTO.fromJs(e);
            });
        }
        if (source.Parameters) {
            this.Parameters = source.Parameters.map(e => {
                return ReportParameterRichDTO.fromJs(e);
            });
        }
        if (source.Properties) {
            this.Properties = source.Properties.map(e => {
                return ReportPropertyRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: ReportObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.AccessableBusinessRoles)) {
            this.AccessableBusinessRoles = source.AccessableBusinessRoles().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.AccessableOperations)) {
            this.AccessableOperations = source.AccessableOperations().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.AccessablePrincipals)) {
            this.AccessablePrincipals = source.AccessablePrincipals().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Filters)) {
            this.Filters = source.Filters().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Parameters)) {
            this.Parameters = source.Parameters().map(e => {
                return e.toJs();
            });
        }
        if (unwrap(source.Properties)) {
            this.Properties = source.Properties().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): ReportObservableRichDTO {
        let e = new ReportObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportFilterSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ReportFilterSimpleDTO';

    private _reportfiltersimpledto: string;

    public FilterOperator: string;

    public FilterOperatorViewName: string;

    public IsValueFromParameters = false;

    public Property: string;

    public Value: string;

    public get Identity() : ReportFilterIdentityDTO {
        return new ReportFilterIdentityDTO(this.Id);
    }

    public static fromJs(source: IReportFilterSimpleDTO): ReportFilterSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFilterSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFilterSimpleDTO): void {
        super.fromJs(source);
        this.FilterOperator = source.FilterOperator;
        this.FilterOperatorViewName = source.FilterOperatorViewName;
        this.IsValueFromParameters = source.IsValueFromParameters;
        this.Property = source.Property;
        this.Value = source.Value;
    }

    public fromObservable(source: ReportFilterObservableSimpleDTO): void {
        super.fromObservable(source);
        this.FilterOperator = unwrap(source.FilterOperator);
        this.FilterOperatorViewName = unwrap(source.FilterOperatorViewName);
        this.IsValueFromParameters = unwrap(source.IsValueFromParameters);
        this.Property = unwrap(source.Property);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): ReportFilterObservableSimpleDTO {
        let e = new ReportFilterObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportFilterFullDTO extends ReportFilterSimpleDTO {
    public __type = 'ReportFilterFullDTO';

    private _reportfilterfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IReportFilterFullDTO): ReportFilterFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFilterFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFilterFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: ReportFilterObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): ReportFilterObservableFullDTO {
        let e = new ReportFilterObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportFilterRichDTO extends ReportFilterFullDTO {
    public __type = 'ReportFilterRichDTO';

    private _reportfilterrichdto: string;

    public static fromJs(source: IReportFilterRichDTO): ReportFilterRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportFilterRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportFilterRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportFilterObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportFilterObservableRichDTO {
        let e = new ReportFilterObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportParameterSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ReportParameterSimpleDTO';

    private _reportparametersimpledto: string;

    public DisplayValueProperty: string;

    public IsCollection = false;

    public IsRequired = false;

    public Name: string;

    public Order: number;

    public TypeName: string;

    public get Identity() : ReportParameterIdentityDTO {
        return new ReportParameterIdentityDTO(this.Id);
    }

    public static fromJs(source: IReportParameterSimpleDTO): ReportParameterSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterSimpleDTO): void {
        super.fromJs(source);
        this.DisplayValueProperty = source.DisplayValueProperty;
        this.IsCollection = source.IsCollection;
        this.IsRequired = source.IsRequired;
        this.Name = source.Name;
        this.Order = source.Order;
        this.TypeName = source.TypeName;
    }

    public fromObservable(source: ReportParameterObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DisplayValueProperty = unwrap(source.DisplayValueProperty);
        this.IsCollection = unwrap(source.IsCollection);
        this.IsRequired = unwrap(source.IsRequired);
        this.Name = unwrap(source.Name);
        this.Order = unwrap(source.Order);
        this.TypeName = unwrap(source.TypeName);
    }

    public toObservable(): ReportParameterObservableSimpleDTO {
        let e = new ReportParameterObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportParameterFullDTO extends ReportParameterSimpleDTO {
    public __type = 'ReportParameterFullDTO';

    private _reportparameterfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IReportParameterFullDTO): ReportParameterFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: ReportParameterObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): ReportParameterObservableFullDTO {
        let e = new ReportParameterObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportParameterRichDTO extends ReportParameterFullDTO {
    public __type = 'ReportParameterRichDTO';

    private _reportparameterrichdto: string;

    public static fromJs(source: IReportParameterRichDTO): ReportParameterRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportParameterRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportParameterRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportParameterObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportParameterObservableRichDTO {
        let e = new ReportParameterObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class ReportPropertySimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'ReportPropertySimpleDTO';

    private _reportpropertysimpledto: string;

    public Alias: string;

    public Formula: string;

    public Order: number;

    public PropertyPath: string;

    public SortOrdered: number;

    public SortType: number;

    public get Identity() : ReportPropertyIdentityDTO {
        return new ReportPropertyIdentityDTO(this.Id);
    }

    public static fromJs(source: IReportPropertySimpleDTO): ReportPropertySimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportPropertySimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportPropertySimpleDTO): void {
        super.fromJs(source);
        this.Alias = source.Alias;
        this.Formula = source.Formula;
        this.Order = source.Order;
        this.PropertyPath = source.PropertyPath;
        this.SortOrdered = source.SortOrdered;
        this.SortType = source.SortType;
    }

    public fromObservable(source: ReportPropertyObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Alias = unwrap(source.Alias);
        this.Formula = unwrap(source.Formula);
        this.Order = unwrap(source.Order);
        this.PropertyPath = unwrap(source.PropertyPath);
        this.SortOrdered = unwrap(source.SortOrdered);
        this.SortType = unwrap(source.SortType);
    }

    public toObservable(): ReportPropertyObservableSimpleDTO {
        let e = new ReportPropertyObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class ReportPropertyFullDTO extends ReportPropertySimpleDTO {
    public __type = 'ReportPropertyFullDTO';

    private _reportpropertyfulldto: string;

    public Report: ReportSimpleDTO;

    public static fromJs(source: IReportPropertyFullDTO): ReportPropertyFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportPropertyFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportPropertyFullDTO): void {
        super.fromJs(source);
        this.Report = ReportSimpleDTO.fromJs(source.Report);
    }

    public fromObservable(source: ReportPropertyObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Report)) {
            this.Report = unwrap(source.Report).toJs();
        }
    }

    public toObservable(): ReportPropertyObservableFullDTO {
        let e = new ReportPropertyObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class ReportPropertyRichDTO extends ReportPropertyFullDTO {
    public __type = 'ReportPropertyRichDTO';

    private _reportpropertyrichdto: string;

    public static fromJs(source: IReportPropertyRichDTO): ReportPropertyRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ReportPropertyRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IReportPropertyRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: ReportPropertyObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): ReportPropertyObservableRichDTO {
        let e = new ReportPropertyObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SentMessageSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'SentMessageSimpleDTO';

    private _sentmessagesimpledto: string;

    public Comment: string;

    public ContextObjectId: Guid;

    public ContextObjectType: string;

    public Copy: string;

    public From: string;

    public Message: string;

    public ReplyTo: string;

    public Subject: string;

    public TemplateName: string;

    public To: string;

    public get Identity() : SentMessageIdentityDTO {
        return new SentMessageIdentityDTO(this.Id);
    }

    public static fromJs(source: ISentMessageSimpleDTO): SentMessageSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SentMessageSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISentMessageSimpleDTO): void {
        super.fromJs(source);
        this.Comment = source.Comment;
        this.ContextObjectId = source.ContextObjectId;
        this.ContextObjectType = source.ContextObjectType;
        this.Copy = source.Copy;
        this.From = source.From;
        this.Message = source.Message;
        this.ReplyTo = source.ReplyTo;
        this.Subject = source.Subject;
        this.TemplateName = source.TemplateName;
        this.To = source.To;
    }

    public fromObservable(source: SentMessageObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Comment = unwrap(source.Comment);
        this.ContextObjectId = unwrap(source.ContextObjectId);
        this.ContextObjectType = unwrap(source.ContextObjectType);
        this.Copy = unwrap(source.Copy);
        this.From = unwrap(source.From);
        this.Message = unwrap(source.Message);
        this.ReplyTo = unwrap(source.ReplyTo);
        this.Subject = unwrap(source.Subject);
        this.TemplateName = unwrap(source.TemplateName);
        this.To = unwrap(source.To);
    }

    public toObservable(): SentMessageObservableSimpleDTO {
        let e = new SentMessageObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SentMessageFullDTO extends SentMessageSimpleDTO {
    public __type = 'SentMessageFullDTO';

    private _sentmessagefulldto: string;

    public static fromJs(source: ISentMessageFullDTO): SentMessageFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SentMessageFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISentMessageFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SentMessageObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SentMessageObservableFullDTO {
        let e = new SentMessageObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SentMessageRichDTO extends SentMessageFullDTO {
    public __type = 'SentMessageRichDTO';

    private _sentmessagerichdto: string;

    public static fromJs(source: ISentMessageRichDTO): SentMessageRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SentMessageRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISentMessageRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SentMessageObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SentMessageObservableRichDTO {
        let e = new SentMessageObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SequenceSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'SequenceSimpleDTO';

    private _sequencesimpledto: string;

    public Name: string;

    public Number: number;

    public get Identity() : SequenceIdentityDTO {
        return new SequenceIdentityDTO(this.Id);
    }

    public static fromJs(source: ISequenceSimpleDTO): SequenceSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
        this.Number = source.Number;
    }

    public fromObservable(source: SequenceObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
        this.Number = unwrap(source.Number);
    }

    public toObservable(): SequenceObservableSimpleDTO {
        let e = new SequenceObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SequenceFullDTO extends SequenceSimpleDTO {
    public __type = 'SequenceFullDTO';

    private _sequencefulldto: string;

    public static fromJs(source: ISequenceFullDTO): SequenceFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceObservableFullDTO {
        let e = new SequenceObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SequenceRichDTO extends SequenceFullDTO {
    public __type = 'SequenceRichDTO';

    private _sequencerichdto: string;

    public static fromJs(source: ISequenceRichDTO): SequenceRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceObservableRichDTO {
        let e = new SequenceObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SequenceCreateModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'SequenceCreateModelSimpleDTO';

    private _sequencecreatemodelsimpledto: string;

    public static fromJs(source: ISequenceCreateModelSimpleDTO): SequenceCreateModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceCreateModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceCreateModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceCreateModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceCreateModelObservableSimpleDTO {
        let e = new SequenceCreateModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SequenceCreateModelFullDTO extends SequenceCreateModelSimpleDTO {
    public __type = 'SequenceCreateModelFullDTO';

    private _sequencecreatemodelfulldto: string;

    public static fromJs(source: ISequenceCreateModelFullDTO): SequenceCreateModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceCreateModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceCreateModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceCreateModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceCreateModelObservableFullDTO {
        let e = new SequenceCreateModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SequenceCreateModelRichDTO extends SequenceCreateModelFullDTO {
    public __type = 'SequenceCreateModelRichDTO';

    private _sequencecreatemodelrichdto: string;

    public static fromJs(source: ISequenceCreateModelRichDTO): SequenceCreateModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceCreateModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceCreateModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceCreateModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceCreateModelObservableRichDTO {
        let e = new SequenceCreateModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SequenceCreateModelIdentityDTO {
    public static Empty = new SequenceCreateModelIdentityDTO(Guid.Empty);

    public __type = 'SequenceCreateModelIdentityDTO';

    private _sequencecreatemodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SequenceCreateModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SequenceCreateModelIdentityDTO(source.Id);
    }

    public toNativeJson(): SequenceCreateModelIdentityDTO {
        return this;
    }

}

export class SequenceRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'SequenceRootFilterModelSimpleDTO';

    private _sequencerootfiltermodelsimpledto: string;

    public static fromJs(source: ISequenceRootFilterModelSimpleDTO): SequenceRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceRootFilterModelObservableSimpleDTO {
        let e = new SequenceRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SequenceRootFilterModelFullDTO extends SequenceRootFilterModelSimpleDTO {
    public __type = 'SequenceRootFilterModelFullDTO';

    private _sequencerootfiltermodelfulldto: string;

    public static fromJs(source: ISequenceRootFilterModelFullDTO): SequenceRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceRootFilterModelObservableFullDTO {
        let e = new SequenceRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SequenceRootFilterModelRichDTO extends SequenceRootFilterModelFullDTO {
    public __type = 'SequenceRootFilterModelRichDTO';

    private _sequencerootfiltermodelrichdto: string;

    public static fromJs(source: ISequenceRootFilterModelRichDTO): SequenceRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISequenceRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SequenceRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SequenceRootFilterModelObservableRichDTO {
        let e = new SequenceRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SequenceRootFilterModelIdentityDTO {
    public static Empty = new SequenceRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'SequenceRootFilterModelIdentityDTO';

    private _sequencerootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SequenceRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SequenceRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): SequenceRootFilterModelIdentityDTO {
        return this;
    }

}

export class SystemConstantSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'SystemConstantSimpleDTO';

    private _systemconstantsimpledto: string;

    public Code: string;

    public Description: string;

    public IsManual = false;

    public Value: string;

    public get Identity() : SystemConstantIdentityDTO {
        return new SystemConstantIdentityDTO(this.Id);
    }

    public static fromJs(source: ISystemConstantSimpleDTO): SystemConstantSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantSimpleDTO): void {
        super.fromJs(source);
        this.Code = source.Code;
        this.Description = source.Description;
        this.IsManual = source.IsManual;
        this.Value = source.Value;
    }

    public fromObservable(source: SystemConstantObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Code = unwrap(source.Code);
        this.Description = unwrap(source.Description);
        this.IsManual = unwrap(source.IsManual);
        this.Value = unwrap(source.Value);
    }

    public toObservable(): SystemConstantObservableSimpleDTO {
        let e = new SystemConstantObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SystemConstantFullDTO extends SystemConstantSimpleDTO {
    public __type = 'SystemConstantFullDTO';

    private _systemconstantfulldto: string;

    public Type: DomainTypeSimpleDTO;

    public static fromJs(source: ISystemConstantFullDTO): SystemConstantFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantFullDTO): void {
        super.fromJs(source);
        this.Type = DomainTypeSimpleDTO.fromJs(source.Type);
    }

    public fromObservable(source: SystemConstantObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.Type)) {
            this.Type = unwrap(source.Type).toJs();
        }
    }

    public toObservable(): SystemConstantObservableFullDTO {
        let e = new SystemConstantObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SystemConstantRichDTO extends SystemConstantFullDTO {
    public __type = 'SystemConstantRichDTO';

    private _systemconstantrichdto: string;

    public static fromJs(source: ISystemConstantRichDTO): SystemConstantRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SystemConstantObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SystemConstantObservableRichDTO {
        let e = new SystemConstantObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SystemConstantRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'SystemConstantRootFilterModelSimpleDTO';

    private _systemconstantrootfiltermodelsimpledto: string;

    public static fromJs(source: ISystemConstantRootFilterModelSimpleDTO): SystemConstantRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRootFilterModelSimpleDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SystemConstantRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SystemConstantRootFilterModelObservableSimpleDTO {
        let e = new SystemConstantRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class SystemConstantRootFilterModelFullDTO extends SystemConstantRootFilterModelSimpleDTO {
    public __type = 'SystemConstantRootFilterModelFullDTO';

    private _systemconstantrootfiltermodelfulldto: string;

    public static fromJs(source: ISystemConstantRootFilterModelFullDTO): SystemConstantRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SystemConstantRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SystemConstantRootFilterModelObservableFullDTO {
        let e = new SystemConstantRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class SystemConstantRootFilterModelRichDTO extends SystemConstantRootFilterModelFullDTO {
    public __type = 'SystemConstantRootFilterModelRichDTO';

    private _systemconstantrootfiltermodelrichdto: string;

    public static fromJs(source: ISystemConstantRootFilterModelRichDTO): SystemConstantRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ISystemConstantRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: SystemConstantRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): SystemConstantRootFilterModelObservableRichDTO {
        let e = new SystemConstantRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class SystemConstantRootFilterModelIdentityDTO {
    public static Empty = new SystemConstantRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'SystemConstantRootFilterModelIdentityDTO';

    private _systemconstantrootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): SystemConstantRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new SystemConstantRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): SystemConstantRootFilterModelIdentityDTO {
        return this;
    }

}

export class TargetSystemSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'TargetSystemSimpleDTO';

    private _targetsystemsimpledto: string;

    public IsBase = false;

    public IsMain = false;

    public IsRevision = false;

    public Name: string;

    public SubscriptionEnabled = false;

    public get Identity() : TargetSystemIdentityDTO {
        return new TargetSystemIdentityDTO(this.Id);
    }

    public static fromJs(source: ITargetSystemSimpleDTO): TargetSystemSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemSimpleDTO): void {
        super.fromJs(source);
        this.IsBase = source.IsBase;
        this.IsMain = source.IsMain;
        this.IsRevision = source.IsRevision;
        this.Name = source.Name;
        this.SubscriptionEnabled = source.SubscriptionEnabled;
    }

    public fromObservable(source: TargetSystemObservableSimpleDTO): void {
        super.fromObservable(source);
        this.IsBase = unwrap(source.IsBase);
        this.IsMain = unwrap(source.IsMain);
        this.IsRevision = unwrap(source.IsRevision);
        this.Name = unwrap(source.Name);
        this.SubscriptionEnabled = unwrap(source.SubscriptionEnabled);
    }

    public toObservable(): TargetSystemObservableSimpleDTO {
        let e = new TargetSystemObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class TargetSystemFullDTO extends TargetSystemSimpleDTO {
    public __type = 'TargetSystemFullDTO';

    private _targetsystemfulldto: string;

    public static fromJs(source: ITargetSystemFullDTO): TargetSystemFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TargetSystemObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TargetSystemObservableFullDTO {
        let e = new TargetSystemObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class TargetSystemRichDTO extends TargetSystemFullDTO {
    public __type = 'TargetSystemRichDTO';

    private _targetsystemrichdto: string;

    public DomainTypes: DomainTypeRichDTO [];

    public static fromJs(source: ITargetSystemRichDTO): TargetSystemRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRichDTO): void {
        super.fromJs(source);
        if (source.DomainTypes) {
            this.DomainTypes = source.DomainTypes.map(e => {
                return DomainTypeRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: TargetSystemObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainTypes)) {
            this.DomainTypes = source.DomainTypes().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): TargetSystemObservableRichDTO {
        let e = new TargetSystemObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class TargetSystemRootFilterModelSimpleDTO extends BaseAbstractDTO {
    public __type = 'TargetSystemRootFilterModelSimpleDTO';

    private _targetsystemrootfiltermodelsimpledto: string;

    public IsMain: boolean;

    public IsRevision: boolean;

    public SubscriptionEnabled: boolean;

    public static fromJs(source: ITargetSystemRootFilterModelSimpleDTO): TargetSystemRootFilterModelSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRootFilterModelSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRootFilterModelSimpleDTO): void {
        super.fromJs(source);
        this.IsMain = source.IsMain;
        this.IsRevision = source.IsRevision;
        this.SubscriptionEnabled = source.SubscriptionEnabled;
    }

    public fromObservable(source: TargetSystemRootFilterModelObservableSimpleDTO): void {
        super.fromObservable(source);
        this.IsMain = unwrap(source.IsMain);
        this.IsRevision = unwrap(source.IsRevision);
        this.SubscriptionEnabled = unwrap(source.SubscriptionEnabled);
    }

    public toObservable(): TargetSystemRootFilterModelObservableSimpleDTO {
        let e = new TargetSystemRootFilterModelObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class TargetSystemRootFilterModelFullDTO extends TargetSystemRootFilterModelSimpleDTO {
    public __type = 'TargetSystemRootFilterModelFullDTO';

    private _targetsystemrootfiltermodelfulldto: string;

    public static fromJs(source: ITargetSystemRootFilterModelFullDTO): TargetSystemRootFilterModelFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRootFilterModelFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRootFilterModelFullDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TargetSystemRootFilterModelObservableFullDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TargetSystemRootFilterModelObservableFullDTO {
        let e = new TargetSystemRootFilterModelObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class TargetSystemRootFilterModelRichDTO extends TargetSystemRootFilterModelFullDTO {
    public __type = 'TargetSystemRootFilterModelRichDTO';

    private _targetsystemrootfiltermodelrichdto: string;

    public static fromJs(source: ITargetSystemRootFilterModelRichDTO): TargetSystemRootFilterModelRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemRootFilterModelRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: ITargetSystemRootFilterModelRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: TargetSystemRootFilterModelObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): TargetSystemRootFilterModelObservableRichDTO {
        let e = new TargetSystemRootFilterModelObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class TargetSystemRootFilterModelIdentityDTO {
    public static Empty = new TargetSystemRootFilterModelIdentityDTO(Guid.Empty);

    public __type = 'TargetSystemRootFilterModelIdentityDTO';

    private _targetsystemrootfiltermodelidentitydto: string;

    public Id: Guid;

    constructor (id: Guid) {
        if (!(id)) {
            throw new Error('Parameter id should be specified');
        }
        this.Id = id;

    }

    public static fromJs(source: any): TargetSystemRootFilterModelIdentityDTO {
        if (!(source)) {
            return undefined;
        }
        return new TargetSystemRootFilterModelIdentityDTO(source.Id);
    }

    public toNativeJson(): TargetSystemRootFilterModelIdentityDTO {
        return this;
    }

}

export class UserActionSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'UserActionSimpleDTO';

    private _useractionsimpledto: string;

    public Name: string;

    public get Identity() : UserActionIdentityDTO {
        return new UserActionIdentityDTO(this.Id);
    }

    public static fromJs(source: IUserActionSimpleDTO): UserActionSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionSimpleDTO): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: UserActionObservableSimpleDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): UserActionObservableSimpleDTO {
        let e = new UserActionObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class UserActionFullDTO extends UserActionSimpleDTO {
    public __type = 'UserActionFullDTO';

    private _useractionfulldto: string;

    public DomainType: DomainTypeSimpleDTO;

    public static fromJs(source: IUserActionFullDTO): UserActionFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionFullDTO): void {
        super.fromJs(source);
        this.DomainType = DomainTypeSimpleDTO.fromJs(source.DomainType);
    }

    public fromObservable(source: UserActionObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.DomainType)) {
            this.DomainType = unwrap(source.DomainType).toJs();
        }
    }

    public toObservable(): UserActionObservableFullDTO {
        let e = new UserActionObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class UserActionRichDTO extends UserActionFullDTO {
    public __type = 'UserActionRichDTO';

    private _useractionrichdto: string;

    public ObjectIdentities: UserActionObjectRichDTO [];

    public static fromJs(source: IUserActionRichDTO): UserActionRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionRichDTO): void {
        super.fromJs(source);
        if (source.ObjectIdentities) {
            this.ObjectIdentities = source.ObjectIdentities.map(e => {
                return UserActionObjectRichDTO.fromJs(e);
            });
        }
    }

    public fromObservable(source: UserActionObservableRichDTO): void {
        super.fromObservable(source);
        if (unwrap(source.ObjectIdentities)) {
            this.ObjectIdentities = source.ObjectIdentities().map(e => {
                return e.toJs();
            });
        }
    }

    public toObservable(): UserActionObservableRichDTO {
        let e = new UserActionObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export class UserActionObjectSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'UserActionObjectSimpleDTO';

    private _useractionobjectsimpledto: string;

    public DomainTypeName: string;

    public Name: string;

    public ObjectIdentity: Guid;

    public UserActionName: string;

    public get Identity() : UserActionObjectIdentityDTO {
        return new UserActionObjectIdentityDTO(this.Id);
    }

    public static fromJs(source: IUserActionObjectSimpleDTO): UserActionObjectSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectSimpleDTO): void {
        super.fromJs(source);
        this.DomainTypeName = source.DomainTypeName;
        this.Name = source.Name;
        this.ObjectIdentity = source.ObjectIdentity;
        this.UserActionName = source.UserActionName;
    }

    public fromObservable(source: UserActionObjectObservableSimpleDTO): void {
        super.fromObservable(source);
        this.DomainTypeName = unwrap(source.DomainTypeName);
        this.Name = unwrap(source.Name);
        this.ObjectIdentity = unwrap(source.ObjectIdentity);
        this.UserActionName = unwrap(source.UserActionName);
    }

    public toObservable(): UserActionObjectObservableSimpleDTO {
        let e = new UserActionObjectObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromSimple(this);
        return e;
    }

}

export class UserActionObjectFullDTO extends UserActionObjectSimpleDTO {
    public __type = 'UserActionObjectFullDTO';

    private _useractionobjectfulldto: string;

    public UserAction: UserActionSimpleDTO;

    public static fromJs(source: IUserActionObjectFullDTO): UserActionObjectFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectFullDTO): void {
        super.fromJs(source);
        this.UserAction = UserActionSimpleDTO.fromJs(source.UserAction);
    }

    public fromObservable(source: UserActionObjectObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.UserAction)) {
            this.UserAction = unwrap(source.UserAction).toJs();
        }
    }

    public toObservable(): UserActionObjectObservableFullDTO {
        let e = new UserActionObjectObservableFullDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromFull(this);
        return e;
    }

}

export class UserActionObjectRichDTO extends UserActionObjectFullDTO {
    public __type = 'UserActionObjectRichDTO';

    private _useractionobjectrichdto: string;

    public static fromJs(source: IUserActionObjectRichDTO): UserActionObjectRichDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new UserActionObjectRichDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IUserActionObjectRichDTO): void {
        super.fromJs(source);
    }

    public fromObservable(source: UserActionObjectObservableRichDTO): void {
        super.fromObservable(source);
    }

    public toObservable(): UserActionObjectObservableRichDTO {
        let e = new UserActionObjectObservableRichDTO();
        e.fromJs(this);
        return e;
    }

    public toStrict(): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromRich(this);
        return e;
    }

}

export interface IAttachmentSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IAttachmentFullDTO extends IAttachmentSimpleDTO {
    Container : AttachmentContainerSimpleDTO;
}

export interface IAttachmentRichDTO extends IAttachmentFullDTO {
    Content : number [];
    Tags : AttachmentTagRichDTO [];
}

export class AttachmentVisualDTO extends BasePersistentDTO {
    public __type = 'AttachmentVisualDTO';

    private _attachmentvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): AttachmentVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: AttachmentObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): AttachmentObservableVisualDTO {
        let e = new AttachmentObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IAttachmentContainerSimpleDTO extends IBaseAuditPersistentDTO {
    ObjectId : Guid;
}

export interface IAttachmentContainerFullDTO extends IAttachmentContainerSimpleDTO {
    DomainType : DomainTypeSimpleDTO;
}

export interface IAttachmentContainerRichDTO extends IAttachmentContainerFullDTO {
    Attachments : AttachmentRichDTO [];
}

export interface IAttachmentContainerReferenceSimpleDTO extends IBaseAbstractDTO {
    ObjectId : Guid;
}

export interface IAttachmentContainerReferenceFullDTO extends IAttachmentContainerReferenceSimpleDTO {
    DomainType : DomainTypeSimpleDTO;
}

export interface IAttachmentContainerReferenceRichDTO extends IAttachmentContainerReferenceFullDTO {
}

export interface IAttachmentTagSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
    Value : string;
}

export interface IAttachmentTagFullDTO extends IAttachmentTagSimpleDTO {
    Attachment : AttachmentSimpleDTO;
}

export interface IAttachmentTagRichDTO extends IAttachmentTagFullDTO {
}

export class AttachmentTagVisualDTO extends BasePersistentDTO {
    public __type = 'AttachmentTagVisualDTO';

    private _attachmenttagvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): AttachmentTagVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new AttachmentTagVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: AttachmentTagObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): AttachmentTagObservableVisualDTO {
        let e = new AttachmentTagObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ICodeFirstSubscriptionSimpleDTO extends IBaseAuditPersistentDTO {
    Code : string;
}

export interface ICodeFirstSubscriptionFullDTO extends ICodeFirstSubscriptionSimpleDTO {
    DomainType : DomainTypeSimpleDTO;
}

export interface ICodeFirstSubscriptionRichDTO extends ICodeFirstSubscriptionFullDTO {
}

export interface ICodeFirstSubscriptionRootFilterModelSimpleDTO extends IBaseAbstractDTO {
}

export interface ICodeFirstSubscriptionRootFilterModelFullDTO extends ICodeFirstSubscriptionRootFilterModelSimpleDTO {
}

export interface ICodeFirstSubscriptionRootFilterModelRichDTO extends ICodeFirstSubscriptionRootFilterModelFullDTO {
}

export interface IControlSettingsSimpleDTO extends IBaseAuditPersistentDTO {
    AccountName : string;
    Name : string;
    Type : ControlSettingsType;
}

export interface IControlSettingsFullDTO extends IControlSettingsSimpleDTO {
    Parent : ControlSettingsSimpleDTO;
}

export interface IControlSettingsRichDTO extends IControlSettingsFullDTO {
    Children : ControlSettingsRichDTO [];
    ControlSettingsParams : ControlSettingsParamRichDTO [];
}

export class ControlSettingsVisualDTO extends BasePersistentDTO {
    public __type = 'ControlSettingsVisualDTO';

    private _controlsettingsvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): ControlSettingsVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new ControlSettingsVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: ControlSettingsObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): ControlSettingsObservableVisualDTO {
        let e = new ControlSettingsObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IControlSettingsParamSimpleDTO extends IBaseAuditPersistentDTO {
    Type : ControlSettingParamType;
}

export interface IControlSettingsParamFullDTO extends IControlSettingsParamSimpleDTO {
    ControlSettings : ControlSettingsSimpleDTO;
}

export interface IControlSettingsParamRichDTO extends IControlSettingsParamFullDTO {
    ControlSettingsParamValues : ControlSettingsParamValueRichDTO [];
}

export interface IControlSettingsParamValueSimpleDTO extends IBaseAuditPersistentDTO {
    Culture : string;
    Value : string;
    ValueTypeName : string;
}

export interface IControlSettingsParamValueFullDTO extends IControlSettingsParamValueSimpleDTO {
    ControlSettingsParam : ControlSettingsParamSimpleDTO;
}

export interface IControlSettingsParamValueRichDTO extends IControlSettingsParamValueFullDTO {
}

export interface IDomainObjectEventSimpleDTO extends IBaseAuditPersistentDTO {
    DomainObjectId : Guid;
    HostName : string;
    ProcessDate? : Date;
    QueueTag : string;
    Revision : number;
    SerializeData : string;
    SerializeType : string;
    Size : number;
    Status : QueueProgressStatus;
}

export interface IDomainObjectEventFullDTO extends IDomainObjectEventSimpleDTO {
    Operation : DomainTypeEventOperationSimpleDTO;
}

export interface IDomainObjectEventRichDTO extends IDomainObjectEventFullDTO {
}

export interface IDomainObjectModificationSimpleDTO extends IBaseAuditPersistentDTO {
    DomainObjectId : Guid;
    Processed : boolean;
    Revision : number;
    Type : ModificationType;
    Version : number;
}

export interface IDomainObjectModificationFullDTO extends IDomainObjectModificationSimpleDTO {
    DomainType : DomainTypeSimpleDTO;
}

export interface IDomainObjectModificationRichDTO extends IDomainObjectModificationFullDTO {
}

export interface IDomainObjectNotificationSimpleDTO extends IBaseAuditPersistentDTO {
    HostName : string;
    ProcessDate? : Date;
    SerializeData : string;
    Size : number;
    Status : QueueProgressStatus;
}

export interface IDomainObjectNotificationFullDTO extends IDomainObjectNotificationSimpleDTO {
}

export interface IDomainObjectNotificationRichDTO extends IDomainObjectNotificationFullDTO {
}

export interface IDomainTypeSimpleDTO extends IBaseAuditPersistentDTO {
    FullTypeName : string;
    HasSecurityAttachment : boolean;
    Name : string;
    NameSpace : string;
}

export interface IDomainTypeFullDTO extends IDomainTypeSimpleDTO {
    TargetSystem : TargetSystemSimpleDTO;
}

export interface IDomainTypeRichDTO extends IDomainTypeFullDTO {
    EventOperations : DomainTypeEventOperationRichDTO [];
}

export class DomainTypeVisualDTO extends BasePersistentDTO {
    public __type = 'DomainTypeVisualDTO';

    private _domaintypevisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): DomainTypeVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: DomainTypeObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): DomainTypeObservableVisualDTO {
        let e = new DomainTypeObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IDomainTypeEventModelSimpleDTO extends IBaseAbstractDTO {
    Revision? : number;
}

export interface IDomainTypeEventModelFullDTO extends IDomainTypeEventModelSimpleDTO {
    Operation : DomainTypeEventOperationSimpleDTO;
}

export interface IDomainTypeEventModelRichDTO extends IDomainTypeEventModelFullDTO {
    DomainObjectIdents : Guid [];
}

export interface IDomainTypeEventOperationSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IDomainTypeEventOperationFullDTO extends IDomainTypeEventOperationSimpleDTO {
    DomainType : DomainTypeSimpleDTO;
}

export interface IDomainTypeEventOperationRichDTO extends IDomainTypeEventOperationFullDTO {
}

export class DomainTypeEventOperationVisualDTO extends BasePersistentDTO {
    public __type = 'DomainTypeEventOperationVisualDTO';

    private _domaintypeeventoperationvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): DomainTypeEventOperationVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new DomainTypeEventOperationVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: DomainTypeEventOperationObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): DomainTypeEventOperationObservableVisualDTO {
        let e = new DomainTypeEventOperationObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IDomainTypeRootFilterModelSimpleDTO extends IBaseAbstractDTO {
}

export interface IDomainTypeRootFilterModelFullDTO extends IDomainTypeRootFilterModelSimpleDTO {
    TargetSystem : TargetSystemSimpleDTO;
}

export interface IDomainTypeRootFilterModelRichDTO extends IDomainTypeRootFilterModelFullDTO {
}

export interface IExceptionMessageSimpleDTO extends IBaseAuditPersistentDTO {
    IsClient : boolean;
    IsRoot : boolean;
    Message : string;
    MessageType : string;
    StackTrace : string;
}

export interface IExceptionMessageFullDTO extends IExceptionMessageSimpleDTO {
}

export interface IExceptionMessageRichDTO extends IExceptionMessageFullDTO {
    InnerException : ExceptionMessageRichDTO;
}

export interface IExceptionMessageRootFilterModelSimpleDTO extends IBaseAbstractDTO {
    IsRoot : boolean;
    Period : Framework.Core.Period;
}

export interface IExceptionMessageRootFilterModelFullDTO extends IExceptionMessageRootFilterModelSimpleDTO {
}

export interface IExceptionMessageRootFilterModelRichDTO extends IExceptionMessageRootFilterModelFullDTO {
}

export interface ILogMessageSimpleDTO extends IBaseAuditPersistentDTO {
    Action : string;
    InputMessage : string;
    OutputMessage : string;
    Period : Framework.Core.Period;
    UserName : string;
}

export interface ILogMessageFullDTO extends ILogMessageSimpleDTO {
}

export interface ILogMessageRichDTO extends ILogMessageFullDTO {
}

export interface IUserActionCreateModelSimpleDTO extends IBaseAbstractDTO {
    DomainType : string;
    Name : string;
}

export interface IUserActionCreateModelFullDTO extends IUserActionCreateModelSimpleDTO {
}

export interface IUserActionCreateModelRichDTO extends IUserActionCreateModelFullDTO {
    ObjectIdentities : UserActionObjectModelRichDTO [];
}

export interface IUserActionObjectModelSimpleDTO extends IBaseAbstractDTO {
    Name : string;
    ObjectIdentity : Guid;
}

export interface IUserActionObjectModelFullDTO extends IUserActionObjectModelSimpleDTO {
}

export interface IUserActionObjectModelRichDTO extends IUserActionObjectModelFullDTO {
}

export interface IReportGenerationModelSimpleDTO extends IBaseAbstractDTO {
}

export interface IReportGenerationModelFullDTO extends IReportGenerationModelSimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IReportGenerationModelRichDTO extends IReportGenerationModelFullDTO {
    Items : ReportGenerationValueRichDTO [];
}

export interface IReportGenerationRequestModelSimpleDTO extends IBaseAbstractDTO {
}

export interface IReportGenerationRequestModelFullDTO extends IReportGenerationRequestModelSimpleDTO {
}

export interface IReportGenerationRequestModelRichDTO extends IReportGenerationRequestModelFullDTO {
    Parameters : ReportParameterSimpleDTO [];
    TypeMetadatas : TypeMetadata [];
}

export interface IReportGenerationValueSimpleDTO extends IBaseAbstractDTO {
    DesignValue : string;
    Value : string;
}

export interface IReportGenerationValueFullDTO extends IReportGenerationValueSimpleDTO {
    Parameter : ReportParameterSimpleDTO;
}

export interface IReportGenerationValueRichDTO extends IReportGenerationValueFullDTO {
}

export interface IReportParameterValueSimpleDTO extends IBaseAbstractDTO {
    DesignValue : string;
    Value : string;
}

export interface IReportParameterValueFullDTO extends IReportParameterValueSimpleDTO {
    ReportParameter : ReportParameterSimpleDTO;
}

export interface IReportParameterValueRichDTO extends IReportParameterValueFullDTO {
}

export interface IUserActionObjectRootFilterModelSimpleDTO extends IBaseAbstractDTO {
    CountingEntities : number;
    Period : Framework.Core.Period;
}

export interface IUserActionObjectRootFilterModelFullDTO extends IUserActionObjectRootFilterModelSimpleDTO {
}

export interface IUserActionObjectRootFilterModelRichDTO extends IUserActionObjectRootFilterModelFullDTO {
    ActionNames : string [];
    DomainTypeNames : string [];
}

export interface INamedLockSimpleDTO extends IBaseAuditPersistentDTO {
    LockOperation : NamedLockOperation;
}

export interface INamedLockFullDTO extends INamedLockSimpleDTO {
}

export interface INamedLockRichDTO extends INamedLockFullDTO {
}

export interface IQueueProcessingStateSimpleDTO extends IBaseAbstractDTO {
    LastProcessedItemDateTime? : Date;
    UnprocessedCount : number;
}

export interface IQueueProcessingStateFullDTO extends IQueueProcessingStateSimpleDTO {
}

export interface IQueueProcessingStateRichDTO extends IQueueProcessingStateFullDTO {
}

export interface IAccessableBusinessRoleReportRightSimpleDTO extends IBaseAuditPersistentDTO {
    Value : Guid;
}

export interface IAccessableBusinessRoleReportRightFullDTO extends IAccessableBusinessRoleReportRightSimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IAccessableBusinessRoleReportRightRichDTO extends IAccessableBusinessRoleReportRightFullDTO {
}

export interface IAccessableOperationReportRightSimpleDTO extends IBaseAuditPersistentDTO {
    Value : Guid;
}

export interface IAccessableOperationReportRightFullDTO extends IAccessableOperationReportRightSimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IAccessableOperationReportRightRichDTO extends IAccessableOperationReportRightFullDTO {
}

export interface IAccessablePrincipalReportRightSimpleDTO extends IBaseAuditPersistentDTO {
    Value : string;
}

export interface IAccessablePrincipalReportRightFullDTO extends IAccessablePrincipalReportRightSimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IAccessablePrincipalReportRightRichDTO extends IAccessablePrincipalReportRightFullDTO {
}

export interface IReportSimpleDTO extends IBaseAuditPersistentDTO {
    Description : string;
    DomainTypeName : string;
    Name : string;
    Owner : string;
    ReportType : ReportType;
    SecurityOperationCode? : number;
    SortBy : string;
    Version : number;
}

export interface IReportFullDTO extends IReportSimpleDTO {
}

export interface IReportRichDTO extends IReportFullDTO {
    AccessableBusinessRoles : AccessableBusinessRoleReportRightRichDTO [];
    AccessableOperations : AccessableOperationReportRightRichDTO [];
    AccessablePrincipals : AccessablePrincipalReportRightRichDTO [];
    Filters : ReportFilterRichDTO [];
    Parameters : ReportParameterRichDTO [];
    Properties : ReportPropertyRichDTO [];
}

export interface IReportFilterSimpleDTO extends IBaseAuditPersistentDTO {
    FilterOperator : string;
    FilterOperatorViewName : string;
    IsValueFromParameters : boolean;
    Property : string;
    Value : string;
}

export interface IReportFilterFullDTO extends IReportFilterSimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IReportFilterRichDTO extends IReportFilterFullDTO {
}

export interface IReportParameterSimpleDTO extends IBaseAuditPersistentDTO {
    DisplayValueProperty : string;
    IsCollection : boolean;
    IsRequired : boolean;
    Name : string;
    Order : number;
    TypeName : string;
}

export interface IReportParameterFullDTO extends IReportParameterSimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IReportParameterRichDTO extends IReportParameterFullDTO {
}

export interface IReportPropertySimpleDTO extends IBaseAuditPersistentDTO {
    Alias : string;
    Formula : string;
    Order : number;
    PropertyPath : string;
    SortOrdered : number;
    SortType : number;
}

export interface IReportPropertyFullDTO extends IReportPropertySimpleDTO {
    Report : ReportSimpleDTO;
}

export interface IReportPropertyRichDTO extends IReportPropertyFullDTO {
}

export interface ISentMessageSimpleDTO extends IBaseAuditPersistentDTO {
    Comment : string;
    ContextObjectId? : Guid;
    ContextObjectType : string;
    Copy : string;
    From : string;
    Message : string;
    ReplyTo : string;
    Subject : string;
    TemplateName : string;
    To : string;
}

export interface ISentMessageFullDTO extends ISentMessageSimpleDTO {
}

export interface ISentMessageRichDTO extends ISentMessageFullDTO {
}

export interface ISequenceSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
    Number : number;
}

export interface ISequenceFullDTO extends ISequenceSimpleDTO {
}

export interface ISequenceRichDTO extends ISequenceFullDTO {
}

export class SequenceVisualDTO extends BasePersistentDTO {
    public __type = 'SequenceVisualDTO';

    private _sequencevisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): SequenceVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SequenceVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: SequenceObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): SequenceObservableVisualDTO {
        let e = new SequenceObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ISequenceCreateModelSimpleDTO extends IBaseAbstractDTO {
}

export interface ISequenceCreateModelFullDTO extends ISequenceCreateModelSimpleDTO {
}

export interface ISequenceCreateModelRichDTO extends ISequenceCreateModelFullDTO {
}

export interface ISequenceRootFilterModelSimpleDTO extends IBaseAbstractDTO {
}

export interface ISequenceRootFilterModelFullDTO extends ISequenceRootFilterModelSimpleDTO {
}

export interface ISequenceRootFilterModelRichDTO extends ISequenceRootFilterModelFullDTO {
}

export interface ISystemConstantSimpleDTO extends IBaseAuditPersistentDTO {
    Code : string;
    Description : string;
    IsManual : boolean;
    Value : string;
}

export interface ISystemConstantFullDTO extends ISystemConstantSimpleDTO {
    Type : DomainTypeSimpleDTO;
}

export interface ISystemConstantRichDTO extends ISystemConstantFullDTO {
}

export class SystemConstantVisualDTO extends BasePersistentDTO {
    public __type = 'SystemConstantVisualDTO';

    private _systemconstantvisualdto: string;

    public Code: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): SystemConstantVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new SystemConstantVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Code = source.Code;
    }

    public fromObservable(source: SystemConstantObservableVisualDTO): void {
        super.fromObservable(source);
        this.Code = unwrap(source.Code);
    }

    public toObservable(): SystemConstantObservableVisualDTO {
        let e = new SystemConstantObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ISystemConstantRootFilterModelSimpleDTO extends IBaseAbstractDTO {
}

export interface ISystemConstantRootFilterModelFullDTO extends ISystemConstantRootFilterModelSimpleDTO {
}

export interface ISystemConstantRootFilterModelRichDTO extends ISystemConstantRootFilterModelFullDTO {
}

export interface ITargetSystemSimpleDTO extends IBaseAuditPersistentDTO {
    IsBase : boolean;
    IsMain : boolean;
    IsRevision : boolean;
    Name : string;
    SubscriptionEnabled : boolean;
}

export interface ITargetSystemFullDTO extends ITargetSystemSimpleDTO {
}

export interface ITargetSystemRichDTO extends ITargetSystemFullDTO {
    DomainTypes : DomainTypeRichDTO [];
}

export class TargetSystemVisualDTO extends BasePersistentDTO {
    public __type = 'TargetSystemVisualDTO';

    private _targetsystemvisualdto: string;

    public Name: string;

    constructor () {
        super();

    }

    public static fromJs(source: IBasePersistentDTO): TargetSystemVisualDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new TargetSystemVisualDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        super.fromJs(source);
        this.Name = source.Name;
    }

    public fromObservable(source: TargetSystemObservableVisualDTO): void {
        super.fromObservable(source);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): TargetSystemObservableVisualDTO {
        let e = new TargetSystemObservableVisualDTO();
        e.fromJs(this);
        return e;
    }

}

export interface ITargetSystemRootFilterModelSimpleDTO extends IBaseAbstractDTO {
    IsMain? : boolean;
    IsRevision? : boolean;
    SubscriptionEnabled? : boolean;
}

export interface ITargetSystemRootFilterModelFullDTO extends ITargetSystemRootFilterModelSimpleDTO {
}

export interface ITargetSystemRootFilterModelRichDTO extends ITargetSystemRootFilterModelFullDTO {
}

export interface IUserActionSimpleDTO extends IBaseAuditPersistentDTO {
    Name : string;
}

export interface IUserActionFullDTO extends IUserActionSimpleDTO {
    DomainType : DomainTypeSimpleDTO;
}

export interface IUserActionRichDTO extends IUserActionFullDTO {
    ObjectIdentities : UserActionObjectRichDTO [];
}

export interface IUserActionObjectSimpleDTO extends IBaseAuditPersistentDTO {
    DomainTypeName : string;
    Name : string;
    ObjectIdentity : Guid;
    UserActionName : string;
}

export interface IUserActionObjectFullDTO extends IUserActionObjectSimpleDTO {
    UserAction : UserActionSimpleDTO;
}

export interface IUserActionObjectRichDTO extends IUserActionObjectFullDTO {
}

export class AttachmentStrictDTO {
    public __type = 'AttachmentStrictDTO';

    private _attachmentstrictdto: string;

    public Content: number [];

    public Id: Guid;

    public Name: string;

    public Tags: AttachmentTagStrictDTO [];

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AttachmentFullDTO): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AttachmentRichDTO): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AttachmentSimpleDTO): AttachmentStrictDTO {
        let e = new AttachmentStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AttachmentFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: AttachmentRichDTO): void {
        this.fromFull(source);
        if (source.Content) {
            this.Content = source.Content.map(e => {
                return e;
            });
        }
        if (source.Tags) {
            this.Tags = source.Tags.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: AttachmentSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Content) {
            result.Content = this.Content.map(e => {
                return e;
            });
        }
        result.Id = this.Id;
        result.Name = this.Name;
        if (this.Tags) {
            result.Tags = this.Tags.map(e => {
                return e.toNativeJson();
            });
        }
        return result;
    }

}

export class AttachmentContainerStrictDTO {
    public __type = 'AttachmentContainerStrictDTO';

    private _attachmentcontainerstrictdto: string;

    public Attachments: AttachmentStrictDTO [];

    public DomainType: DomainTypeIdentityDTO;

    public Id: Guid;

    public ObjectId: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AttachmentContainerFullDTO): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AttachmentContainerRichDTO): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AttachmentContainerSimpleDTO): AttachmentContainerStrictDTO {
        let e = new AttachmentContainerStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AttachmentContainerFullDTO): void {
        this.fromSimple(source);
        if (source.DomainType) {
            this.DomainType = source.DomainType.Identity;
        }
    }

    public fromRich(source: AttachmentContainerRichDTO): void {
        this.fromFull(source);
        if (source.Attachments) {
            this.Attachments = source.Attachments.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: AttachmentContainerSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.ObjectId = source.ObjectId;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Attachments) {
            result.Attachments = this.Attachments.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.DomainType) {
            result.DomainType = this.DomainType.toNativeJson();
        }
        result.Id = this.Id;
        result.ObjectId = this.ObjectId;
        return result;
    }

}

export class AttachmentContainerReferenceStrictDTO {
    public __type = 'AttachmentContainerReferenceStrictDTO';

    private _attachmentcontainerreferencestrictdto: string;

    public DomainType: DomainTypeIdentityDTO;

    public ObjectId: Guid;

    public static fromFull(source: AttachmentContainerReferenceFullDTO): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AttachmentContainerReferenceRichDTO): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AttachmentContainerReferenceSimpleDTO): AttachmentContainerReferenceStrictDTO {
        let e = new AttachmentContainerReferenceStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: AttachmentContainerReferenceFullDTO): void {
        this.fromSimple(source);
        if (source.DomainType) {
            this.DomainType = source.DomainType.Identity;
        }
    }

    public fromRich(source: AttachmentContainerReferenceRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: AttachmentContainerReferenceSimpleDTO): void {
        this.ObjectId = source.ObjectId;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.DomainType) {
            result.DomainType = this.DomainType.toNativeJson();
        }
        result.ObjectId = this.ObjectId;
        return result;
    }

}

export class AttachmentTagStrictDTO {
    public __type = 'AttachmentTagStrictDTO';

    private _attachmenttagstrictdto: string;

    public Id: Guid;

    public Name: string;

    public Value: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AttachmentTagFullDTO): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AttachmentTagRichDTO): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AttachmentTagSimpleDTO): AttachmentTagStrictDTO {
        let e = new AttachmentTagStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AttachmentTagFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: AttachmentTagRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: AttachmentTagSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Name = this.Name;
        result.Value = this.Value;
        return result;
    }

}

export class CodeFirstSubscriptionStrictDTO {
    public __type = 'CodeFirstSubscriptionStrictDTO';

    private _codefirstsubscriptionstrictdto: string;

    public Active: boolean;

    public Id: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: CodeFirstSubscriptionFullDTO): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: CodeFirstSubscriptionRichDTO): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: CodeFirstSubscriptionSimpleDTO): CodeFirstSubscriptionStrictDTO {
        let e = new CodeFirstSubscriptionStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: CodeFirstSubscriptionFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: CodeFirstSubscriptionRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: CodeFirstSubscriptionSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Active = this.Active;
        result.Id = this.Id;
        return result;
    }

}

export class CodeFirstSubscriptionRootFilterModelStrictDTO {
    public __type = 'CodeFirstSubscriptionRootFilterModelStrictDTO';

    private _codefirstsubscriptionrootfiltermodelstrictdto: string;

    public static fromFull(source: CodeFirstSubscriptionRootFilterModelFullDTO): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: CodeFirstSubscriptionRootFilterModelRichDTO): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: CodeFirstSubscriptionRootFilterModelSimpleDTO): CodeFirstSubscriptionRootFilterModelStrictDTO {
        let e = new CodeFirstSubscriptionRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: CodeFirstSubscriptionRootFilterModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: CodeFirstSubscriptionRootFilterModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: CodeFirstSubscriptionRootFilterModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class ControlSettingsStrictDTO {
    public __type = 'ControlSettingsStrictDTO';

    private _controlsettingsstrictdto: string;

    public Children: ControlSettingsStrictDTO [];

    public ControlSettingsParams: ControlSettingsParamStrictDTO [];

    public Id: Guid;

    public Name: string;

    public Parent: ControlSettingsIdentityDTO;

    public Type: ControlSettingsType;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ControlSettingsFullDTO): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ControlSettingsRichDTO): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ControlSettingsSimpleDTO): ControlSettingsStrictDTO {
        let e = new ControlSettingsStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ControlSettingsFullDTO): void {
        this.fromSimple(source);
        if (source.Parent) {
            this.Parent = source.Parent.Identity;
        }
    }

    public fromRich(source: ControlSettingsRichDTO): void {
        this.fromFull(source);
        if (source.Children) {
            this.Children = source.Children.map(e => {
                return e.toStrict();
            });
        }
        if (source.ControlSettingsParams) {
            this.ControlSettingsParams = source.ControlSettingsParams.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: ControlSettingsSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
        this.Type = source.Type;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Children) {
            result.Children = this.Children.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.ControlSettingsParams) {
            result.ControlSettingsParams = this.ControlSettingsParams.map(e => {
                return e.toNativeJson();
            });
        }
        result.Id = this.Id;
        result.Name = this.Name;
        if (this.Parent) {
            result.Parent = this.Parent.toNativeJson();
        }
        result.Type = this.Type;
        return result;
    }

}

export class ControlSettingsParamStrictDTO {
    public __type = 'ControlSettingsParamStrictDTO';

    private _controlsettingsparamstrictdto: string;

    public ControlSettingsParamValues: ControlSettingsParamValueStrictDTO [];

    public Id: Guid;

    public Type: ControlSettingParamType;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ControlSettingsParamFullDTO): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ControlSettingsParamRichDTO): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ControlSettingsParamSimpleDTO): ControlSettingsParamStrictDTO {
        let e = new ControlSettingsParamStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ControlSettingsParamFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ControlSettingsParamRichDTO): void {
        this.fromFull(source);
        if (source.ControlSettingsParamValues) {
            this.ControlSettingsParamValues = source.ControlSettingsParamValues.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: ControlSettingsParamSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Type = source.Type;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.ControlSettingsParamValues) {
            result.ControlSettingsParamValues = this.ControlSettingsParamValues.map(e => {
                return e.toNativeJson();
            });
        }
        result.Id = this.Id;
        result.Type = this.Type;
        return result;
    }

}

export class ControlSettingsParamValueStrictDTO {
    public __type = 'ControlSettingsParamValueStrictDTO';

    private _controlsettingsparamvaluestrictdto: string;

    public Culture: string;

    public Id: Guid;

    public Value: string;

    public ValueTypeName: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ControlSettingsParamValueFullDTO): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ControlSettingsParamValueRichDTO): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ControlSettingsParamValueSimpleDTO): ControlSettingsParamValueStrictDTO {
        let e = new ControlSettingsParamValueStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ControlSettingsParamValueFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ControlSettingsParamValueRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ControlSettingsParamValueSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Culture = source.Culture;
        this.Value = source.Value;
        this.ValueTypeName = source.ValueTypeName;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Culture = this.Culture;
        result.Id = this.Id;
        result.Value = this.Value;
        result.ValueTypeName = this.ValueTypeName;
        return result;
    }

}

export class DomainObjectEventStrictDTO {
    public __type = 'DomainObjectEventStrictDTO';

    private _domainobjecteventstrictdto: string;

    public DomainObjectId: Guid;

    public Id: Guid;

    public Operation: DomainTypeEventOperationIdentityDTO;

    public QueueTag: string;

    public Revision: number;

    public SerializeData: string;

    public SerializeType: string;

    public Size: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: DomainObjectEventFullDTO): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainObjectEventRichDTO): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainObjectEventSimpleDTO): DomainObjectEventStrictDTO {
        let e = new DomainObjectEventStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: DomainObjectEventFullDTO): void {
        this.fromSimple(source);
        if (source.Operation) {
            this.Operation = source.Operation.Identity;
        }
    }

    public fromRich(source: DomainObjectEventRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: DomainObjectEventSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.DomainObjectId = source.DomainObjectId;
        this.QueueTag = source.QueueTag;
        this.Revision = source.Revision;
        this.SerializeData = source.SerializeData;
        this.SerializeType = source.SerializeType;
        this.Size = source.Size;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.DomainObjectId = this.DomainObjectId;
        result.Id = this.Id;
        if (this.Operation) {
            result.Operation = this.Operation.toNativeJson();
        }
        result.QueueTag = this.QueueTag;
        result.Revision = this.Revision;
        result.SerializeData = this.SerializeData;
        result.SerializeType = this.SerializeType;
        result.Size = this.Size;
        return result;
    }

}

export class DomainObjectModificationStrictDTO {
    public __type = 'DomainObjectModificationStrictDTO';

    private _domainobjectmodificationstrictdto: string;

    public DomainObjectId: Guid;

    public DomainType: DomainTypeIdentityDTO;

    public Id: Guid;

    public Processed: boolean;

    public Revision: number;

    public Type: ModificationType;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: DomainObjectModificationFullDTO): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainObjectModificationRichDTO): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainObjectModificationSimpleDTO): DomainObjectModificationStrictDTO {
        let e = new DomainObjectModificationStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: DomainObjectModificationFullDTO): void {
        this.fromSimple(source);
        if (source.DomainType) {
            this.DomainType = source.DomainType.Identity;
        }
    }

    public fromRich(source: DomainObjectModificationRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: DomainObjectModificationSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.DomainObjectId = source.DomainObjectId;
        this.Processed = source.Processed;
        this.Revision = source.Revision;
        this.Type = source.Type;
        this.Version = source.Version;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.DomainObjectId = this.DomainObjectId;
        if (this.DomainType) {
            result.DomainType = this.DomainType.toNativeJson();
        }
        result.Id = this.Id;
        result.Processed = this.Processed;
        result.Revision = this.Revision;
        result.Type = this.Type;
        result.Version = this.Version;
        return result;
    }

}

export class DomainObjectNotificationStrictDTO {
    public __type = 'DomainObjectNotificationStrictDTO';

    private _domainobjectnotificationstrictdto: string;

    public Id: Guid;

    public SerializeData: string;

    public Size: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: DomainObjectNotificationFullDTO): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainObjectNotificationRichDTO): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainObjectNotificationSimpleDTO): DomainObjectNotificationStrictDTO {
        let e = new DomainObjectNotificationStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: DomainObjectNotificationFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: DomainObjectNotificationRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: DomainObjectNotificationSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.SerializeData = source.SerializeData;
        this.Size = source.Size;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.SerializeData = this.SerializeData;
        result.Size = this.Size;
        return result;
    }

}

export class DomainTypeStrictDTO {
    public __type = 'DomainTypeStrictDTO';

    private _domaintypestrictdto: string;

    public Id: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: DomainTypeFullDTO): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainTypeRichDTO): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainTypeSimpleDTO): DomainTypeStrictDTO {
        let e = new DomainTypeStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: DomainTypeFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: DomainTypeRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: DomainTypeSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        return result;
    }

}

export class DomainTypeEventModelStrictDTO {
    public __type = 'DomainTypeEventModelStrictDTO';

    private _domaintypeeventmodelstrictdto: string;

    public DomainObjectIdents: Guid [];

    public Operation: DomainTypeEventOperationIdentityDTO;

    public Revision: number;

    public static fromFull(source: DomainTypeEventModelFullDTO): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainTypeEventModelRichDTO): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainTypeEventModelSimpleDTO): DomainTypeEventModelStrictDTO {
        let e = new DomainTypeEventModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: DomainTypeEventModelFullDTO): void {
        this.fromSimple(source);
        if (source.Operation) {
            this.Operation = source.Operation.Identity;
        }
    }

    public fromRich(source: DomainTypeEventModelRichDTO): void {
        this.fromFull(source);
        if (source.DomainObjectIdents) {
            this.DomainObjectIdents = source.DomainObjectIdents.map(e => {
                return e;
            });
        }
    }

    public fromSimple(source: DomainTypeEventModelSimpleDTO): void {
        this.Revision = source.Revision;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.DomainObjectIdents) {
            result.DomainObjectIdents = this.DomainObjectIdents.map(e => {
                return e;
            });
        }
        if (this.Operation) {
            result.Operation = this.Operation.toNativeJson();
        }
        result.Revision = this.Revision;
        return result;
    }

}

export class DomainTypeEventOperationStrictDTO {
    public __type = 'DomainTypeEventOperationStrictDTO';

    private _domaintypeeventoperationstrictdto: string;

    public Id: Guid;

    public Name: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: DomainTypeEventOperationFullDTO): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainTypeEventOperationRichDTO): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainTypeEventOperationSimpleDTO): DomainTypeEventOperationStrictDTO {
        let e = new DomainTypeEventOperationStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: DomainTypeEventOperationFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: DomainTypeEventOperationRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: DomainTypeEventOperationSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Name = this.Name;
        return result;
    }

}

export class DomainTypeRootFilterModelStrictDTO {
    public __type = 'DomainTypeRootFilterModelStrictDTO';

    private _domaintyperootfiltermodelstrictdto: string;

    public TargetSystem: TargetSystemIdentityDTO;

    public static fromFull(source: DomainTypeRootFilterModelFullDTO): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: DomainTypeRootFilterModelRichDTO): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: DomainTypeRootFilterModelSimpleDTO): DomainTypeRootFilterModelStrictDTO {
        let e = new DomainTypeRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: DomainTypeRootFilterModelFullDTO): void {
        this.fromSimple(source);
        if (source.TargetSystem) {
            this.TargetSystem = source.TargetSystem.Identity;
        }
    }

    public fromRich(source: DomainTypeRootFilterModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: DomainTypeRootFilterModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.TargetSystem) {
            result.TargetSystem = this.TargetSystem.toNativeJson();
        }
        return result;
    }

}

export class ExceptionMessageStrictDTO {
    public __type = 'ExceptionMessageStrictDTO';

    private _exceptionmessagestrictdto: string;

    public Id: Guid;

    public InnerException: ExceptionMessageStrictDTO;

    public Message: string;

    public MessageType: string;

    public StackTrace: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ExceptionMessageFullDTO): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ExceptionMessageRichDTO): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ExceptionMessageSimpleDTO): ExceptionMessageStrictDTO {
        let e = new ExceptionMessageStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ExceptionMessageFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ExceptionMessageRichDTO): void {
        this.fromFull(source);
        if (source.InnerException) {
            this.InnerException = source.InnerException.toStrict();
        }
    }

    public fromSimple(source: ExceptionMessageSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Message = source.Message;
        this.MessageType = source.MessageType;
        this.StackTrace = source.StackTrace;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        if (this.InnerException) {
            result.InnerException = this.InnerException.toNativeJson();
        }
        result.Message = this.Message;
        result.MessageType = this.MessageType;
        result.StackTrace = this.StackTrace;
        return result;
    }

}

export class ExceptionMessageRootFilterModelStrictDTO {
    public __type = 'ExceptionMessageRootFilterModelStrictDTO';

    private _exceptionmessagerootfiltermodelstrictdto: string;

    public IsRoot: boolean;

    public Period: Framework.Core.Period;

    public static fromFull(source: ExceptionMessageRootFilterModelFullDTO): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ExceptionMessageRootFilterModelRichDTO): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ExceptionMessageRootFilterModelSimpleDTO): ExceptionMessageRootFilterModelStrictDTO {
        let e = new ExceptionMessageRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: ExceptionMessageRootFilterModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ExceptionMessageRootFilterModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ExceptionMessageRootFilterModelSimpleDTO): void {
        this.IsRoot = source.IsRoot;
        this.Period = source.Period;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.IsRoot = this.IsRoot;
        result.Period = Framework.Core.Period.toOData(this.Period);
        return result;
    }

}

export class LogMessageStrictDTO {
    public __type = 'LogMessageStrictDTO';

    private _logmessagestrictdto: string;

    public Action: string;

    public Id: Guid;

    public InputMessage: string;

    public OutputMessage: string;

    public Period: Framework.Core.Period;

    public UserName: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: LogMessageFullDTO): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: LogMessageRichDTO): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: LogMessageSimpleDTO): LogMessageStrictDTO {
        let e = new LogMessageStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: LogMessageFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: LogMessageRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: LogMessageSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Action = source.Action;
        this.InputMessage = source.InputMessage;
        this.OutputMessage = source.OutputMessage;
        this.Period = source.Period;
        this.UserName = source.UserName;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Action = this.Action;
        result.Id = this.Id;
        result.InputMessage = this.InputMessage;
        result.OutputMessage = this.OutputMessage;
        result.Period = Framework.Core.Period.toOData(this.Period);
        result.UserName = this.UserName;
        return result;
    }

}

export class UserActionCreateModelStrictDTO {
    public __type = 'UserActionCreateModelStrictDTO';

    private _useractioncreatemodelstrictdto: string;

    public DomainType: string;

    public Name: string;

    public ObjectIdentities: UserActionObjectModelStrictDTO [];

    public static fromFull(source: UserActionCreateModelFullDTO): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: UserActionCreateModelRichDTO): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: UserActionCreateModelSimpleDTO): UserActionCreateModelStrictDTO {
        let e = new UserActionCreateModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: UserActionCreateModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: UserActionCreateModelRichDTO): void {
        this.fromFull(source);
        if (source.ObjectIdentities) {
            this.ObjectIdentities = source.ObjectIdentities.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: UserActionCreateModelSimpleDTO): void {
        this.DomainType = source.DomainType;
        this.Name = source.Name;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.DomainType = this.DomainType;
        result.Name = this.Name;
        if (this.ObjectIdentities) {
            result.ObjectIdentities = this.ObjectIdentities.map(e => {
                return e.toNativeJson();
            });
        }
        return result;
    }

}

export class UserActionObjectModelStrictDTO {
    public __type = 'UserActionObjectModelStrictDTO';

    private _useractionobjectmodelstrictdto: string;

    public Name: string;

    public ObjectIdentity: Guid;

    public static fromFull(source: UserActionObjectModelFullDTO): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: UserActionObjectModelRichDTO): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: UserActionObjectModelSimpleDTO): UserActionObjectModelStrictDTO {
        let e = new UserActionObjectModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: UserActionObjectModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: UserActionObjectModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: UserActionObjectModelSimpleDTO): void {
        this.Name = source.Name;
        this.ObjectIdentity = source.ObjectIdentity;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Name = this.Name;
        result.ObjectIdentity = this.ObjectIdentity;
        return result;
    }

}

export class ReportGenerationModelStrictDTO {
    public __type = 'ReportGenerationModelStrictDTO';

    private _reportgenerationmodelstrictdto: string;

    public Items: ReportGenerationValueStrictDTO [];

    public Report: ReportIdentityDTO;

    public static fromFull(source: ReportGenerationModelFullDTO): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportGenerationModelRichDTO): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportGenerationModelSimpleDTO): ReportGenerationModelStrictDTO {
        let e = new ReportGenerationModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: ReportGenerationModelFullDTO): void {
        this.fromSimple(source);
        if (source.Report) {
            this.Report = source.Report.Identity;
        }
    }

    public fromRich(source: ReportGenerationModelRichDTO): void {
        this.fromFull(source);
        if (source.Items) {
            this.Items = source.Items.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: ReportGenerationModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Items) {
            result.Items = this.Items.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.Report) {
            result.Report = this.Report.toNativeJson();
        }
        return result;
    }

}

export class ReportGenerationRequestModelStrictDTO {
    public __type = 'ReportGenerationRequestModelStrictDTO';

    private _reportgenerationrequestmodelstrictdto: string;

    public Parameters: ReportParameterIdentityDTO [];

    public TypeMetadatas: TypeMetadata [];

    public static fromFull(source: ReportGenerationRequestModelFullDTO): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportGenerationRequestModelRichDTO): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportGenerationRequestModelSimpleDTO): ReportGenerationRequestModelStrictDTO {
        let e = new ReportGenerationRequestModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: ReportGenerationRequestModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ReportGenerationRequestModelRichDTO): void {
        this.fromFull(source);
        if (source.Parameters) {
            this.Parameters = source.Parameters.map(e => {
                return e.Identity;
            });
        }
        if (source.TypeMetadatas) {
            this.TypeMetadatas = source.TypeMetadatas.map(e => {
                return e;
            });
        }
    }

    public fromSimple(source: ReportGenerationRequestModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.Parameters) {
            result.Parameters = this.Parameters.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.TypeMetadatas) {
            result.TypeMetadatas = this.TypeMetadatas.map(e => {
                return e.toNativeJson();
            });
        }
        return result;
    }

}

export class ReportGenerationValueStrictDTO {
    public __type = 'ReportGenerationValueStrictDTO';

    private _reportgenerationvaluestrictdto: string;

    public DesignValue: string;

    public Parameter: ReportParameterIdentityDTO;

    public Value: string;

    public static fromFull(source: ReportGenerationValueFullDTO): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportGenerationValueRichDTO): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportGenerationValueSimpleDTO): ReportGenerationValueStrictDTO {
        let e = new ReportGenerationValueStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: ReportGenerationValueFullDTO): void {
        this.fromSimple(source);
        if (source.Parameter) {
            this.Parameter = source.Parameter.Identity;
        }
    }

    public fromRich(source: ReportGenerationValueRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ReportGenerationValueSimpleDTO): void {
        this.DesignValue = source.DesignValue;
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.DesignValue = this.DesignValue;
        if (this.Parameter) {
            result.Parameter = this.Parameter.toNativeJson();
        }
        result.Value = this.Value;
        return result;
    }

}

export class ReportParameterValueStrictDTO {
    public __type = 'ReportParameterValueStrictDTO';

    private _reportparametervaluestrictdto: string;

    public DesignValue: string;

    public ReportParameter: ReportParameterIdentityDTO;

    public Value: string;

    public static fromFull(source: ReportParameterValueFullDTO): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportParameterValueRichDTO): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportParameterValueSimpleDTO): ReportParameterValueStrictDTO {
        let e = new ReportParameterValueStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: ReportParameterValueFullDTO): void {
        this.fromSimple(source);
        if (source.ReportParameter) {
            this.ReportParameter = source.ReportParameter.Identity;
        }
    }

    public fromRich(source: ReportParameterValueRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ReportParameterValueSimpleDTO): void {
        this.DesignValue = source.DesignValue;
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.DesignValue = this.DesignValue;
        if (this.ReportParameter) {
            result.ReportParameter = this.ReportParameter.toNativeJson();
        }
        result.Value = this.Value;
        return result;
    }

}

export class UserActionObjectRootFilterModelStrictDTO {
    public __type = 'UserActionObjectRootFilterModelStrictDTO';

    private _useractionobjectrootfiltermodelstrictdto: string;

    public ActionNames: string [];

    public CountingEntities: number;

    public DomainTypeNames: string [];

    public Period: Framework.Core.Period;

    public static fromFull(source: UserActionObjectRootFilterModelFullDTO): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: UserActionObjectRootFilterModelRichDTO): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: UserActionObjectRootFilterModelSimpleDTO): UserActionObjectRootFilterModelStrictDTO {
        let e = new UserActionObjectRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: UserActionObjectRootFilterModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: UserActionObjectRootFilterModelRichDTO): void {
        this.fromFull(source);
        if (source.ActionNames) {
            this.ActionNames = source.ActionNames.map(e => {
                return e;
            });
        }
        if (source.DomainTypeNames) {
            this.DomainTypeNames = source.DomainTypeNames.map(e => {
                return e;
            });
        }
    }

    public fromSimple(source: UserActionObjectRootFilterModelSimpleDTO): void {
        this.CountingEntities = source.CountingEntities;
        this.Period = source.Period;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.ActionNames) {
            result.ActionNames = this.ActionNames.map(e => {
                return e;
            });
        }
        result.CountingEntities = this.CountingEntities;
        if (this.DomainTypeNames) {
            result.DomainTypeNames = this.DomainTypeNames.map(e => {
                return e;
            });
        }
        result.Period = Framework.Core.Period.toOData(this.Period);
        return result;
    }

}

export class NamedLockStrictDTO {
    public __type = 'NamedLockStrictDTO';

    private _namedlockstrictdto: string;

    public Id: Guid;

    public LockOperation: NamedLockOperation;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: NamedLockFullDTO): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: NamedLockRichDTO): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: NamedLockSimpleDTO): NamedLockStrictDTO {
        let e = new NamedLockStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: NamedLockFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: NamedLockRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: NamedLockSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.LockOperation = source.LockOperation;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.LockOperation = this.LockOperation;
        return result;
    }

}

export class QueueProcessingStateStrictDTO {
    public __type = 'QueueProcessingStateStrictDTO';

    private _queueprocessingstatestrictdto: string;

    public LastProcessedItemDateTime: Date;

    public UnprocessedCount: number;

    public static fromFull(source: QueueProcessingStateFullDTO): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: QueueProcessingStateRichDTO): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: QueueProcessingStateSimpleDTO): QueueProcessingStateStrictDTO {
        let e = new QueueProcessingStateStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: QueueProcessingStateFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: QueueProcessingStateRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: QueueProcessingStateSimpleDTO): void {
        this.LastProcessedItemDateTime = source.LastProcessedItemDateTime;
        this.UnprocessedCount = source.UnprocessedCount;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.LastProcessedItemDateTime = Convert.toOData(this.LastProcessedItemDateTime);
        result.UnprocessedCount = this.UnprocessedCount;
        return result;
    }

}

export class AccessableBusinessRoleReportRightStrictDTO {
    public __type = 'AccessableBusinessRoleReportRightStrictDTO';

    private _accessablebusinessrolereportrightstrictdto: string;

    public Id: Guid;

    public Value: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AccessableBusinessRoleReportRightFullDTO): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AccessableBusinessRoleReportRightRichDTO): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AccessableBusinessRoleReportRightSimpleDTO): AccessableBusinessRoleReportRightStrictDTO {
        let e = new AccessableBusinessRoleReportRightStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AccessableBusinessRoleReportRightFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: AccessableBusinessRoleReportRightRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: AccessableBusinessRoleReportRightSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Value = this.Value;
        return result;
    }

}

export class AccessableOperationReportRightStrictDTO {
    public __type = 'AccessableOperationReportRightStrictDTO';

    private _accessableoperationreportrightstrictdto: string;

    public Id: Guid;

    public Value: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AccessableOperationReportRightFullDTO): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AccessableOperationReportRightRichDTO): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AccessableOperationReportRightSimpleDTO): AccessableOperationReportRightStrictDTO {
        let e = new AccessableOperationReportRightStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AccessableOperationReportRightFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: AccessableOperationReportRightRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: AccessableOperationReportRightSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Value = this.Value;
        return result;
    }

}

export class AccessablePrincipalReportRightStrictDTO {
    public __type = 'AccessablePrincipalReportRightStrictDTO';

    private _accessableprincipalreportrightstrictdto: string;

    public Id: Guid;

    public Value: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: AccessablePrincipalReportRightFullDTO): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: AccessablePrincipalReportRightRichDTO): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: AccessablePrincipalReportRightSimpleDTO): AccessablePrincipalReportRightStrictDTO {
        let e = new AccessablePrincipalReportRightStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: AccessablePrincipalReportRightFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: AccessablePrincipalReportRightRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: AccessablePrincipalReportRightSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Value = this.Value;
        return result;
    }

}

export class ReportStrictDTO {
    public __type = 'ReportStrictDTO';

    private _reportstrictdto: string;

    public AccessableBusinessRoles: AccessableBusinessRoleReportRightStrictDTO [];

    public AccessableOperations: AccessableOperationReportRightStrictDTO [];

    public AccessablePrincipals: AccessablePrincipalReportRightStrictDTO [];

    public Active: boolean;

    public Description: string;

    public DomainTypeName: string;

    public Filters: ReportFilterStrictDTO [];

    public Id: Guid;

    public Name: string;

    public Owner: string;

    public Parameters: ReportParameterStrictDTO [];

    public Properties: ReportPropertyStrictDTO [];

    public ReportType: ReportType;

    public SecurityOperationCode: number;

    public Version: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ReportFullDTO): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportRichDTO): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportSimpleDTO): ReportStrictDTO {
        let e = new ReportStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ReportFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ReportRichDTO): void {
        this.fromFull(source);
        if (source.AccessableBusinessRoles) {
            this.AccessableBusinessRoles = source.AccessableBusinessRoles.map(e => {
                return e.toStrict();
            });
        }
        if (source.AccessableOperations) {
            this.AccessableOperations = source.AccessableOperations.map(e => {
                return e.toStrict();
            });
        }
        if (source.AccessablePrincipals) {
            this.AccessablePrincipals = source.AccessablePrincipals.map(e => {
                return e.toStrict();
            });
        }
        if (source.Filters) {
            this.Filters = source.Filters.map(e => {
                return e.toStrict();
            });
        }
        if (source.Parameters) {
            this.Parameters = source.Parameters.map(e => {
                return e.toStrict();
            });
        }
        if (source.Properties) {
            this.Properties = source.Properties.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: ReportSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Description = source.Description;
        this.DomainTypeName = source.DomainTypeName;
        this.Name = source.Name;
        this.Owner = source.Owner;
        this.ReportType = source.ReportType;
        this.SecurityOperationCode = source.SecurityOperationCode;
        this.Version = source.Version;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.AccessableBusinessRoles) {
            result.AccessableBusinessRoles = this.AccessableBusinessRoles.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.AccessableOperations) {
            result.AccessableOperations = this.AccessableOperations.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.AccessablePrincipals) {
            result.AccessablePrincipals = this.AccessablePrincipals.map(e => {
                return e.toNativeJson();
            });
        }
        result.Active = this.Active;
        result.Description = this.Description;
        result.DomainTypeName = this.DomainTypeName;
        if (this.Filters) {
            result.Filters = this.Filters.map(e => {
                return e.toNativeJson();
            });
        }
        result.Id = this.Id;
        result.Name = this.Name;
        result.Owner = this.Owner;
        if (this.Parameters) {
            result.Parameters = this.Parameters.map(e => {
                return e.toNativeJson();
            });
        }
        if (this.Properties) {
            result.Properties = this.Properties.map(e => {
                return e.toNativeJson();
            });
        }
        result.ReportType = this.ReportType;
        result.SecurityOperationCode = this.SecurityOperationCode;
        result.Version = this.Version;
        return result;
    }

}

export class ReportFilterStrictDTO {
    public __type = 'ReportFilterStrictDTO';

    private _reportfilterstrictdto: string;

    public FilterOperator: string;

    public Id: Guid;

    public IsValueFromParameters: boolean;

    public Property: string;

    public Value: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ReportFilterFullDTO): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportFilterRichDTO): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportFilterSimpleDTO): ReportFilterStrictDTO {
        let e = new ReportFilterStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ReportFilterFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ReportFilterRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ReportFilterSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.FilterOperator = source.FilterOperator;
        this.IsValueFromParameters = source.IsValueFromParameters;
        this.Property = source.Property;
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.FilterOperator = this.FilterOperator;
        result.Id = this.Id;
        result.IsValueFromParameters = this.IsValueFromParameters;
        result.Property = this.Property;
        result.Value = this.Value;
        return result;
    }

}

export class ReportParameterStrictDTO {
    public __type = 'ReportParameterStrictDTO';

    private _reportparameterstrictdto: string;

    public DisplayValueProperty: string;

    public Id: Guid;

    public IsCollection: boolean;

    public IsRequired: boolean;

    public Name: string;

    public Order: number;

    public TypeName: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ReportParameterFullDTO): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportParameterRichDTO): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportParameterSimpleDTO): ReportParameterStrictDTO {
        let e = new ReportParameterStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ReportParameterFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ReportParameterRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ReportParameterSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.DisplayValueProperty = source.DisplayValueProperty;
        this.IsCollection = source.IsCollection;
        this.IsRequired = source.IsRequired;
        this.Name = source.Name;
        this.Order = source.Order;
        this.TypeName = source.TypeName;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.DisplayValueProperty = this.DisplayValueProperty;
        result.Id = this.Id;
        result.IsCollection = this.IsCollection;
        result.IsRequired = this.IsRequired;
        result.Name = this.Name;
        result.Order = this.Order;
        result.TypeName = this.TypeName;
        return result;
    }

}

export class ReportPropertyStrictDTO {
    public __type = 'ReportPropertyStrictDTO';

    private _reportpropertystrictdto: string;

    public Alias: string;

    public Formula: string;

    public Id: Guid;

    public Order: number;

    public PropertyPath: string;

    public SortOrdered: number;

    public SortType: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: ReportPropertyFullDTO): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: ReportPropertyRichDTO): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: ReportPropertySimpleDTO): ReportPropertyStrictDTO {
        let e = new ReportPropertyStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: ReportPropertyFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: ReportPropertyRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: ReportPropertySimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Alias = source.Alias;
        this.Formula = source.Formula;
        this.Order = source.Order;
        this.PropertyPath = source.PropertyPath;
        this.SortOrdered = source.SortOrdered;
        this.SortType = source.SortType;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Alias = this.Alias;
        result.Formula = this.Formula;
        result.Id = this.Id;
        result.Order = this.Order;
        result.PropertyPath = this.PropertyPath;
        result.SortOrdered = this.SortOrdered;
        result.SortType = this.SortType;
        return result;
    }

}

export class SentMessageStrictDTO {
    public __type = 'SentMessageStrictDTO';

    private _sentmessagestrictdto: string;

    public Id: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: SentMessageFullDTO): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: SentMessageRichDTO): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: SentMessageSimpleDTO): SentMessageStrictDTO {
        let e = new SentMessageStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: SentMessageFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: SentMessageRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: SentMessageSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        return result;
    }

}

export class SequenceStrictDTO {
    public __type = 'SequenceStrictDTO';

    private _sequencestrictdto: string;

    public Id: Guid;

    public Name: string;

    public Number: number;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: SequenceFullDTO): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: SequenceRichDTO): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: SequenceSimpleDTO): SequenceStrictDTO {
        let e = new SequenceStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: SequenceFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: SequenceRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: SequenceSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
        this.Number = source.Number;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Name = this.Name;
        result.Number = this.Number;
        return result;
    }

}

export class SequenceCreateModelStrictDTO {
    public __type = 'SequenceCreateModelStrictDTO';

    private _sequencecreatemodelstrictdto: string;

    public static fromFull(source: SequenceCreateModelFullDTO): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: SequenceCreateModelRichDTO): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: SequenceCreateModelSimpleDTO): SequenceCreateModelStrictDTO {
        let e = new SequenceCreateModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: SequenceCreateModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: SequenceCreateModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: SequenceCreateModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class SequenceRootFilterModelStrictDTO {
    public __type = 'SequenceRootFilterModelStrictDTO';

    private _sequencerootfiltermodelstrictdto: string;

    public static fromFull(source: SequenceRootFilterModelFullDTO): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: SequenceRootFilterModelRichDTO): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: SequenceRootFilterModelSimpleDTO): SequenceRootFilterModelStrictDTO {
        let e = new SequenceRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: SequenceRootFilterModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: SequenceRootFilterModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: SequenceRootFilterModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class SystemConstantStrictDTO {
    public __type = 'SystemConstantStrictDTO';

    private _systemconstantstrictdto: string;

    public Description: string;

    public Id: Guid;

    public Value: string;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: SystemConstantFullDTO): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: SystemConstantRichDTO): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: SystemConstantSimpleDTO): SystemConstantStrictDTO {
        let e = new SystemConstantStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: SystemConstantFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: SystemConstantRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: SystemConstantSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Description = source.Description;
        this.Value = source.Value;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Description = this.Description;
        result.Id = this.Id;
        result.Value = this.Value;
        return result;
    }

}

export class SystemConstantRootFilterModelStrictDTO {
    public __type = 'SystemConstantRootFilterModelStrictDTO';

    private _systemconstantrootfiltermodelstrictdto: string;

    public static fromFull(source: SystemConstantRootFilterModelFullDTO): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: SystemConstantRootFilterModelRichDTO): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: SystemConstantRootFilterModelSimpleDTO): SystemConstantRootFilterModelStrictDTO {
        let e = new SystemConstantRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: SystemConstantRootFilterModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: SystemConstantRootFilterModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: SystemConstantRootFilterModelSimpleDTO): void {
    }

    public toNativeJson(): any {
        let result:any = {};
        return result;
    }

}

export class TargetSystemStrictDTO {
    public __type = 'TargetSystemStrictDTO';

    private _targetsystemstrictdto: string;

    public Id: Guid;

    public Name: string;

    public SubscriptionEnabled: boolean;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: TargetSystemFullDTO): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: TargetSystemRichDTO): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: TargetSystemSimpleDTO): TargetSystemStrictDTO {
        let e = new TargetSystemStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: TargetSystemFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: TargetSystemRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: TargetSystemSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
        this.SubscriptionEnabled = source.SubscriptionEnabled;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Name = this.Name;
        result.SubscriptionEnabled = this.SubscriptionEnabled;
        return result;
    }

}

export class TargetSystemRootFilterModelStrictDTO {
    public __type = 'TargetSystemRootFilterModelStrictDTO';

    private _targetsystemrootfiltermodelstrictdto: string;

    public IsMain: boolean;

    public IsRevision: boolean;

    public SubscriptionEnabled: boolean;

    public static fromFull(source: TargetSystemRootFilterModelFullDTO): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: TargetSystemRootFilterModelRichDTO): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: TargetSystemRootFilterModelSimpleDTO): TargetSystemRootFilterModelStrictDTO {
        let e = new TargetSystemRootFilterModelStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromFull(source: TargetSystemRootFilterModelFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: TargetSystemRootFilterModelRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: TargetSystemRootFilterModelSimpleDTO): void {
        this.IsMain = source.IsMain;
        this.IsRevision = source.IsRevision;
        this.SubscriptionEnabled = source.SubscriptionEnabled;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.IsMain = this.IsMain;
        result.IsRevision = this.IsRevision;
        result.SubscriptionEnabled = this.SubscriptionEnabled;
        return result;
    }

}

export class UserActionStrictDTO {
    public __type = 'UserActionStrictDTO';

    private _useractionstrictdto: string;

    public DomainType: DomainTypeIdentityDTO;

    public Id: Guid;

    public Name: string;

    public ObjectIdentities: UserActionObjectStrictDTO [];

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: UserActionFullDTO): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: UserActionRichDTO): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: UserActionSimpleDTO): UserActionStrictDTO {
        let e = new UserActionStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: UserActionFullDTO): void {
        this.fromSimple(source);
        if (source.DomainType) {
            this.DomainType = source.DomainType.Identity;
        }
    }

    public fromRich(source: UserActionRichDTO): void {
        this.fromFull(source);
        if (source.ObjectIdentities) {
            this.ObjectIdentities = source.ObjectIdentities.map(e => {
                return e.toStrict();
            });
        }
    }

    public fromSimple(source: UserActionSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
    }

    public toNativeJson(): any {
        let result:any = {};
        if (this.DomainType) {
            result.DomainType = this.DomainType.toNativeJson();
        }
        result.Id = this.Id;
        result.Name = this.Name;
        if (this.ObjectIdentities) {
            result.ObjectIdentities = this.ObjectIdentities.map(e => {
                return e.toNativeJson();
            });
        }
        return result;
    }

}

export class UserActionObjectStrictDTO {
    public __type = 'UserActionObjectStrictDTO';

    private _useractionobjectstrictdto: string;

    public Id: Guid;

    public Name: string;

    public ObjectIdentity: Guid;

    public static fromBaseAuditPersistent(source: BaseAuditPersistentDTO): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromBaseAuditPersistent(source);
        return e;
    }

    public static fromBasePersistent(source: BasePersistentDTO): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromBasePersistent(source);
        return e;
    }

    public static fromFull(source: UserActionObjectFullDTO): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromFull(source);
        return e;
    }

    public static fromRich(source: UserActionObjectRichDTO): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromRich(source);
        return e;
    }

    public static fromSimple(source: UserActionObjectSimpleDTO): UserActionObjectStrictDTO {
        let e = new UserActionObjectStrictDTO();
        e.fromSimple(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromFull(source: UserActionObjectFullDTO): void {
        this.fromSimple(source);
    }

    public fromRich(source: UserActionObjectRichDTO): void {
        this.fromFull(source);
    }

    public fromSimple(source: UserActionObjectSimpleDTO): void {
        this.fromBaseAuditPersistent(source);
        this.Name = source.Name;
        this.ObjectIdentity = source.ObjectIdentity;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Id = this.Id;
        result.Name = this.Name;
        result.ObjectIdentity = this.ObjectIdentity;
        return result;
    }

}

export class TypeMetadata {
    public __type = 'TypeMetadata';

    private _typemetadata: string;

    public Role: TypeRole;

    public Type: TypeHeader;

    public static fromJs(source: any): TypeMetadata {
        if (!(source)) {
            return undefined;
        }
        let e = new TypeMetadata();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        this.Role = source.Role;
        this.Type = TypeHeader.fromJs(source.Type);
    }

    public toJs(): TypeMetadata {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.Role = this.Role;
        if (this.Type) {
            result.Type = this.Type.toNativeJson();
        }
        return result;
    }

}

export class TypeHeader {
    public __type = 'TypeHeader';

    private _typeheader: string;

    public GenerateName: string;

    public Name: string;

    public static fromJs(source: any): TypeHeader {
        if (!(source)) {
            return undefined;
        }
        let e = new TypeHeader();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
        this.GenerateName = source.GenerateName;
        this.Name = source.Name;
    }

    public toJs(): TypeHeader {
        return this;
    }

    public toNativeJson(): any {
        let result:any = {};
        result.GenerateName = this.GenerateName;
        result.Name = this.Name;
        return result;
    }

}

export enum ControlSettingParamType {
    ActiveOperation = 15,
    From = 13,
    Height = 16,
    IsActive = 7,
    NeedApply = 11,
    None = 0,
    Order = 10,
    SearchState = 12,
    SortDirection = 2,
    SortOrder = 3,
    StringFilterMode = 6,
    To = 14,
    Value = 8,
    Visible = 9,
    Width = 1,
    XLocation = 4,
    YLocation = 5,
}

export enum ControlSettingsType {
    Column = 0,
    Composite = 1,
    Connector = 3,
    Filter = 4,
    MultiValueFilter = 5,
    PropertyUnion = 2,
    RangeValueFilter = 7,
    StringValueFilter = 6,
}

export enum NamedLockOperation {
    ProcessModifications = 2,
    UpdateDomainTypeLock = 0,
    UpdateSequence = 1,
}

export enum QueueProgressStatus {
    Processed = 2,
    Processing = 1,
    Unprocessed = 0,
}

export enum ConfigurationOperationContext {
    All = 31,
    PreSave = 1,
    Save = 17,
}

export enum ConfigurationSecurityOperationCode {
    Disabled = 0,
    DisplayInternalError = 16,
    ExceptionMessageView = 1,
    ForceDomainTypeEvent = 8,
    ProcessModifications = 17,
    QueueMonitoring = 18,
    ReportEdit = 12,
    ReportGeneration = 13,
    ReportView = 11,
    SequenceEdit = 10,
    SequenceView = 9,
    SubscriptionEdit = 3,
    SubscriptionView = 2,
    SystemConstantEdit = 5,
    SystemConstantView = 4,
    SystemIntegration = 19,
    TargetSystemEdit = 7,
    TargetSystemView = 6,
    UserActionOpenModule = 14,
    UserActionView = 15,
}

export enum RecepientsSelectorMode {
    GenerationExceptRoles = 2,
    Intersect = 3,
    RolesExceptGeneration = 1,
    Union = 0,
}

export enum RunRegularJobMode {
    RecalculateNextStartTime = 0,
    Silent = 1,
}

export enum SheduleValueType {
    Day = 1,
    Minutes = 0,
    Month = 3,
    Week = 2,
    Year = 4,
}

export enum SubscriptionType {
    All = 7,
    Continue = 2,
    ContinueOrRemove = 3,
    Create = 4,
    CreateOrContinue = 6,
    Remove = 1,
}

export enum DomainObjectChangeType {
    Create = 1,
    Delete = 3,
    Unknown = 0,
    Update = 2,
}

export enum ReportType {
    Custom = 1,
    Persistent = 0,
}

export enum ModificationType {
    Remove = 1,
    Save = 0,
}

export enum TypeRole {
    Domain = 2,
    Enum = 1,
    Other = 3,
    Primitive = 0,
}

