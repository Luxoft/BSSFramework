//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Attachments.BLL
{
    
    
    public partial class AttachmentsMainFetchServiceBase : Framework.DomainDriven.MainFetchServiceBase<Framework.Attachments.Domain.PersistentDomainObjectBase>
    {
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Attachments.Domain.Attachment> GetAttachmentContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.Attachment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.Attachment>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.Attachment>(fetchRootRule => fetchRootRule.SelectNested(attachment => attachment.Container));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.Attachment>(
                    fetchRootRule => fetchRootRule.SelectNested(attachment => attachment.Container),
                    fetchRootRule => fetchRootRule.SelectMany(attachment => attachment.Tags));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Attachments.Domain.AttachmentContainer> GetAttachmentContainerContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.AttachmentContainer>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.AttachmentContainer>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.AttachmentContainer>(fetchRootRule => fetchRootRule.SelectNested(attachmentContainer => attachmentContainer.DomainType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.AttachmentContainer>(
                    fetchRootRule => fetchRootRule.SelectMany(attachmentContainer => attachmentContainer.Attachments).SelectMany(attachment => attachment.Tags),
                    fetchRootRule => fetchRootRule.SelectNested(attachmentContainer => attachmentContainer.DomainType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Attachments.Domain.AttachmentTag> GetAttachmentTagContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.AttachmentTag>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.AttachmentTag>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.AttachmentTag>(fetchRootRule => fetchRootRule.SelectNested(attachmentTag => attachmentTag.Attachment));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.AttachmentTag>(fetchRootRule => fetchRootRule.SelectNested(attachmentTag => attachmentTag.Attachment));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected override Framework.DomainDriven.IFetchContainer<TDomainObject> GetContainer<TDomainObject>(Framework.Transfering.ViewDTOType rule)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAttachmentContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAttachmentContainerContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.AttachmentTag)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetAttachmentTagContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.DomainType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetDomainTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Attachments.Domain.TargetSystem)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetTargetSystemContainer(rule)));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("TDomainObject");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Attachments.Domain.DomainType> GetDomainTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.DomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.DomainType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.DomainType>(fetchRootRule => fetchRootRule.SelectNested(domainType => domainType.TargetSystem));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.DomainType>(fetchRootRule => fetchRootRule.SelectNested(domainType => domainType.TargetSystem));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Attachments.Domain.TargetSystem> GetTargetSystemContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Attachments.Domain.TargetSystem>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Attachments.Domain.TargetSystem>(fetchRootRule => fetchRootRule.SelectMany(targetSystem => targetSystem.DomainTypes));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
    }
    
    public partial class AttachmentsMainFetchService : Framework.Attachments.BLL.AttachmentsMainFetchServiceBase
    {
    }
}
