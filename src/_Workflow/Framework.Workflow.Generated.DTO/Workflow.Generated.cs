//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Workflow.Generated.DTO
{
    
    
    public partial interface IWorkflowClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapFullToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.CommandFullDTO currentSource);
        
        void MapFullToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.CommandEventFullDTO currentSource);
        
        void MapFullToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.CommandMetadataFullDTO currentSource);
        
        void MapFullToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.CommandParameterFullDTO currentSource);
        
        void MapFullToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO currentSource);
        
        void MapFullToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateFullDTO currentSource);
        
        void MapFullToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO currentSource);
        
        void MapFullToStrictForExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO target, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO currentSource);
        
        void MapFullToStrictForGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO currentSource);
        
        void MapFullToStrictForMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO currentSource);
        
        void MapFullToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFullDTO currentSource);
        
        void MapFullToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO currentSource);
        
        void MapFullToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO currentSource);
        
        void MapFullToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.RoleFullDTO currentSource);
        
        void MapFullToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO currentSource);
        
        void MapFullToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.StateFullDTO currentSource);
        
        void MapFullToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.StateBaseFullDTO currentSource);
        
        void MapFullToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO currentSource);
        
        void MapFullToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO currentSource);
        
        void MapFullToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.TaskFullDTO currentSource);
        
        void MapFullToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.TaskInstanceFullDTO currentSource);
        
        void MapFullToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.TaskMetadataFullDTO currentSource);
        
        void MapFullToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionFullDTO currentSource);
        
        void MapFullToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionActionFullDTO currentSource);
        
        void MapFullToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowFullDTO currentSource);
        
        void MapFullToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO currentSource);
        
        void MapFullToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO currentSource);
        
        void MapFullToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO currentSource);
        
        void MapFullToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO currentSource);
        
        void MapFullToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO currentSource);
        
        void MapFullToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO currentSource);
        
        void MapRichToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.CommandRichDTO currentSource);
        
        void MapRichToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.CommandEventRichDTO currentSource);
        
        void MapRichToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.CommandMetadataRichDTO currentSource);
        
        void MapRichToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.CommandParameterRichDTO currentSource);
        
        void MapRichToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO currentSource);
        
        void MapRichToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateRichDTO currentSource);
        
        void MapRichToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO currentSource);
        
        void MapRichToStrictForExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO target, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO currentSource);
        
        void MapRichToStrictForGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO currentSource);
        
        void MapRichToStrictForMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO currentSource);
        
        void MapRichToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateRichDTO currentSource);
        
        void MapRichToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO currentSource);
        
        void MapRichToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO currentSource);
        
        void MapRichToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.RoleRichDTO currentSource);
        
        void MapRichToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO currentSource);
        
        void MapRichToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.StateRichDTO currentSource);
        
        void MapRichToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.StateBaseRichDTO currentSource);
        
        void MapRichToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO currentSource);
        
        void MapRichToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO currentSource);
        
        void MapRichToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.TaskRichDTO currentSource);
        
        void MapRichToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.TaskInstanceRichDTO currentSource);
        
        void MapRichToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.TaskMetadataRichDTO currentSource);
        
        void MapRichToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionRichDTO currentSource);
        
        void MapRichToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionActionRichDTO currentSource);
        
        void MapRichToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowRichDTO currentSource);
        
        void MapRichToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO currentSource);
        
        void MapRichToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO currentSource);
        
        void MapRichToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO currentSource);
        
        void MapRichToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO currentSource);
        
        void MapRichToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO currentSource);
        
        void MapRichToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO currentSource);
        
        void MapSimpleToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.CommandSimpleDTO currentSource);
        
        void MapSimpleToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.CommandEventSimpleDTO currentSource);
        
        void MapSimpleToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO currentSource);
        
        void MapSimpleToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO currentSource);
        
        void MapSimpleToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO currentSource);
        
        void MapSimpleToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO currentSource);
        
        void MapSimpleToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO currentSource);
        
        void MapSimpleToStrictForExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO target, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO currentSource);
        
        void MapSimpleToStrictForGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO currentSource);
        
        void MapSimpleToStrictForMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO currentSource);
        
        void MapSimpleToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO currentSource);
        
        void MapSimpleToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO currentSource);
        
        void MapSimpleToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO currentSource);
        
        void MapSimpleToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.RoleSimpleDTO currentSource);
        
        void MapSimpleToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO currentSource);
        
        void MapSimpleToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.StateSimpleDTO currentSource);
        
        void MapSimpleToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.StateBaseSimpleDTO currentSource);
        
        void MapSimpleToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO currentSource);
        
        void MapSimpleToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO currentSource);
        
        void MapSimpleToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.TaskSimpleDTO currentSource);
        
        void MapSimpleToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO currentSource);
        
        void MapSimpleToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO currentSource);
        
        void MapSimpleToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionSimpleDTO currentSource);
        
        void MapSimpleToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO currentSource);
        
        void MapSimpleToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO currentSource);
    }
    
    public abstract partial class WorkflowClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Active = source.Active;
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Version = source.Version;
        }
        
        public virtual void MapBasePersistentToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapBasePersistentToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.BasePersistentDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Id = source.Id;
        }
        
        public virtual void MapFullToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.CommandFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.ExecuteAction, null))
            {
                target.ExecuteAction = source.ExecuteAction.Identity;
            }
            else
            {
                target.ExecuteAction = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.CommandEventFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.CommandMetadataFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.CommandParameterFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Type, null))
            {
                target.Type = source.Type.Identity;
            }
            else
            {
                target.Type = default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Role, null))
            {
                target.Role = source.Role.Identity;
            }
            else
            {
                target.Role = default(Framework.Workflow.Generated.DTO.RoleIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Condition, null))
            {
                target.Condition = source.Condition.Identity;
            }
            else
            {
                target.Condition = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO target, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Definition, null))
            {
                target.Definition = source.Definition.Identity;
            }
            else
            {
                target.Definition = default(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Command, null))
            {
                target.Command = source.Command.Identity;
            }
            else
            {
                target.Command = default(Framework.Workflow.Generated.DTO.CommandIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Condition, null))
            {
                target.Condition = source.Condition.Identity;
            }
            else
            {
                target.Condition = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Factory, null))
            {
                target.Factory = source.Factory.Identity;
            }
            else
            {
                target.Factory = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
            if (!object.ReferenceEquals(source.SubWorkflow, null))
            {
                target.SubWorkflow = source.SubWorkflow.Identity;
            }
            else
            {
                target.SubWorkflow = default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.RoleFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.CustomSecurityProvider, null))
            {
                target.CustomSecurityProvider = source.CustomSecurityProvider.Identity;
            }
            else
            {
                target.CustomSecurityProvider = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Condition, null))
            {
                target.Condition = source.Condition.Identity;
            }
            else
            {
                target.Condition = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
            if (!object.ReferenceEquals(source.Factory, null))
            {
                target.Factory = source.Factory.Identity;
            }
            else
            {
                target.Factory = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.StateFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.StateBaseFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Condition, null))
            {
                target.Condition = source.Condition.Identity;
            }
            else
            {
                target.Condition = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Condition, null))
            {
                target.Condition = source.Condition.Identity;
            }
            else
            {
                target.Condition = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.TaskFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.TaskInstanceFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.TaskMetadataFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.To, null))
            {
                target.To = source.To.Identity;
            }
            else
            {
                target.To = default(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO);
            }
            if (!object.ReferenceEquals(source.TriggerEvent, null))
            {
                target.TriggerEvent = source.TriggerEvent.Identity;
            }
            else
            {
                target.TriggerEvent = default(Framework.Workflow.Generated.DTO.EventIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionActionFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Action, null))
            {
                target.Action = source.Action.Identity;
            }
            else
            {
                target.Action = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.ActiveCondition, null))
            {
                target.ActiveCondition = source.ActiveCondition.Identity;
            }
            else
            {
                target.ActiveCondition = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapFullToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Type, null))
            {
                target.Type = source.Type.Identity;
            }
            else
            {
                target.Type = default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO);
            }
        }
        
        public virtual void MapFullToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Elements, null))
            {
                target.Elements = source.Elements.Identity;
            }
            else
            {
                target.Elements = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
            if (!object.ReferenceEquals(source.Path, null))
            {
                target.Path = source.Path.Identity;
            }
            else
            {
                target.Path = default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO);
            }
            if (!object.ReferenceEquals(source.Type, null))
            {
                target.Type = source.Type.Identity;
            }
            else
            {
                target.Type = default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO);
            }
        }
        
        public virtual void MapRichToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.CommandRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Event, null))
            {
                target.Event = new Framework.Workflow.Generated.DTO.CommandEventStrictDTO(source.Event);
            }
            else
            {
                target.Event = null;
            }
            if (!object.ReferenceEquals(source.Metadatas, null))
            {
                target.Metadatas = Framework.Core.EnumerableExtensions.ToList(source.Metadatas, commandMetadata => new Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO(commandMetadata));
            }
            if (!object.ReferenceEquals(source.Parameters, null))
            {
                target.Parameters = Framework.Core.EnumerableExtensions.ToList(source.Parameters, commandParameter => new Framework.Workflow.Generated.DTO.CommandParameterStrictDTO(commandParameter));
            }
            if (!object.ReferenceEquals(source.RoleAccesses, null))
            {
                target.RoleAccesses = Framework.Core.EnumerableExtensions.ToList(source.RoleAccesses, commandRoleAccess => new Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO(commandRoleAccess));
            }
        }
        
        public virtual void MapRichToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.CommandEventRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.CommandMetadataRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.CommandParameterRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.FalseEvent, null))
            {
                target.FalseEvent = new Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO(source.FalseEvent);
            }
            else
            {
                target.FalseEvent = null;
            }
            if (!object.ReferenceEquals(source.TrueEvent, null))
            {
                target.TrueEvent = new Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO(source.TrueEvent);
            }
            else
            {
                target.TrueEvent = null;
            }
        }
        
        public virtual void MapRichToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO target, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Parameters, null))
            {
                target.Parameters = Framework.Core.EnumerableExtensions.ToList(source.Parameters, executeCommandRequestParameter => new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO(executeCommandRequestParameter));
            }
            if (!object.ReferenceEquals(source.TaskInstances, null))
            {
                target.TaskInstances = Framework.Core.EnumerableExtensions.ToList(source.TaskInstances, taskInstance => taskInstance.Identity);
            }
        }
        
        public virtual void MapRichToStrictForMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Groups, null))
            {
                target.Groups = Framework.Core.EnumerableExtensions.ToList(source.Groups, groupExecuteCommandRequest => new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO(groupExecuteCommandRequest));
            }
        }
        
        public virtual void MapRichToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.FinalEvents, null))
            {
                target.FinalEvents = Framework.Core.EnumerableExtensions.ToList(source.FinalEvents, parallelStateFinalEvent => new Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO(parallelStateFinalEvent));
            }
            if (!object.ReferenceEquals(source.StartItems, null))
            {
                target.StartItems = Framework.Core.EnumerableExtensions.ToList(source.StartItems, parallelStateStartItem => new Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO(parallelStateStartItem));
            }
        }
        
        public virtual void MapRichToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.RoleRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.StateRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.DomainObjectEvents, null))
            {
                target.DomainObjectEvents = Framework.Core.EnumerableExtensions.ToList(source.DomainObjectEvents, stateDomainObjectEvent => new Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO(stateDomainObjectEvent));
            }
            if (!object.ReferenceEquals(source.Tasks, null))
            {
                target.Tasks = Framework.Core.EnumerableExtensions.ToList(source.Tasks, task => new Framework.Workflow.Generated.DTO.TaskStrictDTO(task));
            }
            if (!object.ReferenceEquals(source.TimeoutEvents, null))
            {
                target.TimeoutEvents = Framework.Core.EnumerableExtensions.ToList(source.TimeoutEvents, stateTimeoutEvent => new Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO(stateTimeoutEvent));
            }
        }
        
        public virtual void MapRichToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.StateBaseRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.TaskRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Commands, null))
            {
                target.Commands = Framework.Core.EnumerableExtensions.ToList(source.Commands, command => new Framework.Workflow.Generated.DTO.CommandStrictDTO(command));
            }
            if (!object.ReferenceEquals(source.Metadatas, null))
            {
                target.Metadatas = Framework.Core.EnumerableExtensions.ToList(source.Metadatas, taskMetadata => new Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO(taskMetadata));
            }
        }
        
        public virtual void MapRichToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.TaskInstanceRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.TaskMetadataRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.PostActions, null))
            {
                target.PostActions = Framework.Core.EnumerableExtensions.ToList(source.PostActions, transitionAction => new Framework.Workflow.Generated.DTO.TransitionActionStrictDTO(transitionAction));
            }
        }
        
        public virtual void MapRichToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionActionRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.ConditionStates, null))
            {
                target.ConditionStates = Framework.Core.EnumerableExtensions.ToList(source.ConditionStates, conditionState => new Framework.Workflow.Generated.DTO.ConditionStateStrictDTO(conditionState));
            }
            if (!object.ReferenceEquals(source.Lambdas, null))
            {
                target.Lambdas = Framework.Core.EnumerableExtensions.ToList(source.Lambdas, workflowLambda => new Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO(workflowLambda));
            }
            if (!object.ReferenceEquals(source.Metadatas, null))
            {
                target.Metadatas = Framework.Core.EnumerableExtensions.ToList(source.Metadatas, workflowMetadata => new Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO(workflowMetadata));
            }
            if (!object.ReferenceEquals(source.ParallelStates, null))
            {
                target.ParallelStates = Framework.Core.EnumerableExtensions.ToList(source.ParallelStates, parallelState => new Framework.Workflow.Generated.DTO.ParallelStateStrictDTO(parallelState));
            }
            if (!object.ReferenceEquals(source.Parameters, null))
            {
                target.Parameters = Framework.Core.EnumerableExtensions.ToList(source.Parameters, workflowParameter => new Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO(workflowParameter));
            }
            if (!object.ReferenceEquals(source.Roles, null))
            {
                target.Roles = Framework.Core.EnumerableExtensions.ToList(source.Roles, role => new Framework.Workflow.Generated.DTO.RoleStrictDTO(role));
            }
            if (!object.ReferenceEquals(source.Sources, null))
            {
                target.Sources = Framework.Core.EnumerableExtensions.ToList(source.Sources, workflowSource => new Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO(workflowSource));
            }
            if (!object.ReferenceEquals(source.StartConditions, null))
            {
                target.StartConditions = Framework.Core.EnumerableExtensions.ToList(source.StartConditions, startWorkflowDomainObjectCondition => new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO(startWorkflowDomainObjectCondition));
            }
            if (!object.ReferenceEquals(source.States, null))
            {
                target.States = Framework.Core.EnumerableExtensions.ToList(source.States, state => new Framework.Workflow.Generated.DTO.StateStrictDTO(state));
            }
            if (!object.ReferenceEquals(source.SubWorkflows, null))
            {
                target.SubWorkflows = Framework.Core.EnumerableExtensions.ToList(source.SubWorkflows, workflow => new Framework.Workflow.Generated.DTO.WorkflowStrictDTO(workflow));
            }
            if (!object.ReferenceEquals(source.Transitions, null))
            {
                target.Transitions = Framework.Core.EnumerableExtensions.ToList(source.Transitions, transition => new Framework.Workflow.Generated.DTO.TransitionStrictDTO(transition));
            }
        }
        
        public virtual void MapRichToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (!object.ReferenceEquals(source.Watchers, null))
            {
                target.Watchers = Framework.Core.EnumerableExtensions.ToList(source.Watchers, workflowInstanceWatcher => new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO(workflowInstanceWatcher));
            }
        }
        
        public virtual void MapRichToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapRichToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO target, Framework.Workflow.Generated.DTO.CommandSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.OrderIndex = source.OrderIndex;
        }
        
        public virtual void MapSimpleToStrictForCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO target, Framework.Workflow.Generated.DTO.CommandEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
        }
        
        public virtual void MapSimpleToStrictForCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO target, Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO target, Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AllowNull = source.AllowNull;
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO target, Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AutoSetStatePropertyName = source.AutoSetStatePropertyName;
            target.AutoSetStatePropertyValue = source.AutoSetStatePropertyValue;
            target.Description = source.Description;
            target.IsInitial = source.IsInitial;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO target, Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
        }
        
        public virtual void MapSimpleToStrictForExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO target, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO target, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AutoSetStatePropertyName = source.AutoSetStatePropertyName;
            target.AutoSetStatePropertyValue = source.AutoSetStatePropertyValue;
            target.Description = source.Description;
            target.IsInitial = source.IsInitial;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.OrderIndex = source.OrderIndex;
        }
        
        public virtual void MapSimpleToStrictForParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO target, Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForRole(Framework.Workflow.Generated.DTO.RoleStrictDTO target, Framework.Workflow.Generated.DTO.RoleSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.SecurityOperationId = source.SecurityOperationId;
        }
        
        public virtual void MapSimpleToStrictForStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO target, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForState(Framework.Workflow.Generated.DTO.StateStrictDTO target, Framework.Workflow.Generated.DTO.StateSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AutoSetStatePropertyName = source.AutoSetStatePropertyName;
            target.AutoSetStatePropertyValue = source.AutoSetStatePropertyValue;
            target.Description = source.Description;
            target.IsFinal = source.IsFinal;
            target.IsInitial = source.IsInitial;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO target, Framework.Workflow.Generated.DTO.StateBaseSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AutoSetStatePropertyName = source.AutoSetStatePropertyName;
            target.AutoSetStatePropertyValue = source.AutoSetStatePropertyValue;
            target.Description = source.Description;
            target.IsInitial = source.IsInitial;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO target, Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO target, Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForTask(Framework.Workflow.Generated.DTO.TaskStrictDTO target, Framework.Workflow.Generated.DTO.TaskSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO target, Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO target, Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO target, Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.OrderIndex = source.OrderIndex;
        }
        
        public virtual void MapSimpleToStrictForWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AutoRemoveWithDomainObject = source.AutoRemoveWithDomainObject;
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
        }
        
        public virtual void MapSimpleToStrictForWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Login = source.Login;
        }
        
        public virtual void MapSimpleToStrictForWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
            target.Value = source.Value;
        }
        
        public virtual void MapSimpleToStrictForWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.AllowNull = source.AllowNull;
            target.Description = source.Description;
            target.Name = source.Name;
        }
        
        public virtual void MapSimpleToStrictForWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO target, Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            target.Description = source.Description;
            target.Name = source.Name;
        }
    }
    
    public partial class WorkflowClientPrimitiveDTOMappingService : Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingServiceBase
    {
        
        private static Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService _default = new Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService();
        
        public static Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService Default
        {
            get
            {
                return Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService._default;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Command), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class CommandIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.CommandIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.CommandIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.CommandIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public CommandIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public CommandIdentityDTO(Framework.Workflow.Generated.DTO.CommandSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public CommandIdentityDTO(Framework.Workflow.Domain.Definition.Command domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public CommandIdentityDTO()
        {
        }
        
        public CommandIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.CommandIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.CommandIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.CommandIdentityDTO identity1, Framework.Workflow.Generated.DTO.CommandIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.CommandIdentityDTO identity1, Framework.Workflow.Generated.DTO.CommandIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.CommandIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.CommandIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.CommandIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.CommandIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.Command ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommand(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandEvent), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class CommandEventIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.CommandEventIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.CommandEventIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.CommandEventIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public CommandEventIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public CommandEventIdentityDTO(Framework.Workflow.Generated.DTO.CommandEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public CommandEventIdentityDTO(Framework.Workflow.Domain.Definition.CommandEvent domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public CommandEventIdentityDTO()
        {
        }
        
        public CommandEventIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.CommandEventIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.CommandEventIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.CommandEventIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.CommandEventIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.CommandEventIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.CommandEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandEvent(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandParameter), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class CommandParameterIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public CommandParameterIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public CommandParameterIdentityDTO(Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public CommandParameterIdentityDTO(Framework.Workflow.Domain.Definition.CommandParameter domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public CommandParameterIdentityDTO()
        {
        }
        
        public CommandParameterIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO identity1, Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO identity1, Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.CommandParameter ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandParameter(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionState), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class ConditionStateIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public ConditionStateIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public ConditionStateIdentityDTO(Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public ConditionStateIdentityDTO(Framework.Workflow.Domain.Definition.ConditionState domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public ConditionStateIdentityDTO()
        {
        }
        
        public ConditionStateIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO identity1, Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO identity1, Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.ConditionState ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToConditionState(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class ConditionStateEventIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public ConditionStateEventIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public ConditionStateEventIdentityDTO(Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public ConditionStateEventIdentityDTO(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public ConditionStateEventIdentityDTO()
        {
        }
        
        public ConditionStateEventIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.ConditionStateEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToConditionStateEvent(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class DomainTypeIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public DomainTypeIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public DomainTypeIdentityDTO(Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public DomainTypeIdentityDTO(Framework.Workflow.Domain.Definition.DomainType domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public DomainTypeIdentityDTO()
        {
        }
        
        public DomainTypeIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO identity1, Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO identity1, Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.DomainType ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToDomainType(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Event), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class EventIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.EventIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.EventIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.EventIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public EventIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public EventIdentityDTO(Framework.Workflow.Generated.DTO.EventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public EventIdentityDTO(Framework.Workflow.Domain.Definition.Event domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public EventIdentityDTO()
        {
        }
        
        public EventIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.EventIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.EventIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.EventIdentityDTO identity1, Framework.Workflow.Generated.DTO.EventIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.EventIdentityDTO identity1, Framework.Workflow.Generated.DTO.EventIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.EventIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.EventIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.EventIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.EventIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.Event ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToEvent(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelState), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class ParallelStateIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public ParallelStateIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public ParallelStateIdentityDTO(Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public ParallelStateIdentityDTO(Framework.Workflow.Domain.Definition.ParallelState domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public ParallelStateIdentityDTO()
        {
        }
        
        public ParallelStateIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO identity1, Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO identity1, Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.ParallelState ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToParallelState(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class ParallelStateFinalEventIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public ParallelStateFinalEventIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public ParallelStateFinalEventIdentityDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public ParallelStateFinalEventIdentityDTO(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public ParallelStateFinalEventIdentityDTO()
        {
        }
        
        public ParallelStateFinalEventIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToParallelStateFinalEvent(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Role), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class RoleIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.RoleIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.RoleIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.RoleIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public RoleIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public RoleIdentityDTO(Framework.Workflow.Generated.DTO.RoleSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public RoleIdentityDTO(Framework.Workflow.Domain.Definition.Role domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public RoleIdentityDTO()
        {
        }
        
        public RoleIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.RoleIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.RoleIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.RoleIdentityDTO identity1, Framework.Workflow.Generated.DTO.RoleIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.RoleIdentityDTO identity1, Framework.Workflow.Generated.DTO.RoleIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.RoleIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.RoleIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.RoleIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.RoleIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.Role ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToRole(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class StartWorkflowDomainObjectConditionIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public StartWorkflowDomainObjectConditionIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public StartWorkflowDomainObjectConditionIdentityDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public StartWorkflowDomainObjectConditionIdentityDTO(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public StartWorkflowDomainObjectConditionIdentityDTO()
        {
        }
        
        public StartWorkflowDomainObjectConditionIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO identity1, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO identity1, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStartWorkflowDomainObjectCondition(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.State), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class StateIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.StateIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.StateIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.StateIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public StateIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public StateIdentityDTO(Framework.Workflow.Generated.DTO.StateSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public StateIdentityDTO(Framework.Workflow.Domain.Definition.State domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public StateIdentityDTO()
        {
        }
        
        public StateIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.StateIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.StateIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.StateIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.StateIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.StateIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.StateIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.StateIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.StateIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.State ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToState(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class StateBaseIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.StateBaseIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.StateBaseIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.StateBaseIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public StateBaseIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public StateBaseIdentityDTO(Framework.Workflow.Generated.DTO.StateBaseSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public StateBaseIdentityDTO(Framework.Workflow.Domain.Definition.StateBase domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public StateBaseIdentityDTO()
        {
        }
        
        public StateBaseIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.StateBaseIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.StateBaseIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateBaseIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateBaseIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.StateBaseIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.StateBase ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateBase(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class StateDomainObjectEventIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public StateDomainObjectEventIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public StateDomainObjectEventIdentityDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public StateDomainObjectEventIdentityDTO(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public StateDomainObjectEventIdentityDTO()
        {
        }
        
        public StateDomainObjectEventIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateDomainObjectEvent(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class StateTimeoutEventIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public StateTimeoutEventIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public StateTimeoutEventIdentityDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public StateTimeoutEventIdentityDTO(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public StateTimeoutEventIdentityDTO()
        {
        }
        
        public StateTimeoutEventIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.StateTimeoutEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateTimeoutEvent(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TargetSystem), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class TargetSystemIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public TargetSystemIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public TargetSystemIdentityDTO(Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public TargetSystemIdentityDTO(Framework.Workflow.Domain.Definition.TargetSystem domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public TargetSystemIdentityDTO()
        {
        }
        
        public TargetSystemIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO identity1, Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO identity1, Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.TargetSystem ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTargetSystem(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Task), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class TaskIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.TaskIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.TaskIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.TaskIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public TaskIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public TaskIdentityDTO(Framework.Workflow.Generated.DTO.TaskSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public TaskIdentityDTO(Framework.Workflow.Domain.Definition.Task domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public TaskIdentityDTO()
        {
        }
        
        public TaskIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.TaskIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.TaskIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.TaskIdentityDTO identity1, Framework.Workflow.Generated.DTO.TaskIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.TaskIdentityDTO identity1, Framework.Workflow.Generated.DTO.TaskIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.TaskIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.TaskIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.TaskIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.TaskIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.Task ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTask(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Transition), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class TransitionIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.TransitionIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.TransitionIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.TransitionIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public TransitionIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public TransitionIdentityDTO(Framework.Workflow.Generated.DTO.TransitionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public TransitionIdentityDTO(Framework.Workflow.Domain.Definition.Transition domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public TransitionIdentityDTO()
        {
        }
        
        public TransitionIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.TransitionIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.TransitionIdentityDTO identity1, Framework.Workflow.Generated.DTO.TransitionIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.TransitionIdentityDTO identity1, Framework.Workflow.Generated.DTO.TransitionIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.TransitionIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.TransitionIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.TransitionIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.TransitionIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.Transition ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTransition(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class WorkflowIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.WorkflowIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public WorkflowIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public WorkflowIdentityDTO(Framework.Workflow.Generated.DTO.WorkflowSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public WorkflowIdentityDTO(Framework.Workflow.Domain.Definition.Workflow domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public WorkflowIdentityDTO()
        {
        }
        
        public WorkflowIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.WorkflowIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.Workflow ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflow(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowLambda), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class WorkflowLambdaIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public WorkflowLambdaIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public WorkflowLambdaIdentityDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public WorkflowLambdaIdentityDTO(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public WorkflowLambdaIdentityDTO()
        {
        }
        
        public WorkflowLambdaIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowLambda ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowLambda(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowParameter), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class WorkflowParameterIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public WorkflowParameterIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public WorkflowParameterIdentityDTO(Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public WorkflowParameterIdentityDTO(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public WorkflowParameterIdentityDTO()
        {
        }
        
        public WorkflowParameterIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowParameter ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowParameter(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class WorkflowSourceIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public WorkflowSourceIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public WorkflowSourceIdentityDTO(Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public WorkflowSourceIdentityDTO(Framework.Workflow.Domain.Definition.WorkflowSource domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public WorkflowSourceIdentityDTO()
        {
        }
        
        public WorkflowSourceIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowSource ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowSource(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.StateInstance), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class StateInstanceIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public StateInstanceIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public StateInstanceIdentityDTO(Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public StateInstanceIdentityDTO(Framework.Workflow.Domain.Runtime.StateInstance domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public StateInstanceIdentityDTO()
        {
        }
        
        public StateInstanceIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Runtime.StateInstance ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateInstance(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class TaskInstanceIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public TaskInstanceIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public TaskInstanceIdentityDTO(Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public TaskInstanceIdentityDTO(Framework.Workflow.Domain.Runtime.TaskInstance domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public TaskInstanceIdentityDTO()
        {
        }
        
        public TaskInstanceIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Runtime.TaskInstance ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTaskInstance(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TransitionInstance), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class TransitionInstanceIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public TransitionInstanceIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public TransitionInstanceIdentityDTO(Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public TransitionInstanceIdentityDTO(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public TransitionInstanceIdentityDTO()
        {
        }
        
        public TransitionInstanceIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Runtime.TransitionInstance ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTransitionInstance(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), "IdentityDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [Framework.Workflow.WorkflowEditDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowEdit)]
    [Framework.Workflow.WorkflowViewDomainObjectAttribute(Framework.Workflow.WorkflowSecurityOperationCode.WorkflowView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public class WorkflowInstanceIdentityDTO : System.IEquatable<Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO EmptyField = new Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO(System.Guid.Empty);
        
        private System.Guid _id;
        
        public WorkflowInstanceIdentityDTO(System.Guid id)
        {
            this._id = id;
        }
        
        public WorkflowInstanceIdentityDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this._id = source.Id;
        }
        
        public WorkflowInstanceIdentityDTO(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject)
        {
            if (object.ReferenceEquals(domainObject, null))
            {
                throw new System.ArgumentNullException("domainObject");
            }
            this._id = domainObject.Id;
        }
        
        public WorkflowInstanceIdentityDTO()
        {
        }
        
        public WorkflowInstanceIdentityDTO(string id) : 
                this(new System.Guid(id))
        {
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO Empty
        {
            get
            {
                return Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO.EmptyField;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO identity1, Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO identity2)
        {
            return object.ReferenceEquals(identity1, identity2) || !object.ReferenceEquals(identity1, default(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO)) && identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO) == other.GetType()) && this.Equals(((Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO other)
        {
            return !object.ReferenceEquals(other, null) && (this._id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public Framework.Workflow.Domain.Runtime.WorkflowInstance ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowInstance(this);
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.DomainObjectBase), "BaseAbstractDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public abstract partial class BaseAbstractDTO
    {
        
        protected BaseAbstractDTO()
        {
        }
        
        protected BaseAbstractDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.DomainObjectBase domainObject)
        {
            mappingService.MapDomainObjectBase(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.PersistentDomainObjectBase), "BasePersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public abstract partial class BasePersistentDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private System.Guid _id;
        
        protected BasePersistentDTO()
        {
        }
        
        protected BasePersistentDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.PersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public bool IsNew
        {
            get
            {
                return (default(System.Guid) == this.Id);
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.AuditPersistentDomainObjectBase), "BaseAuditPersistentDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public abstract partial class BaseAuditPersistentDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO
    {
        
        private bool _active;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        private long _version;
        
        protected BaseAuditPersistentDTO()
        {
        }
        
        protected BaseAuditPersistentDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.AuditPersistentDomainObjectBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapAuditPersistentDomainObjectBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                this._createDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                this._createdBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                this._modifiedBy = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                this._modifyDate = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.AvailableCommandFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class AvailableCommandFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.AvailableCommandFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.AvailableCommandFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO _taskInstance;
        
        public AvailableCommandFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO TaskInstance
        {
            get
            {
                return this._taskInstance;
            }
            set
            {
                this._taskInstance = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.AvailableCommandFilterModel domainObject)
        {
            mappingService.MapAvailableCommandFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.AvailableCommandFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToAvailableCommandFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class AvailableTaskInstanceMainFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel>
    {
        
        private System.Guid _domainObjectId;
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _sourceType;
        
        public AvailableTaskInstanceMainFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainObjectId
        {
            get
            {
                return this._domainObjectId;
            }
            set
            {
                this._domainObjectId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO SourceType
        {
            get
            {
                return this._sourceType;
            }
            set
            {
                this._sourceType = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel domainObject)
        {
            mappingService.MapAvailableTaskInstanceMainFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToAvailableTaskInstanceMainFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class AvailableTaskInstanceUntypedMainFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel>
    {
        
        private System.Guid _domainObjectId;
        
        private string _sourceTypePath;
        
        public AvailableTaskInstanceUntypedMainFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainObjectId
        {
            get
            {
                return this._domainObjectId;
            }
            set
            {
                this._domainObjectId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceTypePath
        {
            get
            {
                return this._sourceTypePath;
            }
            set
            {
                this._sourceTypePath = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel domainObject)
        {
            mappingService.MapAvailableTaskInstanceUntypedMainFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToAvailableTaskInstanceUntypedMainFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.CommandEventRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandEventRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.CommandEventRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.CommandEventRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public CommandEventRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.CommandEventRootFilterModel domainObject)
        {
            mappingService.MapCommandEventRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.CommandEventRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandEventRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.CommandRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.CommandRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.CommandRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public CommandRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.CommandRootFilterModel domainObject)
        {
            mappingService.MapCommandRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.CommandRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ConditionStateRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ConditionStateRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ConditionStateRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public ConditionStateRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ConditionStateRootFilterModel domainObject)
        {
            mappingService.MapConditionStateRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.ConditionStateRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToConditionStateRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Command), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandIdentityDTO>
    {
        
        private string _name;
        
        public CommandVisualDTO()
        {
        }
        
        public CommandVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Command domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommand(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.CommandIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Command), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandRichDTO))]
    public partial class CommandSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        private int _orderIndex;
        
        public CommandSimpleDTO()
        {
        }
        
        public CommandSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Command domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommand(domainObject, this);
        }
        
        public CommandSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.CommandStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Command), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandRichDTO))]
    public partial class CommandFullDTO : Framework.Workflow.Generated.DTO.CommandSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _executeAction;
        
        private Framework.Workflow.Generated.DTO.StateSimpleDTO _state;
        
        private Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO _targetSystem;
        
        private Framework.Workflow.Generated.DTO.TaskSimpleDTO _task;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public CommandFullDTO()
        {
        }
        
        public CommandFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Command domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommand(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO ExecuteAction
        {
            get
            {
                return this._executeAction;
            }
            set
            {
                this._executeAction = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateSimpleDTO State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TaskSimpleDTO Task
        {
            get
            {
                return this._task;
            }
            set
            {
                this._task = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.CommandStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Command), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandRichDTO : Framework.Workflow.Generated.DTO.CommandFullDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandEventRichDTO _event;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataRichDTO> _metadatas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterRichDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO> _roleAccesses = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO>();
        
        public CommandRichDTO()
        {
        }
        
        public CommandRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Command domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommand(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandEventRichDTO Event
        {
            get
            {
                return this._event;
            }
            set
            {
                this._event = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataRichDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterRichDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO> RoleAccesses
        {
            get
            {
                return this._roleAccesses;
            }
            set
            {
                this._roleAccesses = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.CommandStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Command), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Command, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Command>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private Framework.Workflow.Generated.DTO.CommandEventStrictDTO _event;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _executeAction;
        
        private System.Guid _id;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO> _metadatas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO>();
        
        private string _name;
        
        private int _orderIndex;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterStrictDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO> _roleAccesses = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO>();
        
        private long _version;
        
        public CommandStrictDTO()
        {
        }
        
        public CommandStrictDTO(Framework.Workflow.Generated.DTO.CommandRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForCommand(this, source);
        }
        
        public CommandStrictDTO(Framework.Workflow.Generated.DTO.CommandRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandStrictDTO(Framework.Workflow.Generated.DTO.CommandFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForCommand(this, source);
        }
        
        public CommandStrictDTO(Framework.Workflow.Generated.DTO.CommandFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandStrictDTO(Framework.Workflow.Generated.DTO.CommandSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForCommand(this, source);
        }
        
        public CommandStrictDTO(Framework.Workflow.Generated.DTO.CommandSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForCommand(this, source);
        }
        
        private CommandStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForCommand(this, source);
        }
        
        private CommandStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandEventStrictDTO Event
        {
            get
            {
                return this._event;
            }
            set
            {
                this._event = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO ExecuteAction
        {
            get
            {
                return this._executeAction;
            }
            set
            {
                this._executeAction = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterStrictDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO> RoleAccesses
        {
            get
            {
                return this._roleAccesses;
            }
            set
            {
                this._roleAccesses = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Command domainObject)
        {
            mappingService.MapCommand(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.Command ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommand(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandEvent), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandEventVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandEventIdentityDTO>
    {
        
        private string _name;
        
        public CommandEventVisualDTO()
        {
        }
        
        public CommandEventVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandEvent(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.CommandEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandEvent), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandEventFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandEventRichDTO))]
    public partial class CommandEventSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandEventIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public CommandEventSimpleDTO()
        {
        }
        
        public CommandEventSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandEvent(domainObject, this);
        }
        
        public CommandEventSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.CommandEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandEvent), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandEventRichDTO))]
    public partial class CommandEventFullDTO : Framework.Workflow.Generated.DTO.CommandEventSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public CommandEventFullDTO()
        {
        }
        
        public CommandEventFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandEvent(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.CommandEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandEvent), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandEventRichDTO : Framework.Workflow.Generated.DTO.CommandEventFullDTO
    {
        
        public CommandEventRichDTO()
        {
        }
        
        public CommandEventRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandEvent(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.CommandEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandEvent), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandEventStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandEvent, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandEvent>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandEventIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private long _version;
        
        public CommandEventStrictDTO()
        {
        }
        
        public CommandEventStrictDTO(Framework.Workflow.Generated.DTO.CommandEventRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandEventFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForCommandEvent(this, source);
        }
        
        public CommandEventStrictDTO(Framework.Workflow.Generated.DTO.CommandEventRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandEventStrictDTO(Framework.Workflow.Generated.DTO.CommandEventFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandEventSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForCommandEvent(this, source);
        }
        
        public CommandEventStrictDTO(Framework.Workflow.Generated.DTO.CommandEventFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandEventStrictDTO(Framework.Workflow.Generated.DTO.CommandEventSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForCommandEvent(this, source);
        }
        
        public CommandEventStrictDTO(Framework.Workflow.Generated.DTO.CommandEventSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForCommandEvent(this, source);
        }
        
        private CommandEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForCommandEvent(this, source);
        }
        
        private CommandEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandEvent domainObject)
        {
            mappingService.MapCommandEvent(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.CommandEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandEvent(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandMetadata), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandMetadataFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandMetadataRichDTO))]
    public partial class CommandMetadataSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private string _description;
        
        private string _name;
        
        private string _value;
        
        public CommandMetadataSimpleDTO()
        {
        }
        
        public CommandMetadataSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandMetadata(domainObject, this);
        }
        
        public CommandMetadataSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandMetadata), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandMetadataRichDTO))]
    public partial class CommandMetadataFullDTO : Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandSimpleDTO _command;
        
        public CommandMetadataFullDTO()
        {
        }
        
        public CommandMetadataFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandMetadata(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandSimpleDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandMetadata), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandMetadataRichDTO : Framework.Workflow.Generated.DTO.CommandMetadataFullDTO
    {
        
        public CommandMetadataRichDTO()
        {
        }
        
        public CommandMetadataRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandMetadata(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandMetadata), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandMetadataStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandMetadata, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandMetadata>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private string _value;
        
        private long _version;
        
        public CommandMetadataStrictDTO()
        {
        }
        
        public CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.CommandMetadataRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandMetadataFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForCommandMetadata(this, source);
        }
        
        public CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.CommandMetadataRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.CommandMetadataFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForCommandMetadata(this, source);
        }
        
        public CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.CommandMetadataFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForCommandMetadata(this, source);
        }
        
        public CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForCommandMetadata(this, source);
        }
        
        private CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForCommandMetadata(this, source);
        }
        
        private CommandMetadataStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandMetadata domainObject)
        {
            mappingService.MapCommandMetadata(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.CommandMetadata ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandMetadata(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandParameter), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandParameterFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandParameterRichDTO))]
    public partial class CommandParameterSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO>
    {
        
        private bool _allowNull;
        
        private string _description;
        
        private bool _isReadOnly;
        
        private string _name;
        
        public CommandParameterSimpleDTO()
        {
        }
        
        public CommandParameterSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandParameter(domainObject, this);
        }
        
        public CommandParameterSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowNull
        {
            get
            {
                return this._allowNull;
            }
            set
            {
                this._allowNull = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly
        {
            get
            {
                return this._isReadOnly;
            }
            set
            {
                this._isReadOnly = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.CommandParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandParameter), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandParameterRichDTO))]
    public partial class CommandParameterFullDTO : Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandSimpleDTO _command;
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _type;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public CommandParameterFullDTO()
        {
        }
        
        public CommandParameterFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandParameter(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandSimpleDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.CommandParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandParameter), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandParameterRichDTO : Framework.Workflow.Generated.DTO.CommandParameterFullDTO
    {
        
        public CommandParameterRichDTO()
        {
        }
        
        public CommandParameterRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandParameter(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.CommandParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandParameter), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandParameterStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandParameter, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandParameter>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private bool _allowNull;
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _type;
        
        private long _version;
        
        public CommandParameterStrictDTO()
        {
        }
        
        public CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.CommandParameterRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandParameterFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForCommandParameter(this, source);
        }
        
        public CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.CommandParameterRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.CommandParameterFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForCommandParameter(this, source);
        }
        
        public CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.CommandParameterFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForCommandParameter(this, source);
        }
        
        public CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForCommandParameter(this, source);
        }
        
        private CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForCommandParameter(this, source);
        }
        
        private CommandParameterStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowNull
        {
            get
            {
                return this._allowNull;
            }
            set
            {
                this._allowNull = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandParameter domainObject)
        {
            mappingService.MapCommandParameter(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.CommandParameter ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandParameter(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandRoleAccess), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO))]
    public partial class CommandRoleAccessSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        public CommandRoleAccessSimpleDTO()
        {
        }
        
        public CommandRoleAccessSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandRoleAccess(domainObject, this);
        }
        
        public CommandRoleAccessSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public virtual Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandRoleAccess), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO))]
    public partial class CommandRoleAccessFullDTO : Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandSimpleDTO _command;
        
        private Framework.Workflow.Generated.DTO.RoleSimpleDTO _role;
        
        public CommandRoleAccessFullDTO()
        {
        }
        
        public CommandRoleAccessFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandRoleAccess(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandSimpleDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.RoleSimpleDTO Role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandRoleAccess), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandRoleAccessRichDTO : Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO
    {
        
        public CommandRoleAccessRichDTO()
        {
        }
        
        public CommandRoleAccessRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapCommandRoleAccess(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.CommandRoleAccess), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class CommandRoleAccessStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandRoleAccess, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.CommandRoleAccess>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private System.Guid _id;
        
        private Framework.Workflow.Generated.DTO.RoleIdentityDTO _role;
        
        private long _version;
        
        public CommandRoleAccessStrictDTO()
        {
        }
        
        public CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForCommandRoleAccess(this, source);
        }
        
        public CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForCommandRoleAccess(this, source);
        }
        
        public CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForCommandRoleAccess(this, source);
        }
        
        public CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForCommandRoleAccess(this, source);
        }
        
        private CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForCommandRoleAccess(this, source);
        }
        
        private CommandRoleAccessStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.RoleIdentityDTO Role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject)
        {
            mappingService.MapCommandRoleAccess(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.CommandRoleAccess ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToCommandRoleAccess(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionState), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO>
    {
        
        private string _name;
        
        public ConditionStateVisualDTO()
        {
        }
        
        public ConditionStateVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionState(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionState), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ConditionStateFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ConditionStateRichDTO))]
    public partial class ConditionStateSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private bool _isInitial;
        
        private string _name;
        
        private Framework.Workflow.Domain.Definition.StateType _type;
        
        public ConditionStateSimpleDTO()
        {
        }
        
        public ConditionStateSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionState(domainObject, this);
        }
        
        public ConditionStateSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Domain.Definition.StateType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.ConditionStateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionState), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ConditionStateRichDTO))]
    public partial class ConditionStateFullDTO : Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _condition;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public ConditionStateFullDTO()
        {
        }
        
        public ConditionStateFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionState(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ConditionStateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionState), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateRichDTO : Framework.Workflow.Generated.DTO.ConditionStateFullDTO
    {
        
        private Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO _falseEvent;
        
        private Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO _trueEvent;
        
        public ConditionStateRichDTO()
        {
        }
        
        public ConditionStateRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionState(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO FalseEvent
        {
            get
            {
                return this._falseEvent;
            }
            set
            {
                this._falseEvent = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO TrueEvent
        {
            get
            {
                return this._trueEvent;
            }
            set
            {
                this._trueEvent = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ConditionStateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionState), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ConditionState, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ConditionState>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _condition;
        
        private string _description;
        
        private Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO _falseEvent;
        
        private System.Guid _id;
        
        private bool _isInitial;
        
        private string _name;
        
        private Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO _trueEvent;
        
        private long _version;
        
        public ConditionStateStrictDTO()
        {
        }
        
        public ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ConditionStateFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForConditionState(this, source);
        }
        
        public ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForConditionState(this, source);
        }
        
        public ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForConditionState(this, source);
        }
        
        public ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForConditionState(this, source);
        }
        
        private ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForConditionState(this, source);
        }
        
        private ConditionStateStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO FalseEvent
        {
            get
            {
                return this._falseEvent;
            }
            set
            {
                this._falseEvent = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO TrueEvent
        {
            get
            {
                return this._trueEvent;
            }
            set
            {
                this._trueEvent = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionState domainObject)
        {
            mappingService.MapConditionState(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.ConditionState ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToConditionState(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateEventVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO>
    {
        
        private string _name;
        
        public ConditionStateEventVisualDTO()
        {
        }
        
        public ConditionStateEventVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionStateEvent(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO))]
    public partial class ConditionStateEventSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO>
    {
        
        private string _description;
        
        private bool _isTrue;
        
        private string _name;
        
        public ConditionStateEventSimpleDTO()
        {
        }
        
        public ConditionStateEventSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionStateEvent(domainObject, this);
        }
        
        public ConditionStateEventSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTrue
        {
            get
            {
                return this._isTrue;
            }
            set
            {
                this._isTrue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO))]
    public partial class ConditionStateEventFullDTO : Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public ConditionStateEventFullDTO()
        {
        }
        
        public ConditionStateEventFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionStateEvent(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateEventRichDTO : Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO
    {
        
        public ConditionStateEventRichDTO()
        {
        }
        
        public ConditionStateEventRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapConditionStateEvent(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ConditionStateEvent), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ConditionStateEventStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private long _version;
        
        public ConditionStateEventStrictDTO()
        {
        }
        
        public ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForConditionStateEvent(this, source);
        }
        
        public ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForConditionStateEvent(this, source);
        }
        
        public ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForConditionStateEvent(this, source);
        }
        
        public ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForConditionStateEvent(this, source);
        }
        
        private ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForConditionStateEvent(this, source);
        }
        
        private ConditionStateEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject)
        {
            mappingService.MapConditionStateEvent(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.ConditionStateEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToConditionStateEvent(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class DomainTypeVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _name;
        
        public DomainTypeVisualDTO()
        {
        }
        
        public DomainTypeVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.DomainTypeFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.DomainTypeRichDTO))]
    public partial class DomainTypeSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _description;
        
        private string _fullTypeName;
        
        private string _name;
        
        private string _nameSpace;
        
        private Framework.Workflow.Domain.Definition.DomainTypeRole _role;
        
        public DomainTypeSimpleDTO()
        {
        }
        
        public DomainTypeSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        public DomainTypeSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this._fullTypeName;
            }
            set
            {
                this._fullTypeName = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameSpace
        {
            get
            {
                return this._nameSpace;
            }
            set
            {
                this._nameSpace = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Domain.Definition.DomainTypeRole Role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.DomainTypeRichDTO))]
    public partial class DomainTypeFullDTO : Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO _targetSystem;
        
        public DomainTypeFullDTO()
        {
        }
        
        public DomainTypeFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.DomainType), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class DomainTypeRichDTO : Framework.Workflow.Generated.DTO.DomainTypeFullDTO
    {
        
        public DomainTypeRichDTO()
        {
        }
        
        public DomainTypeRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.DomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapDomainType(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Event), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class EventVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.EventIdentityDTO>
    {
        
        private string _name;
        
        public EventVisualDTO()
        {
        }
        
        public EventVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Event domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapEvent(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.EventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.EventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Event), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.EventFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.EventRichDTO))]
    public partial class EventSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.EventIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public EventSimpleDTO()
        {
        }
        
        public EventSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Event domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapEvent(domainObject, this);
        }
        
        public EventSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.EventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.EventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Event), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.EventRichDTO))]
    public partial class EventFullDTO : Framework.Workflow.Generated.DTO.EventSimpleDTO
    {
        
        public EventFullDTO()
        {
        }
        
        public EventFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Event domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapEvent(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Event), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class EventRichDTO : Framework.Workflow.Generated.DTO.EventFullDTO
    {
        
        public EventRichDTO()
        {
        }
        
        public EventRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Event domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapEvent(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelState), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO>
    {
        
        private string _name;
        
        public ParallelStateVisualDTO()
        {
        }
        
        public ParallelStateVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelState(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelState), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateRichDTO))]
    public partial class ParallelStateSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private bool _isInitial;
        
        private string _name;
        
        private Framework.Workflow.Domain.Definition.StateType _type;
        
        public ParallelStateSimpleDTO()
        {
        }
        
        public ParallelStateSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelState(domainObject, this);
        }
        
        public ParallelStateSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Domain.Definition.StateType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.ParallelStateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelState), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateRichDTO))]
    public partial class ParallelStateFullDTO : Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public ParallelStateFullDTO()
        {
        }
        
        public ParallelStateFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelState(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ParallelStateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelState), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateRichDTO : Framework.Workflow.Generated.DTO.ParallelStateFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO> _finalEvents = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO> _startItems = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO>();
        
        public ParallelStateRichDTO()
        {
        }
        
        public ParallelStateRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelState(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO> FinalEvents
        {
            get
            {
                return this._finalEvents;
            }
            set
            {
                this._finalEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO> StartItems
        {
            get
            {
                return this._startItems;
            }
            set
            {
                this._startItems = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ParallelStateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelState), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ParallelState, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ParallelState>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO> _finalEvents = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO>();
        
        private System.Guid _id;
        
        private bool _isInitial;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO> _startItems = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO>();
        
        private long _version;
        
        public ParallelStateStrictDTO()
        {
        }
        
        public ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ParallelStateFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForParallelState(this, source);
        }
        
        public ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForParallelState(this, source);
        }
        
        public ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForParallelState(this, source);
        }
        
        public ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForParallelState(this, source);
        }
        
        private ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForParallelState(this, source);
        }
        
        private ParallelStateStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO> FinalEvents
        {
            get
            {
                return this._finalEvents;
            }
            set
            {
                this._finalEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO> StartItems
        {
            get
            {
                return this._startItems;
            }
            set
            {
                this._startItems = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelState domainObject)
        {
            mappingService.MapParallelState(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.ParallelState ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToParallelState(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateFinalEventVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO>
    {
        
        private string _name;
        
        public ParallelStateFinalEventVisualDTO()
        {
        }
        
        public ParallelStateFinalEventVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateFinalEvent(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO))]
    public partial class ParallelStateFinalEventSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        private int _orderIndex;
        
        public ParallelStateFinalEventSimpleDTO()
        {
        }
        
        public ParallelStateFinalEventSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateFinalEvent(domainObject, this);
        }
        
        public ParallelStateFinalEventSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO))]
    public partial class ParallelStateFinalEventFullDTO : Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _condition;
        
        private Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public ParallelStateFinalEventFullDTO()
        {
        }
        
        public ParallelStateFinalEventFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateFinalEvent(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateFinalEventRichDTO : Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO
    {
        
        public ParallelStateFinalEventRichDTO()
        {
        }
        
        public ParallelStateFinalEventRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateFinalEvent(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateFinalEventStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _condition;
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private int _orderIndex;
        
        private long _version;
        
        public ParallelStateFinalEventStrictDTO()
        {
        }
        
        public ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForParallelStateFinalEvent(this, source);
        }
        
        public ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForParallelStateFinalEvent(this, source);
        }
        
        public ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForParallelStateFinalEvent(this, source);
        }
        
        public ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForParallelStateFinalEvent(this, source);
        }
        
        private ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForParallelStateFinalEvent(this, source);
        }
        
        private ParallelStateFinalEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject)
        {
            mappingService.MapParallelStateFinalEvent(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToParallelStateFinalEvent(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateStartItem), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO))]
    public partial class ParallelStateStartItemSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        public ParallelStateStartItemSimpleDTO()
        {
        }
        
        public ParallelStateStartItemSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateStartItem(domainObject, this);
        }
        
        public ParallelStateStartItemSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public virtual Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateStartItem), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO))]
    public partial class ParallelStateStartItemFullDTO : Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _factory;
        
        private Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO _state;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _subWorkflow;
        
        public ParallelStateStartItemFullDTO()
        {
        }
        
        public ParallelStateStartItemFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateStartItem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Factory
        {
            get
            {
                return this._factory;
            }
            set
            {
                this._factory = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO SubWorkflow
        {
            get
            {
                return this._subWorkflow;
            }
            set
            {
                this._subWorkflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateStartItem), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateStartItemRichDTO : Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO
    {
        
        public ParallelStateStartItemRichDTO()
        {
        }
        
        public ParallelStateStartItemRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapParallelStateStartItem(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.ParallelStateStartItem), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateStartItemStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ParallelStateStartItem, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.ParallelStateStartItem>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _factory;
        
        private System.Guid _id;
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _subWorkflow;
        
        private long _version;
        
        public ParallelStateStartItemStrictDTO()
        {
        }
        
        public ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForParallelStateStartItem(this, source);
        }
        
        public ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForParallelStateStartItem(this, source);
        }
        
        public ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForParallelStateStartItem(this, source);
        }
        
        public ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForParallelStateStartItem(this, source);
        }
        
        private ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForParallelStateStartItem(this, source);
        }
        
        private ParallelStateStartItemStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Factory
        {
            get
            {
                return this._factory;
            }
            set
            {
                this._factory = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO SubWorkflow
        {
            get
            {
                return this._subWorkflow;
            }
            set
            {
                this._subWorkflow = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject)
        {
            mappingService.MapParallelStateStartItem(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.ParallelStateStartItem ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToParallelStateStartItem(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Role), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class RoleVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.RoleIdentityDTO>
    {
        
        private string _name;
        
        public RoleVisualDTO()
        {
        }
        
        public RoleVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Role domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapRole(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.RoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.RoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Role), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.RoleFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.RoleRichDTO))]
    public partial class RoleSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.RoleIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        private System.Guid _securityOperationId;
        
        public RoleSimpleDTO()
        {
        }
        
        public RoleSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Role domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapRole(domainObject, this);
        }
        
        public RoleSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.RoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.RoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityOperationId
        {
            get
            {
                return this._securityOperationId;
            }
            set
            {
                this._securityOperationId = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.RoleStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.RoleStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Role), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.RoleRichDTO))]
    public partial class RoleFullDTO : Framework.Workflow.Generated.DTO.RoleSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _customSecurityProvider;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public RoleFullDTO()
        {
        }
        
        public RoleFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Role domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapRole(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO CustomSecurityProvider
        {
            get
            {
                return this._customSecurityProvider;
            }
            set
            {
                this._customSecurityProvider = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.RoleStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.RoleStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Role), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class RoleRichDTO : Framework.Workflow.Generated.DTO.RoleFullDTO
    {
        
        public RoleRichDTO()
        {
        }
        
        public RoleRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Role domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapRole(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.RoleStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.RoleStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Role), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class RoleStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Role, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Role>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.RoleIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _customSecurityProvider;
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Guid _securityOperationId;
        
        private long _version;
        
        public RoleStrictDTO()
        {
        }
        
        public RoleStrictDTO(Framework.Workflow.Generated.DTO.RoleRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.RoleFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForRole(this, source);
        }
        
        public RoleStrictDTO(Framework.Workflow.Generated.DTO.RoleRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public RoleStrictDTO(Framework.Workflow.Generated.DTO.RoleFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.RoleSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForRole(this, source);
        }
        
        public RoleStrictDTO(Framework.Workflow.Generated.DTO.RoleFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public RoleStrictDTO(Framework.Workflow.Generated.DTO.RoleSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForRole(this, source);
        }
        
        public RoleStrictDTO(Framework.Workflow.Generated.DTO.RoleSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private RoleStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForRole(this, source);
        }
        
        private RoleStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private RoleStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForRole(this, source);
        }
        
        private RoleStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO CustomSecurityProvider
        {
            get
            {
                return this._customSecurityProvider;
            }
            set
            {
                this._customSecurityProvider = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.RoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.RoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SecurityOperationId
        {
            get
            {
                return this._securityOperationId;
            }
            set
            {
                this._securityOperationId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Role domainObject)
        {
            mappingService.MapRole(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.Role ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToRole(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO))]
    public partial class StartWorkflowDomainObjectConditionSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO>
    {
        
        public StartWorkflowDomainObjectConditionSimpleDTO()
        {
        }
        
        public StartWorkflowDomainObjectConditionSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStartWorkflowDomainObjectCondition(domainObject, this);
        }
        
        public StartWorkflowDomainObjectConditionSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO(this.Id);
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO))]
    public partial class StartWorkflowDomainObjectConditionFullDTO : Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _condition;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _factory;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public StartWorkflowDomainObjectConditionFullDTO()
        {
        }
        
        public StartWorkflowDomainObjectConditionFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStartWorkflowDomainObjectCondition(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Factory
        {
            get
            {
                return this._factory;
            }
            set
            {
                this._factory = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StartWorkflowDomainObjectConditionRichDTO : Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO
    {
        
        public StartWorkflowDomainObjectConditionRichDTO()
        {
        }
        
        public StartWorkflowDomainObjectConditionRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStartWorkflowDomainObjectCondition(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StartWorkflowDomainObjectConditionStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private bool _active = true;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _condition;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _factory;
        
        private System.Guid _id;
        
        private long _version;
        
        public StartWorkflowDomainObjectConditionStrictDTO()
        {
        }
        
        public StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForStartWorkflowDomainObjectCondition(this, source);
        }
        
        public StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForStartWorkflowDomainObjectCondition(this, source);
        }
        
        public StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForStartWorkflowDomainObjectCondition(this, source);
        }
        
        public StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForStartWorkflowDomainObjectCondition(this, source);
        }
        
        private StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForStartWorkflowDomainObjectCondition(this, source);
        }
        
        private StartWorkflowDomainObjectConditionStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Factory
        {
            get
            {
                return this._factory;
            }
            set
            {
                this._factory = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject)
        {
            mappingService.MapStartWorkflowDomainObjectCondition(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStartWorkflowDomainObjectCondition(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.State), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateIdentityDTO>
    {
        
        private string _name;
        
        public StateVisualDTO()
        {
        }
        
        public StateVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.State domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapState(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.StateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.State), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateRichDTO))]
    public partial class StateSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateIdentityDTO>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private bool _isFinal;
        
        private bool _isInitial;
        
        private string _name;
        
        private Framework.Workflow.Domain.Definition.StateType _type;
        
        public StateSimpleDTO()
        {
        }
        
        public StateSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.State domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapState(domainObject, this);
        }
        
        public StateSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinal
        {
            get
            {
                return this._isFinal;
            }
            set
            {
                this._isFinal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Domain.Definition.StateType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.StateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.State), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateRichDTO))]
    public partial class StateFullDTO : Framework.Workflow.Generated.DTO.StateSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public StateFullDTO()
        {
        }
        
        public StateFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.State domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapState(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.StateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.State), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateRichDTO : Framework.Workflow.Generated.DTO.StateFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO> _domainObjectEvents = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskRichDTO> _tasks = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO> _timeoutEvents = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO>();
        
        public StateRichDTO()
        {
        }
        
        public StateRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.State domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapState(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO> DomainObjectEvents
        {
            get
            {
                return this._domainObjectEvents;
            }
            set
            {
                this._domainObjectEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskRichDTO> Tasks
        {
            get
            {
                return this._tasks;
            }
            set
            {
                this._tasks = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO> TimeoutEvents
        {
            get
            {
                return this._timeoutEvents;
            }
            set
            {
                this._timeoutEvents = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.StateStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.State), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.State, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.State>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO> _domainObjectEvents = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO>();
        
        private System.Guid _id;
        
        private bool _isFinal;
        
        private bool _isInitial;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskStrictDTO> _tasks = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO> _timeoutEvents = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO>();
        
        private long _version;
        
        public StateStrictDTO()
        {
        }
        
        public StateStrictDTO(Framework.Workflow.Generated.DTO.StateRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForState(this, source);
        }
        
        public StateStrictDTO(Framework.Workflow.Generated.DTO.StateRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateStrictDTO(Framework.Workflow.Generated.DTO.StateFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForState(this, source);
        }
        
        public StateStrictDTO(Framework.Workflow.Generated.DTO.StateFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateStrictDTO(Framework.Workflow.Generated.DTO.StateSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForState(this, source);
        }
        
        public StateStrictDTO(Framework.Workflow.Generated.DTO.StateSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForState(this, source);
        }
        
        private StateStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForState(this, source);
        }
        
        private StateStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO> DomainObjectEvents
        {
            get
            {
                return this._domainObjectEvents;
            }
            set
            {
                this._domainObjectEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinal
        {
            get
            {
                return this._isFinal;
            }
            set
            {
                this._isFinal = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskStrictDTO> Tasks
        {
            get
            {
                return this._tasks;
            }
            set
            {
                this._tasks = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO> TimeoutEvents
        {
            get
            {
                return this._timeoutEvents;
            }
            set
            {
                this._timeoutEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.State domainObject)
        {
            mappingService.MapState(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.State ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToState(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateBaseVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateBaseIdentityDTO>
    {
        
        private string _name;
        
        public StateBaseVisualDTO()
        {
        }
        
        public StateBaseVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateBase(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.StateBaseIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateBaseIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateBaseFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateBaseRichDTO))]
    public partial class StateBaseSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateBaseIdentityDTO>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private bool _isInitial;
        
        private string _name;
        
        private Framework.Workflow.Domain.Definition.StateType _type;
        
        public StateBaseSimpleDTO()
        {
        }
        
        public StateBaseSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateBase(domainObject, this);
        }
        
        public StateBaseSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateBaseIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateBaseIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Domain.Definition.StateType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.StateBaseStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateBaseStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateBaseRichDTO))]
    public partial class StateBaseFullDTO : Framework.Workflow.Generated.DTO.StateBaseSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public StateBaseFullDTO()
        {
        }
        
        public StateBaseFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateBase(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.StateBaseStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateBaseStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateBaseRichDTO : Framework.Workflow.Generated.DTO.StateBaseFullDTO
    {
        
        public StateBaseRichDTO()
        {
        }
        
        public StateBaseRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateBase(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.StateBaseStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateBaseStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateBase), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateBaseStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StateBase, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StateBase>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateBaseIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _autoSetStatePropertyName;
        
        private string _autoSetStatePropertyValue;
        
        private string _description;
        
        private System.Guid _id;
        
        private bool _isInitial;
        
        private string _name;
        
        private long _version;
        
        public StateBaseStrictDTO()
        {
        }
        
        public StateBaseStrictDTO(Framework.Workflow.Generated.DTO.StateBaseRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateBaseFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForStateBase(this, source);
        }
        
        public StateBaseStrictDTO(Framework.Workflow.Generated.DTO.StateBaseRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateBaseStrictDTO(Framework.Workflow.Generated.DTO.StateBaseFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateBaseSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForStateBase(this, source);
        }
        
        public StateBaseStrictDTO(Framework.Workflow.Generated.DTO.StateBaseFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateBaseStrictDTO(Framework.Workflow.Generated.DTO.StateBaseSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForStateBase(this, source);
        }
        
        public StateBaseStrictDTO(Framework.Workflow.Generated.DTO.StateBaseSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateBaseStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForStateBase(this, source);
        }
        
        private StateBaseStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateBaseStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForStateBase(this, source);
        }
        
        private StateBaseStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyName
        {
            get
            {
                return this._autoSetStatePropertyName;
            }
            set
            {
                this._autoSetStatePropertyName = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutoSetStatePropertyValue
        {
            get
            {
                return this._autoSetStatePropertyValue;
            }
            set
            {
                this._autoSetStatePropertyValue = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateBaseIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateBaseIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                this._isInitial = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateBase domainObject)
        {
            mappingService.MapStateBase(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.StateBase ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateBase(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateDomainObjectEventVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO>
    {
        
        private string _name;
        
        public StateDomainObjectEventVisualDTO()
        {
        }
        
        public StateDomainObjectEventVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateDomainObjectEvent(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO))]
    public partial class StateDomainObjectEventSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public StateDomainObjectEventSimpleDTO()
        {
        }
        
        public StateDomainObjectEventSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateDomainObjectEvent(domainObject, this);
        }
        
        public StateDomainObjectEventSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO))]
    public partial class StateDomainObjectEventFullDTO : Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _condition;
        
        private Framework.Workflow.Generated.DTO.StateSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public StateDomainObjectEventFullDTO()
        {
        }
        
        public StateDomainObjectEventFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateDomainObjectEvent(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateDomainObjectEventRichDTO : Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO
    {
        
        public StateDomainObjectEventRichDTO()
        {
        }
        
        public StateDomainObjectEventRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateDomainObjectEvent(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateDomainObjectEvent), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateDomainObjectEventStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _condition;
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private long _version;
        
        public StateDomainObjectEventStrictDTO()
        {
        }
        
        public StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForStateDomainObjectEvent(this, source);
        }
        
        public StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForStateDomainObjectEvent(this, source);
        }
        
        public StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForStateDomainObjectEvent(this, source);
        }
        
        public StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForStateDomainObjectEvent(this, source);
        }
        
        private StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForStateDomainObjectEvent(this, source);
        }
        
        private StateDomainObjectEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject)
        {
            mappingService.MapStateDomainObjectEvent(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateDomainObjectEvent(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateTimeoutEventVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO>
    {
        
        private string _name;
        
        public StateTimeoutEventVisualDTO()
        {
        }
        
        public StateTimeoutEventVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateTimeoutEvent(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO))]
    public partial class StateTimeoutEventSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public StateTimeoutEventSimpleDTO()
        {
        }
        
        public StateTimeoutEventSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateTimeoutEvent(domainObject, this);
        }
        
        public StateTimeoutEventSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO))]
    public partial class StateTimeoutEventFullDTO : Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _condition;
        
        private Framework.Workflow.Generated.DTO.StateSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public StateTimeoutEventFullDTO()
        {
        }
        
        public StateTimeoutEventFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateTimeoutEvent(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateTimeoutEventRichDTO : Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO
    {
        
        public StateTimeoutEventRichDTO()
        {
        }
        
        public StateTimeoutEventRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateTimeoutEvent(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.StateTimeoutEvent), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateTimeoutEventStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _condition;
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private long _version;
        
        public StateTimeoutEventStrictDTO()
        {
        }
        
        public StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForStateTimeoutEvent(this, source);
        }
        
        public StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForStateTimeoutEvent(this, source);
        }
        
        public StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForStateTimeoutEvent(this, source);
        }
        
        public StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForStateTimeoutEvent(this, source);
        }
        
        private StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForStateTimeoutEvent(this, source);
        }
        
        private StateTimeoutEventStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                this._condition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject)
        {
            mappingService.MapStateTimeoutEvent(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.StateTimeoutEvent ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateTimeoutEvent(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TargetSystem), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TargetSystemVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO>
    {
        
        private string _name;
        
        public TargetSystemVisualDTO()
        {
        }
        
        public TargetSystemVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TargetSystem), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TargetSystemFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TargetSystemRichDTO))]
    public partial class TargetSystemSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO>
    {
        
        private string _description;
        
        private bool _isBase;
        
        private bool _isMain;
        
        private string _name;
        
        public TargetSystemSimpleDTO()
        {
        }
        
        public TargetSystemSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        public TargetSystemSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBase
        {
            get
            {
                return this._isBase;
            }
            set
            {
                this._isBase = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMain
        {
            get
            {
                return this._isMain;
            }
            set
            {
                this._isMain = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TargetSystem), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TargetSystemRichDTO))]
    public partial class TargetSystemFullDTO : Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO
    {
        
        public TargetSystemFullDTO()
        {
        }
        
        public TargetSystemFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TargetSystem), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TargetSystemRichDTO : Framework.Workflow.Generated.DTO.TargetSystemFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeRichDTO> _domainTypes = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeRichDTO>();
        
        public TargetSystemRichDTO()
        {
        }
        
        public TargetSystemRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TargetSystem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTargetSystem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeRichDTO> DomainTypes
        {
            get
            {
                return this._domainTypes;
            }
            set
            {
                this._domainTypes = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Task), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskIdentityDTO>
    {
        
        private string _name;
        
        public TaskVisualDTO()
        {
        }
        
        public TaskVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Task domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTask(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.TaskIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Task), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskRichDTO))]
    public partial class TaskSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public TaskSimpleDTO()
        {
        }
        
        public TaskSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Task domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTask(domainObject, this);
        }
        
        public TaskSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TaskIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.TaskStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Task), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskRichDTO))]
    public partial class TaskFullDTO : Framework.Workflow.Generated.DTO.TaskSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.StateSimpleDTO _state;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public TaskFullDTO()
        {
        }
        
        public TaskFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Task domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTask(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateSimpleDTO State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TaskStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Task), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskRichDTO : Framework.Workflow.Generated.DTO.TaskFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRichDTO> _commands = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataRichDTO> _metadatas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataRichDTO>();
        
        public TaskRichDTO()
        {
        }
        
        public TaskRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Task domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTask(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRichDTO> Commands
        {
            get
            {
                return this._commands;
            }
            set
            {
                this._commands = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataRichDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TaskStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Task), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Task, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Task>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandStrictDTO> _commands = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandStrictDTO>();
        
        private string _description;
        
        private System.Guid _id;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO> _metadatas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO>();
        
        private string _name;
        
        private long _version;
        
        public TaskStrictDTO()
        {
        }
        
        public TaskStrictDTO(Framework.Workflow.Generated.DTO.TaskRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TaskFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForTask(this, source);
        }
        
        public TaskStrictDTO(Framework.Workflow.Generated.DTO.TaskRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TaskStrictDTO(Framework.Workflow.Generated.DTO.TaskFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TaskSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForTask(this, source);
        }
        
        public TaskStrictDTO(Framework.Workflow.Generated.DTO.TaskFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TaskStrictDTO(Framework.Workflow.Generated.DTO.TaskSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForTask(this, source);
        }
        
        public TaskStrictDTO(Framework.Workflow.Generated.DTO.TaskSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TaskStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForTask(this, source);
        }
        
        private TaskStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TaskStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForTask(this, source);
        }
        
        private TaskStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandStrictDTO> Commands
        {
            get
            {
                return this._commands;
            }
            set
            {
                this._commands = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TaskIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Task domainObject)
        {
            mappingService.MapTask(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.Task ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTask(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TaskMetadata), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskMetadataFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskMetadataRichDTO))]
    public partial class TaskMetadataSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private string _description;
        
        private string _name;
        
        private string _value;
        
        public TaskMetadataSimpleDTO()
        {
        }
        
        public TaskMetadataSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TaskMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTaskMetadata(domainObject, this);
        }
        
        public TaskMetadataSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TaskMetadata), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskMetadataRichDTO))]
    public partial class TaskMetadataFullDTO : Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.TaskSimpleDTO _task;
        
        public TaskMetadataFullDTO()
        {
        }
        
        public TaskMetadataFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TaskMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTaskMetadata(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TaskSimpleDTO Task
        {
            get
            {
                return this._task;
            }
            set
            {
                this._task = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TaskMetadata), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskMetadataRichDTO : Framework.Workflow.Generated.DTO.TaskMetadataFullDTO
    {
        
        public TaskMetadataRichDTO()
        {
        }
        
        public TaskMetadataRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TaskMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTaskMetadata(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TaskMetadata), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskMetadataStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.TaskMetadata, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.TaskMetadata>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private string _value;
        
        private long _version;
        
        public TaskMetadataStrictDTO()
        {
        }
        
        public TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.TaskMetadataRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TaskMetadataFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForTaskMetadata(this, source);
        }
        
        public TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.TaskMetadataRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.TaskMetadataFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForTaskMetadata(this, source);
        }
        
        public TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.TaskMetadataFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForTaskMetadata(this, source);
        }
        
        public TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForTaskMetadata(this, source);
        }
        
        private TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForTaskMetadata(this, source);
        }
        
        private TaskMetadataStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TaskMetadata domainObject)
        {
            mappingService.MapTaskMetadata(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.TaskMetadata ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTaskMetadata(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Transition), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TransitionIdentityDTO>
    {
        
        private string _name;
        
        public TransitionVisualDTO()
        {
        }
        
        public TransitionVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Transition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransition(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.TransitionIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TransitionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Transition), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionRichDTO))]
    public partial class TransitionSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TransitionIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public TransitionSimpleDTO()
        {
        }
        
        public TransitionSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Transition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransition(domainObject, this);
        }
        
        public TransitionSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TransitionIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TransitionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.TransitionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TransitionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Transition), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionRichDTO))]
    public partial class TransitionFullDTO : Framework.Workflow.Generated.DTO.TransitionSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.StateBaseSimpleDTO _from;
        
        private Framework.Workflow.Generated.DTO.StateBaseSimpleDTO _to;
        
        private Framework.Workflow.Generated.DTO.EventSimpleDTO _triggerEvent;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public TransitionFullDTO()
        {
        }
        
        public TransitionFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Transition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransition(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateBaseSimpleDTO From
        {
            get
            {
                return this._from;
            }
            set
            {
                this._from = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateBaseSimpleDTO To
        {
            get
            {
                return this._to;
            }
            set
            {
                this._to = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.EventSimpleDTO TriggerEvent
        {
            get
            {
                return this._triggerEvent;
            }
            set
            {
                this._triggerEvent = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TransitionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TransitionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Transition), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionRichDTO : Framework.Workflow.Generated.DTO.TransitionFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionRichDTO> _postActions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionRichDTO>();
        
        public TransitionRichDTO()
        {
        }
        
        public TransitionRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Transition domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransition(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionRichDTO> PostActions
        {
            get
            {
                return this._postActions;
            }
            set
            {
                this._postActions = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TransitionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TransitionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Transition), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Transition, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Transition>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TransitionIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionStrictDTO> _postActions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionStrictDTO>();
        
        private Framework.Workflow.Generated.DTO.StateBaseIdentityDTO _to;
        
        private Framework.Workflow.Generated.DTO.EventIdentityDTO _triggerEvent;
        
        private long _version;
        
        public TransitionStrictDTO()
        {
        }
        
        public TransitionStrictDTO(Framework.Workflow.Generated.DTO.TransitionRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TransitionFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForTransition(this, source);
        }
        
        public TransitionStrictDTO(Framework.Workflow.Generated.DTO.TransitionRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TransitionStrictDTO(Framework.Workflow.Generated.DTO.TransitionFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TransitionSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForTransition(this, source);
        }
        
        public TransitionStrictDTO(Framework.Workflow.Generated.DTO.TransitionFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TransitionStrictDTO(Framework.Workflow.Generated.DTO.TransitionSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForTransition(this, source);
        }
        
        public TransitionStrictDTO(Framework.Workflow.Generated.DTO.TransitionSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TransitionStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForTransition(this, source);
        }
        
        private TransitionStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TransitionStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForTransition(this, source);
        }
        
        private TransitionStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TransitionIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TransitionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionStrictDTO> PostActions
        {
            get
            {
                return this._postActions;
            }
            set
            {
                this._postActions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateBaseIdentityDTO To
        {
            get
            {
                return this._to;
            }
            set
            {
                this._to = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.EventIdentityDTO TriggerEvent
        {
            get
            {
                return this._triggerEvent;
            }
            set
            {
                this._triggerEvent = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Transition domainObject)
        {
            mappingService.MapTransition(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.Transition ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTransition(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TransitionAction), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionActionFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionActionRichDTO))]
    public partial class TransitionActionSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private int _orderIndex;
        
        public TransitionActionSimpleDTO()
        {
        }
        
        public TransitionActionSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TransitionAction domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransitionAction(domainObject, this);
        }
        
        public TransitionActionSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.TransitionActionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TransitionActionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TransitionAction), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionActionRichDTO))]
    public partial class TransitionActionFullDTO : Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _action;
        
        private Framework.Workflow.Generated.DTO.TransitionSimpleDTO _transition;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public TransitionActionFullDTO()
        {
        }
        
        public TransitionActionFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TransitionAction domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransitionAction(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Action
        {
            get
            {
                return this._action;
            }
            set
            {
                this._action = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TransitionSimpleDTO Transition
        {
            get
            {
                return this._transition;
            }
            set
            {
                this._transition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TransitionActionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TransitionActionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TransitionAction), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionActionRichDTO : Framework.Workflow.Generated.DTO.TransitionActionFullDTO
    {
        
        public TransitionActionRichDTO()
        {
        }
        
        public TransitionActionRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TransitionAction domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransitionAction(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.TransitionActionStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TransitionActionStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.TransitionAction), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionActionStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.TransitionAction, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.TransitionAction>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _action;
        
        private System.Guid _id;
        
        private int _orderIndex;
        
        private long _version;
        
        public TransitionActionStrictDTO()
        {
        }
        
        public TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.TransitionActionRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TransitionActionFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForTransitionAction(this, source);
        }
        
        public TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.TransitionActionRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.TransitionActionFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForTransitionAction(this, source);
        }
        
        public TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.TransitionActionFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForTransitionAction(this, source);
        }
        
        public TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForTransitionAction(this, source);
        }
        
        private TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForTransitionAction(this, source);
        }
        
        private TransitionActionStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Action
        {
            get
            {
                return this._action;
            }
            set
            {
                this._action = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.TransitionAction domainObject)
        {
            mappingService.MapTransitionAction(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.TransitionAction ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTransitionAction(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO>
    {
        
        private string _name;
        
        public WorkflowVisualDTO()
        {
        }
        
        public WorkflowVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Workflow domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflow(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowRichDTO))]
    public partial class WorkflowSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO>
    {
        
        private bool _autoRemoveWithDomainObject;
        
        private string _description;
        
        private bool _hasAttachments;
        
        private bool _isValid;
        
        private string _name;
        
        private string _validationError;
        
        public WorkflowSimpleDTO()
        {
        }
        
        public WorkflowSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Workflow domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflow(domainObject, this);
        }
        
        public WorkflowSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoRemoveWithDomainObject
        {
            get
            {
                return this._autoRemoveWithDomainObject;
            }
            set
            {
                this._autoRemoveWithDomainObject = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasAttachments
        {
            get
            {
                return this._hasAttachments;
            }
            set
            {
                this._hasAttachments = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid
        {
            get
            {
                return this._isValid;
            }
            set
            {
                this._isValid = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidationError
        {
            get
            {
                return this._validationError;
            }
            set
            {
                this._validationError = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowRichDTO))]
    public partial class WorkflowFullDTO : Framework.Workflow.Generated.DTO.WorkflowSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _activeCondition;
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _domainType;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO _targetSystem;
        
        public WorkflowFullDTO()
        {
        }
        
        public WorkflowFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Workflow domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflow(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO ActiveCondition
        {
            get
            {
                return this._activeCondition;
            }
            set
            {
                this._activeCondition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowRichDTO : Framework.Workflow.Generated.DTO.WorkflowFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateRichDTO> _conditionStates = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO> _lambdas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO> _metadatas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateRichDTO> _parallelStates = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleRichDTO> _roles = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO> _sources = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO> _startConditions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateRichDTO> _states = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowRichDTO> _subWorkflows = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionRichDTO> _transitions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionRichDTO>();
        
        public WorkflowRichDTO()
        {
        }
        
        public WorkflowRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Workflow domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflow(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateRichDTO> ConditionStates
        {
            get
            {
                return this._conditionStates;
            }
            set
            {
                this._conditionStates = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO> Lambdas
        {
            get
            {
                return this._lambdas;
            }
            set
            {
                this._lambdas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateRichDTO> ParallelStates
        {
            get
            {
                return this._parallelStates;
            }
            set
            {
                this._parallelStates = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleRichDTO> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                this._roles = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO> Sources
        {
            get
            {
                return this._sources;
            }
            set
            {
                this._sources = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO> StartConditions
        {
            get
            {
                return this._startConditions;
            }
            set
            {
                this._startConditions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateRichDTO> States
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowRichDTO> SubWorkflows
        {
            get
            {
                return this._subWorkflows;
            }
            set
            {
                this._subWorkflows = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionRichDTO> Transitions
        {
            get
            {
                return this._transitions;
            }
            set
            {
                this._transitions = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.Workflow), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Workflow, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.Workflow>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private bool _active = true;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _activeCondition;
        
        private bool _autoRemoveWithDomainObject;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateStrictDTO> _conditionStates = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateStrictDTO>();
        
        private string _description;
        
        private System.Guid _id;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO> _lambdas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO> _metadatas = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO>();
        
        private string _name;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStrictDTO> _parallelStates = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleStrictDTO> _roles = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO> _sources = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO> _startConditions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateStrictDTO> _states = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowStrictDTO> _subWorkflows = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionStrictDTO> _transitions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionStrictDTO>();
        
        private long _version;
        
        public WorkflowStrictDTO()
        {
        }
        
        public WorkflowStrictDTO(Framework.Workflow.Generated.DTO.WorkflowRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflow(this, source);
        }
        
        public WorkflowStrictDTO(Framework.Workflow.Generated.DTO.WorkflowRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowStrictDTO(Framework.Workflow.Generated.DTO.WorkflowFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflow(this, source);
        }
        
        public WorkflowStrictDTO(Framework.Workflow.Generated.DTO.WorkflowFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflow(this, source);
        }
        
        public WorkflowStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflow(this, source);
        }
        
        private WorkflowStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflow(this, source);
        }
        
        private WorkflowStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO ActiveCondition
        {
            get
            {
                return this._activeCondition;
            }
            set
            {
                this._activeCondition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoRemoveWithDomainObject
        {
            get
            {
                return this._autoRemoveWithDomainObject;
            }
            set
            {
                this._autoRemoveWithDomainObject = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateStrictDTO> ConditionStates
        {
            get
            {
                return this._conditionStates;
            }
            set
            {
                this._conditionStates = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO> Lambdas
        {
            get
            {
                return this._lambdas;
            }
            set
            {
                this._lambdas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStrictDTO> ParallelStates
        {
            get
            {
                return this._parallelStates;
            }
            set
            {
                this._parallelStates = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleStrictDTO> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                this._roles = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO> Sources
        {
            get
            {
                return this._sources;
            }
            set
            {
                this._sources = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO> StartConditions
        {
            get
            {
                return this._startConditions;
            }
            set
            {
                this._startConditions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateStrictDTO> States
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowStrictDTO> SubWorkflows
        {
            get
            {
                return this._subWorkflows;
            }
            set
            {
                this._subWorkflows = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionStrictDTO> Transitions
        {
            get
            {
                return this._transitions;
            }
            set
            {
                this._transitions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.Workflow domainObject)
        {
            mappingService.MapWorkflow(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.Workflow ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflow(this);
        }
        
        public Framework.Workflow.Domain.Definition.Workflow ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, bool allowCreate)
        {
            return mappingService.ToWorkflow(this, allowCreate);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowLambda), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowLambdaVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO>
    {
        
        private string _name;
        
        public WorkflowLambdaVisualDTO()
        {
        }
        
        public WorkflowLambdaVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowLambda(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowLambda), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO))]
    public partial class WorkflowLambdaSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        private string _value;
        
        public WorkflowLambdaSimpleDTO()
        {
        }
        
        public WorkflowLambdaSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowLambda(domainObject, this);
        }
        
        public WorkflowLambdaSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowLambda), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO))]
    public partial class WorkflowLambdaFullDTO : Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public WorkflowLambdaFullDTO()
        {
        }
        
        public WorkflowLambdaFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowLambda(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowLambda), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowLambdaRichDTO : Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO
    {
        
        public WorkflowLambdaRichDTO()
        {
        }
        
        public WorkflowLambdaRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowLambda(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowLambda), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowLambdaStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowLambda, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowLambda>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private string _value;
        
        private long _version;
        
        public WorkflowLambdaStrictDTO()
        {
        }
        
        public WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflowLambda(this, source);
        }
        
        public WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflowLambda(this, source);
        }
        
        public WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflowLambda(this, source);
        }
        
        public WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflowLambda(this, source);
        }
        
        private WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflowLambda(this, source);
        }
        
        private WorkflowLambdaStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject)
        {
            mappingService.MapWorkflowLambda(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowLambda ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowLambda(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO))]
    public partial class WorkflowMetadataSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private string _description;
        
        private string _name;
        
        private string _value;
        
        public WorkflowMetadataSimpleDTO()
        {
        }
        
        public WorkflowMetadataSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowMetadata(domainObject, this);
        }
        
        public WorkflowMetadataSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO))]
    public partial class WorkflowMetadataFullDTO : Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public WorkflowMetadataFullDTO()
        {
        }
        
        public WorkflowMetadataFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowMetadata(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowMetadataRichDTO : Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO
    {
        
        public WorkflowMetadataRichDTO()
        {
        }
        
        public WorkflowMetadataRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowMetadata(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowMetadata), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowMetadataStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowMetadata, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowMetadata>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private string _value;
        
        private long _version;
        
        public WorkflowMetadataStrictDTO()
        {
        }
        
        public WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflowMetadata(this, source);
        }
        
        public WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflowMetadata(this, source);
        }
        
        public WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflowMetadata(this, source);
        }
        
        public WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflowMetadata(this, source);
        }
        
        private WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflowMetadata(this, source);
        }
        
        private WorkflowMetadataStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject)
        {
            mappingService.MapWorkflowMetadata(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowMetadata ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowMetadata(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowParameter), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO))]
    public partial class WorkflowParameterSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO>
    {
        
        private bool _allowNull;
        
        private string _description;
        
        private string _name;
        
        public WorkflowParameterSimpleDTO()
        {
        }
        
        public WorkflowParameterSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowParameter(domainObject, this);
        }
        
        public WorkflowParameterSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowNull
        {
            get
            {
                return this._allowNull;
            }
            set
            {
                this._allowNull = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowParameter), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO))]
    public partial class WorkflowParameterFullDTO : Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _type;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        public WorkflowParameterFullDTO()
        {
        }
        
        public WorkflowParameterFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowParameter(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowParameter), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowParameterRichDTO : Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO
    {
        
        public WorkflowParameterRichDTO()
        {
        }
        
        public WorkflowParameterRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowParameter(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowParameter), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowParameterStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowParameter, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowParameter>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private bool _allowNull;
        
        private string _description;
        
        private System.Guid _id;
        
        private string _name;
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _type;
        
        private long _version;
        
        public WorkflowParameterStrictDTO()
        {
        }
        
        public WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflowParameter(this, source);
        }
        
        public WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflowParameter(this, source);
        }
        
        public WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflowParameter(this, source);
        }
        
        public WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflowParameter(this, source);
        }
        
        private WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflowParameter(this, source);
        }
        
        private WorkflowParameterStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowNull
        {
            get
            {
                return this._allowNull;
            }
            set
            {
                this._allowNull = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowParameter domainObject)
        {
            mappingService.MapWorkflowParameter(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowParameter ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowParameter(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowSourceVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO>
    {
        
        private string _name;
        
        public WorkflowSourceVisualDTO()
        {
        }
        
        public WorkflowSourceVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowSource domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowSource(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO))]
    public partial class WorkflowSourceSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public WorkflowSourceSimpleDTO()
        {
        }
        
        public WorkflowSourceSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowSource domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowSource(domainObject, this);
        }
        
        public WorkflowSourceSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO))]
    public partial class WorkflowSourceFullDTO : Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _elements;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO _path;
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _type;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _workflow;
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _workflowType;
        
        public WorkflowSourceFullDTO()
        {
        }
        
        public WorkflowSourceFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowSource domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowSource(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Elements
        {
            get
            {
                return this._elements;
            }
            set
            {
                this._elements = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO WorkflowType
        {
            get
            {
                return this._workflowType;
            }
            set
            {
                this._workflowType = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowSourceRichDTO : Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO
    {
        
        public WorkflowSourceRichDTO()
        {
        }
        
        public WorkflowSourceRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowSource domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowSource(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Definition.WorkflowSource), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowSourceStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowSource, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private string _description;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _elements;
        
        private System.Guid _id;
        
        private string _name;
        
        private Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO _path;
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _type;
        
        private long _version;
        
        public WorkflowSourceStrictDTO()
        {
        }
        
        public WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflowSource(this, source);
        }
        
        public WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflowSource(this, source);
        }
        
        public WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflowSource(this, source);
        }
        
        public WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflowSource(this, source);
        }
        
        private WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflowSource(this, source);
        }
        
        private WorkflowSourceStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Elements
        {
            get
            {
                return this._elements;
            }
            set
            {
                this._elements = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Definition.WorkflowSource domainObject)
        {
            mappingService.MapWorkflowSource(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Definition.WorkflowSource ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowSource(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.DomainTypeRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class DomainTypeRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.DomainTypeRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.DomainTypeRootFilterModel>
    {
        
        private bool _includeBaseTargetSystem = true;
        
        private bool? _isSource;
        
        private Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO _targetSystem;
        
        public DomainTypeRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeBaseTargetSystem
        {
            get
            {
                return this._includeBaseTargetSystem;
            }
            set
            {
                this._includeBaseTargetSystem = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool? IsSource
        {
            get
            {
                return this._isSource;
            }
            set
            {
                this._isSource = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.DomainTypeRootFilterModel domainObject)
        {
            mappingService.MapDomainTypeRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.DomainTypeRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToDomainTypeRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.EventRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class EventRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.EventRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.EventRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public EventRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.EventRootFilterModel domainObject)
        {
            mappingService.MapEventRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.EventRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToEventRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ExecuteCommandRequest), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ExecuteCommandRequestStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ExecuteCommandRequest>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ExecuteCommandRequest>
    {
        
        private Framework.Workflow.Generated.DTO.CommandIdentityDTO _command;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO>();
        
        private Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO _taskInstance;
        
        public ExecuteCommandRequestStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandIdentityDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO TaskInstance
        {
            get
            {
                return this._taskInstance;
            }
            set
            {
                this._taskInstance = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ExecuteCommandRequest domainObject)
        {
            mappingService.MapExecuteCommandRequest(this, domainObject);
        }
        
        public Framework.Workflow.Domain.ExecuteCommandRequest ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToExecuteCommandRequest(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ExecuteCommandRequestParameter), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO))]
    public partial class ExecuteCommandRequestParameterSimpleDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO
    {
        
        private string _value;
        
        public ExecuteCommandRequestParameterSimpleDTO()
        {
        }
        
        public ExecuteCommandRequestParameterSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecuteCommandRequestParameter(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ExecuteCommandRequestParameter), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO))]
    public partial class ExecuteCommandRequestParameterFullDTO : Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO _definition;
        
        public ExecuteCommandRequestParameterFullDTO()
        {
        }
        
        public ExecuteCommandRequestParameterFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecuteCommandRequestParameter(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ExecuteCommandRequestParameter), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ExecuteCommandRequestParameterRichDTO : Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO
    {
        
        public ExecuteCommandRequestParameterRichDTO()
        {
        }
        
        public ExecuteCommandRequestParameterRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecuteCommandRequestParameter(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ExecuteCommandRequestParameter), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ExecuteCommandRequestParameterStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ExecuteCommandRequestParameter>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ExecuteCommandRequestParameter>
    {
        
        private Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO _definition;
        
        private string _value;
        
        public ExecuteCommandRequestParameterStrictDTO()
        {
        }
        
        public ExecuteCommandRequestParameterStrictDTO(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForExecuteCommandRequestParameter(this, source);
        }
        
        public ExecuteCommandRequestParameterStrictDTO(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ExecuteCommandRequestParameterStrictDTO(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForExecuteCommandRequestParameter(this, source);
        }
        
        public ExecuteCommandRequestParameterStrictDTO(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ExecuteCommandRequestParameterStrictDTO(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForExecuteCommandRequestParameter(this, source);
        }
        
        public ExecuteCommandRequestParameterStrictDTO(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject)
        {
            mappingService.MapExecuteCommandRequestParameter(this, domainObject);
        }
        
        public Framework.Workflow.Domain.ExecuteCommandRequestParameter ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToExecuteCommandRequestParameter(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.GroupExecuteCommandRequest), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO))]
    public partial class GroupExecuteCommandRequestSimpleDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO
    {
        
        public GroupExecuteCommandRequestSimpleDTO()
        {
        }
        
        public GroupExecuteCommandRequestSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapGroupExecuteCommandRequest(domainObject, this);
        }
        
        public virtual Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.GroupExecuteCommandRequest), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO))]
    public partial class GroupExecuteCommandRequestFullDTO : Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandSimpleDTO _command;
        
        public GroupExecuteCommandRequestFullDTO()
        {
        }
        
        public GroupExecuteCommandRequestFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapGroupExecuteCommandRequest(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandSimpleDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.GroupExecuteCommandRequest), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class GroupExecuteCommandRequestRichDTO : Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> _taskInstances = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO>();
        
        public GroupExecuteCommandRequestRichDTO()
        {
        }
        
        public GroupExecuteCommandRequestRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapGroupExecuteCommandRequest(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> TaskInstances
        {
            get
            {
                return this._taskInstances;
            }
            set
            {
                this._taskInstances = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.GroupExecuteCommandRequest), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class GroupExecuteCommandRequestStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.GroupExecuteCommandRequest>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.GroupExecuteCommandRequest>
    {
        
        private Framework.Workflow.Generated.DTO.CommandIdentityDTO _command;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO> _taskInstances = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO>();
        
        public GroupExecuteCommandRequestStrictDTO()
        {
        }
        
        public GroupExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForGroupExecuteCommandRequest(this, source);
        }
        
        public GroupExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public GroupExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForGroupExecuteCommandRequest(this, source);
        }
        
        public GroupExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public GroupExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForGroupExecuteCommandRequest(this, source);
        }
        
        public GroupExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandIdentityDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO> TaskInstances
        {
            get
            {
                return this._taskInstances;
            }
            set
            {
                this._taskInstances = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject)
        {
            mappingService.MapGroupExecuteCommandRequest(this, domainObject);
        }
        
        public Framework.Workflow.Domain.GroupExecuteCommandRequest ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToGroupExecuteCommandRequest(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.MassExecuteCommandRequest), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO))]
    public partial class MassExecuteCommandRequestSimpleDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO
    {
        
        public MassExecuteCommandRequestSimpleDTO()
        {
        }
        
        public MassExecuteCommandRequestSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.MassExecuteCommandRequest domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMassExecuteCommandRequest(domainObject, this);
        }
        
        public virtual Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.MassExecuteCommandRequest), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO))]
    public partial class MassExecuteCommandRequestFullDTO : Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO
    {
        
        public MassExecuteCommandRequestFullDTO()
        {
        }
        
        public MassExecuteCommandRequestFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.MassExecuteCommandRequest domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMassExecuteCommandRequest(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.MassExecuteCommandRequest), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MassExecuteCommandRequestRichDTO : Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO> _groups = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO>();
        
        public MassExecuteCommandRequestRichDTO()
        {
        }
        
        public MassExecuteCommandRequestRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.MassExecuteCommandRequest domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMassExecuteCommandRequest(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO> Groups
        {
            get
            {
                return this._groups;
            }
            set
            {
                this._groups = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.MassExecuteCommandRequest), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MassExecuteCommandRequestStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.MassExecuteCommandRequest>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.MassExecuteCommandRequest>
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO> _groups = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO>();
        
        public MassExecuteCommandRequestStrictDTO()
        {
        }
        
        public MassExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForMassExecuteCommandRequest(this, source);
        }
        
        public MassExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public MassExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForMassExecuteCommandRequest(this, source);
        }
        
        public MassExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public MassExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForMassExecuteCommandRequest(this, source);
        }
        
        public MassExecuteCommandRequestStrictDTO(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO> Groups
        {
            get
            {
                return this._groups;
            }
            set
            {
                this._groups = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.MassExecuteCommandRequest domainObject)
        {
            mappingService.MapMassExecuteCommandRequest(this, domainObject);
        }
        
        public Framework.Workflow.Domain.MassExecuteCommandRequest ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToMassExecuteCommandRequest(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.ParallelStateRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ParallelStateRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ParallelStateRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.ParallelStateRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public ParallelStateRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.ParallelStateRootFilterModel domainObject)
        {
            mappingService.MapParallelStateRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.ParallelStateRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToParallelStateRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniAvailableTaskInstanceGroupProjectionDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO> _items;
        
        private Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO _task;
        
        public MiniAvailableTaskInstanceGroupProjectionDTO()
        {
        }
        
        public MiniAvailableTaskInstanceGroupProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniAvailableTaskInstanceGroup(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO Task
        {
            get
            {
                return this._task;
            }
            set
            {
                this._task = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniAvailableTaskInstanceGroupItemProjectionDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO
    {
        
        private System.Guid[] _commandsIdents;
        
        private string[] _path;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO> _taskInstances;
        
        public MiniAvailableTaskInstanceGroupItemProjectionDTO()
        {
        }
        
        public MiniAvailableTaskInstanceGroupItemProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniAvailableTaskInstanceGroupItem(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] CommandsIdents
        {
            get
            {
                return this._commandsIdents;
            }
            set
            {
                this._commandsIdents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO> TaskInstances
        {
            get
            {
                return this._taskInstances;
            }
            set
            {
                this._taskInstances = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceWorkflowGroup), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniAvailableTaskInstanceWorkflowGroupProjectionDTO : Framework.Workflow.Generated.DTO.BaseAbstractDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO> _items;
        
        private Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO _source;
        
        private Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO _workflow;
        
        public MiniAvailableTaskInstanceWorkflowGroupProjectionDTO()
        {
        }
        
        public MiniAvailableTaskInstanceWorkflowGroupProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceWorkflowGroup domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniAvailableTaskInstanceWorkflowGroup(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO Source
        {
            get
            {
                return this._source;
            }
            set
            {
                this._source = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniCommand), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniCommandProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandIdentityDTO>
    {
        
        private string _description;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO> _metadatas;
        
        private string _name;
        
        private int _orderIndex;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO> _parameters;
        
        public MiniCommandProjectionDTO()
        {
        }
        
        public MiniCommandProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniCommand domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniCommand(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.CommandIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderIndex
        {
            get
            {
                return this._orderIndex;
            }
            set
            {
                this._orderIndex = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniCommandMetadata), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniCommandMetadataProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO
    {
        
        private string _name;
        
        private string _value;
        
        public MiniCommandMetadataProjectionDTO()
        {
        }
        
        public MiniCommandMetadataProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniCommandMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniCommandMetadata(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniCommandParameter), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniCommandParameterProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO>
    {
        
        private bool _isReadOnly;
        
        private string _name;
        
        public MiniCommandParameterProjectionDTO()
        {
        }
        
        public MiniCommandParameterProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniCommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniCommandParameter(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly
        {
            get
            {
                return this._isReadOnly;
            }
            set
            {
                this._isReadOnly = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniState), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniStateProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateIdentityDTO>
    {
        
        private string _name;
        
        public MiniStateProjectionDTO()
        {
        }
        
        public MiniStateProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniState domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniState(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.StateIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniStateBase), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniStateBaseProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateBaseIdentityDTO>
    {
        
        private string _name;
        
        public MiniStateBaseProjectionDTO()
        {
        }
        
        public MiniStateBaseProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniStateBase domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniStateBase(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.StateBaseIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateBaseIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniTask), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniTaskProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskIdentityDTO>
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO> _commands;
        
        private string _description;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO> _metadatas;
        
        private string _name;
        
        private string _stateName;
        
        public MiniTaskProjectionDTO()
        {
        }
        
        public MiniTaskProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniTask domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniTask(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO> Commands
        {
            get
            {
                return this._commands;
            }
            set
            {
                this._commands = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TaskIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName
        {
            get
            {
                return this._stateName;
            }
            set
            {
                this._stateName = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniTaskInstance), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniTaskInstanceProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO>
    {
        
        private string _workflowInstanceName;
        
        public MiniTaskInstanceProjectionDTO()
        {
        }
        
        public MiniTaskInstanceProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniTaskInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniTaskInstance(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkflowInstanceName
        {
            get
            {
                return this._workflowInstanceName;
            }
            set
            {
                this._workflowInstanceName = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniTaskMetadata), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniTaskMetadataProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO
    {
        
        private string _name;
        
        private string _value;
        
        public MiniTaskMetadataProjectionDTO()
        {
        }
        
        public MiniTaskMetadataProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniTaskMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniTaskMetadata(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniWorkflow), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniWorkflowProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO>
    {
        
        private string _description;
        
        private Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO _domainType;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO> _metadatas;
        
        private string _name;
        
        private System.Guid? _ownerId;
        
        public MiniWorkflowProjectionDTO()
        {
        }
        
        public MiniWorkflowProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniWorkflow domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniWorkflow(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO> Metadatas
        {
            get
            {
                return this._metadatas;
            }
            set
            {
                this._metadatas = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? OwnerId
        {
            get
            {
                return this._ownerId;
            }
            set
            {
                this._ownerId = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniWorkflowInstance), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniWorkflowInstanceProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO>
    {
        
        private string _name;
        
        public MiniWorkflowInstanceProjectionDTO()
        {
        }
        
        public MiniWorkflowInstanceProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniWorkflowInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniWorkflowInstance(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniWorkflowMetadata), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniWorkflowMetadataProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO
    {
        
        private string _name;
        
        private string _value;
        
        public MiniWorkflowMetadataProjectionDTO()
        {
        }
        
        public MiniWorkflowMetadataProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniWorkflowMetadata domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniWorkflowMetadata(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.MiniWorkflowSource), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class MiniWorkflowSourceProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO>
    {
        
        private string _description;
        
        private string _name;
        
        private Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO _type;
        
        public MiniWorkflowSourceProjectionDTO()
        {
        }
        
        public MiniWorkflowSourceProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.MiniWorkflowSource domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapMiniWorkflowSource(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.VisualDomainType), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class VisualDomainTypeProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO>
    {
        
        private string _name;
        
        public VisualDomainTypeProjectionDTO()
        {
        }
        
        public VisualDomainTypeProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.VisualDomainType domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapVisualDomainType(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Projections.VisualWorkflow), "ProjectionDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class VisualWorkflowProjectionDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO>
    {
        
        private string _name;
        
        public VisualWorkflowProjectionDTO()
        {
        }
        
        public VisualWorkflowProjectionDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Projections.VisualWorkflow domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapVisualWorkflow(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.RoleRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class RoleRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.RoleRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.RoleRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public RoleRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.RoleRootFilterModel domainObject)
        {
            mappingService.MapRoleRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.RoleRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToRoleRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.ExecutedCommand), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO))]
    public partial class ExecutedCommandSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        public ExecutedCommandSimpleDTO()
        {
        }
        
        public ExecutedCommandSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecutedCommand(domainObject, this);
        }
        
        public ExecutedCommandSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.ExecutedCommand), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO))]
    public partial class ExecutedCommandFullDTO : Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.CommandSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO _task;
        
        public ExecutedCommandFullDTO()
        {
        }
        
        public ExecutedCommandFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecutedCommand(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO Task
        {
            get
            {
                return this._task;
            }
            set
            {
                this._task = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.ExecutedCommand), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ExecutedCommandRichDTO : Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO>();
        
        public ExecutedCommandRichDTO()
        {
        }
        
        public ExecutedCommandRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecutedCommand(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO))]
    public partial class ExecutedCommandParameterSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private string _value;
        
        public ExecutedCommandParameterSimpleDTO()
        {
        }
        
        public ExecutedCommandParameterSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecutedCommandParameter(domainObject, this);
        }
        
        public ExecutedCommandParameterSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO))]
    public partial class ExecutedCommandParameterFullDTO : Framework.Workflow.Generated.DTO.ExecutedCommandParameterSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO _command;
        
        private Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _type;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _workflowInstance;
        
        public ExecutedCommandParameterFullDTO()
        {
        }
        
        public ExecutedCommandParameterFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecutedCommandParameter(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO Command
        {
            get
            {
                return this._command;
            }
            set
            {
                this._command = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO WorkflowInstance
        {
            get
            {
                return this._workflowInstance;
            }
            set
            {
                this._workflowInstance = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class ExecutedCommandParameterRichDTO : Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO
    {
        
        public ExecutedCommandParameterRichDTO()
        {
        }
        
        public ExecutedCommandParameterRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapExecutedCommandParameter(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.StateInstance), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateInstanceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateInstanceRichDTO))]
    public partial class StateInstanceSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO>
    {
        
        private bool _isAvailable;
        
        public StateInstanceSimpleDTO()
        {
        }
        
        public StateInstanceSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.StateInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateInstance(domainObject, this);
        }
        
        public StateInstanceSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvailable
        {
            get
            {
                return this._isAvailable;
            }
            set
            {
                this._isAvailable = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.StateInstance), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.StateInstanceRichDTO))]
    public partial class StateInstanceFullDTO : Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.StateBaseSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _workflow;
        
        public StateInstanceFullDTO()
        {
        }
        
        public StateInstanceFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.StateInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateBaseSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.StateInstance), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateInstanceRichDTO : Framework.Workflow.Generated.DTO.StateInstanceFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceRichDTO> _tasks = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceRichDTO>();
        
        public StateInstanceRichDTO()
        {
        }
        
        public StateInstanceRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.StateInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapStateInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceRichDTO> Tasks
        {
            get
            {
                return this._tasks;
            }
            set
            {
                this._tasks = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskInstanceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskInstanceRichDTO))]
    public partial class TaskInstanceSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO>
    {
        
        private bool _isAvailable;
        
        public TaskInstanceSimpleDTO()
        {
        }
        
        public TaskInstanceSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TaskInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTaskInstance(domainObject, this);
        }
        
        public TaskInstanceSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvailable
        {
            get
            {
                return this._isAvailable;
            }
            set
            {
                this._isAvailable = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TaskInstanceRichDTO))]
    public partial class TaskInstanceFullDTO : Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.TaskSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO _state;
        
        private Framework.Workflow.Generated.DTO.StateBaseSimpleDTO _stateDefinition;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _workflow;
        
        public TaskInstanceFullDTO()
        {
        }
        
        public TaskInstanceFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TaskInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTaskInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TaskSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateBaseSimpleDTO StateDefinition
        {
            get
            {
                return this._stateDefinition;
            }
            set
            {
                this._stateDefinition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskInstanceRichDTO : Framework.Workflow.Generated.DTO.TaskInstanceFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO> _commands = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO>();
        
        public TaskInstanceRichDTO()
        {
        }
        
        public TaskInstanceRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TaskInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTaskInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO> Commands
        {
            get
            {
                return this._commands;
            }
            set
            {
                this._commands = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TaskInstance), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskInstanceStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Runtime.TaskInstance, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private System.Guid _id;
        
        private long _version;
        
        public TaskInstanceStrictDTO()
        {
        }
        
        public TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.TaskInstanceRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TaskInstanceFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForTaskInstance(this, source);
        }
        
        public TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.TaskInstanceRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.TaskInstanceFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForTaskInstance(this, source);
        }
        
        public TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.TaskInstanceFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForTaskInstance(this, source);
        }
        
        public TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForTaskInstance(this, source);
        }
        
        private TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForTaskInstance(this, source);
        }
        
        private TaskInstanceStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TaskInstance domainObject)
        {
            mappingService.MapTaskInstance(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Runtime.TaskInstance ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTaskInstance(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TransitionInstance), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO))]
    public partial class TransitionInstanceSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO>
    {
        
        public TransitionInstanceSimpleDTO()
        {
        }
        
        public TransitionInstanceSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TransitionInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransitionInstance(domainObject, this);
        }
        
        public TransitionInstanceSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        public Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO(this.Id);
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TransitionInstance), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO))]
    public partial class TransitionInstanceFullDTO : Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.TransitionSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO _from;
        
        private Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO _to;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _workflowInstance;
        
        public TransitionInstanceFullDTO()
        {
        }
        
        public TransitionInstanceFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TransitionInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransitionInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.TransitionSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO From
        {
            get
            {
                return this._from;
            }
            set
            {
                this._from = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO To
        {
            get
            {
                return this._to;
            }
            set
            {
                this._to = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO WorkflowInstance
        {
            get
            {
                return this._workflowInstance;
            }
            set
            {
                this._workflowInstance = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.TransitionInstance), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionInstanceRichDTO : Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO
    {
        
        public TransitionInstanceRichDTO()
        {
        }
        
        public TransitionInstanceRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.TransitionInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapTransitionInstance(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), "VisualDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceVisualDTO : Framework.Workflow.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO>
    {
        
        private string _name;
        
        public WorkflowInstanceVisualDTO()
        {
        }
        
        public WorkflowInstanceVisualDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstance(domainObject, this);
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO))]
    public partial class WorkflowInstanceSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO>
    {
        
        private string _description;
        
        private System.Guid _domainObjectId;
        
        private bool _isAborted;
        
        private bool _isFinished;
        
        private string _name;
        
        public WorkflowInstanceSimpleDTO()
        {
        }
        
        public WorkflowInstanceSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstance(domainObject, this);
        }
        
        public WorkflowInstanceSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainObjectId
        {
            get
            {
                return this._domainObjectId;
            }
            set
            {
                this._domainObjectId = value;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAborted
        {
            get
            {
                return this._isAborted;
            }
            set
            {
                this._isAborted = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinished
        {
            get
            {
                return this._isFinished;
            }
            set
            {
                this._isFinished = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO))]
    public partial class WorkflowInstanceFullDTO : Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO _currentState;
        
        private Framework.Workflow.Generated.DTO.StateBaseSimpleDTO _currentStateDefinition;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _owner;
        
        private Framework.Workflow.Generated.DTO.WorkflowSimpleDTO _ownerDefinition;
        
        private Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO _ownerState;
        
        public WorkflowInstanceFullDTO()
        {
        }
        
        public WorkflowInstanceFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO CurrentState
        {
            get
            {
                return this._currentState;
            }
            set
            {
                this._currentState = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateBaseSimpleDTO CurrentStateDefinition
        {
            get
            {
                return this._currentStateDefinition;
            }
            set
            {
                this._currentStateDefinition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowSimpleDTO OwnerDefinition
        {
            get
            {
                return this._ownerDefinition;
            }
            set
            {
                this._ownerDefinition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO OwnerState
        {
            get
            {
                return this._ownerState;
            }
            set
            {
                this._ownerState = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceRichDTO : Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceRichDTO> _states = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO> _transitions = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO>();
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO> _watchers = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO>();
        
        public WorkflowInstanceRichDTO()
        {
        }
        
        public WorkflowInstanceRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstance(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceRichDTO> States
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO> Transitions
        {
            get
            {
                return this._transitions;
            }
            set
            {
                this._transitions = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO> Watchers
        {
            get
            {
                return this._watchers;
            }
            set
            {
                this._watchers = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstance), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO>, Framework.Persistent.IVersionObject<long>
    {
        
        private System.Guid _id;
        
        private long _version;
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO> _watchers = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO>();
        
        public WorkflowInstanceStrictDTO()
        {
        }
        
        public WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflowInstance(this, source);
        }
        
        public WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflowInstance(this, source);
        }
        
        public WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflowInstance(this, source);
        }
        
        public WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflowInstance(this, source);
        }
        
        private WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflowInstance(this, source);
        }
        
        private WorkflowInstanceStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO Identity
        {
            get
            {
                return new Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO> Watchers
        {
            get
            {
                return this._watchers;
            }
            set
            {
                this._watchers = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject)
        {
            mappingService.MapWorkflowInstance(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Runtime.WorkflowInstance ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowInstance(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO))]
    public partial class WorkflowInstanceParameterSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private string _value;
        
        public WorkflowInstanceParameterSimpleDTO()
        {
        }
        
        public WorkflowInstanceParameterSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstanceParameter(domainObject, this);
        }
        
        public WorkflowInstanceParameterSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO))]
    public partial class WorkflowInstanceParameterFullDTO : Framework.Workflow.Generated.DTO.WorkflowInstanceParameterSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO _definition;
        
        private Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO _type;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _workflowInstance;
        
        public WorkflowInstanceParameterFullDTO()
        {
        }
        
        public WorkflowInstanceParameterFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstanceParameter(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO WorkflowInstance
        {
            get
            {
                return this._workflowInstance;
            }
            set
            {
                this._workflowInstance = value;
            }
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceParameterRichDTO : Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO
    {
        
        public WorkflowInstanceParameterRichDTO()
        {
        }
        
        public WorkflowInstanceParameterRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstanceParameter(domainObject, this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher), "SimpleDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO))]
    public partial class WorkflowInstanceWatcherSimpleDTO : Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO
    {
        
        private string _login;
        
        public WorkflowInstanceWatcherSimpleDTO()
        {
        }
        
        public WorkflowInstanceWatcherSimpleDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstanceWatcher(domainObject, this);
        }
        
        public WorkflowInstanceWatcherSimpleDTO(string id)
        {
            this.Id = new System.Guid(id);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login
        {
            get
            {
                return this._login;
            }
            set
            {
                this._login = value;
            }
        }
        
        public virtual Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher), "FullDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO))]
    public partial class WorkflowInstanceWatcherFullDTO : Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO _workflowInstance;
        
        public WorkflowInstanceWatcherFullDTO()
        {
        }
        
        public WorkflowInstanceWatcherFullDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstanceWatcher(domainObject, this);
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO WorkflowInstance
        {
            get
            {
                return this._workflowInstance;
            }
            set
            {
                this._workflowInstance = value;
            }
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher), "RichDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceWatcherRichDTO : Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO
    {
        
        public WorkflowInstanceWatcherRichDTO()
        {
        }
        
        public WorkflowInstanceWatcherRichDTO(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject) : 
                base(mappingService, domainObject)
        {
            mappingService.MapWorkflowInstanceWatcher(domainObject, this);
        }
        
        public override Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO ToStrict()
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceWatcherStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher, System.Guid>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>, Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IVersionObject<long>
    {
        
        private System.Guid _id;
        
        private string _login;
        
        private long _version;
        
        public WorkflowInstanceWatcherStrictDTO()
        {
        }
        
        public WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForWorkflowInstanceWatcher(this, source);
        }
        
        public WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForWorkflowInstanceWatcher(this, source);
        }
        
        public WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForWorkflowInstanceWatcher(this, source);
        }
        
        public WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService) : 
                this(((Framework.Workflow.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForWorkflowInstanceWatcher(this, source);
        }
        
        private WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source, Framework.Workflow.Generated.DTO.IWorkflowClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForWorkflowInstanceWatcher(this, source);
        }
        
        private WorkflowInstanceWatcherStrictDTO(Framework.Workflow.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Workflow.Generated.DTO.WorkflowClientPrimitiveDTOMappingService.Default)
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login
        {
            get
            {
                return this._login;
            }
            set
            {
                this._login = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        long Framework.Persistent.IVersionObject<long>.Version
        {
            get
            {
                return this.Version;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject)
        {
            mappingService.MapWorkflowInstanceWatcher(this, domainObject);
        }
        
        public Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowInstanceWatcher(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StartWorkflowDomainObjectConditionRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public StartWorkflowDomainObjectConditionRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel domainObject)
        {
            mappingService.MapStartWorkflowDomainObjectConditionRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStartWorkflowDomainObjectConditionRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.StartWorkflowRequest), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StartWorkflowRequestStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StartWorkflowRequest>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StartWorkflowRequest>
    {
        
        private System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO> _parameters = new System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO>();
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public StartWorkflowRequestStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.StartWorkflowRequest domainObject)
        {
            mappingService.MapStartWorkflowRequest(this, domainObject);
        }
        
        public Framework.Workflow.Domain.StartWorkflowRequest ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStartWorkflowRequest(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.StartWorkflowRequestParameter), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StartWorkflowRequestParameterStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StartWorkflowRequestParameter>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StartWorkflowRequestParameter>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO _definition;
        
        private string _value;
        
        public StartWorkflowRequestParameterStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.StartWorkflowRequestParameter domainObject)
        {
            mappingService.MapStartWorkflowRequestParameter(this, domainObject);
        }
        
        public Framework.Workflow.Domain.StartWorkflowRequestParameter ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStartWorkflowRequestParameter(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.StateBaseRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateBaseRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StateBaseRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StateBaseRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public StateBaseRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.StateBaseRootFilterModel domainObject)
        {
            mappingService.MapStateBaseRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.StateBaseRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateBaseRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.StateRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class StateRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StateRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.StateRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public StateRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.StateRootFilterModel domainObject)
        {
            mappingService.MapStateRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.StateRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToStateRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.TaskInstanceRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskInstanceRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.TaskInstanceRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.TaskInstanceRootFilterModel>
    {
        
        private bool? _assignedToMe;
        
        private System.Guid _domainObjectId;
        
        private bool? _isAvailable = true;
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflowDefinition;
        
        private Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO _workflowInstance;
        
        public TaskInstanceRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool? AssignedToMe
        {
            get
            {
                return this._assignedToMe;
            }
            set
            {
                this._assignedToMe = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainObjectId
        {
            get
            {
                return this._domainObjectId;
            }
            set
            {
                this._domainObjectId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool? IsAvailable
        {
            get
            {
                return this._isAvailable;
            }
            set
            {
                this._isAvailable = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO WorkflowDefinition
        {
            get
            {
                return this._workflowDefinition;
            }
            set
            {
                this._workflowDefinition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO WorkflowInstance
        {
            get
            {
                return this._workflowInstance;
            }
            set
            {
                this._workflowInstance = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.TaskInstanceRootFilterModel domainObject)
        {
            mappingService.MapTaskInstanceRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.TaskInstanceRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTaskInstanceRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.TaskRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TaskRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.TaskRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.TaskRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public TaskRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.TaskRootFilterModel domainObject)
        {
            mappingService.MapTaskRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.TaskRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTaskRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.TransitionRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class TransitionRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.TransitionRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.TransitionRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public TransitionRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.TransitionRootFilterModel domainObject)
        {
            mappingService.MapTransitionRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.TransitionRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToTransitionRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.WorkflowCreateModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowCreateModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowCreateModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowCreateModel>
    {
        
        public WorkflowCreateModelStrictDTO()
        {
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.WorkflowCreateModel domainObject)
        {
            mappingService.MapWorkflowCreateModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.WorkflowCreateModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowCreateModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.WorkflowInstanceRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowInstanceRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowInstanceRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowInstanceRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _definition;
        
        private System.Guid _domainObjectId;
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _domainType;
        
        private bool? _isActive;
        
        private bool? _isFinal;
        
        public WorkflowInstanceRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                this._definition = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DomainObjectId
        {
            get
            {
                return this._domainObjectId;
            }
            set
            {
                this._domainObjectId = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO DomainType
        {
            get
            {
                return this._domainType;
            }
            set
            {
                this._domainType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool? IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                this._isActive = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool? IsFinal
        {
            get
            {
                return this._isFinal;
            }
            set
            {
                this._isFinal = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.WorkflowInstanceRootFilterModel domainObject)
        {
            mappingService.MapWorkflowInstanceRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.WorkflowInstanceRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowInstanceRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.WorkflowLambdaRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowLambdaRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowLambdaRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowLambdaRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        public WorkflowLambdaRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.WorkflowLambdaRootFilterModel domainObject)
        {
            mappingService.MapWorkflowLambdaRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.WorkflowLambdaRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowLambdaRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.WorkflowRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowRootFilterModel>
    {
        
        private bool? _isRoot = true;
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _owner;
        
        public WorkflowRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool? IsRoot
        {
            get
            {
                return this._isRoot;
            }
            set
            {
                this._isRoot = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.WorkflowRootFilterModel domainObject)
        {
            mappingService.MapWorkflowRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.WorkflowRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowRootFilterModel(this);
        }
    }
    
    [Framework.DomainDriven.DTOFileTypeAttribute(typeof(Framework.Workflow.Domain.WorkflowSourceRootFilterModel), "StrictDTO", Framework.DomainDriven.Serialization.DTORole.Client)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Workflow")]
    public partial class WorkflowSourceRootFilterModelStrictDTO : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowSourceRootFilterModel>, Framework.DomainDriven.IConvertMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, Framework.Workflow.Domain.WorkflowSourceRootFilterModel>
    {
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _sourceType;
        
        private Framework.Workflow.Generated.DTO.WorkflowIdentityDTO _workflow;
        
        private Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO _workflowType;
        
        public WorkflowSourceRootFilterModelStrictDTO()
        {
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO SourceType
        {
            get
            {
                return this._sourceType;
            }
            set
            {
                this._sourceType = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.WorkflowIdentityDTO Workflow
        {
            get
            {
                return this._workflow;
            }
            set
            {
                this._workflow = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO WorkflowType
        {
            get
            {
                return this._workflowType;
            }
            set
            {
                this._workflowType = value;
            }
        }
        
        public void MapToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService, Framework.Workflow.Domain.WorkflowSourceRootFilterModel domainObject)
        {
            mappingService.MapWorkflowSourceRootFilterModel(this, domainObject);
        }
        
        public Framework.Workflow.Domain.WorkflowSourceRootFilterModel ToDomainObject(Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return mappingService.ToWorkflowSourceRootFilterModel(this);
        }
    }
    
    #region 
	static
    public class LambdaHelper
    {
        
        public static Framework.Workflow.Generated.DTO.CommandFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandEventFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandEventFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandMetadataFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandMetadataFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandParameterFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.DomainTypeFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.DomainTypeFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.EventFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.EventFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.RoleFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.RoleFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateBaseFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateBaseFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TargetSystemFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TargetSystemFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskMetadataFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskMetadataFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionActionFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionActionFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO ToFullDTO(this Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO ToFullDTO(this Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO ToFullDTO(this Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO ToFullDTO(this Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateInstanceFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateInstanceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskInstanceFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO ToFullDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandEventFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionStateEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.EventFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Event> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateStartItem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateBaseFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TargetSystemFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TargetSystem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TransitionAction> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.ExecuteCommandRequestParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.GroupExecuteCommandRequest> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.MassExecuteCommandRequest> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO> ToFullDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToFullDTO(domainObject, mappingService));
        }
        
        public static Framework.Workflow.Generated.DTO.CommandIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.Command domainObject)
        {
            return new Framework.Workflow.Generated.DTO.CommandIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandEventIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.CommandEvent domainObject)
        {
            return new Framework.Workflow.Generated.DTO.CommandEventIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.CommandParameter domainObject)
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.ConditionState domainObject)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.DomainType domainObject)
        {
            return new Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.EventIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.Event domainObject)
        {
            return new Framework.Workflow.Generated.DTO.EventIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.ParallelState domainObject)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.RoleIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.Role domainObject)
        {
            return new Framework.Workflow.Generated.DTO.RoleIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject)
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.State domainObject)
        {
            return new Framework.Workflow.Generated.DTO.StateIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateBaseIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.StateBase domainObject)
        {
            return new Framework.Workflow.Generated.DTO.StateBaseIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject)
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject)
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.TargetSystem domainObject)
        {
            return new Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.Task domainObject)
        {
            return new Framework.Workflow.Generated.DTO.TaskIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.Transition domainObject)
        {
            return new Framework.Workflow.Generated.DTO.TransitionIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.Workflow domainObject)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.WorkflowLambda domainObject)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.WorkflowParameter domainObject)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Definition.WorkflowSource domainObject)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Runtime.StateInstance domainObject)
        {
            return new Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Runtime.TaskInstance domainObject)
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Runtime.TransitionInstance domainObject)
        {
            return new Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO(domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO ToIdentityDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO(domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandEventIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandEvent> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionStateEvent> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.EventIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Event> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateBaseIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TargetSystem> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO> ToIdentityDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance> domainObjects)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToIdentityDTO(domainObject));
        }
        
        public static Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceWorkflowGroupProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceWorkflowGroup domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceWorkflowGroupProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniCommand domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniCommandMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniCommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniStateProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniStateProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniStateBaseProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniStateBase domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniStateBaseProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniTask domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniTaskInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniTaskMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniWorkflow domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniWorkflowInstanceProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniWorkflowInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniWorkflowInstanceProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniWorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.MiniWorkflowSource domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.VisualDomainType domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.VisualWorkflowProjectionDTO ToProjectionDTO(this Framework.Workflow.Domain.Projections.VisualWorkflow domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.VisualWorkflowProjectionDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceWorkflowGroupProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceWorkflowGroup> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniCommand> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniCommandMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniCommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniStateProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniStateBaseProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniStateBase> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniTask> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniTaskInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniTaskMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniWorkflow> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniWorkflowInstanceProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniWorkflowInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniWorkflowMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.MiniWorkflowSource> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.VisualDomainType> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.VisualWorkflowProjectionDTO> ToProjectionDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Projections.VisualWorkflow> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject, mappingService));
        }
        
        public static Framework.Workflow.Generated.DTO.CommandRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandEventRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandMetadataRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandMetadataRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandParameterRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.DomainTypeRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.DomainTypeRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.EventRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.EventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.RoleRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.RoleRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateBaseRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateBaseRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TargetSystemRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TargetSystemRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskMetadataRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskMetadataRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionActionRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionActionRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO ToRichDTO(this Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO ToRichDTO(this Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO ToRichDTO(this Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO ToRichDTO(this Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateInstanceRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateInstanceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskInstanceRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO ToRichDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandEventRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionStateEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.EventRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Event> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateStartItem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateBaseRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TargetSystemRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TargetSystem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TransitionAction> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.ExecuteCommandRequestParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.GroupExecuteCommandRequest> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.MassExecuteCommandRequest> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO> ToRichDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject, mappingService));
        }
        
        public static Framework.Workflow.Generated.DTO.CommandSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandEventSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.EventSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.EventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.RoleSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.RoleSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateBaseSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateBaseSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ExecutedCommandParameterSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ExecutedCommandParameterSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceParameterSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceParameterSimpleDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO ToSimpleDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandEventSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandRoleAccess> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionStateEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.EventSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Event> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateStartItem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateBaseSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TargetSystem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TaskMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TransitionAction> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowMetadata> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.ExecuteCommandRequestParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.GroupExecuteCommandRequest> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.MassExecuteCommandRequest> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommand> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ExecutedCommandParameterSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.ExecutedCommandParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.StateInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TaskInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.TransitionInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceParameterSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO> ToSimpleDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject, mappingService));
        }
        
        public static Framework.Workflow.Generated.DTO.CommandVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.CommandEventVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.CommandEventVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.DomainTypeVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.DomainTypeVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.EventVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.EventVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.RoleVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.RoleVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateBaseVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateBaseVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TargetSystemVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TargetSystemVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TaskVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TaskVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.TransitionVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.TransitionVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO(mappingService, domainObject);
        }
        
        public static Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO ToVisualDTO(this Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return new Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO(mappingService, domainObject);
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Command> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.CommandEventVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.CommandEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ConditionStateEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.DomainTypeVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.DomainType> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.EventVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Event> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelState> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.RoleVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Role> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.State> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateBaseVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateBase> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.StateTimeoutEvent> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TargetSystemVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.TargetSystem> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TaskVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Task> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.TransitionVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Transition> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.Workflow> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowLambda> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Definition.WorkflowSource> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
        
        public static System.Collections.Generic.List<Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO> ToVisualDTOList(this System.Collections.Generic.IEnumerable<Framework.Workflow.Domain.Runtime.WorkflowInstance> domainObjects, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService mappingService)
        {
            return Framework.Core.EnumerableExtensions.ToList(domainObjects, domainObject => Framework.Workflow.Generated.DTO.LambdaHelper.ToVisualDTO(domainObject, mappingService));
        }
    }
    #endregion
    
    public partial interface IWorkflowDTOMappingService : Framework.DomainDriven.IDTOMappingService<Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        void MapAuditPersistentDomainObjectBase(Framework.Workflow.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO mappingObject);
        
        void MapAvailableCommandFilterModel(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.AvailableCommandFilterModel domainObject);
        
        void MapAvailableTaskInstanceMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceMainFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel domainObject);
        
        void MapAvailableTaskInstanceUntypedMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceUntypedMainFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel domainObject);
        
        void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandVisualDTO mappingObject);
        
        void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandSimpleDTO mappingObject);
        
        void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandFullDTO mappingObject);
        
        void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandRichDTO mappingObject);
        
        void MapCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Command domainObject);
        
        void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventVisualDTO mappingObject);
        
        void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventSimpleDTO mappingObject);
        
        void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventFullDTO mappingObject);
        
        void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventRichDTO mappingObject);
        
        void MapCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandEvent domainObject);
        
        void MapCommandEventRootFilterModel(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.CommandEventRootFilterModel domainObject);
        
        void MapCommandMetadata(Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO mappingObject);
        
        void MapCommandMetadata(Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.CommandMetadataFullDTO mappingObject);
        
        void MapCommandMetadata(Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.CommandMetadataRichDTO mappingObject);
        
        void MapCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandMetadata domainObject);
        
        void MapCommandParameter(Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO mappingObject);
        
        void MapCommandParameter(Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.CommandParameterFullDTO mappingObject);
        
        void MapCommandParameter(Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.CommandParameterRichDTO mappingObject);
        
        void MapCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandParameter domainObject);
        
        void MapCommandRoleAccess(Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO mappingObject);
        
        void MapCommandRoleAccess(Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO mappingObject);
        
        void MapCommandRoleAccess(Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO mappingObject);
        
        void MapCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject);
        
        void MapCommandRootFilterModel(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.CommandRootFilterModel domainObject);
        
        void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateVisualDTO mappingObject);
        
        void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO mappingObject);
        
        void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateFullDTO mappingObject);
        
        void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateRichDTO mappingObject);
        
        void MapConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ConditionState domainObject);
        
        void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO mappingObject);
        
        void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO mappingObject);
        
        void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO mappingObject);
        
        void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO mappingObject);
        
        void MapConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject);
        
        void MapConditionStateRootFilterModel(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.ConditionStateRootFilterModel domainObject);
        
        void MapDomainObjectBase(Framework.Workflow.Domain.DomainObjectBase domainObject, Framework.Workflow.Generated.DTO.BaseAbstractDTO mappingObject);
        
        void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeVisualDTO mappingObject);
        
        void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO mappingObject);
        
        void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeFullDTO mappingObject);
        
        void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeRichDTO mappingObject);
        
        void MapDomainTypeRootFilterModel(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.DomainTypeRootFilterModel domainObject);
        
        void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventVisualDTO mappingObject);
        
        void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventSimpleDTO mappingObject);
        
        void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventFullDTO mappingObject);
        
        void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventRichDTO mappingObject);
        
        void MapEventRootFilterModel(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.EventRootFilterModel domainObject);
        
        void MapExecuteCommandRequest(Framework.Workflow.Generated.DTO.ExecuteCommandRequestStrictDTO mappingObject, Framework.Workflow.Domain.ExecuteCommandRequest domainObject);
        
        void MapExecuteCommandRequestParameter(Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO mappingObject);
        
        void MapExecuteCommandRequestParameter(Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO mappingObject);
        
        void MapExecuteCommandRequestParameter(Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO mappingObject);
        
        void MapExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO mappingObject, Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject);
        
        void MapExecutedCommand(Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO mappingObject);
        
        void MapExecutedCommand(Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO mappingObject);
        
        void MapExecutedCommand(Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO mappingObject);
        
        void MapExecutedCommandParameter(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandParameterSimpleDTO mappingObject);
        
        void MapExecutedCommandParameter(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO mappingObject);
        
        void MapExecutedCommandParameter(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO mappingObject);
        
        void MapGroupExecuteCommandRequest(Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO mappingObject);
        
        void MapGroupExecuteCommandRequest(Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO mappingObject);
        
        void MapGroupExecuteCommandRequest(Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO mappingObject);
        
        void MapGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO mappingObject, Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject);
        
        void MapMassExecuteCommandRequest(Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO mappingObject);
        
        void MapMassExecuteCommandRequest(Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO mappingObject);
        
        void MapMassExecuteCommandRequest(Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO mappingObject);
        
        void MapMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO mappingObject, Framework.Workflow.Domain.MassExecuteCommandRequest domainObject);
        
        void MapMiniAvailableTaskInstanceGroup(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup domainObject, Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO mappingObject);
        
        void MapMiniAvailableTaskInstanceGroupItem(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem domainObject, Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO mappingObject);
        
        void MapMiniAvailableTaskInstanceWorkflowGroup(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceWorkflowGroup domainObject, Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceWorkflowGroupProjectionDTO mappingObject);
        
        void MapMiniCommand(Framework.Workflow.Domain.Projections.MiniCommand domainObject, Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO mappingObject);
        
        void MapMiniCommandMetadata(Framework.Workflow.Domain.Projections.MiniCommandMetadata domainObject, Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO mappingObject);
        
        void MapMiniCommandParameter(Framework.Workflow.Domain.Projections.MiniCommandParameter domainObject, Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO mappingObject);
        
        void MapMiniState(Framework.Workflow.Domain.Projections.MiniState domainObject, Framework.Workflow.Generated.DTO.MiniStateProjectionDTO mappingObject);
        
        void MapMiniStateBase(Framework.Workflow.Domain.Projections.MiniStateBase domainObject, Framework.Workflow.Generated.DTO.MiniStateBaseProjectionDTO mappingObject);
        
        void MapMiniTask(Framework.Workflow.Domain.Projections.MiniTask domainObject, Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO mappingObject);
        
        void MapMiniTaskInstance(Framework.Workflow.Domain.Projections.MiniTaskInstance domainObject, Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO mappingObject);
        
        void MapMiniTaskMetadata(Framework.Workflow.Domain.Projections.MiniTaskMetadata domainObject, Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO mappingObject);
        
        void MapMiniWorkflow(Framework.Workflow.Domain.Projections.MiniWorkflow domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO mappingObject);
        
        void MapMiniWorkflowInstance(Framework.Workflow.Domain.Projections.MiniWorkflowInstance domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowInstanceProjectionDTO mappingObject);
        
        void MapMiniWorkflowMetadata(Framework.Workflow.Domain.Projections.MiniWorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO mappingObject);
        
        void MapMiniWorkflowSource(Framework.Workflow.Domain.Projections.MiniWorkflowSource domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO mappingObject);
        
        void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateVisualDTO mappingObject);
        
        void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO mappingObject);
        
        void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateFullDTO mappingObject);
        
        void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateRichDTO mappingObject);
        
        void MapParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ParallelState domainObject);
        
        void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO mappingObject);
        
        void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO mappingObject);
        
        void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO mappingObject);
        
        void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO mappingObject);
        
        void MapParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject);
        
        void MapParallelStateRootFilterModel(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.ParallelStateRootFilterModel domainObject);
        
        void MapParallelStateStartItem(Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO mappingObject);
        
        void MapParallelStateStartItem(Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO mappingObject);
        
        void MapParallelStateStartItem(Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO mappingObject);
        
        void MapParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject);
        
        void MapPersistentDomainObjectBase(Framework.Workflow.Domain.PersistentDomainObjectBase domainObject, Framework.Workflow.Generated.DTO.BasePersistentDTO mappingObject);
        
        void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleVisualDTO mappingObject);
        
        void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleSimpleDTO mappingObject);
        
        void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleFullDTO mappingObject);
        
        void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleRichDTO mappingObject);
        
        void MapRole(Framework.Workflow.Generated.DTO.RoleStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Role domainObject);
        
        void MapRoleRootFilterModel(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.RoleRootFilterModel domainObject);
        
        void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO mappingObject);
        
        void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO mappingObject);
        
        void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO mappingObject);
        
        void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject);
        
        void MapStartWorkflowDomainObjectConditionRootFilterModel(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel domainObject);
        
        void MapStartWorkflowRequest(Framework.Workflow.Generated.DTO.StartWorkflowRequestStrictDTO mappingObject, Framework.Workflow.Domain.StartWorkflowRequest domainObject);
        
        void MapStartWorkflowRequestParameter(Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO mappingObject, Framework.Workflow.Domain.StartWorkflowRequestParameter domainObject);
        
        void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateVisualDTO mappingObject);
        
        void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateSimpleDTO mappingObject);
        
        void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateFullDTO mappingObject);
        
        void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateRichDTO mappingObject);
        
        void MapState(Framework.Workflow.Generated.DTO.StateStrictDTO mappingObject, Framework.Workflow.Domain.Definition.State domainObject);
        
        void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseVisualDTO mappingObject);
        
        void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseSimpleDTO mappingObject);
        
        void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseFullDTO mappingObject);
        
        void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseRichDTO mappingObject);
        
        void MapStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StateBase domainObject);
        
        void MapStateBaseRootFilterModel(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.StateBaseRootFilterModel domainObject);
        
        void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO mappingObject);
        
        void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO mappingObject);
        
        void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO mappingObject);
        
        void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO mappingObject);
        
        void MapStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject);
        
        void MapStateInstance(Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO mappingObject);
        
        void MapStateInstance(Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.StateInstanceFullDTO mappingObject);
        
        void MapStateInstance(Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.StateInstanceRichDTO mappingObject);
        
        void MapStateRootFilterModel(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.StateRootFilterModel domainObject);
        
        void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO mappingObject);
        
        void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO mappingObject);
        
        void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO mappingObject);
        
        void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO mappingObject);
        
        void MapStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject);
        
        void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemVisualDTO mappingObject);
        
        void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO mappingObject);
        
        void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemFullDTO mappingObject);
        
        void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemRichDTO mappingObject);
        
        void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskVisualDTO mappingObject);
        
        void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskSimpleDTO mappingObject);
        
        void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskFullDTO mappingObject);
        
        void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskRichDTO mappingObject);
        
        void MapTask(Framework.Workflow.Generated.DTO.TaskStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Task domainObject);
        
        void MapTaskInstance(Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO mappingObject);
        
        void MapTaskInstance(Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.TaskInstanceFullDTO mappingObject);
        
        void MapTaskInstance(Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.TaskInstanceRichDTO mappingObject);
        
        void MapTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO mappingObject, Framework.Workflow.Domain.Runtime.TaskInstance domainObject);
        
        void MapTaskInstanceRootFilterModel(Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.TaskInstanceRootFilterModel domainObject);
        
        void MapTaskMetadata(Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO mappingObject);
        
        void MapTaskMetadata(Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.TaskMetadataFullDTO mappingObject);
        
        void MapTaskMetadata(Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.TaskMetadataRichDTO mappingObject);
        
        void MapTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO mappingObject, Framework.Workflow.Domain.Definition.TaskMetadata domainObject);
        
        void MapTaskRootFilterModel(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.TaskRootFilterModel domainObject);
        
        void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionVisualDTO mappingObject);
        
        void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionSimpleDTO mappingObject);
        
        void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionFullDTO mappingObject);
        
        void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionRichDTO mappingObject);
        
        void MapTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Transition domainObject);
        
        void MapTransitionAction(Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO mappingObject);
        
        void MapTransitionAction(Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.TransitionActionFullDTO mappingObject);
        
        void MapTransitionAction(Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.TransitionActionRichDTO mappingObject);
        
        void MapTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO mappingObject, Framework.Workflow.Domain.Definition.TransitionAction domainObject);
        
        void MapTransitionInstance(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO mappingObject);
        
        void MapTransitionInstance(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO mappingObject);
        
        void MapTransitionInstance(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO mappingObject);
        
        void MapTransitionRootFilterModel(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.TransitionRootFilterModel domainObject);
        
        void MapVisualDomainType(Framework.Workflow.Domain.Projections.VisualDomainType domainObject, Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO mappingObject);
        
        void MapVisualWorkflow(Framework.Workflow.Domain.Projections.VisualWorkflow domainObject, Framework.Workflow.Generated.DTO.VisualWorkflowProjectionDTO mappingObject);
        
        void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowVisualDTO mappingObject);
        
        void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowSimpleDTO mappingObject);
        
        void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowFullDTO mappingObject);
        
        void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowRichDTO mappingObject);
        
        void MapWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Workflow domainObject);
        
        void MapWorkflowCreateModel(Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowCreateModel domainObject);
        
        void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO mappingObject);
        
        void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO mappingObject);
        
        void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO mappingObject);
        
        void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO mappingObject);
        
        void MapWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO mappingObject, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject);
        
        void MapWorkflowInstanceParameter(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceParameterSimpleDTO mappingObject);
        
        void MapWorkflowInstanceParameter(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO mappingObject);
        
        void MapWorkflowInstanceParameter(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO mappingObject);
        
        void MapWorkflowInstanceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowInstanceRootFilterModel domainObject);
        
        void MapWorkflowInstanceWatcher(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO mappingObject);
        
        void MapWorkflowInstanceWatcher(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO mappingObject);
        
        void MapWorkflowInstanceWatcher(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO mappingObject);
        
        void MapWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO mappingObject, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject);
        
        void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO mappingObject);
        
        void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO mappingObject);
        
        void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO mappingObject);
        
        void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO mappingObject);
        
        void MapWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject);
        
        void MapWorkflowLambdaRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowLambdaRootFilterModel domainObject);
        
        void MapWorkflowMetadata(Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO mappingObject);
        
        void MapWorkflowMetadata(Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO mappingObject);
        
        void MapWorkflowMetadata(Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO mappingObject);
        
        void MapWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject);
        
        void MapWorkflowParameter(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO mappingObject);
        
        void MapWorkflowParameter(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO mappingObject);
        
        void MapWorkflowParameter(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO mappingObject);
        
        void MapWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowParameter domainObject);
        
        void MapWorkflowRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowRootFilterModel domainObject);
        
        void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO mappingObject);
        
        void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO mappingObject);
        
        void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO mappingObject);
        
        void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO mappingObject);
        
        void MapWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowSource domainObject);
        
        void MapWorkflowSourceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowSourceRootFilterModel domainObject);
        
        Framework.Workflow.Domain.AvailableCommandFilterModel ToAvailableCommandFilterModel(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO availableCommandFilterModelStrictDTO);
        
        Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel ToAvailableTaskInstanceMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceMainFilterModelStrictDTO availableTaskInstanceMainFilterModelStrictDTO);
        
        Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel ToAvailableTaskInstanceUntypedMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceUntypedMainFilterModelStrictDTO availableTaskInstanceUntypedMainFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.Command ToCommand(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentityDTO);
        
        Framework.Workflow.Domain.Definition.Command ToCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrictDTO);
        
        Framework.Workflow.Domain.Definition.Command ToCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrictDTO, Framework.Workflow.Domain.Definition.Task master);
        
        Framework.Workflow.Domain.Definition.CommandEvent ToCommandEvent(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentityDTO);
        
        Framework.Workflow.Domain.Definition.CommandEvent ToCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO commandEventStrictDTO);
        
        Framework.Workflow.Domain.Definition.CommandEvent ToCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO commandEventStrictDTO, Framework.Workflow.Domain.Definition.Command master);
        
        Framework.Workflow.Domain.CommandEventRootFilterModel ToCommandEventRootFilterModel(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO commandEventRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.CommandMetadata ToCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO commandMetadataStrictDTO);
        
        Framework.Workflow.Domain.Definition.CommandMetadata ToCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO commandMetadataStrictDTO, Framework.Workflow.Domain.Definition.Command master);
        
        Framework.Workflow.Domain.Definition.CommandParameter ToCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO commandParameterIdentityDTO);
        
        Framework.Workflow.Domain.Definition.CommandParameter ToCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO commandParameterStrictDTO);
        
        Framework.Workflow.Domain.Definition.CommandParameter ToCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO commandParameterStrictDTO, Framework.Workflow.Domain.Definition.Command master);
        
        Framework.Workflow.Domain.Definition.CommandRoleAccess ToCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO commandRoleAccessStrictDTO);
        
        Framework.Workflow.Domain.Definition.CommandRoleAccess ToCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO commandRoleAccessStrictDTO, Framework.Workflow.Domain.Definition.Command master);
        
        Framework.Workflow.Domain.CommandRootFilterModel ToCommandRootFilterModel(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO commandRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.ConditionState ToConditionState(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentityDTO);
        
        Framework.Workflow.Domain.Definition.ConditionState ToConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrictDTO);
        
        Framework.Workflow.Domain.Definition.ConditionState ToConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.Definition.ConditionStateEvent ToConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentityDTO);
        
        Framework.Workflow.Domain.Definition.ConditionStateEvent ToConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO conditionStateEventStrictDTO);
        
        Framework.Workflow.Domain.Definition.ConditionStateEvent ToConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO conditionStateEventStrictDTO, Framework.Workflow.Domain.Definition.ConditionState master);
        
        Framework.Workflow.Domain.ConditionStateRootFilterModel ToConditionStateRootFilterModel(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO conditionStateRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.DomainType ToDomainType(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentityDTO);
        
        Framework.Workflow.Domain.DomainTypeRootFilterModel ToDomainTypeRootFilterModel(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO domainTypeRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.Event ToEvent(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentityDTO);
        
        Framework.Workflow.Domain.EventRootFilterModel ToEventRootFilterModel(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO eventRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.ExecuteCommandRequest ToExecuteCommandRequest(Framework.Workflow.Generated.DTO.ExecuteCommandRequestStrictDTO executeCommandRequestStrictDTO);
        
        Framework.Workflow.Domain.ExecuteCommandRequestParameter ToExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO executeCommandRequestParameterStrictDTO);
        
        Framework.Workflow.Domain.GroupExecuteCommandRequest ToGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO groupExecuteCommandRequestStrictDTO);
        
        Framework.Workflow.Domain.MassExecuteCommandRequest ToMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO massExecuteCommandRequestStrictDTO);
        
        Framework.Workflow.Domain.Definition.ParallelState ToParallelState(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentityDTO);
        
        Framework.Workflow.Domain.Definition.ParallelState ToParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrictDTO);
        
        Framework.Workflow.Domain.Definition.ParallelState ToParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentityDTO);
        
        Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO parallelStateFinalEventStrictDTO);
        
        Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO parallelStateFinalEventStrictDTO, Framework.Workflow.Domain.Definition.ParallelState master);
        
        Framework.Workflow.Domain.ParallelStateRootFilterModel ToParallelStateRootFilterModel(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO parallelStateRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.ParallelStateStartItem ToParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO parallelStateStartItemStrictDTO);
        
        Framework.Workflow.Domain.Definition.ParallelStateStartItem ToParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO parallelStateStartItemStrictDTO, Framework.Workflow.Domain.Definition.ParallelState master);
        
        Framework.Workflow.Domain.Definition.Role ToRole(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentityDTO);
        
        Framework.Workflow.Domain.Definition.Role ToRole(Framework.Workflow.Generated.DTO.RoleStrictDTO roleStrictDTO);
        
        Framework.Workflow.Domain.Definition.Role ToRole(Framework.Workflow.Generated.DTO.RoleStrictDTO roleStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.RoleRootFilterModel ToRoleRootFilterModel(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO roleRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentityDTO);
        
        Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrictDTO);
        
        Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel ToStartWorkflowDomainObjectConditionRootFilterModel(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO startWorkflowDomainObjectConditionRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.StartWorkflowRequest ToStartWorkflowRequest(Framework.Workflow.Generated.DTO.StartWorkflowRequestStrictDTO startWorkflowRequestStrictDTO);
        
        Framework.Workflow.Domain.StartWorkflowRequestParameter ToStartWorkflowRequestParameter(Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO startWorkflowRequestParameterStrictDTO);
        
        Framework.Workflow.Domain.Definition.State ToState(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentityDTO);
        
        Framework.Workflow.Domain.Definition.State ToState(Framework.Workflow.Generated.DTO.StateStrictDTO stateStrictDTO);
        
        Framework.Workflow.Domain.Definition.State ToState(Framework.Workflow.Generated.DTO.StateStrictDTO stateStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.Definition.StateBase ToStateBase(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentityDTO);
        
        Framework.Workflow.Domain.Definition.StateBase ToStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO stateBaseStrictDTO);
        
        Framework.Workflow.Domain.StateBaseRootFilterModel ToStateBaseRootFilterModel(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO stateBaseRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentityDTO);
        
        Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO stateDomainObjectEventStrictDTO);
        
        Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO stateDomainObjectEventStrictDTO, Framework.Workflow.Domain.Definition.State master);
        
        Framework.Workflow.Domain.Runtime.StateInstance ToStateInstance(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentityDTO);
        
        Framework.Workflow.Domain.StateRootFilterModel ToStateRootFilterModel(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO stateRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.StateTimeoutEvent ToStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentityDTO);
        
        Framework.Workflow.Domain.Definition.StateTimeoutEvent ToStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO stateTimeoutEventStrictDTO);
        
        Framework.Workflow.Domain.Definition.StateTimeoutEvent ToStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO stateTimeoutEventStrictDTO, Framework.Workflow.Domain.Definition.State master);
        
        Framework.Workflow.Domain.Definition.TargetSystem ToTargetSystem(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentityDTO);
        
        Framework.Workflow.Domain.Definition.Task ToTask(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentityDTO);
        
        Framework.Workflow.Domain.Definition.Task ToTask(Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrictDTO);
        
        Framework.Workflow.Domain.Definition.Task ToTask(Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrictDTO, Framework.Workflow.Domain.Definition.State master);
        
        Framework.Workflow.Domain.Runtime.TaskInstance ToTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentityDTO);
        
        Framework.Workflow.Domain.Runtime.TaskInstance ToTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO taskInstanceStrictDTO);
        
        Framework.Workflow.Domain.TaskInstanceRootFilterModel ToTaskInstanceRootFilterModel(Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO taskInstanceRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.TaskMetadata ToTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO taskMetadataStrictDTO);
        
        Framework.Workflow.Domain.Definition.TaskMetadata ToTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO taskMetadataStrictDTO, Framework.Workflow.Domain.Definition.Task master);
        
        Framework.Workflow.Domain.TaskRootFilterModel ToTaskRootFilterModel(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO taskRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.Transition ToTransition(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentityDTO);
        
        Framework.Workflow.Domain.Definition.Transition ToTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrictDTO);
        
        Framework.Workflow.Domain.Definition.Transition ToTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.Definition.TransitionAction ToTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO transitionActionStrictDTO);
        
        Framework.Workflow.Domain.Definition.TransitionAction ToTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO transitionActionStrictDTO, Framework.Workflow.Domain.Definition.Transition master);
        
        Framework.Workflow.Domain.Runtime.TransitionInstance ToTransitionInstance(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentityDTO);
        
        Framework.Workflow.Domain.TransitionRootFilterModel ToTransitionRootFilterModel(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO transitionRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentityDTO);
        
        Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrictDTO);
        
        Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrictDTO, bool allowCreate);
        
        Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.WorkflowCreateModel ToWorkflowCreateModel(Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO workflowCreateModelStrictDTO);
        
        Framework.Workflow.Domain.Runtime.WorkflowInstance ToWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentityDTO);
        
        Framework.Workflow.Domain.Runtime.WorkflowInstance ToWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO workflowInstanceStrictDTO);
        
        Framework.Workflow.Domain.WorkflowInstanceRootFilterModel ToWorkflowInstanceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO workflowInstanceRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher ToWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO workflowInstanceWatcherStrictDTO);
        
        Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher ToWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO workflowInstanceWatcherStrictDTO, Framework.Workflow.Domain.Runtime.WorkflowInstance master);
        
        Framework.Workflow.Domain.Definition.WorkflowLambda ToWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentityDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowLambda ToWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrictDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowLambda ToWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.WorkflowLambdaRootFilterModel ToWorkflowLambdaRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO workflowLambdaRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowMetadata ToWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO workflowMetadataStrictDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowMetadata ToWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO workflowMetadataStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.Definition.WorkflowParameter ToWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO workflowParameterIdentityDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowParameter ToWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO workflowParameterStrictDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowParameter ToWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO workflowParameterStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.WorkflowRootFilterModel ToWorkflowRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO workflowRootFilterModelStrictDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowSource ToWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentityDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowSource ToWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO workflowSourceStrictDTO);
        
        Framework.Workflow.Domain.Definition.WorkflowSource ToWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO workflowSourceStrictDTO, Framework.Workflow.Domain.Definition.Workflow master);
        
        Framework.Workflow.Domain.WorkflowSourceRootFilterModel ToWorkflowSourceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO workflowSourceRootFilterModelStrictDTO);
    }
    
    public abstract partial class WorkflowServerPrimitiveDTOMappingServiceBase : Framework.DomainDriven.DTOMappingService<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.AuditPersistentDomainObjectBase, System.Guid, long>, Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService
    {
        
        protected WorkflowServerPrimitiveDTOMappingServiceBase(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
        
        public virtual void MapAuditPersistentDomainObjectBase(Framework.Workflow.Domain.AuditPersistentDomainObjectBase domainObject, Framework.Workflow.Generated.DTO.BaseAuditPersistentDTO mappingObject)
        {
            mappingObject.Active = domainObject.Active;
            mappingObject.CreateDate = domainObject.CreateDate;
            mappingObject.CreatedBy = domainObject.CreatedBy;
            mappingObject.ModifiedBy = domainObject.ModifiedBy;
            mappingObject.ModifyDate = domainObject.ModifyDate;
            mappingObject.Version = domainObject.Version;
        }
        
        public virtual void MapAvailableCommandFilterModel(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.AvailableCommandFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.TaskInstance, default(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO)))
            {
                domainObject.TaskInstance = this.ToTaskInstance(mappingObject.TaskInstance);
            }
            else
            {
                domainObject.TaskInstance = null;
            }
        }
        
        public virtual void MapAvailableTaskInstanceMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceMainFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel domainObject)
        {
            domainObject.DomainObjectId = mappingObject.DomainObjectId;
            if (!object.Equals(mappingObject.SourceType, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.SourceType = this.ToDomainType(mappingObject.SourceType);
            }
            else
            {
                domainObject.SourceType = null;
            }
        }
        
        public virtual void MapAvailableTaskInstanceUntypedMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceUntypedMainFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel domainObject)
        {
            domainObject.DomainObjectId = mappingObject.DomainObjectId;
            domainObject.SourceTypePath = mappingObject.SourceTypePath;
        }
        
        public virtual void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.OrderIndex = domainObject.OrderIndex;
        }
        
        public virtual void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.ExecuteAction, null))
            {
                mappingObject.ExecuteAction = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ExecuteAction, this);
            }
            else
            {
                mappingObject.ExecuteAction = null;
            }
            if (!object.ReferenceEquals(domainObject.State, null))
            {
                mappingObject.State = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.State, this);
            }
            else
            {
                mappingObject.State = null;
            }
            if (!object.ReferenceEquals(domainObject.TargetSystem, null))
            {
                mappingObject.TargetSystem = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TargetSystem, this);
            }
            else
            {
                mappingObject.TargetSystem = null;
            }
            if (!object.ReferenceEquals(domainObject.Task, null))
            {
                mappingObject.Task = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Task, this);
            }
            else
            {
                mappingObject.Task = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapCommand(Framework.Workflow.Domain.Definition.Command domainObject, Framework.Workflow.Generated.DTO.CommandRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Event, null))
            {
                mappingObject.Event = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject.Event, this);
            }
            else
            {
                mappingObject.Event = null;
            }
            mappingObject.Metadatas = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Metadatas, this);
            mappingObject.Parameters = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Parameters, this);
            mappingObject.RoleAccesses = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.RoleAccesses, this);
        }
        
        public virtual void MapCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Command domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            if (!object.Equals(mappingObject.Event, default(Framework.Workflow.Generated.DTO.CommandEventStrictDTO)))
            {
                domainObject.Event = this.ToCommandEvent(mappingObject.Event, domainObject);
            }
            else
            {
                domainObject.Event = null;
            }
            if (!object.Equals(mappingObject.ExecuteAction, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.ExecuteAction = this.ToWorkflowLambda(mappingObject.ExecuteAction);
            }
            else
            {
                domainObject.ExecuteAction = null;
            }
            if (!object.ReferenceEquals(mappingObject.Metadatas, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO, Framework.Workflow.Domain.Definition.CommandMetadata>(detailDTO => this.ToCommandMetadata(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandMetadata>(domainObject, detail)).Map(mappingObject.Metadatas, domainObject.Metadatas);
            }
            domainObject.Name = mappingObject.Name;
            domainObject.OrderIndex = mappingObject.OrderIndex;
            if (!object.ReferenceEquals(mappingObject.Parameters, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.CommandParameterStrictDTO, Framework.Workflow.Domain.Definition.CommandParameter>(detailDTO => this.ToCommandParameter(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandParameter>(domainObject, detail)).Map(mappingObject.Parameters, domainObject.Parameters);
            }
            if (!object.ReferenceEquals(mappingObject.RoleAccesses, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO, Framework.Workflow.Domain.Definition.CommandRoleAccess>(detailDTO => this.ToCommandRoleAccess(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Command, Framework.Workflow.Domain.Definition.CommandRoleAccess>(domainObject, detail)).Map(mappingObject.RoleAccesses, domainObject.RoleAccesses);
            }
        }
        
        public virtual void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapCommandEvent(Framework.Workflow.Domain.Definition.CommandEvent domainObject, Framework.Workflow.Generated.DTO.CommandEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandEvent domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
        }
        
        public virtual void MapCommandEventRootFilterModel(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.CommandEventRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapCommandMetadata(Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.CommandMetadataSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapCommandMetadata(Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.CommandMetadataFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Command, null))
            {
                mappingObject.Command = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Command, this);
            }
            else
            {
                mappingObject.Command = null;
            }
        }
        
        public virtual void MapCommandMetadata(Framework.Workflow.Domain.Definition.CommandMetadata domainObject, Framework.Workflow.Generated.DTO.CommandMetadataRichDTO mappingObject)
        {
        }
        
        public virtual void MapCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandMetadata domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapCommandParameter(Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.CommandParameterSimpleDTO mappingObject)
        {
            mappingObject.AllowNull = domainObject.AllowNull;
            mappingObject.Description = domainObject.Description;
            mappingObject.IsReadOnly = domainObject.IsReadOnly;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapCommandParameter(Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.CommandParameterFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Command, null))
            {
                mappingObject.Command = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Command, this);
            }
            else
            {
                mappingObject.Command = null;
            }
            if (!object.ReferenceEquals(domainObject.Type, null))
            {
                mappingObject.Type = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Type, this);
            }
            else
            {
                mappingObject.Type = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapCommandParameter(Framework.Workflow.Domain.Definition.CommandParameter domainObject, Framework.Workflow.Generated.DTO.CommandParameterRichDTO mappingObject)
        {
        }
        
        public virtual void MapCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandParameter domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AllowNull = mappingObject.AllowNull;
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            if (!object.Equals(mappingObject.Type, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.Type = this.ToDomainType(mappingObject.Type);
            }
            else
            {
                domainObject.Type = null;
            }
        }
        
        public virtual void MapCommandRoleAccess(Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.CommandRoleAccessSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapCommandRoleAccess(Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.CommandRoleAccessFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Command, null))
            {
                mappingObject.Command = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Command, this);
            }
            else
            {
                mappingObject.Command = null;
            }
            if (!object.ReferenceEquals(domainObject.Role, null))
            {
                mappingObject.Role = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Role, this);
            }
            else
            {
                mappingObject.Role = null;
            }
        }
        
        public virtual void MapCommandRoleAccess(Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject, Framework.Workflow.Generated.DTO.CommandRoleAccessRichDTO mappingObject)
        {
        }
        
        public virtual void MapCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO mappingObject, Framework.Workflow.Domain.Definition.CommandRoleAccess domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Role, default(Framework.Workflow.Generated.DTO.RoleIdentityDTO)))
            {
                domainObject.Role = this.ToRole(mappingObject.Role);
            }
            else
            {
                domainObject.Role = null;
            }
        }
        
        public virtual void MapCommandRootFilterModel(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.CommandRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateSimpleDTO mappingObject)
        {
            mappingObject.AutoSetStatePropertyName = domainObject.AutoSetStatePropertyName;
            mappingObject.AutoSetStatePropertyValue = domainObject.AutoSetStatePropertyValue;
            mappingObject.Description = domainObject.Description;
            mappingObject.IsInitial = domainObject.IsInitial;
            mappingObject.Name = domainObject.Name;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Condition, null))
            {
                mappingObject.Condition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Condition, this);
            }
            else
            {
                mappingObject.Condition = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapConditionState(Framework.Workflow.Domain.Definition.ConditionState domainObject, Framework.Workflow.Generated.DTO.ConditionStateRichDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.FalseEvent, null))
            {
                mappingObject.FalseEvent = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject.FalseEvent, this);
            }
            else
            {
                mappingObject.FalseEvent = null;
            }
            if (!object.ReferenceEquals(domainObject.TrueEvent, null))
            {
                mappingObject.TrueEvent = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTO(domainObject.TrueEvent, this);
            }
            else
            {
                mappingObject.TrueEvent = null;
            }
        }
        
        public virtual void MapConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ConditionState domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AutoSetStatePropertyName = mappingObject.AutoSetStatePropertyName;
            domainObject.AutoSetStatePropertyValue = mappingObject.AutoSetStatePropertyValue;
            if (!object.Equals(mappingObject.Condition, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Condition = this.ToWorkflowLambda(mappingObject.Condition);
            }
            else
            {
                domainObject.Condition = null;
            }
            domainObject.Description = mappingObject.Description;
            if (!object.Equals(mappingObject.FalseEvent, default(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO)))
            {
                domainObject.FalseEvent = this.ToConditionStateEvent(mappingObject.FalseEvent, domainObject);
            }
            else
            {
                domainObject.FalseEvent = null;
            }
            domainObject.IsInitial = mappingObject.IsInitial;
            domainObject.Name = mappingObject.Name;
            if (!object.Equals(mappingObject.TrueEvent, default(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO)))
            {
                domainObject.TrueEvent = this.ToConditionStateEvent(mappingObject.TrueEvent, domainObject);
            }
            else
            {
                domainObject.TrueEvent = null;
            }
        }
        
        public virtual void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.IsTrue = domainObject.IsTrue;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapConditionStateEvent(Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject, Framework.Workflow.Generated.DTO.ConditionStateEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ConditionStateEvent domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
        }
        
        public virtual void MapConditionStateRootFilterModel(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.ConditionStateRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapDomainObjectBase(Framework.Workflow.Domain.DomainObjectBase domainObject, Framework.Workflow.Generated.DTO.BaseAbstractDTO mappingObject)
        {
        }
        
        public virtual void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.FullTypeName = domainObject.FullTypeName;
            mappingObject.Name = domainObject.Name;
            mappingObject.NameSpace = domainObject.NameSpace;
            mappingObject.Role = domainObject.Role;
        }
        
        public virtual void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.TargetSystem, null))
            {
                mappingObject.TargetSystem = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TargetSystem, this);
            }
            else
            {
                mappingObject.TargetSystem = null;
            }
        }
        
        public virtual void MapDomainType(Framework.Workflow.Domain.Definition.DomainType domainObject, Framework.Workflow.Generated.DTO.DomainTypeRichDTO mappingObject)
        {
        }
        
        public virtual void MapDomainTypeRootFilterModel(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.DomainTypeRootFilterModel domainObject)
        {
            domainObject.IncludeBaseTargetSystem = mappingObject.IncludeBaseTargetSystem;
            domainObject.IsSource = mappingObject.IsSource;
            if (!object.Equals(mappingObject.TargetSystem, default(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO)))
            {
                domainObject.TargetSystem = this.ToTargetSystem(mappingObject.TargetSystem);
            }
            else
            {
                domainObject.TargetSystem = null;
            }
        }
        
        public virtual void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventFullDTO mappingObject)
        {
        }
        
        public virtual void MapEvent(Framework.Workflow.Domain.Definition.Event domainObject, Framework.Workflow.Generated.DTO.EventRichDTO mappingObject)
        {
        }
        
        public virtual void MapEventRootFilterModel(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.EventRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapExecuteCommandRequest(Framework.Workflow.Generated.DTO.ExecuteCommandRequestStrictDTO mappingObject, Framework.Workflow.Domain.ExecuteCommandRequest domainObject)
        {
            if (!object.Equals(mappingObject.Command, default(Framework.Workflow.Generated.DTO.CommandIdentityDTO)))
            {
                domainObject.Command = this.ToCommand(mappingObject.Command);
            }
            else
            {
                domainObject.Command = null;
            }
            if (!object.ReferenceEquals(mappingObject.Parameters, null))
            {
                domainObject.Parameters = Framework.Core.EnumerableExtensions.ToList(mappingObject.Parameters, v => this.ToExecuteCommandRequestParameter(v));
            }
            if (!object.Equals(mappingObject.TaskInstance, default(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO)))
            {
                domainObject.TaskInstance = this.ToTaskInstance(mappingObject.TaskInstance);
            }
            else
            {
                domainObject.TaskInstance = null;
            }
        }
        
        public virtual void MapExecuteCommandRequestParameter(Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterSimpleDTO mappingObject)
        {
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapExecuteCommandRequestParameter(Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
        }
        
        public virtual void MapExecuteCommandRequestParameter(Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject, Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterRichDTO mappingObject)
        {
        }
        
        public virtual void MapExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO mappingObject, Framework.Workflow.Domain.ExecuteCommandRequestParameter domainObject)
        {
            if (!object.Equals(mappingObject.Definition, default(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO)))
            {
                domainObject.Definition = this.ToCommandParameter(mappingObject.Definition);
            }
            else
            {
                domainObject.Definition = null;
            }
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapExecutedCommand(Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapExecutedCommand(Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.Task, null))
            {
                mappingObject.Task = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Task, this);
            }
            else
            {
                mappingObject.Task = null;
            }
        }
        
        public virtual void MapExecutedCommand(Framework.Workflow.Domain.Runtime.ExecutedCommand domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandRichDTO mappingObject)
        {
            mappingObject.Parameters = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Parameters, this);
        }
        
        public virtual void MapExecutedCommandParameter(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandParameterSimpleDTO mappingObject)
        {
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapExecutedCommandParameter(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandParameterFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Command, null))
            {
                mappingObject.Command = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Command, this);
            }
            else
            {
                mappingObject.Command = null;
            }
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.Type, null))
            {
                mappingObject.Type = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Type, this);
            }
            else
            {
                mappingObject.Type = null;
            }
            if (!object.ReferenceEquals(domainObject.WorkflowInstance, null))
            {
                mappingObject.WorkflowInstance = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.WorkflowInstance, this);
            }
            else
            {
                mappingObject.WorkflowInstance = null;
            }
        }
        
        public virtual void MapExecutedCommandParameter(Framework.Workflow.Domain.Runtime.ExecutedCommandParameter domainObject, Framework.Workflow.Generated.DTO.ExecutedCommandParameterRichDTO mappingObject)
        {
        }
        
        public virtual void MapGroupExecuteCommandRequest(Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapGroupExecuteCommandRequest(Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Command, null))
            {
                mappingObject.Command = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Command, this);
            }
            else
            {
                mappingObject.Command = null;
            }
        }
        
        public virtual void MapGroupExecuteCommandRequest(Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestRichDTO mappingObject)
        {
            mappingObject.Parameters = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Parameters, this);
            mappingObject.TaskInstances = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTOList(domainObject.TaskInstances, this);
        }
        
        public virtual void MapGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO mappingObject, Framework.Workflow.Domain.GroupExecuteCommandRequest domainObject)
        {
            if (!object.Equals(mappingObject.Command, default(Framework.Workflow.Generated.DTO.CommandIdentityDTO)))
            {
                domainObject.Command = this.ToCommand(mappingObject.Command);
            }
            else
            {
                domainObject.Command = null;
            }
            if (!object.ReferenceEquals(mappingObject.Parameters, null))
            {
                domainObject.Parameters = Framework.Core.EnumerableExtensions.ToList(mappingObject.Parameters, v => this.ToExecuteCommandRequestParameter(v));
            }
            if (!object.ReferenceEquals(mappingObject.TaskInstances, null))
            {
                domainObject.TaskInstances = Framework.Core.EnumerableExtensions.ToList(mappingObject.TaskInstances, v => this.ToTaskInstance(v));
            }
        }
        
        public virtual void MapMassExecuteCommandRequest(Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapMassExecuteCommandRequest(Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestFullDTO mappingObject)
        {
        }
        
        public virtual void MapMassExecuteCommandRequest(Framework.Workflow.Domain.MassExecuteCommandRequest domainObject, Framework.Workflow.Generated.DTO.MassExecuteCommandRequestRichDTO mappingObject)
        {
            mappingObject.Groups = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Groups, this);
        }
        
        public virtual void MapMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO mappingObject, Framework.Workflow.Domain.MassExecuteCommandRequest domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.Groups, null))
            {
                domainObject.Groups = Framework.Core.EnumerableExtensions.ToList(mappingObject.Groups, v => this.ToGroupExecuteCommandRequest(v));
            }
        }
        
        public virtual void MapMiniAvailableTaskInstanceGroup(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroup domainObject, Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupProjectionDTO mappingObject)
        {
            mappingObject.Items = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Items, this);
            if (!object.ReferenceEquals(domainObject.Task, null))
            {
                mappingObject.Task = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Task, this);
            }
            else
            {
                mappingObject.Task = null;
            }
        }
        
        public virtual void MapMiniAvailableTaskInstanceGroupItem(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceGroupItem domainObject, Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceGroupItemProjectionDTO mappingObject)
        {
            mappingObject.CommandsIdents = domainObject.CommandsIdents;
            mappingObject.Path = domainObject.Path;
            mappingObject.TaskInstances = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.TaskInstances, this);
        }
        
        public virtual void MapMiniAvailableTaskInstanceWorkflowGroup(Framework.Workflow.Domain.Projections.MiniAvailableTaskInstanceWorkflowGroup domainObject, Framework.Workflow.Generated.DTO.MiniAvailableTaskInstanceWorkflowGroupProjectionDTO mappingObject)
        {
            mappingObject.Items = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Items, this);
            if (!object.ReferenceEquals(domainObject.Source, null))
            {
                mappingObject.Source = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Source, this);
            }
            else
            {
                mappingObject.Source = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapMiniCommand(Framework.Workflow.Domain.Projections.MiniCommand domainObject, Framework.Workflow.Generated.DTO.MiniCommandProjectionDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Metadatas = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Metadatas, this);
            mappingObject.Name = domainObject.Name;
            mappingObject.OrderIndex = domainObject.OrderIndex;
            mappingObject.Parameters = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Parameters, this);
        }
        
        public virtual void MapMiniCommandMetadata(Framework.Workflow.Domain.Projections.MiniCommandMetadata domainObject, Framework.Workflow.Generated.DTO.MiniCommandMetadataProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapMiniCommandParameter(Framework.Workflow.Domain.Projections.MiniCommandParameter domainObject, Framework.Workflow.Generated.DTO.MiniCommandParameterProjectionDTO mappingObject)
        {
            mappingObject.IsReadOnly = domainObject.IsReadOnly;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapMiniState(Framework.Workflow.Domain.Projections.MiniState domainObject, Framework.Workflow.Generated.DTO.MiniStateProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapMiniStateBase(Framework.Workflow.Domain.Projections.MiniStateBase domainObject, Framework.Workflow.Generated.DTO.MiniStateBaseProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapMiniTask(Framework.Workflow.Domain.Projections.MiniTask domainObject, Framework.Workflow.Generated.DTO.MiniTaskProjectionDTO mappingObject)
        {
            mappingObject.Commands = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Commands, this);
            mappingObject.Description = domainObject.Description;
            mappingObject.Metadatas = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Metadatas, this);
            mappingObject.Name = domainObject.Name;
            mappingObject.StateName = domainObject.StateName;
        }
        
        public virtual void MapMiniTaskInstance(Framework.Workflow.Domain.Projections.MiniTaskInstance domainObject, Framework.Workflow.Generated.DTO.MiniTaskInstanceProjectionDTO mappingObject)
        {
            mappingObject.WorkflowInstanceName = domainObject.WorkflowInstanceName;
        }
        
        public virtual void MapMiniTaskMetadata(Framework.Workflow.Domain.Projections.MiniTaskMetadata domainObject, Framework.Workflow.Generated.DTO.MiniTaskMetadataProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapMiniWorkflow(Framework.Workflow.Domain.Projections.MiniWorkflow domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowProjectionDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
            mappingObject.Metadatas = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTOList(domainObject.Metadatas, this);
            mappingObject.Name = domainObject.Name;
            mappingObject.OwnerId = domainObject.OwnerId;
        }
        
        public virtual void MapMiniWorkflowInstance(Framework.Workflow.Domain.Projections.MiniWorkflowInstance domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowInstanceProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapMiniWorkflowMetadata(Framework.Workflow.Domain.Projections.MiniWorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowMetadataProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapMiniWorkflowSource(Framework.Workflow.Domain.Projections.MiniWorkflowSource domainObject, Framework.Workflow.Generated.DTO.MiniWorkflowSourceProjectionDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            if (!object.ReferenceEquals(domainObject.Type, null))
            {
                mappingObject.Type = Framework.Workflow.Generated.DTO.LambdaHelper.ToProjectionDTO(domainObject.Type, this);
            }
            else
            {
                mappingObject.Type = null;
            }
        }
        
        public virtual void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateSimpleDTO mappingObject)
        {
            mappingObject.AutoSetStatePropertyName = domainObject.AutoSetStatePropertyName;
            mappingObject.AutoSetStatePropertyValue = domainObject.AutoSetStatePropertyValue;
            mappingObject.Description = domainObject.Description;
            mappingObject.IsInitial = domainObject.IsInitial;
            mappingObject.Name = domainObject.Name;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapParallelState(Framework.Workflow.Domain.Definition.ParallelState domainObject, Framework.Workflow.Generated.DTO.ParallelStateRichDTO mappingObject)
        {
            mappingObject.FinalEvents = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.FinalEvents, this);
            mappingObject.StartItems = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.StartItems, this);
        }
        
        public virtual void MapParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ParallelState domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AutoSetStatePropertyName = mappingObject.AutoSetStatePropertyName;
            domainObject.AutoSetStatePropertyValue = mappingObject.AutoSetStatePropertyValue;
            domainObject.Description = mappingObject.Description;
            if (!object.ReferenceEquals(mappingObject.FinalEvents, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(detailDTO => this.ToParallelStateFinalEvent(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.ParallelState, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(domainObject, detail)).Map(mappingObject.FinalEvents, domainObject.FinalEvents);
            }
            domainObject.IsInitial = mappingObject.IsInitial;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.StartItems, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO, Framework.Workflow.Domain.Definition.ParallelStateStartItem>(detailDTO => this.ToParallelStateStartItem(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.ParallelState, Framework.Workflow.Domain.Definition.ParallelStateStartItem>(domainObject, detail)).Map(mappingObject.StartItems, domainObject.StartItems);
            }
        }
        
        public virtual void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.OrderIndex = domainObject.OrderIndex;
        }
        
        public virtual void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Condition, null))
            {
                mappingObject.Condition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Condition, this);
            }
            else
            {
                mappingObject.Condition = null;
            }
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapParallelStateFinalEvent(Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject, Framework.Workflow.Generated.DTO.ParallelStateFinalEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Condition, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Condition = this.ToWorkflowLambda(mappingObject.Condition);
            }
            else
            {
                domainObject.Condition = null;
            }
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            domainObject.OrderIndex = mappingObject.OrderIndex;
        }
        
        public virtual void MapParallelStateRootFilterModel(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.ParallelStateRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapParallelStateStartItem(Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.ParallelStateStartItemSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapParallelStateStartItem(Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.ParallelStateStartItemFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Factory, null))
            {
                mappingObject.Factory = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Factory, this);
            }
            else
            {
                mappingObject.Factory = null;
            }
            if (!object.ReferenceEquals(domainObject.State, null))
            {
                mappingObject.State = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.State, this);
            }
            else
            {
                mappingObject.State = null;
            }
            if (!object.ReferenceEquals(domainObject.SubWorkflow, null))
            {
                mappingObject.SubWorkflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.SubWorkflow, this);
            }
            else
            {
                mappingObject.SubWorkflow = null;
            }
        }
        
        public virtual void MapParallelStateStartItem(Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject, Framework.Workflow.Generated.DTO.ParallelStateStartItemRichDTO mappingObject)
        {
        }
        
        public virtual void MapParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO mappingObject, Framework.Workflow.Domain.Definition.ParallelStateStartItem domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Factory, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Factory = this.ToWorkflowLambda(mappingObject.Factory);
            }
            else
            {
                domainObject.Factory = null;
            }
            if (!object.Equals(mappingObject.SubWorkflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.SubWorkflow = this.ToWorkflow(mappingObject.SubWorkflow);
            }
            else
            {
                domainObject.SubWorkflow = null;
            }
        }
        
        public virtual void MapPersistentDomainObjectBase(Framework.Workflow.Domain.PersistentDomainObjectBase domainObject, Framework.Workflow.Generated.DTO.BasePersistentDTO mappingObject)
        {
            mappingObject.Id = domainObject.Id;
        }
        
        public virtual void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.SecurityOperationId = domainObject.SecurityOperationId;
        }
        
        public virtual void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.CustomSecurityProvider, null))
            {
                mappingObject.CustomSecurityProvider = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CustomSecurityProvider, this);
            }
            else
            {
                mappingObject.CustomSecurityProvider = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapRole(Framework.Workflow.Domain.Definition.Role domainObject, Framework.Workflow.Generated.DTO.RoleRichDTO mappingObject)
        {
        }
        
        public virtual void MapRole(Framework.Workflow.Generated.DTO.RoleStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Role domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.CustomSecurityProvider, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.CustomSecurityProvider = this.ToWorkflowLambda(mappingObject.CustomSecurityProvider);
            }
            else
            {
                domainObject.CustomSecurityProvider = null;
            }
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            domainObject.SecurityOperationId = mappingObject.SecurityOperationId;
        }
        
        public virtual void MapRoleRootFilterModel(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.RoleRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Condition, null))
            {
                mappingObject.Condition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Condition, this);
            }
            else
            {
                mappingObject.Condition = null;
            }
            if (!object.ReferenceEquals(domainObject.Factory, null))
            {
                mappingObject.Factory = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Factory, this);
            }
            else
            {
                mappingObject.Factory = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject, Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRichDTO mappingObject)
        {
        }
        
        public virtual void MapStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Active = mappingObject.Active;
            if (!object.Equals(mappingObject.Condition, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Condition = this.ToWorkflowLambda(mappingObject.Condition);
            }
            else
            {
                domainObject.Condition = null;
            }
            if (!object.Equals(mappingObject.Factory, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Factory = this.ToWorkflowLambda(mappingObject.Factory);
            }
            else
            {
                domainObject.Factory = null;
            }
        }
        
        public virtual void MapStartWorkflowDomainObjectConditionRootFilterModel(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapStartWorkflowRequest(Framework.Workflow.Generated.DTO.StartWorkflowRequestStrictDTO mappingObject, Framework.Workflow.Domain.StartWorkflowRequest domainObject)
        {
            if (!object.ReferenceEquals(mappingObject.Parameters, null))
            {
                domainObject.Parameters = Framework.Core.EnumerableExtensions.ToList(mappingObject.Parameters, v => this.ToStartWorkflowRequestParameter(v));
            }
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapStartWorkflowRequestParameter(Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO mappingObject, Framework.Workflow.Domain.StartWorkflowRequestParameter domainObject)
        {
            if (!object.Equals(mappingObject.Definition, default(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO)))
            {
                domainObject.Definition = this.ToWorkflowParameter(mappingObject.Definition);
            }
            else
            {
                domainObject.Definition = null;
            }
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateSimpleDTO mappingObject)
        {
            mappingObject.AutoSetStatePropertyName = domainObject.AutoSetStatePropertyName;
            mappingObject.AutoSetStatePropertyValue = domainObject.AutoSetStatePropertyValue;
            mappingObject.Description = domainObject.Description;
            mappingObject.IsFinal = domainObject.IsFinal;
            mappingObject.IsInitial = domainObject.IsInitial;
            mappingObject.Name = domainObject.Name;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapState(Framework.Workflow.Domain.Definition.State domainObject, Framework.Workflow.Generated.DTO.StateRichDTO mappingObject)
        {
            mappingObject.DomainObjectEvents = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.DomainObjectEvents, this);
            mappingObject.Tasks = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Tasks, this);
            mappingObject.TimeoutEvents = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.TimeoutEvents, this);
        }
        
        public virtual void MapState(Framework.Workflow.Generated.DTO.StateStrictDTO mappingObject, Framework.Workflow.Domain.Definition.State domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AutoSetStatePropertyName = mappingObject.AutoSetStatePropertyName;
            domainObject.AutoSetStatePropertyValue = mappingObject.AutoSetStatePropertyValue;
            domainObject.Description = mappingObject.Description;
            if (!object.ReferenceEquals(mappingObject.DomainObjectEvents, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(detailDTO => this.ToStateDomainObjectEvent(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.State, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(domainObject, detail)).Map(mappingObject.DomainObjectEvents, domainObject.DomainObjectEvents);
            }
            domainObject.IsFinal = mappingObject.IsFinal;
            domainObject.IsInitial = mappingObject.IsInitial;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.Tasks, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.TaskStrictDTO, Framework.Workflow.Domain.Definition.Task>(detailDTO => this.ToTask(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.State, Framework.Workflow.Domain.Definition.Task>(domainObject, detail)).Map(mappingObject.Tasks, domainObject.Tasks);
            }
            if (!object.ReferenceEquals(mappingObject.TimeoutEvents, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO, Framework.Workflow.Domain.Definition.StateTimeoutEvent>(detailDTO => this.ToStateTimeoutEvent(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.State, Framework.Workflow.Domain.Definition.StateTimeoutEvent>(domainObject, detail)).Map(mappingObject.TimeoutEvents, domainObject.TimeoutEvents);
            }
        }
        
        public virtual void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseSimpleDTO mappingObject)
        {
            mappingObject.AutoSetStatePropertyName = domainObject.AutoSetStatePropertyName;
            mappingObject.AutoSetStatePropertyValue = domainObject.AutoSetStatePropertyValue;
            mappingObject.Description = domainObject.Description;
            mappingObject.IsInitial = domainObject.IsInitial;
            mappingObject.Name = domainObject.Name;
            mappingObject.Type = domainObject.Type;
        }
        
        public virtual void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapStateBase(Framework.Workflow.Domain.Definition.StateBase domainObject, Framework.Workflow.Generated.DTO.StateBaseRichDTO mappingObject)
        {
        }
        
        public virtual void MapStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StateBase domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AutoSetStatePropertyName = mappingObject.AutoSetStatePropertyName;
            domainObject.AutoSetStatePropertyValue = mappingObject.AutoSetStatePropertyValue;
            domainObject.Description = mappingObject.Description;
            domainObject.IsInitial = mappingObject.IsInitial;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapStateBaseRootFilterModel(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.StateBaseRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Condition, null))
            {
                mappingObject.Condition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Condition, this);
            }
            else
            {
                mappingObject.Condition = null;
            }
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapStateDomainObjectEvent(Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject, Framework.Workflow.Generated.DTO.StateDomainObjectEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StateDomainObjectEvent domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Condition, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Condition = this.ToWorkflowLambda(mappingObject.Condition);
            }
            else
            {
                domainObject.Condition = null;
            }
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapStateInstance(Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.StateInstanceSimpleDTO mappingObject)
        {
            mappingObject.IsAvailable = domainObject.IsAvailable;
        }
        
        public virtual void MapStateInstance(Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.StateInstanceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapStateInstance(Framework.Workflow.Domain.Runtime.StateInstance domainObject, Framework.Workflow.Generated.DTO.StateInstanceRichDTO mappingObject)
        {
            mappingObject.Tasks = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Tasks, this);
        }
        
        public virtual void MapStateRootFilterModel(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.StateRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Condition, null))
            {
                mappingObject.Condition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Condition, this);
            }
            else
            {
                mappingObject.Condition = null;
            }
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapStateTimeoutEvent(Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject, Framework.Workflow.Generated.DTO.StateTimeoutEventRichDTO mappingObject)
        {
        }
        
        public virtual void MapStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO mappingObject, Framework.Workflow.Domain.Definition.StateTimeoutEvent domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Condition, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Condition = this.ToWorkflowLambda(mappingObject.Condition);
            }
            else
            {
                domainObject.Condition = null;
            }
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.IsBase = domainObject.IsBase;
            mappingObject.IsMain = domainObject.IsMain;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemFullDTO mappingObject)
        {
        }
        
        public virtual void MapTargetSystem(Framework.Workflow.Domain.Definition.TargetSystem domainObject, Framework.Workflow.Generated.DTO.TargetSystemRichDTO mappingObject)
        {
            mappingObject.DomainTypes = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.DomainTypes, this);
        }
        
        public virtual void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.State, null))
            {
                mappingObject.State = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.State, this);
            }
            else
            {
                mappingObject.State = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapTask(Framework.Workflow.Domain.Definition.Task domainObject, Framework.Workflow.Generated.DTO.TaskRichDTO mappingObject)
        {
            mappingObject.Commands = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Commands, this);
            mappingObject.Metadatas = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Metadatas, this);
        }
        
        public virtual void MapTask(Framework.Workflow.Generated.DTO.TaskStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Task domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.Commands, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.CommandStrictDTO, Framework.Workflow.Domain.Definition.Command>(detailDTO => this.ToCommand(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Task, Framework.Workflow.Domain.Definition.Command>(domainObject, detail)).Map(mappingObject.Commands, domainObject.Commands);
            }
            domainObject.Description = mappingObject.Description;
            if (!object.ReferenceEquals(mappingObject.Metadatas, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO, Framework.Workflow.Domain.Definition.TaskMetadata>(detailDTO => this.ToTaskMetadata(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Task, Framework.Workflow.Domain.Definition.TaskMetadata>(domainObject, detail)).Map(mappingObject.Metadatas, domainObject.Metadatas);
            }
            domainObject.Name = mappingObject.Name;
        }
        
        public virtual void MapTaskInstance(Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.TaskInstanceSimpleDTO mappingObject)
        {
            mappingObject.IsAvailable = domainObject.IsAvailable;
        }
        
        public virtual void MapTaskInstance(Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.TaskInstanceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.State, null))
            {
                mappingObject.State = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.State, this);
            }
            else
            {
                mappingObject.State = null;
            }
            if (!object.ReferenceEquals(domainObject.StateDefinition, null))
            {
                mappingObject.StateDefinition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.StateDefinition, this);
            }
            else
            {
                mappingObject.StateDefinition = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapTaskInstance(Framework.Workflow.Domain.Runtime.TaskInstance domainObject, Framework.Workflow.Generated.DTO.TaskInstanceRichDTO mappingObject)
        {
            mappingObject.Commands = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Commands, this);
        }
        
        public virtual void MapTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO mappingObject, Framework.Workflow.Domain.Runtime.TaskInstance domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
        }
        
        public virtual void MapTaskInstanceRootFilterModel(Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.TaskInstanceRootFilterModel domainObject)
        {
            domainObject.AssignedToMe = mappingObject.AssignedToMe;
            domainObject.DomainObjectId = mappingObject.DomainObjectId;
            domainObject.IsAvailable = mappingObject.IsAvailable;
            if (!object.Equals(mappingObject.WorkflowDefinition, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.WorkflowDefinition = this.ToWorkflow(mappingObject.WorkflowDefinition);
            }
            else
            {
                domainObject.WorkflowDefinition = null;
            }
            if (!object.Equals(mappingObject.WorkflowInstance, default(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO)))
            {
                domainObject.WorkflowInstance = this.ToWorkflowInstance(mappingObject.WorkflowInstance);
            }
            else
            {
                domainObject.WorkflowInstance = null;
            }
        }
        
        public virtual void MapTaskMetadata(Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.TaskMetadataSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapTaskMetadata(Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.TaskMetadataFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Task, null))
            {
                mappingObject.Task = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Task, this);
            }
            else
            {
                mappingObject.Task = null;
            }
        }
        
        public virtual void MapTaskMetadata(Framework.Workflow.Domain.Definition.TaskMetadata domainObject, Framework.Workflow.Generated.DTO.TaskMetadataRichDTO mappingObject)
        {
        }
        
        public virtual void MapTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO mappingObject, Framework.Workflow.Domain.Definition.TaskMetadata domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapTaskRootFilterModel(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.TaskRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        protected virtual void MapToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, TDomainObject domainObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Workflow.Domain.DomainObjectBase
        {
            mappingObject.MapToDomainObject(this, domainObject);
        }
        
        public virtual void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.From, null))
            {
                mappingObject.From = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.From, this);
            }
            else
            {
                mappingObject.From = null;
            }
            if (!object.ReferenceEquals(domainObject.To, null))
            {
                mappingObject.To = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.To, this);
            }
            else
            {
                mappingObject.To = null;
            }
            if (!object.ReferenceEquals(domainObject.TriggerEvent, null))
            {
                mappingObject.TriggerEvent = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TriggerEvent, this);
            }
            else
            {
                mappingObject.TriggerEvent = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapTransition(Framework.Workflow.Domain.Definition.Transition domainObject, Framework.Workflow.Generated.DTO.TransitionRichDTO mappingObject)
        {
            mappingObject.PostActions = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.PostActions, this);
        }
        
        public virtual void MapTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Transition domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.PostActions, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.TransitionActionStrictDTO, Framework.Workflow.Domain.Definition.TransitionAction>(detailDTO => this.ToTransitionAction(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Transition, Framework.Workflow.Domain.Definition.TransitionAction>(domainObject, detail)).Map(mappingObject.PostActions, domainObject.PostActions);
            }
            if (!object.Equals(mappingObject.To, default(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO)))
            {
                domainObject.To = this.ToStateBase(mappingObject.To);
            }
            else
            {
                domainObject.To = null;
            }
            if (!object.Equals(mappingObject.TriggerEvent, default(Framework.Workflow.Generated.DTO.EventIdentityDTO)))
            {
                domainObject.TriggerEvent = this.ToEvent(mappingObject.TriggerEvent);
            }
            else
            {
                domainObject.TriggerEvent = null;
            }
        }
        
        public virtual void MapTransitionAction(Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.TransitionActionSimpleDTO mappingObject)
        {
            mappingObject.OrderIndex = domainObject.OrderIndex;
        }
        
        public virtual void MapTransitionAction(Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.TransitionActionFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Action, null))
            {
                mappingObject.Action = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Action, this);
            }
            else
            {
                mappingObject.Action = null;
            }
            if (!object.ReferenceEquals(domainObject.Transition, null))
            {
                mappingObject.Transition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Transition, this);
            }
            else
            {
                mappingObject.Transition = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapTransitionAction(Framework.Workflow.Domain.Definition.TransitionAction domainObject, Framework.Workflow.Generated.DTO.TransitionActionRichDTO mappingObject)
        {
        }
        
        public virtual void MapTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO mappingObject, Framework.Workflow.Domain.Definition.TransitionAction domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.Equals(mappingObject.Action, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Action = this.ToWorkflowLambda(mappingObject.Action);
            }
            else
            {
                domainObject.Action = null;
            }
            domainObject.OrderIndex = mappingObject.OrderIndex;
        }
        
        public virtual void MapTransitionInstance(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.TransitionInstanceSimpleDTO mappingObject)
        {
        }
        
        public virtual void MapTransitionInstance(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.TransitionInstanceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.From, null))
            {
                mappingObject.From = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.From, this);
            }
            else
            {
                mappingObject.From = null;
            }
            if (!object.ReferenceEquals(domainObject.To, null))
            {
                mappingObject.To = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.To, this);
            }
            else
            {
                mappingObject.To = null;
            }
            if (!object.ReferenceEquals(domainObject.WorkflowInstance, null))
            {
                mappingObject.WorkflowInstance = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.WorkflowInstance, this);
            }
            else
            {
                mappingObject.WorkflowInstance = null;
            }
        }
        
        public virtual void MapTransitionInstance(Framework.Workflow.Domain.Runtime.TransitionInstance domainObject, Framework.Workflow.Generated.DTO.TransitionInstanceRichDTO mappingObject)
        {
        }
        
        public virtual void MapTransitionRootFilterModel(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.TransitionRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapVisualDomainType(Framework.Workflow.Domain.Projections.VisualDomainType domainObject, Framework.Workflow.Generated.DTO.VisualDomainTypeProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapVisualWorkflow(Framework.Workflow.Domain.Projections.VisualWorkflow domainObject, Framework.Workflow.Generated.DTO.VisualWorkflowProjectionDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowSimpleDTO mappingObject)
        {
            mappingObject.AutoRemoveWithDomainObject = domainObject.AutoRemoveWithDomainObject;
            mappingObject.Description = domainObject.Description;
            mappingObject.HasAttachments = domainObject.HasAttachments;
            mappingObject.IsValid = domainObject.IsValid;
            mappingObject.Name = domainObject.Name;
            mappingObject.ValidationError = domainObject.ValidationError;
        }
        
        public virtual void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.ActiveCondition, null))
            {
                mappingObject.ActiveCondition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.ActiveCondition, this);
            }
            else
            {
                mappingObject.ActiveCondition = null;
            }
            if (!object.ReferenceEquals(domainObject.DomainType, null))
            {
                mappingObject.DomainType = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.DomainType, this);
            }
            else
            {
                mappingObject.DomainType = null;
            }
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.TargetSystem, null))
            {
                mappingObject.TargetSystem = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.TargetSystem, this);
            }
            else
            {
                mappingObject.TargetSystem = null;
            }
        }
        
        public virtual void MapWorkflow(Framework.Workflow.Domain.Definition.Workflow domainObject, Framework.Workflow.Generated.DTO.WorkflowRichDTO mappingObject)
        {
            mappingObject.ConditionStates = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.ConditionStates, this);
            mappingObject.Lambdas = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Lambdas, this);
            mappingObject.Metadatas = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Metadatas, this);
            mappingObject.ParallelStates = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.ParallelStates, this);
            mappingObject.Parameters = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Parameters, this);
            mappingObject.Roles = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Roles, this);
            mappingObject.Sources = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Sources, this);
            mappingObject.StartConditions = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.StartConditions, this);
            mappingObject.States = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.States, this);
            mappingObject.SubWorkflows = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.SubWorkflows, this);
            mappingObject.Transitions = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Transitions, this);
        }
        
        public virtual void MapWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO mappingObject, Framework.Workflow.Domain.Definition.Workflow domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.Lambdas, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO, Framework.Workflow.Domain.Definition.WorkflowLambda>(detailDTO => this.ToWorkflowLambda(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.WorkflowLambda>(domainObject, detail)).Map(mappingObject.Lambdas, domainObject.Lambdas);
            }
            if (!object.ReferenceEquals(mappingObject.Roles, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.RoleStrictDTO, Framework.Workflow.Domain.Definition.Role>(detailDTO => this.ToRole(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.Role>(domainObject, detail)).Map(mappingObject.Roles, domainObject.Roles);
            }
            if (!object.ReferenceEquals(mappingObject.SubWorkflows, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.WorkflowStrictDTO, Framework.Workflow.Domain.Definition.Workflow>(detailDTO => this.ToWorkflow(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.Workflow>(domainObject, detail)).Map(mappingObject.SubWorkflows, domainObject.SubWorkflows);
            }
            domainObject.Active = mappingObject.Active;
            if (!object.Equals(mappingObject.ActiveCondition, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.ActiveCondition = this.ToWorkflowLambda(mappingObject.ActiveCondition);
            }
            else
            {
                domainObject.ActiveCondition = null;
            }
            domainObject.AutoRemoveWithDomainObject = mappingObject.AutoRemoveWithDomainObject;
            if (!object.ReferenceEquals(mappingObject.ConditionStates, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.ConditionStateStrictDTO, Framework.Workflow.Domain.Definition.ConditionState>(detailDTO => this.ToConditionState(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.ConditionState>(domainObject, detail)).Map(mappingObject.ConditionStates, domainObject.ConditionStates);
            }
            domainObject.Description = mappingObject.Description;
            if (!object.ReferenceEquals(mappingObject.Metadatas, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO, Framework.Workflow.Domain.Definition.WorkflowMetadata>(detailDTO => this.ToWorkflowMetadata(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.WorkflowMetadata>(domainObject, detail)).Map(mappingObject.Metadatas, domainObject.Metadatas);
            }
            domainObject.Name = mappingObject.Name;
            if (!object.ReferenceEquals(mappingObject.ParallelStates, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.ParallelStateStrictDTO, Framework.Workflow.Domain.Definition.ParallelState>(detailDTO => this.ToParallelState(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.ParallelState>(domainObject, detail)).Map(mappingObject.ParallelStates, domainObject.ParallelStates);
            }
            if (!object.ReferenceEquals(mappingObject.Parameters, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO, Framework.Workflow.Domain.Definition.WorkflowParameter>(detailDTO => this.ToWorkflowParameter(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.WorkflowParameter>(domainObject, detail)).Map(mappingObject.Parameters, domainObject.Parameters);
            }
            if (!object.ReferenceEquals(mappingObject.Sources, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO, Framework.Workflow.Domain.Definition.WorkflowSource>(detailDTO => this.ToWorkflowSource(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.WorkflowSource>(domainObject, detail)).Map(mappingObject.Sources, domainObject.Sources);
            }
            if (!object.ReferenceEquals(mappingObject.StartConditions, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(detailDTO => this.ToStartWorkflowDomainObjectCondition(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(domainObject, detail)).Map(mappingObject.StartConditions, domainObject.StartConditions);
            }
            if (!object.ReferenceEquals(mappingObject.States, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.StateStrictDTO, Framework.Workflow.Domain.Definition.State>(detailDTO => this.ToState(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.State>(domainObject, detail)).Map(mappingObject.States, domainObject.States);
            }
            if (!object.ReferenceEquals(mappingObject.Transitions, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.TransitionStrictDTO, Framework.Workflow.Domain.Definition.Transition>(detailDTO => this.ToTransition(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Definition.Workflow, Framework.Workflow.Domain.Definition.Transition>(domainObject, detail)).Map(mappingObject.Transitions, domainObject.Transitions);
            }
        }
        
        public virtual void MapWorkflowCreateModel(Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowCreateModel domainObject)
        {
        }
        
        public virtual void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.DomainObjectId = domainObject.DomainObjectId;
            mappingObject.IsAborted = domainObject.IsAborted;
            mappingObject.IsFinished = domainObject.IsFinished;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.CurrentState, null))
            {
                mappingObject.CurrentState = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CurrentState, this);
            }
            else
            {
                mappingObject.CurrentState = null;
            }
            if (!object.ReferenceEquals(domainObject.CurrentStateDefinition, null))
            {
                mappingObject.CurrentStateDefinition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.CurrentStateDefinition, this);
            }
            else
            {
                mappingObject.CurrentStateDefinition = null;
            }
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.Owner, null))
            {
                mappingObject.Owner = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Owner, this);
            }
            else
            {
                mappingObject.Owner = null;
            }
            if (!object.ReferenceEquals(domainObject.OwnerDefinition, null))
            {
                mappingObject.OwnerDefinition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.OwnerDefinition, this);
            }
            else
            {
                mappingObject.OwnerDefinition = null;
            }
            if (!object.ReferenceEquals(domainObject.OwnerState, null))
            {
                mappingObject.OwnerState = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.OwnerState, this);
            }
            else
            {
                mappingObject.OwnerState = null;
            }
        }
        
        public virtual void MapWorkflowInstance(Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceRichDTO mappingObject)
        {
            mappingObject.Parameters = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Parameters, this);
            mappingObject.States = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.States, this);
            mappingObject.Transitions = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Transitions, this);
            mappingObject.Watchers = Framework.Workflow.Generated.DTO.LambdaHelper.ToRichDTOList(domainObject.Watchers, this);
        }
        
        public virtual void MapWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO mappingObject, Framework.Workflow.Domain.Runtime.WorkflowInstance domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            if (!object.ReferenceEquals(mappingObject.Watchers, null))
            {
                this.GetCollectionMappingService<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(detailDTO => this.ToWorkflowInstanceWatcher(detailDTO, domainObject), detail => Framework.Persistent.AddRemoveDetailHelper.RemoveDetail<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(domainObject, detail)).Map(mappingObject.Watchers, domainObject.Watchers);
            }
        }
        
        public virtual void MapWorkflowInstanceParameter(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceParameterSimpleDTO mappingObject)
        {
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapWorkflowInstanceParameter(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceParameterFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Definition, null))
            {
                mappingObject.Definition = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Definition, this);
            }
            else
            {
                mappingObject.Definition = null;
            }
            if (!object.ReferenceEquals(domainObject.Type, null))
            {
                mappingObject.Type = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Type, this);
            }
            else
            {
                mappingObject.Type = null;
            }
            if (!object.ReferenceEquals(domainObject.WorkflowInstance, null))
            {
                mappingObject.WorkflowInstance = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.WorkflowInstance, this);
            }
            else
            {
                mappingObject.WorkflowInstance = null;
            }
        }
        
        public virtual void MapWorkflowInstanceParameter(Framework.Workflow.Domain.Runtime.WorkflowInstanceParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceParameterRichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkflowInstanceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowInstanceRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Definition, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Definition = this.ToWorkflow(mappingObject.Definition);
            }
            else
            {
                domainObject.Definition = null;
            }
            domainObject.DomainObjectId = mappingObject.DomainObjectId;
            if (!object.Equals(mappingObject.DomainType, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.DomainType = this.ToDomainType(mappingObject.DomainType);
            }
            else
            {
                domainObject.DomainType = null;
            }
            domainObject.IsActive = mappingObject.IsActive;
            domainObject.IsFinal = mappingObject.IsFinal;
        }
        
        public virtual void MapWorkflowInstanceWatcher(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherSimpleDTO mappingObject)
        {
            mappingObject.Login = domainObject.Login;
        }
        
        public virtual void MapWorkflowInstanceWatcher(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.WorkflowInstance, null))
            {
                mappingObject.WorkflowInstance = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.WorkflowInstance, this);
            }
            else
            {
                mappingObject.WorkflowInstance = null;
            }
        }
        
        public virtual void MapWorkflowInstanceWatcher(Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject, Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherRichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO mappingObject, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Login = mappingObject.Login;
        }
        
        public virtual void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapWorkflowLambda(Framework.Workflow.Domain.Definition.WorkflowLambda domainObject, Framework.Workflow.Generated.DTO.WorkflowLambdaRichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowLambda domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapWorkflowLambdaRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowLambdaRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
        }
        
        public virtual void MapWorkflowMetadata(Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.WorkflowMetadataSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
            mappingObject.Value = domainObject.Value;
        }
        
        public virtual void MapWorkflowMetadata(Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.WorkflowMetadataFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapWorkflowMetadata(Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject, Framework.Workflow.Generated.DTO.WorkflowMetadataRichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowMetadata domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            domainObject.Value = mappingObject.Value;
        }
        
        public virtual void MapWorkflowParameter(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowParameterSimpleDTO mappingObject)
        {
            mappingObject.AllowNull = domainObject.AllowNull;
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflowParameter(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowParameterFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Type, null))
            {
                mappingObject.Type = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Type, this);
            }
            else
            {
                mappingObject.Type = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
        }
        
        public virtual void MapWorkflowParameter(Framework.Workflow.Domain.Definition.WorkflowParameter domainObject, Framework.Workflow.Generated.DTO.WorkflowParameterRichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowParameter domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.AllowNull = mappingObject.AllowNull;
            domainObject.Description = mappingObject.Description;
            domainObject.Name = mappingObject.Name;
            if (!object.Equals(mappingObject.Type, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.Type = this.ToDomainType(mappingObject.Type);
            }
            else
            {
                domainObject.Type = null;
            }
        }
        
        public virtual void MapWorkflowRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowRootFilterModel domainObject)
        {
            domainObject.IsRoot = mappingObject.IsRoot;
            if (!object.Equals(mappingObject.Owner, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Owner = this.ToWorkflow(mappingObject.Owner);
            }
            else
            {
                domainObject.Owner = null;
            }
        }
        
        public virtual void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceVisualDTO mappingObject)
        {
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceSimpleDTO mappingObject)
        {
            mappingObject.Description = domainObject.Description;
            mappingObject.Name = domainObject.Name;
        }
        
        public virtual void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceFullDTO mappingObject)
        {
            if (!object.ReferenceEquals(domainObject.Elements, null))
            {
                mappingObject.Elements = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Elements, this);
            }
            else
            {
                mappingObject.Elements = null;
            }
            if (!object.ReferenceEquals(domainObject.Path, null))
            {
                mappingObject.Path = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Path, this);
            }
            else
            {
                mappingObject.Path = null;
            }
            if (!object.ReferenceEquals(domainObject.Type, null))
            {
                mappingObject.Type = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Type, this);
            }
            else
            {
                mappingObject.Type = null;
            }
            if (!object.ReferenceEquals(domainObject.Workflow, null))
            {
                mappingObject.Workflow = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.Workflow, this);
            }
            else
            {
                mappingObject.Workflow = null;
            }
            if (!object.ReferenceEquals(domainObject.WorkflowType, null))
            {
                mappingObject.WorkflowType = Framework.Workflow.Generated.DTO.LambdaHelper.ToSimpleDTO(domainObject.WorkflowType, this);
            }
            else
            {
                mappingObject.WorkflowType = null;
            }
        }
        
        public virtual void MapWorkflowSource(Framework.Workflow.Domain.Definition.WorkflowSource domainObject, Framework.Workflow.Generated.DTO.WorkflowSourceRichDTO mappingObject)
        {
        }
        
        public virtual void MapWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO mappingObject, Framework.Workflow.Domain.Definition.WorkflowSource domainObject)
        {
            domainObject.Version = this.VersionService.GetVersion(mappingObject.Version, domainObject);
            domainObject.Description = mappingObject.Description;
            if (!object.Equals(mappingObject.Elements, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Elements = this.ToWorkflowLambda(mappingObject.Elements);
            }
            else
            {
                domainObject.Elements = null;
            }
            domainObject.Name = mappingObject.Name;
            if (!object.Equals(mappingObject.Path, default(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO)))
            {
                domainObject.Path = this.ToWorkflowLambda(mappingObject.Path);
            }
            else
            {
                domainObject.Path = null;
            }
            if (!object.Equals(mappingObject.Type, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.Type = this.ToDomainType(mappingObject.Type);
            }
            else
            {
                domainObject.Type = null;
            }
        }
        
        public virtual void MapWorkflowSourceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO mappingObject, Framework.Workflow.Domain.WorkflowSourceRootFilterModel domainObject)
        {
            if (!object.Equals(mappingObject.SourceType, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.SourceType = this.ToDomainType(mappingObject.SourceType);
            }
            else
            {
                domainObject.SourceType = null;
            }
            if (!object.Equals(mappingObject.Workflow, default(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO)))
            {
                domainObject.Workflow = this.ToWorkflow(mappingObject.Workflow);
            }
            else
            {
                domainObject.Workflow = null;
            }
            if (!object.Equals(mappingObject.WorkflowType, default(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO)))
            {
                domainObject.WorkflowType = this.ToDomainType(mappingObject.WorkflowType);
            }
            else
            {
                domainObject.WorkflowType = null;
            }
        }
        
        public virtual Framework.Workflow.Domain.AvailableCommandFilterModel ToAvailableCommandFilterModel(Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO availableCommandFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.AvailableCommandFilterModelStrictDTO, Framework.Workflow.Domain.AvailableCommandFilterModel>(availableCommandFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel ToAvailableTaskInstanceMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceMainFilterModelStrictDTO availableTaskInstanceMainFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.AvailableTaskInstanceMainFilterModelStrictDTO, Framework.Workflow.Domain.AvailableTaskInstanceMainFilterModel>(availableTaskInstanceMainFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel ToAvailableTaskInstanceUntypedMainFilterModel(Framework.Workflow.Generated.DTO.AvailableTaskInstanceUntypedMainFilterModelStrictDTO availableTaskInstanceUntypedMainFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.AvailableTaskInstanceUntypedMainFilterModelStrictDTO, Framework.Workflow.Domain.AvailableTaskInstanceUntypedMainFilterModel>(availableTaskInstanceUntypedMainFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Command ToCommand(Framework.Workflow.Generated.DTO.CommandIdentityDTO commandIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.Command>(commandIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Command ToCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.CommandStrictDTO, Framework.Workflow.Domain.Definition.Command>(commandStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Command ToCommand(Framework.Workflow.Generated.DTO.CommandStrictDTO commandStrictDTO, Framework.Workflow.Domain.Definition.Task task)
        {
            return this.ToDomainObject(commandStrictDTO, () => new Framework.Workflow.Domain.Definition.Command(task));
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandEvent ToCommandEvent(Framework.Workflow.Generated.DTO.CommandEventIdentityDTO commandEventIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.CommandEvent>(commandEventIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandEvent ToCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO commandEventStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.CommandEventStrictDTO, Framework.Workflow.Domain.Definition.CommandEvent>(commandEventStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandEvent ToCommandEvent(Framework.Workflow.Generated.DTO.CommandEventStrictDTO commandEventStrictDTO, Framework.Workflow.Domain.Definition.Command command)
        {
            return this.ToDomainObject(commandEventStrictDTO, () => new Framework.Workflow.Domain.Definition.CommandEvent(command));
        }
        
        public virtual Framework.Workflow.Domain.CommandEventRootFilterModel ToCommandEventRootFilterModel(Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO commandEventRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.CommandEventRootFilterModelStrictDTO, Framework.Workflow.Domain.CommandEventRootFilterModel>(commandEventRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandMetadata ToCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO commandMetadataStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO, Framework.Workflow.Domain.Definition.CommandMetadata>(commandMetadataStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandMetadata ToCommandMetadata(Framework.Workflow.Generated.DTO.CommandMetadataStrictDTO commandMetadataStrictDTO, Framework.Workflow.Domain.Definition.Command command)
        {
            return this.ToDomainObject(commandMetadataStrictDTO, () => new Framework.Workflow.Domain.Definition.CommandMetadata(command));
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandParameter ToCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterIdentityDTO commandParameterIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.CommandParameter>(commandParameterIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandParameter ToCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO commandParameterStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.CommandParameterStrictDTO, Framework.Workflow.Domain.Definition.CommandParameter>(commandParameterStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandParameter ToCommandParameter(Framework.Workflow.Generated.DTO.CommandParameterStrictDTO commandParameterStrictDTO, Framework.Workflow.Domain.Definition.Command command)
        {
            return this.ToDomainObject(commandParameterStrictDTO, () => new Framework.Workflow.Domain.Definition.CommandParameter(command));
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandRoleAccess ToCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO commandRoleAccessStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO, Framework.Workflow.Domain.Definition.CommandRoleAccess>(commandRoleAccessStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.CommandRoleAccess ToCommandRoleAccess(Framework.Workflow.Generated.DTO.CommandRoleAccessStrictDTO commandRoleAccessStrictDTO, Framework.Workflow.Domain.Definition.Command command)
        {
            return this.ToDomainObject(commandRoleAccessStrictDTO, () => new Framework.Workflow.Domain.Definition.CommandRoleAccess(command));
        }
        
        public virtual Framework.Workflow.Domain.CommandRootFilterModel ToCommandRootFilterModel(Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO commandRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.CommandRootFilterModelStrictDTO, Framework.Workflow.Domain.CommandRootFilterModel>(commandRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ConditionState ToConditionState(Framework.Workflow.Generated.DTO.ConditionStateIdentityDTO conditionStateIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.ConditionState>(conditionStateIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ConditionState ToConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.ConditionStateStrictDTO, Framework.Workflow.Domain.Definition.ConditionState>(conditionStateStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ConditionState ToConditionState(Framework.Workflow.Generated.DTO.ConditionStateStrictDTO conditionStateStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(conditionStateStrictDTO, () => new Framework.Workflow.Domain.Definition.ConditionState(workflow));
        }
        
        public virtual Framework.Workflow.Domain.Definition.ConditionStateEvent ToConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventIdentityDTO conditionStateEventIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.ConditionStateEvent>(conditionStateEventIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ConditionStateEvent ToConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO conditionStateEventStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO, Framework.Workflow.Domain.Definition.ConditionStateEvent>(conditionStateEventStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ConditionStateEvent ToConditionStateEvent(Framework.Workflow.Generated.DTO.ConditionStateEventStrictDTO conditionStateEventStrictDTO, Framework.Workflow.Domain.Definition.ConditionState conditionState)
        {
            return this.ToDomainObject(conditionStateEventStrictDTO, () => new Framework.Workflow.Domain.Definition.ConditionStateEvent(conditionState));
        }
        
        public virtual Framework.Workflow.Domain.ConditionStateRootFilterModel ToConditionStateRootFilterModel(Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO conditionStateRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.ConditionStateRootFilterModelStrictDTO, Framework.Workflow.Domain.ConditionStateRootFilterModel>(conditionStateRootFilterModelStrictDTO);
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Workflow.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetById<TDomainObject>(mappingObject.Id, Framework.DomainDriven.BLL.IdCheckMode.CheckAll);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObject<TMappingObject, TDomainObject>(TMappingObject mappingObject, System.Func<TDomainObject> createFunc)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, TDomainObject, System.Guid>
            where TDomainObject : Framework.Workflow.Domain.PersistentDomainObjectBase
        {
            TDomainObject domainObject = this.GetByIdOrCreate<TDomainObject>(mappingObject.Id, createFunc);
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        protected virtual TDomainObject ToDomainObjectBase<TMappingObject, TDomainObject>(TMappingObject mappingObject)
            where TMappingObject : Framework.DomainDriven.IMappingObject<Framework.Workflow.Generated.DTO.IWorkflowDTOMappingService, TDomainObject>
            where TDomainObject : Framework.Workflow.Domain.DomainObjectBase, new ()
        {
            TDomainObject domainObject = new TDomainObject();
            this.MapToDomainObject(mappingObject, domainObject);
            return domainObject;
        }
        
        public virtual Framework.Workflow.Domain.Definition.DomainType ToDomainType(Framework.Workflow.Generated.DTO.DomainTypeIdentityDTO domainTypeIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.DomainType>(domainTypeIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.DomainTypeRootFilterModel ToDomainTypeRootFilterModel(Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO domainTypeRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.DomainTypeRootFilterModelStrictDTO, Framework.Workflow.Domain.DomainTypeRootFilterModel>(domainTypeRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Event ToEvent(Framework.Workflow.Generated.DTO.EventIdentityDTO eventIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.Event>(eventIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.EventRootFilterModel ToEventRootFilterModel(Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO eventRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.EventRootFilterModelStrictDTO, Framework.Workflow.Domain.EventRootFilterModel>(eventRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.ExecuteCommandRequest ToExecuteCommandRequest(Framework.Workflow.Generated.DTO.ExecuteCommandRequestStrictDTO executeCommandRequestStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.ExecuteCommandRequestStrictDTO, Framework.Workflow.Domain.ExecuteCommandRequest>(executeCommandRequestStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.ExecuteCommandRequestParameter ToExecuteCommandRequestParameter(Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO executeCommandRequestParameterStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.ExecuteCommandRequestParameterStrictDTO, Framework.Workflow.Domain.ExecuteCommandRequestParameter>(executeCommandRequestParameterStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.GroupExecuteCommandRequest ToGroupExecuteCommandRequest(Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO groupExecuteCommandRequestStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.GroupExecuteCommandRequestStrictDTO, Framework.Workflow.Domain.GroupExecuteCommandRequest>(groupExecuteCommandRequestStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.MassExecuteCommandRequest ToMassExecuteCommandRequest(Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO massExecuteCommandRequestStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.MassExecuteCommandRequestStrictDTO, Framework.Workflow.Domain.MassExecuteCommandRequest>(massExecuteCommandRequestStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelState ToParallelState(Framework.Workflow.Generated.DTO.ParallelStateIdentityDTO parallelStateIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.ParallelState>(parallelStateIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelState ToParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.ParallelStateStrictDTO, Framework.Workflow.Domain.Definition.ParallelState>(parallelStateStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelState ToParallelState(Framework.Workflow.Generated.DTO.ParallelStateStrictDTO parallelStateStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(parallelStateStrictDTO, () => new Framework.Workflow.Domain.Definition.ParallelState(workflow));
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventIdentityDTO parallelStateFinalEventIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(parallelStateFinalEventIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO parallelStateFinalEventStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>(parallelStateFinalEventStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelStateFinalEvent ToParallelStateFinalEvent(Framework.Workflow.Generated.DTO.ParallelStateFinalEventStrictDTO parallelStateFinalEventStrictDTO, Framework.Workflow.Domain.Definition.ParallelState parallelState)
        {
            return this.ToDomainObject(parallelStateFinalEventStrictDTO, () => new Framework.Workflow.Domain.Definition.ParallelStateFinalEvent(parallelState));
        }
        
        public virtual Framework.Workflow.Domain.ParallelStateRootFilterModel ToParallelStateRootFilterModel(Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO parallelStateRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.ParallelStateRootFilterModelStrictDTO, Framework.Workflow.Domain.ParallelStateRootFilterModel>(parallelStateRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelStateStartItem ToParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO parallelStateStartItemStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO, Framework.Workflow.Domain.Definition.ParallelStateStartItem>(parallelStateStartItemStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.ParallelStateStartItem ToParallelStateStartItem(Framework.Workflow.Generated.DTO.ParallelStateStartItemStrictDTO parallelStateStartItemStrictDTO, Framework.Workflow.Domain.Definition.ParallelState parallelState)
        {
            return this.ToDomainObject(parallelStateStartItemStrictDTO, () => new Framework.Workflow.Domain.Definition.ParallelStateStartItem(parallelState));
        }
        
        public virtual Framework.Workflow.Domain.Definition.Role ToRole(Framework.Workflow.Generated.DTO.RoleIdentityDTO roleIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.Role>(roleIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Role ToRole(Framework.Workflow.Generated.DTO.RoleStrictDTO roleStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.RoleStrictDTO, Framework.Workflow.Domain.Definition.Role>(roleStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Role ToRole(Framework.Workflow.Generated.DTO.RoleStrictDTO roleStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(roleStrictDTO, () => new Framework.Workflow.Domain.Definition.Role(workflow));
        }
        
        public virtual Framework.Workflow.Domain.RoleRootFilterModel ToRoleRootFilterModel(Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO roleRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.RoleRootFilterModelStrictDTO, Framework.Workflow.Domain.RoleRootFilterModel>(roleRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionIdentityDTO startWorkflowDomainObjectConditionIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(startWorkflowDomainObjectConditionIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>(startWorkflowDomainObjectConditionStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition ToStartWorkflowDomainObjectCondition(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionStrictDTO startWorkflowDomainObjectConditionStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(startWorkflowDomainObjectConditionStrictDTO, () => new Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition(workflow));
        }
        
        public virtual Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel ToStartWorkflowDomainObjectConditionRootFilterModel(Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO startWorkflowDomainObjectConditionRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.StartWorkflowDomainObjectConditionRootFilterModelStrictDTO, Framework.Workflow.Domain.StartWorkflowDomainObjectConditionRootFilterModel>(startWorkflowDomainObjectConditionRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.StartWorkflowRequest ToStartWorkflowRequest(Framework.Workflow.Generated.DTO.StartWorkflowRequestStrictDTO startWorkflowRequestStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.StartWorkflowRequestStrictDTO, Framework.Workflow.Domain.StartWorkflowRequest>(startWorkflowRequestStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.StartWorkflowRequestParameter ToStartWorkflowRequestParameter(Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO startWorkflowRequestParameterStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.StartWorkflowRequestParameterStrictDTO, Framework.Workflow.Domain.StartWorkflowRequestParameter>(startWorkflowRequestParameterStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.State ToState(Framework.Workflow.Generated.DTO.StateIdentityDTO stateIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.State>(stateIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.State ToState(Framework.Workflow.Generated.DTO.StateStrictDTO stateStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.StateStrictDTO, Framework.Workflow.Domain.Definition.State>(stateStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.State ToState(Framework.Workflow.Generated.DTO.StateStrictDTO stateStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(stateStrictDTO, () => new Framework.Workflow.Domain.Definition.State(workflow));
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateBase ToStateBase(Framework.Workflow.Generated.DTO.StateBaseIdentityDTO stateBaseIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.StateBase>(stateBaseIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateBase ToStateBase(Framework.Workflow.Generated.DTO.StateBaseStrictDTO stateBaseStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.StateBaseStrictDTO, Framework.Workflow.Domain.Definition.StateBase>(stateBaseStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.StateBaseRootFilterModel ToStateBaseRootFilterModel(Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO stateBaseRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.StateBaseRootFilterModelStrictDTO, Framework.Workflow.Domain.StateBaseRootFilterModel>(stateBaseRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventIdentityDTO stateDomainObjectEventIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(stateDomainObjectEventIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO stateDomainObjectEventStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>(stateDomainObjectEventStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateDomainObjectEvent ToStateDomainObjectEvent(Framework.Workflow.Generated.DTO.StateDomainObjectEventStrictDTO stateDomainObjectEventStrictDTO, Framework.Workflow.Domain.Definition.State state)
        {
            return this.ToDomainObject(stateDomainObjectEventStrictDTO, () => new Framework.Workflow.Domain.Definition.StateDomainObjectEvent(state));
        }
        
        public virtual Framework.Workflow.Domain.Runtime.StateInstance ToStateInstance(Framework.Workflow.Generated.DTO.StateInstanceIdentityDTO stateInstanceIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Runtime.StateInstance>(stateInstanceIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.StateRootFilterModel ToStateRootFilterModel(Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO stateRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.StateRootFilterModelStrictDTO, Framework.Workflow.Domain.StateRootFilterModel>(stateRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateTimeoutEvent ToStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventIdentityDTO stateTimeoutEventIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.StateTimeoutEvent>(stateTimeoutEventIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateTimeoutEvent ToStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO stateTimeoutEventStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO, Framework.Workflow.Domain.Definition.StateTimeoutEvent>(stateTimeoutEventStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.StateTimeoutEvent ToStateTimeoutEvent(Framework.Workflow.Generated.DTO.StateTimeoutEventStrictDTO stateTimeoutEventStrictDTO, Framework.Workflow.Domain.Definition.State state)
        {
            return this.ToDomainObject(stateTimeoutEventStrictDTO, () => new Framework.Workflow.Domain.Definition.StateTimeoutEvent(state));
        }
        
        public virtual Framework.Workflow.Domain.Definition.TargetSystem ToTargetSystem(Framework.Workflow.Generated.DTO.TargetSystemIdentityDTO targetSystemIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.TargetSystem>(targetSystemIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Task ToTask(Framework.Workflow.Generated.DTO.TaskIdentityDTO taskIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.Task>(taskIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Task ToTask(Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.TaskStrictDTO, Framework.Workflow.Domain.Definition.Task>(taskStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Task ToTask(Framework.Workflow.Generated.DTO.TaskStrictDTO taskStrictDTO, Framework.Workflow.Domain.Definition.State state)
        {
            return this.ToDomainObject(taskStrictDTO, () => new Framework.Workflow.Domain.Definition.Task(state));
        }
        
        public virtual Framework.Workflow.Domain.Runtime.TaskInstance ToTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceIdentityDTO taskInstanceIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Runtime.TaskInstance>(taskInstanceIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Runtime.TaskInstance ToTaskInstance(Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO taskInstanceStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.TaskInstanceStrictDTO, Framework.Workflow.Domain.Runtime.TaskInstance>(taskInstanceStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.TaskInstanceRootFilterModel ToTaskInstanceRootFilterModel(Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO taskInstanceRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.TaskInstanceRootFilterModelStrictDTO, Framework.Workflow.Domain.TaskInstanceRootFilterModel>(taskInstanceRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.TaskMetadata ToTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO taskMetadataStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO, Framework.Workflow.Domain.Definition.TaskMetadata>(taskMetadataStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.TaskMetadata ToTaskMetadata(Framework.Workflow.Generated.DTO.TaskMetadataStrictDTO taskMetadataStrictDTO, Framework.Workflow.Domain.Definition.Task task)
        {
            return this.ToDomainObject(taskMetadataStrictDTO, () => new Framework.Workflow.Domain.Definition.TaskMetadata(task));
        }
        
        public virtual Framework.Workflow.Domain.TaskRootFilterModel ToTaskRootFilterModel(Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO taskRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.TaskRootFilterModelStrictDTO, Framework.Workflow.Domain.TaskRootFilterModel>(taskRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Transition ToTransition(Framework.Workflow.Generated.DTO.TransitionIdentityDTO transitionIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.Transition>(transitionIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Transition ToTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.TransitionStrictDTO, Framework.Workflow.Domain.Definition.Transition>(transitionStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Transition ToTransition(Framework.Workflow.Generated.DTO.TransitionStrictDTO transitionStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(transitionStrictDTO, () => new Framework.Workflow.Domain.Definition.Transition(workflow));
        }
        
        public virtual Framework.Workflow.Domain.Definition.TransitionAction ToTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO transitionActionStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.TransitionActionStrictDTO, Framework.Workflow.Domain.Definition.TransitionAction>(transitionActionStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.TransitionAction ToTransitionAction(Framework.Workflow.Generated.DTO.TransitionActionStrictDTO transitionActionStrictDTO, Framework.Workflow.Domain.Definition.Transition transition)
        {
            return this.ToDomainObject(transitionActionStrictDTO, () => new Framework.Workflow.Domain.Definition.TransitionAction(transition));
        }
        
        public virtual Framework.Workflow.Domain.Runtime.TransitionInstance ToTransitionInstance(Framework.Workflow.Generated.DTO.TransitionInstanceIdentityDTO transitionInstanceIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Runtime.TransitionInstance>(transitionInstanceIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.TransitionRootFilterModel ToTransitionRootFilterModel(Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO transitionRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.TransitionRootFilterModelStrictDTO, Framework.Workflow.Domain.TransitionRootFilterModel>(transitionRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowIdentityDTO workflowIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.Workflow>(workflowIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowStrictDTO, Framework.Workflow.Domain.Definition.Workflow>(workflowStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrictDTO, bool allowCreate)
        {
            if (allowCreate)
            {
                return this.ToDomainObject(workflowStrictDTO, () => new Framework.Workflow.Domain.Definition.Workflow());
            }
            else
            {
                return this.ToWorkflow(workflowStrictDTO);
            }
        }
        
        public virtual Framework.Workflow.Domain.Definition.Workflow ToWorkflow(Framework.Workflow.Generated.DTO.WorkflowStrictDTO workflowStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(workflowStrictDTO, () => new Framework.Workflow.Domain.Definition.Workflow(workflow));
        }
        
        public virtual Framework.Workflow.Domain.WorkflowCreateModel ToWorkflowCreateModel(Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO workflowCreateModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.WorkflowCreateModelStrictDTO, Framework.Workflow.Domain.WorkflowCreateModel>(workflowCreateModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Runtime.WorkflowInstance ToWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceIdentityDTO workflowInstanceIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Runtime.WorkflowInstance>(workflowInstanceIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Runtime.WorkflowInstance ToWorkflowInstance(Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO workflowInstanceStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowInstanceStrictDTO, Framework.Workflow.Domain.Runtime.WorkflowInstance>(workflowInstanceStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.WorkflowInstanceRootFilterModel ToWorkflowInstanceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO workflowInstanceRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.WorkflowInstanceRootFilterModelStrictDTO, Framework.Workflow.Domain.WorkflowInstanceRootFilterModel>(workflowInstanceRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher ToWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO workflowInstanceWatcherStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO, Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher>(workflowInstanceWatcherStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher ToWorkflowInstanceWatcher(Framework.Workflow.Generated.DTO.WorkflowInstanceWatcherStrictDTO workflowInstanceWatcherStrictDTO, Framework.Workflow.Domain.Runtime.WorkflowInstance workflowInstance)
        {
            return this.ToDomainObject(workflowInstanceWatcherStrictDTO, () => new Framework.Workflow.Domain.Runtime.WorkflowInstanceWatcher(workflowInstance));
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowLambda ToWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaIdentityDTO workflowLambdaIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.WorkflowLambda>(workflowLambdaIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowLambda ToWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO, Framework.Workflow.Domain.Definition.WorkflowLambda>(workflowLambdaStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowLambda ToWorkflowLambda(Framework.Workflow.Generated.DTO.WorkflowLambdaStrictDTO workflowLambdaStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(workflowLambdaStrictDTO, () => new Framework.Workflow.Domain.Definition.WorkflowLambda(workflow));
        }
        
        public virtual Framework.Workflow.Domain.WorkflowLambdaRootFilterModel ToWorkflowLambdaRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO workflowLambdaRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.WorkflowLambdaRootFilterModelStrictDTO, Framework.Workflow.Domain.WorkflowLambdaRootFilterModel>(workflowLambdaRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowMetadata ToWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO workflowMetadataStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO, Framework.Workflow.Domain.Definition.WorkflowMetadata>(workflowMetadataStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowMetadata ToWorkflowMetadata(Framework.Workflow.Generated.DTO.WorkflowMetadataStrictDTO workflowMetadataStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(workflowMetadataStrictDTO, () => new Framework.Workflow.Domain.Definition.WorkflowMetadata(workflow));
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowParameter ToWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterIdentityDTO workflowParameterIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.WorkflowParameter>(workflowParameterIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowParameter ToWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO workflowParameterStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO, Framework.Workflow.Domain.Definition.WorkflowParameter>(workflowParameterStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowParameter ToWorkflowParameter(Framework.Workflow.Generated.DTO.WorkflowParameterStrictDTO workflowParameterStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(workflowParameterStrictDTO, () => new Framework.Workflow.Domain.Definition.WorkflowParameter(workflow));
        }
        
        public virtual Framework.Workflow.Domain.WorkflowRootFilterModel ToWorkflowRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO workflowRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.WorkflowRootFilterModelStrictDTO, Framework.Workflow.Domain.WorkflowRootFilterModel>(workflowRootFilterModelStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowSource ToWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceIdentityDTO workflowSourceIdentityDTO)
        {
            return this.GetById<Framework.Workflow.Domain.Definition.WorkflowSource>(workflowSourceIdentityDTO.Id);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowSource ToWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO workflowSourceStrictDTO)
        {
            return this.ToDomainObject<Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO, Framework.Workflow.Domain.Definition.WorkflowSource>(workflowSourceStrictDTO);
        }
        
        public virtual Framework.Workflow.Domain.Definition.WorkflowSource ToWorkflowSource(Framework.Workflow.Generated.DTO.WorkflowSourceStrictDTO workflowSourceStrictDTO, Framework.Workflow.Domain.Definition.Workflow workflow)
        {
            return this.ToDomainObject(workflowSourceStrictDTO, () => new Framework.Workflow.Domain.Definition.WorkflowSource(workflow));
        }
        
        public virtual Framework.Workflow.Domain.WorkflowSourceRootFilterModel ToWorkflowSourceRootFilterModel(Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO workflowSourceRootFilterModelStrictDTO)
        {
            return this.ToDomainObjectBase<Framework.Workflow.Generated.DTO.WorkflowSourceRootFilterModelStrictDTO, Framework.Workflow.Domain.WorkflowSourceRootFilterModel>(workflowSourceRootFilterModelStrictDTO);
        }
    }
    
    public partial class WorkflowServerPrimitiveDTOMappingService : Framework.Workflow.Generated.DTO.WorkflowServerPrimitiveDTOMappingServiceBase
    {
        
        public WorkflowServerPrimitiveDTOMappingService(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
}
