//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Attachments.BLL
{
    
    
    public partial class AttachmentsValidationMapBase : Framework.Validation.ValidationMapBase
    {
        
        private Framework.Validation.IValidationMap _defaultValidatorMap;
        
        protected AttachmentsValidationMapBase(Framework.Core.IDynamicSource extendedValidationData) : 
                base(extendedValidationData)
        {
            this._defaultValidatorMap = new Framework.Validation.ValidationMap(extendedValidationData);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, byte[]>> GetAttachment_ContentValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.Attachment, byte[]>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, System.DateTime?>> GetAttachment_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.Attachment>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, string>> GetAttachment_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.Attachment>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, string>> GetAttachment_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.Attachment>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, System.DateTime?>> GetAttachment_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.Attachment>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, string>> GetAttachment_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.Attachment>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.Attachment, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.Attachment, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag>>> GetAttachment_TagsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Attachments.Domain.Attachment, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag>, Framework.Attachments.Domain.AttachmentTag, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Attachments.Domain.Attachment, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag>, Framework.Attachments.Domain.AttachmentTag>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment>>> GetAttachmentContainer_AttachmentsValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Attachments.Domain.AttachmentContainer, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment>, Framework.Attachments.Domain.Attachment, System.Tuple<string>>(source => new System.Tuple<string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower()), "Name");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Attachments.Domain.AttachmentContainer, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment>, Framework.Attachments.Domain.Attachment>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, System.DateTime?>> GetAttachmentContainer_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.AttachmentContainer>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, string>> GetAttachmentContainer_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.AttachmentContainer>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.DomainType>> GetAttachmentContainer_DomainTypeValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.DomainType>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, string>> GetAttachmentContainer_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.AttachmentContainer>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, System.DateTime?>> GetAttachmentContainer_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.AttachmentContainer>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainer, System.Guid>> GetAttachmentContainer_ObjectIdValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.AttachmentContainer, System.Guid>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer>> GetAttachmentContainerProperties(Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.AttachmentContainer> currentClass)
        {
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.Attachment>, Framework.Attachments.Domain.Attachment>(source => source.Attachments, currentClass, this.GetAttachmentContainer_AttachmentsValidators(), this.GetClassMap<Framework.Attachments.Domain.Attachment>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, System.DateTime?>(source => source.CreateDate, currentClass, this.GetAttachmentContainer_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, string>(source => source.CreatedBy, currentClass, this.GetAttachmentContainer_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, Framework.Attachments.Domain.DomainType>(source => source.DomainType, currentClass, this.GetAttachmentContainer_DomainTypeValidators(), this.GetClassMap<Framework.Attachments.Domain.DomainType>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, string>(source => source.ModifiedBy, currentClass, this.GetAttachmentContainer_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetAttachmentContainer_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainer, System.Guid>(source => source.ObjectId, currentClass, this.GetAttachmentContainer_ObjectIdValidators(), this.GetClassMap<System.Guid>(true));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainerReference, Framework.Attachments.Domain.DomainType>> GetAttachmentContainerReference_DomainTypeValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.AttachmentContainerReference, Framework.Attachments.Domain.DomainType>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentContainerReference, System.Guid>> GetAttachmentContainerReference_ObjectIdValidators()
        {
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.AttachmentContainerReference, System.Guid>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Attachments.Domain.AttachmentContainerReference>> GetAttachmentContainerReferenceProperties(Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.AttachmentContainerReference> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainerReference, Framework.Attachments.Domain.DomainType>(source => source.DomainType, currentClass, this.GetAttachmentContainerReference_DomainTypeValidators(), this.GetClassMap<Framework.Attachments.Domain.DomainType>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentContainerReference, System.Guid>(source => source.ObjectId, currentClass, this.GetAttachmentContainerReference_ObjectIdValidators(), this.GetClassMap<System.Guid>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.AttachmentContainerReference> GetAttachmentContainerReferenceValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Attachments.Domain.AttachmentContainerReference>(this.GetAttachmentContainerReferenceProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.AttachmentContainer> GetAttachmentContainerValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Attachments.Domain.AttachmentContainer>(this.GetAttachmentContainerProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Attachments.Domain.Attachment>> GetAttachmentProperties(Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.Attachment> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.Attachment, byte[]>(source => source.Content, currentClass, this.GetAttachment_ContentValidators(), this.GetClassMap<byte[]>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.Attachment, System.DateTime?>(source => source.CreateDate, currentClass, this.GetAttachment_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.Attachment, string>(source => source.CreatedBy, currentClass, this.GetAttachment_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.Attachment, string>(source => source.ModifiedBy, currentClass, this.GetAttachment_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.Attachment, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetAttachment_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.Attachment, string>(source => source.Name, currentClass, this.GetAttachment_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Attachments.Domain.Attachment, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.AttachmentTag>, Framework.Attachments.Domain.AttachmentTag>(source => source.Tags, currentClass, this.GetAttachment_TagsValidators(), this.GetClassMap<Framework.Attachments.Domain.AttachmentTag>(true));
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentTag, System.DateTime?>> GetAttachmentTag_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.AttachmentTag>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentTag, string>> GetAttachmentTag_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.AttachmentTag>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentTag, string>> GetAttachmentTag_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.AttachmentTag>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentTag, System.DateTime?>> GetAttachmentTag_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.AttachmentTag>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentTag, string>> GetAttachmentTag_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.AttachmentTag>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.AttachmentTag, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.AttachmentTag, string>> GetAttachmentTag_ValueValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.AttachmentTag>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Attachments.Domain.AttachmentTag>> GetAttachmentTagProperties(Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.AttachmentTag> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentTag, System.DateTime?>(source => source.CreateDate, currentClass, this.GetAttachmentTag_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentTag, string>(source => source.CreatedBy, currentClass, this.GetAttachmentTag_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentTag, string>(source => source.ModifiedBy, currentClass, this.GetAttachmentTag_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentTag, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetAttachmentTag_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentTag, string>(source => source.Name, currentClass, this.GetAttachmentTag_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.AttachmentTag, string>(source => source.Value, currentClass, this.GetAttachmentTag_ValueValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.AttachmentTag> GetAttachmentTagValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Attachments.Domain.AttachmentTag>(this.GetAttachmentTagProperties);
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.Attachment> GetAttachmentValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Attachments.Domain.Attachment>(this.GetAttachmentProperties);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.DomainType, System.DateTime?>> GetDomainType_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.DomainType>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.DomainType, string>> GetDomainType_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.DomainType, string>> GetDomainType_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.DomainType, System.DateTime?>> GetDomainType_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.DomainType>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.DomainType, string>> GetDomainType_NameSpaceValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.DomainType>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.DomainType, string>> GetDomainType_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.DomainType>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.DomainType, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Attachments.Domain.DomainType>> GetDomainTypeProperties(Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.DomainType> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.DomainType, System.DateTime?>(source => source.CreateDate, currentClass, this.GetDomainType_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.DomainType, string>(source => source.CreatedBy, currentClass, this.GetDomainType_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.DomainType, string>(source => source.ModifiedBy, currentClass, this.GetDomainType_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.DomainType, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetDomainType_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.DomainType, string>(source => source.Name, currentClass, this.GetDomainType_NameValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.DomainType, string>(source => source.NameSpace, currentClass, this.GetDomainType_NameSpaceValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.DomainType> GetDomainTypeValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Attachments.Domain.DomainType>(this.GetDomainTypeProperties);
        }
        
        protected override Framework.Validation.IClassValidationMap<TSource> GetInternalClassMap<TSource>()
        {
            if ((typeof(TSource) == typeof(Framework.Attachments.Domain.Attachment)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAttachmentValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Attachments.Domain.AttachmentContainer)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAttachmentContainerValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Attachments.Domain.AttachmentContainerReference)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAttachmentContainerReferenceValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Attachments.Domain.AttachmentTag)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetAttachmentTagValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Attachments.Domain.DomainType)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetDomainTypeValidationMap()));
            }
            else if ((typeof(TSource) == typeof(Framework.Attachments.Domain.TargetSystem)))
            {
                return ((Framework.Validation.IClassValidationMap<TSource>)(this.GetTargetSystemValidationMap()));
            }
            else
            {
                return Framework.Validation.ValidationMapExtensions.GetClassMap<TSource>(this._defaultValidatorMap);
            }
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.TargetSystem, System.DateTime?>> GetTargetSystem_CreateDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.TargetSystem>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.TargetSystem, string>> GetTargetSystem_CreatedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType>>> GetTargetSystem_DomainTypesValidators()
        {
            yield return new Framework.Validation.UniqueCollectionValidator<Framework.Attachments.Domain.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType>, Framework.Attachments.Domain.DomainType, System.Tuple<string, string>>(source => new System.Tuple<string, string>(Framework.Core.StringExtensions.TrimNull(source.Name).ToLower(), Framework.Core.StringExtensions.TrimNull(source.NameSpace).ToLower()), "Name, NameSpace");
            yield return new Framework.Validation.DeepCollectionValidator<Framework.Attachments.Domain.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType>, Framework.Attachments.Domain.DomainType>();
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.TargetSystem, string>> GetTargetSystem_ModifiedByValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.TargetSystem, System.DateTime?>> GetTargetSystem_ModifyDateValidators()
        {
            yield return Framework.Validation.RangePropertyValidatorHelper.DateTime.CreateNullable<Framework.Attachments.Domain.TargetSystem>(this.AvailableValues.GetAvailableRange<System.DateTime>());
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidator<Framework.Attachments.Domain.TargetSystem, string>> GetTargetSystem_NameValidators()
        {
            yield return new Framework.Validation.MaxLengthValidator.StringMaxLengthValidator<Framework.Attachments.Domain.TargetSystem>(this.AvailableValues.GetAvailableSize<string>());
            yield return new Framework.Validation.RequiredValidator<Framework.Attachments.Domain.TargetSystem, string>(Framework.Restriction.RequiredMode.Default);
        }
        
        protected virtual System.Collections.Generic.IEnumerable<Framework.Validation.IPropertyValidationMap<Framework.Attachments.Domain.TargetSystem>> GetTargetSystemProperties(Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.TargetSystem> currentClass)
        {
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.TargetSystem, System.DateTime?>(source => source.CreateDate, currentClass, this.GetTargetSystem_CreateDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.TargetSystem, string>(source => source.CreatedBy, currentClass, this.GetTargetSystem_CreatedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.CollectionPropertyValidationMap<Framework.Attachments.Domain.TargetSystem, System.Collections.Generic.IEnumerable<Framework.Attachments.Domain.DomainType>, Framework.Attachments.Domain.DomainType>(source => source.DomainTypes, currentClass, this.GetTargetSystem_DomainTypesValidators(), this.GetClassMap<Framework.Attachments.Domain.DomainType>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.TargetSystem, string>(source => source.ModifiedBy, currentClass, this.GetTargetSystem_ModifiedByValidators(), this.GetClassMap<string>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.TargetSystem, System.DateTime?>(source => source.ModifyDate, currentClass, this.GetTargetSystem_ModifyDateValidators(), this.GetClassMap<System.DateTime?>(true));
            yield return new Framework.Validation.SinglePropertyValidationMap<Framework.Attachments.Domain.TargetSystem, string>(source => source.Name, currentClass, this.GetTargetSystem_NameValidators(), this.GetClassMap<string>(true));
        }
        
        protected virtual Framework.Validation.IClassValidationMap<Framework.Attachments.Domain.TargetSystem> GetTargetSystemValidationMap()
        {
            return new Framework.Validation.ClassValidationMap<Framework.Attachments.Domain.TargetSystem>(this.GetTargetSystemProperties);
        }
    }
    
    public partial class AttachmentsValidationMap : Framework.Attachments.BLL.AttachmentsValidationMapBase
    {
        
        public AttachmentsValidationMap(Framework.Core.IDynamicSource extendedValidationData) : 
                base(extendedValidationData)
        {
        }
    }
}
