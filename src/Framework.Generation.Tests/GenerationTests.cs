using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using FluentAssertions;

using Framework.Core;
using Framework.DomainDriven.DTOGenerator.TypeScript.Facade;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using FileInfo = Framework.DomainDriven.Generation.FileInfo;

namespace Framework.Generation.Tests
{
    [TestClass]
    public class GenerationTests
    {
        [TestMethod]
        public void AuthorizationGeneration_CheckUpdatedFiles_ShouldBeNothing()
        {
            // Arrange
            var target = new Framework.Authorization.TestGenerate.ServerGenerators();

            // Act
            var generatedFiles = target.GenerateMain().ToList();

            // Assert
            ShouldBeNoNewAndModifiedFiles(generatedFiles);
        }

        [TestMethod]
        public void ConfigurationGeneration_CheckUpdatedFiles_ShouldBeNothing()
        {
            // Arrange
            var target = new Framework.Configuration.TestGenerate.ServerGenerators();

            // Act
            var generatedFiles = target.GenerateMain().ToList();

            // Assert
            ShouldBeNoNewAndModifiedFiles(generatedFiles);
        }

        [TestMethod]
        public void WorkflowGeneration_CheckUpdatedFiles_ShouldBeNothing()
        {
            // Arrange
            var target = new Framework.Workflow.TestGenerate.ServerGenerators();

            // Act
            var generatedFiles = target.GenerateMain().ToList();

            // Assert
            ShouldBeNoNewAndModifiedFiles(generatedFiles);
        }

        [TestMethod]
        public void SampleSystemServerGeneration_CheckUpdatedFiles_ShouldBeNothing()
        {
            // Arrange
            var target = new SampleSystem.CodeGenerate.ServerGenerators();

            // Act
            var generatedFiles = target.GenerateMain().ToList();

            // Assert
            ShouldBeNoNewAndModifiedFiles(generatedFiles);
        }

        [TestMethod]
        public void SampleSystemTypeScriptGeneration_CheckUpdatedFiles_ShouldBeNothing()
        {
            // Arrange
            var target = new SampleSystem.TypeScriptGenerate.Generators();

            // Act
            var generatedFiles = target.GenerateMain().ToList();

            // Assert
            ShouldBeNoNewAndModifiedFiles(generatedFiles);
        }

        private static void ShouldBeNoNewAndModifiedFiles(IReadOnlyCollection<FileInfo> generatedFiles)
        {
            var changedFiles = generatedFiles.Where(x => x.FileState == FileInfo.State.Modified).ToList();
            var newFiles = generatedFiles.Where(x => x.FileState == FileInfo.State.New).ToList();

            if (changedFiles.Any() || newFiles.Any())
            {
                Assert.Fail(
                            $@"Repo do not have actual versions of autogenerated source code
New files are:
{GetAggregatedMessage(newFiles)}
Modified files are:
{GetAggregatedMessage(changedFiles)}");
            }
        }

        private static string GetAggregatedMessage(IReadOnlyCollection<FileInfo> source)
            => source.Any()
                       ? source.Select(x => "\t" + x.AbsolutePath).Aggregate((total, next) => total + Environment.NewLine + next)
                       : string.Empty;
    }
}
