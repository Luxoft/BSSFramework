// ------------------------------------------------------------------------------
/// <auto-generated>
/// This code was generated by a tool.
///
/// Changes to this file may cause incorrect behavior and will be lost if
/// the code is regenerated.
/// </auto-generated>
// ------------------------------------------------------------------------------

// tslint:disable
/* eslint-disable */

import { Guid, Convert } from 'luxite/system';
import * as Framework from 'luxite/framework/framework';
import { observable, observableArray, unwrap } from 'knockout';
import { Core } from 'luxite/framework/framework';

export class BaseObservableAbstractDTO {
    public __type = 'BaseObservableAbstractDTO';

    private _baseobservableabstractdto: string;

    public static fromJs(source: any): BaseObservableAbstractDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservableAbstractDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
    }

    public fromObservable(source: any): void {
    }

}

export class BaseObservablePersistentDTO extends BaseObservableAbstractDTO {
    public __type = 'BaseObservablePersistentDTO';

    private _baseobservablepersistentdto: string;

    public Id = observable<Guid>();

    public get IsNew() : boolean {
        return (Guid.Default() === unwrap(this.Id));
    }

    public static fromJs(source: IBasePersistentDTO): BaseObservablePersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservablePersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBasePersistentDTO): void {
        super.fromJs(source);
        this.Id(source.Id);
    }

}

export class BaseObservableAuditPersistentDTO extends BaseObservablePersistentDTO {
    public __type = 'BaseObservableAuditPersistentDTO';

    private _baseobservableauditpersistentdto: string;

    public Active = observable<boolean>(true);

    public CreateDate = observable<Date>();

    public CreatedBy = observable<string>();

    public ModifiedBy = observable<string>();

    public ModifyDate = observable<Date>();

    public static fromJs(source: IBaseAuditPersistentDTO): BaseObservableAuditPersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseObservableAuditPersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IBaseAuditPersistentDTO): void {
        super.fromJs(source);
        this.Active(source.Active);
        this.CreateDate(Convert.toDate(source.CreateDate));
        this.CreatedBy(source.CreatedBy);
        this.ModifiedBy(source.ModifiedBy);
        this.ModifyDate(Convert.toDate(source.ModifyDate));
    }

}

export class PrincipalObservableSimpleDTO extends BaseObservableAuditPersistentDTO {
    public __type = 'PrincipalObservableSimpleDTO';

    private _principalobservablesimpledto: string;

    public ExternalId = observable<Guid>();

    public Name = observable<string>();

    public static fromJs(source: IPrincipalSimpleDTO): PrincipalObservableSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalObservableSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalSimpleDTO): void {
        super.fromJs(source);
        this.ExternalId(source.ExternalId);
        this.Name(source.Name);
    }

    public toJs(): PrincipalSimpleDTO {
        let e = new PrincipalSimpleDTO();
        e.fromObservable(this);
        return e;
    }

}

export class PrincipalObservableFullDTO extends PrincipalObservableSimpleDTO {
    public __type = 'PrincipalObservableFullDTO';

    private _principalobservablefulldto: string;

    public RunAs = observable<PrincipalObservableSimpleDTO>();

    public static fromJs(source: IPrincipalFullDTO): PrincipalObservableFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalObservableFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalFullDTO): void {
        super.fromJs(source);
        this.RunAs(PrincipalObservableSimpleDTO.fromJs(source.RunAs));
    }

    public toJs(): PrincipalFullDTO {
        let e = new PrincipalFullDTO();
        e.fromObservable(this);
        return e;
    }

}

export interface IBaseAbstractDTO {
}

export interface IBasePersistentDTO extends IBaseAbstractDTO {
    Id : Guid;
}

export interface IBaseAuditPersistentDTO extends IBasePersistentDTO {
    Active : boolean;
    CreateDate? : Date;
    CreatedBy : string;
    ModifiedBy : string;
    ModifyDate? : Date;
}

export class BaseAbstractDTO {
    public __type = 'BaseAbstractDTO';

    private _baseabstractdto: string;

    public static fromJs(source: any): BaseAbstractDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseAbstractDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: any): void {
    }

    public fromObservable(source: any): void {
    }

    public toJs(): BaseAbstractDTO {
        return this;
    }

    public toNativeJson(): BaseAbstractDTO {
        return this;
    }

}

export class BasePersistentDTO extends BaseAbstractDTO {
    public __type = 'BasePersistentDTO';

    private _basepersistentdto: string;

    public Id: Guid;

    public get IsNew() : boolean {
        return (Guid.Default() === this.Id);
    }

    public static fromJs(source: IBasePersistentDTO): BasePersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BasePersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromBasePersistent(source: BasePersistentDTO): void {
        this.Id = source.Id;
    }

    public fromJs(source: IBasePersistentDTO): void {
        super.fromJs(source);
        this.Id = source.Id;
    }

    public fromObservable(source: BaseObservablePersistentDTO): void {
        super.fromObservable(source);
        this.Id = unwrap(source.Id);
    }

}

export class BaseAuditPersistentDTO extends BasePersistentDTO {
    public __type = 'BaseAuditPersistentDTO';

    private _baseauditpersistentdto: string;

    public Active: boolean;

    public CreateDate: Date;

    public CreatedBy: string;

    public ModifiedBy: string;

    public ModifyDate: Date;

    public static fromJs(source: IBaseAuditPersistentDTO): BaseAuditPersistentDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new BaseAuditPersistentDTO();
        e.fromJs(source);
        return e;
    }

    public fromBaseAuditPersistent(source: BaseAuditPersistentDTO): void {
        this.fromBasePersistent(source);
        this.Active = source.Active;
        this.CreateDate = source.CreateDate;
        this.CreatedBy = source.CreatedBy;
        this.ModifiedBy = source.ModifiedBy;
        this.ModifyDate = source.ModifyDate;
    }

    public fromJs(source: IBaseAuditPersistentDTO): void {
        super.fromJs(source);
        this.Active = source.Active;
        this.CreateDate = Convert.toDate(source.CreateDate);
        this.CreatedBy = source.CreatedBy;
        this.ModifiedBy = source.ModifiedBy;
        this.ModifyDate = Convert.toDate(source.ModifyDate);
    }

    public fromObservable(source: BaseObservableAuditPersistentDTO): void {
        super.fromObservable(source);
        this.Active = unwrap(source.Active);
        this.CreateDate = unwrap(source.CreateDate);
        this.CreatedBy = unwrap(source.CreatedBy);
        this.ModifiedBy = unwrap(source.ModifiedBy);
        this.ModifyDate = unwrap(source.ModifyDate);
    }

}

export class PrincipalSimpleDTO extends BaseAuditPersistentDTO {
    public __type = 'PrincipalSimpleDTO';

    private _principalsimpledto: string;

    public ExternalId: Guid;

    public Name: string;

    public static fromJs(source: IPrincipalSimpleDTO): PrincipalSimpleDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalSimpleDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalSimpleDTO): void {
        super.fromJs(source);
        this.ExternalId = source.ExternalId;
        this.Name = source.Name;
    }

    public fromObservable(source: PrincipalObservableSimpleDTO): void {
        super.fromObservable(source);
        this.ExternalId = unwrap(source.ExternalId);
        this.Name = unwrap(source.Name);
    }

    public toObservable(): PrincipalObservableSimpleDTO {
        let e = new PrincipalObservableSimpleDTO();
        e.fromJs(this);
        return e;
    }

}

export class PrincipalFullDTO extends PrincipalSimpleDTO {
    public __type = 'PrincipalFullDTO';

    private _principalfulldto: string;

    public RunAs: PrincipalSimpleDTO;

    public static fromJs(source: IPrincipalFullDTO): PrincipalFullDTO {
        if (!(source)) {
            return undefined;
        }
        let e = new PrincipalFullDTO();
        e.fromJs(source);
        return e;
    }

    public fromJs(source: IPrincipalFullDTO): void {
        super.fromJs(source);
        this.RunAs = PrincipalSimpleDTO.fromJs(source.RunAs);
    }

    public fromObservable(source: PrincipalObservableFullDTO): void {
        super.fromObservable(source);
        if (unwrap(source.RunAs)) {
            this.RunAs = unwrap(source.RunAs).toJs();
        }
    }

    public toObservable(): PrincipalObservableFullDTO {
        let e = new PrincipalObservableFullDTO();
        e.fromJs(this);
        return e;
    }

}

export interface IPrincipalSimpleDTO extends IBaseAuditPersistentDTO {
    ExternalId? : Guid;
    Name : string;
}

export interface IPrincipalFullDTO extends IPrincipalSimpleDTO {
    RunAs : PrincipalSimpleDTO;
}

export enum AuthorizationSecurityOperationCode {
    AuthorizationImpersonate = 7,
    BusinessRoleEdit = 4,
    BusinessRoleView = 3,
    Disabled = 0,
    OperationEdit = 6,
    OperationView = 5,
    PrincipalEdit = 2,
    PrincipalView = 1,
}

