//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Authorization.BLL
{
    
    
    public partial interface IAuthorizationBLLContext : Framework.DomainDriven.BLL.Security.IAccessDeniedExceptionServiceContainer, Framework.DomainDriven.BLL.Security.ISecurityServiceContainer<Framework.DomainDriven.BLL.Security.IRootSecurityService<Framework.Authorization.Domain.PersistentDomainObjectBase>>, Framework.DomainDriven.BLL.IBLLFactoryContainerContext<Framework.Authorization.BLL.IAuthorizationBLLFactoryContainer>, Framework.DomainDriven.IFetchServiceContainer<Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.DomainDriven.FetchBuildRule>
    {
        
        new Framework.Authorization.BLL.IAuthorizationBLLFactoryContainer Logics
        {
            get;
        }
    }
    
    public partial class SecurityDomainBLLBase<TDomainObject> : Framework.DomainDriven.BLL.Security.DefaultSecurityDomainBLLBase<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>
        where TDomainObject : Framework.Authorization.Domain.PersistentDomainObjectBase
    {
        
        public SecurityDomainBLLBase(Framework.Authorization.BLL.IAuthorizationBLLContext context, SecuritySystem.ISecurityProvider<TDomainObject> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial interface IAuthorizationBLLFactoryContainer : Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Authorization.Domain.PersistentDomainObjectBase, System.Guid>>
    {
        
        Framework.Authorization.BLL.IBusinessRoleBLL BusinessRole
        {
            get;
        }
        
        Framework.Authorization.BLL.IBusinessRoleBLLFactory BusinessRoleFactory
        {
            get;
        }
        
        Framework.Authorization.BLL.IPermissionBLL Permission
        {
            get;
        }
        
        Framework.Authorization.BLL.IPermissionBLLFactory PermissionFactory
        {
            get;
        }
        
        Framework.Authorization.BLL.IPermissionRestrictionBLL PermissionRestriction
        {
            get;
        }
        
        Framework.Authorization.BLL.IPermissionRestrictionBLLFactory PermissionRestrictionFactory
        {
            get;
        }
        
        Framework.Authorization.BLL.IPrincipalBLL Principal
        {
            get;
        }
        
        Framework.Authorization.BLL.IPrincipalBLLFactory PrincipalFactory
        {
            get;
        }
        
        Framework.Authorization.BLL.ISecurityContextTypeBLL SecurityContextType
        {
            get;
        }
        
        Framework.Authorization.BLL.ISecurityContextTypeBLLFactory SecurityContextTypeFactory
        {
            get;
        }
    }
    
    public partial interface IBusinessRoleBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.BusinessRole, System.Guid>
    {
    }
    
    public partial interface IBusinessRoleBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IBusinessRoleBLL, Framework.Authorization.Domain.BusinessRole>
    {
    }
    
    public partial interface IPermissionBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.Permission, System.Guid>
    {
        
        System.Collections.Generic.List<Framework.Authorization.Domain.Permission> GetListBy(Framework.Authorization.Domain.PermissionDirectFilterModel filter, Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.Permission> fetchs);
    }
    
    public partial interface IPermissionBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionBLL, Framework.Authorization.Domain.Permission>
    {
    }
    
    public partial interface IPermissionRestrictionBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.PermissionRestriction, System.Guid>
    {
    }
    
    public partial interface IPermissionRestrictionBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPermissionRestrictionBLL, Framework.Authorization.Domain.PermissionRestriction>
    {
    }
    
    public partial interface IPrincipalBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.Principal, System.Guid>
    {
    }
    
    public partial interface IPrincipalBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.IPrincipalBLL, Framework.Authorization.Domain.Principal>
    {
    }
    
    public partial interface ISecurityContextTypeBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Authorization.BLL.IAuthorizationBLLContext, Framework.Authorization.Domain.PersistentDomainObjectBase, Framework.Authorization.Domain.SecurityContextType, System.Guid>
    {
    }
    
    public partial interface ISecurityContextTypeBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Authorization.BLL.ISecurityContextTypeBLL, Framework.Authorization.Domain.SecurityContextType>
    {
    }
}
