//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Authorization.Generated.DTO
{
    
    
    public partial interface IAuthorizationClientDTOMappingService
    {
        
        void MapBaseAuditPersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBaseAuditPersistentToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapBasePersistentToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource);
        
        void MapFullToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleFullDTO currentSource);
        
        void MapFullToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO currentSource);
        
        void MapFullToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO currentSource);
        
        void MapFullToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO currentSource);
        
        void MapFullToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO currentSource);
        
        void MapFullToStrictForEntityTypeRootFilterModel(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.OperationFullDTO currentSource);
        
        void MapFullToStrictForOperationRootFilterModel(Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFullDTO currentSource);
        
        void MapFullToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO currentSource);
        
        void MapFullToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO currentSource);
        
        void MapFullToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalFullDTO currentSource);
        
        void MapFullToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO currentSource);
        
        void MapFullToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO currentSource);
        
        void MapFullToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO currentSource);
        
        void MapRichToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRichDTO currentSource);
        
        void MapRichToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO currentSource);
        
        void MapRichToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO currentSource);
        
        void MapRichToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO currentSource);
        
        void MapRichToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO currentSource);
        
        void MapRichToStrictForEntityTypeRootFilterModel(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.OperationRichDTO currentSource);
        
        void MapRichToStrictForOperationRootFilterModel(Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRichDTO currentSource);
        
        void MapRichToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO currentSource);
        
        void MapRichToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO currentSource);
        
        void MapRichToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRichDTO currentSource);
        
        void MapRichToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO currentSource);
        
        void MapRichToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO currentSource);
        
        void MapRichToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO currentSource);
        
        void MapSimpleToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO currentSource);
        
        void MapSimpleToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForEntityTypeRootFilterModel(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.OperationSimpleDTO currentSource);
        
        void MapSimpleToStrictForOperationRootFilterModel(Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO currentSource);
        
        void MapSimpleToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO currentSource);
    }
    
    public abstract partial class AuthorizationClientPrimitiveDTOMappingServiceBase : Framework.Persistent.ClientDTOMappingServiceBase, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService
    {
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapBaseAuditPersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Active = currentSource.Active;
        }
        
        public virtual void MapBaseAuditPersistentToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapBasePersistentToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapBasePersistentToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapBasePersistentToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapBasePersistentToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapBasePersistentToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.BasePersistentDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Id = currentSource.Id;
        }
        
        public virtual void MapFullToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Operation, null))
            {
                target.Operation = currentSource.Operation.Identity;
            }
            else
            {
                target.Operation = Framework.Authorization.Generated.DTO.OperationIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Operation, null))
            {
                target.Operation = currentSource.Operation.Identity;
            }
            else
            {
                target.Operation = Framework.Authorization.Generated.DTO.OperationIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(currentSource.Principal, null))
            {
                target.Principal = currentSource.Principal.Identity;
            }
            else
            {
                target.Principal = Framework.Authorization.Generated.DTO.PrincipalIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.DelegateFromPermission, null))
            {
                target.DelegateFromPermission = currentSource.DelegateFromPermission.Identity;
            }
            else
            {
                target.DelegateFromPermission = Framework.Authorization.Generated.DTO.PermissionIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Principal, null))
            {
                target.Principal = currentSource.Principal.Identity;
            }
            else
            {
                target.Principal = Framework.Authorization.Generated.DTO.PrincipalIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForEntityTypeRootFilterModel(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.OperationFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForOperationRootFilterModel(Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.BusinessRole, null))
            {
                target.BusinessRole = currentSource.BusinessRole.Identity;
            }
            else
            {
                target.BusinessRole = Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(currentSource.Principal, null))
            {
                target.Principal = currentSource.Principal.Identity;
            }
            else
            {
                target.Principal = Framework.Authorization.Generated.DTO.PrincipalIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Role, null))
            {
                target.Role = currentSource.Role.Identity;
            }
            else
            {
                target.Role = Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.EntityType, null))
            {
                target.EntityType = currentSource.EntityType.Identity;
            }
            else
            {
                target.EntityType = Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapFullToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.BusinessRole, null))
            {
                target.BusinessRole = currentSource.BusinessRole.Identity;
            }
            else
            {
                target.BusinessRole = Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO.Empty;
            }
            if (!object.ReferenceEquals(currentSource.Operation, null))
            {
                target.Operation = currentSource.Operation.Identity;
            }
            else
            {
                target.Operation = Framework.Authorization.Generated.DTO.OperationIdentityDTO.Empty;
            }
        }
        
        public virtual void MapFullToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.SubBusinessRole, null))
            {
                target.SubBusinessRole = currentSource.SubBusinessRole.Identity;
            }
            else
            {
                target.SubBusinessRole = Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO.Empty;
            }
        }
        
        public virtual void MapRichToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.BusinessRoleOperationLinks, null))
            {
                target.BusinessRoleOperationLinks = Framework.Core.EnumerableExtensions.ToList(currentSource.BusinessRoleOperationLinks, businessRoleOperationLink => new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO(businessRoleOperationLink));
            }
            if (!object.ReferenceEquals(currentSource.SubBusinessRoleLinks, null))
            {
                target.SubBusinessRoleLinks = Framework.Core.EnumerableExtensions.ToList(currentSource.SubBusinessRoleLinks, subBusinessRoleLink => new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO(subBusinessRoleLink));
            }
        }
        
        public virtual void MapRichToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Items, null))
            {
                target.Items = Framework.Core.EnumerableExtensions.ToList(currentSource.Items, delegateToItemModel => new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(delegateToItemModel));
            }
        }
        
        public virtual void MapRichToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Permission, null))
            {
                target.Permission = new Framework.Authorization.Generated.DTO.PermissionStrictDTO(currentSource.Permission);
            }
            else
            {
                target.Permission = null;
            }
        }
        
        public virtual void MapRichToStrictForEntityTypeRootFilterModel(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.OperationRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForOperationRootFilterModel(Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.FilterItems, null))
            {
                target.FilterItems = Framework.Core.EnumerableExtensions.ToList(currentSource.FilterItems, permissionFilterItem => new Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO(permissionFilterItem));
            }
        }
        
        public virtual void MapRichToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            if (!object.ReferenceEquals(currentSource.Permissions, null))
            {
                target.Permissions = Framework.Core.EnumerableExtensions.ToList(currentSource.Permissions, permission => new Framework.Authorization.Generated.DTO.PermissionStrictDTO(permission));
            }
        }
        
        public virtual void MapRichToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapRichToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessRole(Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Description = currentSource.Description;
            target.Name = currentSource.Name;
        }
        
        public virtual void MapSimpleToStrictForBusinessRoleCreateModel(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessRoleOperationLink(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForBusinessRoleRootFilterModel(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForChangePermissionDelegatesModel(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO target, Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForDelegateToItemModel(Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO target, Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForEntityTypeRootFilterModel(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.IsFilter = currentSource.IsFilter;
        }
        
        public virtual void MapSimpleToStrictForOperation(Framework.Authorization.Generated.DTO.OperationStrictDTO target, Framework.Authorization.Generated.DTO.OperationSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Description = currentSource.Description;
        }
        
        public virtual void MapSimpleToStrictForOperationRootFilterModel(Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForPermission(Framework.Authorization.Generated.DTO.PermissionStrictDTO target, Framework.Authorization.Generated.DTO.PermissionSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.Comment = currentSource.Comment;
            target.Period = currentSource.Period;
        }
        
        public virtual void MapSimpleToStrictForPermissionDirectFilterModel(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.EntityId = currentSource.EntityId;
            target.StrongDirect = currentSource.StrongDirect;
        }
        
        public virtual void MapSimpleToStrictForPermissionFilterItem(Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO target, Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForPrincipal(Framework.Authorization.Generated.DTO.PrincipalStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
            target.ExternalId = currentSource.ExternalId;
            target.Name = currentSource.Name;
        }
        
        public virtual void MapSimpleToStrictForPrincipalCreateModel(Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForPrincipalRootFilterModel(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO target, Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
        
        public virtual void MapSimpleToStrictForSubBusinessRoleLink(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO target, Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO currentSource)
        {
            if (object.ReferenceEquals(target, null))
            {
                throw new System.ArgumentNullException("target");
            }
            if (object.ReferenceEquals(currentSource, null))
            {
                throw new System.ArgumentNullException("currentSource");
            }
        }
    }
    
    public partial class AuthorizationClientPrimitiveDTOMappingService : Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingServiceBase
    {
        
        private static Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService _default = new Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService();
        
        public static Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService Default
        {
            get
            {
                return Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService._default;
            }
        }
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.BusinessRoleEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.BusinessRoleView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public struct BusinessRoleIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(System.Guid.Empty);
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public BusinessRoleIdentityDTO(System.Guid id)
        {
            this.Id = id;
        }
        
        public BusinessRoleIdentityDTO(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this.Id = source.Id;
        }
        
        public static Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO.EmptyField;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity1, Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity1, Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO other)
        {
            return (this.Id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.Disabled)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public struct EntityTypeIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO(System.Guid.Empty);
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public EntityTypeIdentityDTO(System.Guid id)
        {
            this.Id = id;
        }
        
        public EntityTypeIdentityDTO(Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this.Id = source.Id;
        }
        
        public static Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO.EmptyField;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO identity1, Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO identity1, Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO other)
        {
            return (this.Id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.OperationEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.OperationView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public struct OperationIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.OperationIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.OperationIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.OperationIdentityDTO(System.Guid.Empty);
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public OperationIdentityDTO(System.Guid id)
        {
            this.Id = id;
        }
        
        public OperationIdentityDTO(Framework.Authorization.Generated.DTO.OperationSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this.Id = source.Id;
        }
        
        public static Framework.Authorization.Generated.DTO.OperationIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.OperationIdentityDTO.EmptyField;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.OperationIdentityDTO identity1, Framework.Authorization.Generated.DTO.OperationIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.OperationIdentityDTO identity1, Framework.Authorization.Generated.DTO.OperationIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.OperationIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.OperationIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.OperationIdentityDTO other)
        {
            return (this.Id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public struct PermissionIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.PermissionIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(System.Guid.Empty);
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public PermissionIdentityDTO(System.Guid id)
        {
            this.Id = id;
        }
        
        public PermissionIdentityDTO(Framework.Authorization.Generated.DTO.PermissionSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this.Id = source.Id;
        }
        
        public static Framework.Authorization.Generated.DTO.PermissionIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.PermissionIdentityDTO.EmptyField;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity1, Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity1, Framework.Authorization.Generated.DTO.PermissionIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.PermissionIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.PermissionIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.PermissionIdentityDTO other)
        {
            return (this.Id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public struct PrincipalIdentityDTO : System.IEquatable<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>, Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        private static Framework.Authorization.Generated.DTO.PrincipalIdentityDTO EmptyField = new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(System.Guid.Empty);
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public PrincipalIdentityDTO(System.Guid id)
        {
            this.Id = id;
        }
        
        public PrincipalIdentityDTO(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source)
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
            this.Id = source.Id;
        }
        
        public static Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Empty
        {
            get
            {
                return Framework.Authorization.Generated.DTO.PrincipalIdentityDTO.EmptyField;
            }
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public static bool operator !=(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity1, Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity2)
        {
            return !(identity1 == identity2);
        }
        
        public static bool operator ==(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity1, Framework.Authorization.Generated.DTO.PrincipalIdentityDTO identity2)
        {
            return identity1.Equals(identity2);
        }
        
        public override bool Equals(object other)
        {
            return !object.ReferenceEquals(other, null) && (typeof(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO) == other.GetType()) && this.Equals(((Framework.Authorization.Generated.DTO.PrincipalIdentityDTO)(other)));
        }
        
        public bool Equals(Framework.Authorization.Generated.DTO.PrincipalIdentityDTO other)
        {
            return (this.Id == other.Id);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override string ToString()
        {
            return this.Id.ToString();
        }
    }
    
    public partial interface IBaseAbstractDTO : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged, Framework.Reactive.IBaseRaiseObject
    {
    }
    
    public partial interface IBasePersistentDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
        
        System.Guid Id
        {
            get;
            set;
        }
    }
    
    public partial interface IBaseAuditPersistentDTO : Framework.Authorization.Generated.DTO.IBasePersistentDTO
    {
        
        bool Active
        {
            get;
            set;
        }
        
        System.DateTime? CreateDate
        {
            get;
            set;
        }
        
        string CreatedBy
        {
            get;
            set;
        }
        
        string ModifiedBy
        {
            get;
            set;
        }
        
        System.DateTime? ModifyDate
        {
            get;
            set;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public abstract partial class BaseAbstractDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
        
        public BaseAbstractDTO(Framework.Authorization.Generated.DTO.IBaseAbstractDTO source) : 
                this()
        {
            if (object.ReferenceEquals(source, null))
            {
                throw new System.ArgumentNullException("source");
            }
        }
        
        System.ComponentModel.PropertyChangedEventHandler Framework.Reactive.IBaseRaiseObject.PropertyChanged
        {
            get
            {
                return this.PropertyChanged;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if (!object.ReferenceEquals(propertyChanged, null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        protected void RaisePropertyChanging(string propertyName)
        {
            System.ComponentModel.PropertyChangingEventHandler propertyChanging = this.PropertyChanging;
            if (!object.ReferenceEquals(propertyChanging, null))
            {
                propertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }
    }
    
    [Framework.Persistent.TargetSystemAttribute("f065289e-4dc5-48c9-be44-a2ee0131e631")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public abstract partial class BasePersistentDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IBasePersistentDTO
    {
        
        private System.Guid _id;
        
        protected BasePersistentDTO()
        {
        }
        
        public BasePersistentDTO(Framework.Authorization.Generated.DTO.IBasePersistentDTO source) : 
                this(source, true)
        {
        }
        
        public BasePersistentDTO(Framework.Authorization.Generated.DTO.IBasePersistentDTO source, bool copyId) : 
                base(source)
        {
            if (copyId)
            {
                this.Id = source.Id;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                System.Guid newValue;
                newValue = value;
                if (!object.Equals(this._id, newValue))
                {
                    base.RaisePropertyChanging("Id");
                    this._id = newValue;
                    base.RaisePropertyChanged("Id");
                }
            }
        }
        
        public bool IsNew
        {
            get
            {
                return (default(System.Guid) == this.Id);
            }
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public abstract partial class BaseAuditPersistentDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO, Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        private bool _active = true;
        
        private System.DateTime? _createDate;
        
        private string _createdBy;
        
        private string _modifiedBy;
        
        private System.DateTime? _modifyDate;
        
        protected BaseAuditPersistentDTO()
        {
        }
        
        public BaseAuditPersistentDTO(Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO source) : 
                this(source, true)
        {
        }
        
        public BaseAuditPersistentDTO(Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Active = source.Active;
            this.CreateDate = source.CreateDate;
            this.CreatedBy = source.CreatedBy;
            this.ModifiedBy = source.ModifiedBy;
            this.ModifyDate = source.ModifyDate;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._active, newValue))
                {
                    base.RaisePropertyChanging("Active");
                    this._active = newValue;
                    base.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                System.DateTime? newValue;
                newValue = value;
                if (!object.Equals(this._createDate, newValue))
                {
                    base.RaisePropertyChanging("CreateDate");
                    this._createDate = newValue;
                    base.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._createdBy);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._createdBy, newValue))
                {
                    base.RaisePropertyChanging("CreatedBy");
                    this._createdBy = newValue;
                    base.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._modifiedBy);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._modifiedBy, newValue))
                {
                    base.RaisePropertyChanging("ModifiedBy");
                    this._modifiedBy = newValue;
                    base.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime? ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                System.DateTime? newValue;
                newValue = value;
                if (!object.Equals(this._modifyDate, newValue))
                {
                    base.RaisePropertyChanging("ModifyDate");
                    this._modifyDate = newValue;
                    base.RaisePropertyChanged("ModifyDate");
                }
            }
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleVisualDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>, Framework.Persistent.IVisualIdentityObject, System.IComparable<Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO>
    {
        
        private string _name;
        
        public BusinessRoleVisualDTO()
        {
        }
        
        public BusinessRoleVisualDTO(Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleVisualDTO(Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Name = source.Name;
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO(this, copyId);
        }
        
        public int CompareTo(Framework.Authorization.Generated.DTO.BusinessRoleVisualDTO other)
        {
            return this.Name.CompareTo(other.Name);
        }
        
        public override string ToString()
        {
            return this.Name;
        }
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.BusinessRoleEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.BusinessRoleView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO))]
    public partial class BusinessRoleSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IBusinessRoleSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>, Framework.Persistent.IVisualIdentityObject, System.IComparable<Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO>
    {
        
        private string _description;
        
        private bool _isAdmin;
        
        private string _name;
        
        private bool _requiredApprove;
        
        public BusinessRoleSimpleDTO()
        {
        }
        
        public BusinessRoleSimpleDTO(Framework.Authorization.Generated.DTO.IBusinessRoleSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleSimpleDTO(Framework.Authorization.Generated.DTO.IBusinessRoleSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Description = source.Description;
            this.IsAdmin = source.IsAdmin;
            this.Name = source.Name;
            this.RequiredApprove = source.RequiredApprove;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._description);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._description, newValue))
                {
                    base.RaisePropertyChanging("Description");
                    this._description = newValue;
                    base.RaisePropertyChanged("Description");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin
        {
            get
            {
                return this._isAdmin;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._isAdmin, newValue))
                {
                    base.RaisePropertyChanging("IsAdmin");
                    this._isAdmin = newValue;
                    base.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequiredApprove
        {
            get
            {
                return this._requiredApprove;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._requiredApprove, newValue))
                {
                    base.RaisePropertyChanging("RequiredApprove");
                    this._requiredApprove = newValue;
                    base.RaisePropertyChanged("RequiredApprove");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO(this);
        }
        
        public int CompareTo(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO other)
        {
            return this.Name.CompareTo(other.Name);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO(this);
        }
        
        public override string ToString()
        {
            return this.Name;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO))]
    public partial class BusinessRoleFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO, Framework.Authorization.Generated.DTO.IBusinessRoleFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleFullDTO>
    {
        
        public BusinessRoleFullDTO()
        {
        }
        
        public BusinessRoleFullDTO(Framework.Authorization.Generated.DTO.IBusinessRoleFullDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleFullDTO(Framework.Authorization.Generated.DTO.IBusinessRoleFullDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO(this);
        }
    }
    
    [Framework.Restriction.UniqueGroupAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleFullDTO, Framework.Authorization.Generated.DTO.IBusinessRoleRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleRichDTO>, Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO>, Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO>
    {
        
        private System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO> _businessRoleOperationLinks = new System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO>();
        
        private System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO> _subBusinessRoleLinks = new System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO>();
        
        public BusinessRoleRichDTO()
        {
        }
        
        public BusinessRoleRichDTO(Framework.Authorization.Generated.DTO.IBusinessRoleRichDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleRichDTO(Framework.Authorization.Generated.DTO.IBusinessRoleRichDTO source, bool copyId) : 
                base(source, copyId)
        {
            if (!object.ReferenceEquals(source.BusinessRoleOperationLinks, null))
            {
                this.BusinessRoleOperationLinks = Framework.Core.EnumerableExtensions.ToObservableCollection(source.BusinessRoleOperationLinks, businessRoleOperationLink => businessRoleOperationLink.Clone(copyId));
            }
            if (!object.ReferenceEquals(source.SubBusinessRoleLinks, null))
            {
                this.SubBusinessRoleLinks = Framework.Core.EnumerableExtensions.ToObservableCollection(source.SubBusinessRoleLinks, subBusinessRoleLink => subBusinessRoleLink.Clone(copyId));
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.UniqueGroupAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO> BusinessRoleOperationLinks
        {
            get
            {
                return this._businessRoleOperationLinks;
            }
            set
            {
                System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO> newValue;
                newValue = value;
                if (!object.Equals(this._businessRoleOperationLinks, newValue))
                {
                    base.RaisePropertyChanging("BusinessRoleOperationLinks");
                    this._businessRoleOperationLinks = newValue;
                    base.RaisePropertyChanged("BusinessRoleOperationLinks");
                }
            }
        }
        
        System.Collections.Generic.ICollection<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO> Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO>.Details
        {
            get
            {
                return this.BusinessRoleOperationLinks;
            }
        }
        
        System.Collections.Generic.ICollection<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO> Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO>.Details
        {
            get
            {
                return this.SubBusinessRoleLinks;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.UniqueGroupAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO> SubBusinessRoleLinks
        {
            get
            {
                return this._subBusinessRoleLinks;
            }
            set
            {
                System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO> newValue;
                newValue = value;
                if (!object.Equals(this._subBusinessRoleLinks, newValue))
                {
                    base.RaisePropertyChanging("SubBusinessRoleLinks");
                    this._subBusinessRoleLinks = newValue;
                    base.RaisePropertyChanged("SubBusinessRoleLinks");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO> BusinessRoleOperationLinks = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO>();
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO> SubBusinessRoleLinks = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO>();
        
        public BusinessRoleStrictDTO()
        {
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRole(this, source);
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRole(this, source);
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRole(this, source);
        }
        
        public BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForBusinessRole(this, source);
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForBusinessRole(this, source);
        }
        
        private BusinessRoleStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO(this.Id);
            }
        }
    }
    
    public partial interface IBusinessRoleSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        string Description
        {
            get;
            set;
        }
        
        bool IsAdmin
        {
            get;
            set;
        }
        
        string Name
        {
            get;
            set;
        }
        
        bool RequiredApprove
        {
            get;
            set;
        }
    }
    
    public partial interface IBusinessRoleFullDTO : Framework.Authorization.Generated.DTO.IBusinessRoleSimpleDTO
    {
    }
    
    public partial interface IBusinessRoleRichDTO : Framework.Authorization.Generated.DTO.IBusinessRoleFullDTO
    {
        
        System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO> BusinessRoleOperationLinks
        {
            get;
            set;
        }
        
        System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO> SubBusinessRoleLinks
        {
            get;
            set;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO))]
    public partial class BusinessRoleCreateModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO>
    {
        
        public BusinessRoleCreateModelSimpleDTO()
        {
        }
        
        public BusinessRoleCreateModelSimpleDTO(Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO))]
    public partial class BusinessRoleCreateModelFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO, Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO>
    {
        
        public BusinessRoleCreateModelFullDTO()
        {
        }
        
        public BusinessRoleCreateModelFullDTO(Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelFullDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleCreateModelRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO, Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO>
    {
        
        public BusinessRoleCreateModelRichDTO()
        {
        }
        
        public BusinessRoleCreateModelRichDTO(Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleCreateModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleCreateModelStrictDTO
    {
        
        public BusinessRoleCreateModelStrictDTO()
        {
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRoleCreateModel(this, source);
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRoleCreateModel(this, source);
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRoleCreateModel(this, source);
        }
        
        public BusinessRoleCreateModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleCreateModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IBusinessRoleCreateModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IBusinessRoleCreateModelFullDTO : Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelSimpleDTO
    {
    }
    
    public partial interface IBusinessRoleCreateModelRichDTO : Framework.Authorization.Generated.DTO.IBusinessRoleCreateModelFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO))]
    public partial class BusinessRoleOperationLinkSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO>
    {
        
        private bool _isDenormalized;
        
        public BusinessRoleOperationLinkSimpleDTO()
        {
        }
        
        public BusinessRoleOperationLinkSimpleDTO(Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleOperationLinkSimpleDTO(Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.IsDenormalized = source.IsDenormalized;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDenormalized
        {
            get
            {
                return this._isDenormalized;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._isDenormalized, newValue))
                {
                    base.RaisePropertyChanging("IsDenormalized");
                    this._isDenormalized = newValue;
                    base.RaisePropertyChanged("IsDenormalized");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO))]
    public partial class BusinessRoleOperationLinkFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO, Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _businessRole;
        
        private Framework.Authorization.Generated.DTO.OperationSimpleDTO _operation;
        
        public BusinessRoleOperationLinkFullDTO()
        {
        }
        
        public BusinessRoleOperationLinkFullDTO(Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkFullDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleOperationLinkFullDTO(Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkFullDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.BusinessRole = source.BusinessRole;
            this.Operation = source.Operation;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._businessRole, newValue))
                {
                    base.RaisePropertyChanging("BusinessRole");
                    this._businessRole = newValue;
                    base.RaisePropertyChanged("BusinessRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public Framework.Authorization.Generated.DTO.OperationSimpleDTO Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                Framework.Authorization.Generated.DTO.OperationSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._operation, newValue))
                {
                    base.RaisePropertyChanging("Operation");
                    this._operation = newValue;
                    base.RaisePropertyChanged("Operation");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleOperationLinkRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO, Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO>
    {
        
        public BusinessRoleOperationLinkRichDTO()
        {
        }
        
        public BusinessRoleOperationLinkRichDTO(Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkRichDTO source) : 
                this(source, true)
        {
        }
        
        public BusinessRoleOperationLinkRichDTO(Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkRichDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleOperationLinkStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.OperationIdentityDTO Operation;
        
        public BusinessRoleOperationLinkStrictDTO()
        {
        }
        
        public BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRoleOperationLink(this, source);
        }
        
        public BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRoleOperationLink(this, source);
        }
        
        public BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRoleOperationLink(this, source);
        }
        
        public BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleOperationLinkSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForBusinessRoleOperationLink(this, source);
        }
        
        private BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForBusinessRoleOperationLink(this, source);
        }
        
        private BusinessRoleOperationLinkStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
    }
    
    public partial interface IBusinessRoleOperationLinkSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        bool IsDenormalized
        {
            get;
            set;
        }
    }
    
    public partial interface IBusinessRoleOperationLinkFullDTO : Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.OperationSimpleDTO Operation
        {
            get;
            set;
        }
    }
    
    public partial interface IBusinessRoleOperationLinkRichDTO : Framework.Authorization.Generated.DTO.IBusinessRoleOperationLinkFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO))]
    public partial class BusinessRoleRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO>
    {
        
        public BusinessRoleRootFilterModelSimpleDTO()
        {
        }
        
        public BusinessRoleRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO))]
    public partial class BusinessRoleRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO, Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.OperationSimpleDTO _operation;
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        public BusinessRoleRootFilterModelFullDTO()
        {
        }
        
        public BusinessRoleRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelFullDTO source) : 
                base(source)
        {
            this.Operation = source.Operation;
            this.Principal = source.Principal;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.OperationSimpleDTO Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                Framework.Authorization.Generated.DTO.OperationSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._operation, newValue))
                {
                    base.RaisePropertyChanging("Operation");
                    this._operation = newValue;
                    base.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PrincipalSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._principal, newValue))
                {
                    base.RaisePropertyChanging("Principal");
                    this._principal = newValue;
                    base.RaisePropertyChanged("Principal");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO, Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO>
    {
        
        public BusinessRoleRootFilterModelRichDTO()
        {
        }
        
        public BusinessRoleRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class BusinessRoleRootFilterModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.OperationIdentityDTO Operation;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Principal;
        
        public BusinessRoleRootFilterModelStrictDTO()
        {
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForBusinessRoleRootFilterModel(this, source);
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForBusinessRoleRootFilterModel(this, source);
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForBusinessRoleRootFilterModel(this, source);
        }
        
        public BusinessRoleRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.BusinessRoleRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IBusinessRoleRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IBusinessRoleRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.OperationSimpleDTO Operation
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get;
            set;
        }
    }
    
    public partial interface IBusinessRoleRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.IBusinessRoleRootFilterModelFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO))]
    public partial class ChangePermissionDelegatesModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO>
    {
        
        public ChangePermissionDelegatesModelSimpleDTO()
        {
        }
        
        public ChangePermissionDelegatesModelSimpleDTO(Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO))]
    public partial class ChangePermissionDelegatesModelFullDTO : Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO, Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.PermissionSimpleDTO _delegateFromPermission;
        
        public ChangePermissionDelegatesModelFullDTO()
        {
        }
        
        public ChangePermissionDelegatesModelFullDTO(Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelFullDTO source) : 
                base(source)
        {
            this.DelegateFromPermission = source.DelegateFromPermission;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO DelegateFromPermission
        {
            get
            {
                return this._delegateFromPermission;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PermissionSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._delegateFromPermission, newValue))
                {
                    base.RaisePropertyChanging("DelegateFromPermission");
                    this._delegateFromPermission = newValue;
                    base.RaisePropertyChanged("DelegateFromPermission");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class ChangePermissionDelegatesModelRichDTO : Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO, Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO>
    {
        
        private System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> _items = new System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO>();
        
        public ChangePermissionDelegatesModelRichDTO()
        {
        }
        
        public ChangePermissionDelegatesModelRichDTO(Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelRichDTO source) : 
                base(source)
        {
            if (!object.ReferenceEquals(source.Items, null))
            {
                this.Items = Framework.Core.EnumerableExtensions.ToObservableCollection(source.Items, delegateToItemModel => delegateToItemModel.Clone());
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> newValue;
                newValue = value;
                if (!object.Equals(this._items, newValue))
                {
                    base.RaisePropertyChanging("Items");
                    this._items = newValue;
                    base.RaisePropertyChanged("Items");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class ChangePermissionDelegatesModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO DelegateFromPermission;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO> Items = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO>();
        
        public ChangePermissionDelegatesModelStrictDTO()
        {
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForChangePermissionDelegatesModel(this, source);
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForChangePermissionDelegatesModel(this, source);
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForChangePermissionDelegatesModel(this, source);
        }
        
        public ChangePermissionDelegatesModelStrictDTO(Framework.Authorization.Generated.DTO.ChangePermissionDelegatesModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IChangePermissionDelegatesModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IChangePermissionDelegatesModelFullDTO : Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.PermissionSimpleDTO DelegateFromPermission
        {
            get;
            set;
        }
    }
    
    public partial interface IChangePermissionDelegatesModelRichDTO : Framework.Authorization.Generated.DTO.IChangePermissionDelegatesModelFullDTO
    {
        
        System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO> Items
        {
            get;
            set;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO))]
    public partial class DelegateToItemModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IDelegateToItemModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO>
    {
        
        public DelegateToItemModelSimpleDTO()
        {
        }
        
        public DelegateToItemModelSimpleDTO(Framework.Authorization.Generated.DTO.IDelegateToItemModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO))]
    public partial class DelegateToItemModelFullDTO : Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO, Framework.Authorization.Generated.DTO.IDelegateToItemModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        public DelegateToItemModelFullDTO()
        {
        }
        
        public DelegateToItemModelFullDTO(Framework.Authorization.Generated.DTO.IDelegateToItemModelFullDTO source) : 
                base(source)
        {
            this.Principal = source.Principal;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PrincipalSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._principal, newValue))
                {
                    base.RaisePropertyChanging("Principal");
                    this._principal = newValue;
                    base.RaisePropertyChanged("Principal");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class DelegateToItemModelRichDTO : Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO, Framework.Authorization.Generated.DTO.IDelegateToItemModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO>
    {
        
        private Framework.Authorization.Generated.DTO.PermissionRichDTO _permission;
        
        public DelegateToItemModelRichDTO()
        {
        }
        
        public DelegateToItemModelRichDTO(Framework.Authorization.Generated.DTO.IDelegateToItemModelRichDTO source) : 
                base(source)
        {
            this.Permission = source.Permission;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionRichDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PermissionRichDTO newValue;
                newValue = value;
                if (!object.Equals(this._permission, newValue))
                {
                    base.RaisePropertyChanging("Permission");
                    this._permission = newValue;
                    base.RaisePropertyChanged("Permission");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.DelegateToItemModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class DelegateToItemModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionStrictDTO Permission;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Principal;
        
        public DelegateToItemModelStrictDTO()
        {
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForDelegateToItemModel(this, source);
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForDelegateToItemModel(this, source);
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForDelegateToItemModel(this, source);
        }
        
        public DelegateToItemModelStrictDTO(Framework.Authorization.Generated.DTO.DelegateToItemModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IDelegateToItemModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IDelegateToItemModelFullDTO : Framework.Authorization.Generated.DTO.IDelegateToItemModelSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get;
            set;
        }
    }
    
    public partial interface IDelegateToItemModelRichDTO : Framework.Authorization.Generated.DTO.IDelegateToItemModelFullDTO
    {
        
        Framework.Authorization.Generated.DTO.PermissionRichDTO Permission
        {
            get;
            set;
        }
    }
    
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.Disabled)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class EntityTypeSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IEntityTypeSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO>, Framework.Persistent.IVisualIdentityObject, System.IComparable<Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO>
    {
        
        private bool _expandable;
        
        private bool _isFilter;
        
        private string _name;
        
        public EntityTypeSimpleDTO()
        {
        }
        
        public EntityTypeSimpleDTO(Framework.Authorization.Generated.DTO.IEntityTypeSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public EntityTypeSimpleDTO(Framework.Authorization.Generated.DTO.IEntityTypeSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Expandable = source.Expandable;
            this.IsFilter = source.IsFilter;
            this.Name = source.Name;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Expandable
        {
            get
            {
                return this._expandable;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._expandable, newValue))
                {
                    base.RaisePropertyChanging("Expandable");
                    this._expandable = newValue;
                    base.RaisePropertyChanged("Expandable");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFilter
        {
            get
            {
                return this._isFilter;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._isFilter, newValue))
                {
                    base.RaisePropertyChanging("IsFilter");
                    this._isFilter = newValue;
                    base.RaisePropertyChanged("IsFilter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO(this);
        }
        
        public int CompareTo(Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO other)
        {
            return this.Name.CompareTo(other.Name);
        }
        
        public new Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO(this);
        }
        
        public override string ToString()
        {
            return this.Name;
        }
    }
    
    public partial interface IEntityTypeSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        bool Expandable
        {
            get;
            set;
        }
        
        bool IsFilter
        {
            get;
            set;
        }
        
        string Name
        {
            get;
            set;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO))]
    public partial class EntityTypeRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO>
    {
        
        private bool _isFilter;
        
        public EntityTypeRootFilterModelSimpleDTO()
        {
        }
        
        public EntityTypeRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelSimpleDTO source) : 
                base(source)
        {
            this.IsFilter = source.IsFilter;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFilter
        {
            get
            {
                return this._isFilter;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._isFilter, newValue))
                {
                    base.RaisePropertyChanging("IsFilter");
                    this._isFilter = newValue;
                    base.RaisePropertyChanged("IsFilter");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO))]
    public partial class EntityTypeRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO, Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO>
    {
        
        public EntityTypeRootFilterModelFullDTO()
        {
        }
        
        public EntityTypeRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelFullDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class EntityTypeRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO, Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO>
    {
        
        public EntityTypeRootFilterModelRichDTO()
        {
        }
        
        public EntityTypeRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class EntityTypeRootFilterModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFilter;
        
        public EntityTypeRootFilterModelStrictDTO()
        {
        }
        
        public EntityTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForEntityTypeRootFilterModel(this, source);
        }
        
        public EntityTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public EntityTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForEntityTypeRootFilterModel(this, source);
        }
        
        public EntityTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public EntityTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForEntityTypeRootFilterModel(this, source);
        }
        
        public EntityTypeRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.EntityTypeRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IEntityTypeRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
        
        bool IsFilter
        {
            get;
            set;
        }
    }
    
    public partial interface IEntityTypeRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelSimpleDTO
    {
    }
    
    public partial interface IEntityTypeRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.IEntityTypeRootFilterModelFullDTO
    {
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.OperationEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.OperationView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.OperationFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.OperationRichDTO))]
    public partial class OperationSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IOperationSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.OperationSimpleDTO>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.OperationIdentityDTO>, Framework.Persistent.IVisualIdentityObject, System.IComparable<Framework.Authorization.Generated.DTO.OperationSimpleDTO>
    {
        
        private string _description;
        
        private string _name;
        
        public OperationSimpleDTO()
        {
        }
        
        public OperationSimpleDTO(Framework.Authorization.Generated.DTO.IOperationSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public OperationSimpleDTO(Framework.Authorization.Generated.DTO.IOperationSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Description = source.Description;
            this.Name = source.Name;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._description);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._description, newValue))
                {
                    base.RaisePropertyChanging("Description");
                    this._description = newValue;
                    base.RaisePropertyChanged("Description");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.OperationIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.OperationIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.OperationSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.OperationSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.OperationSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.OperationSimpleDTO(this);
        }
        
        public int CompareTo(Framework.Authorization.Generated.DTO.OperationSimpleDTO other)
        {
            return this.Name.CompareTo(other.Name);
        }
        
        public new Framework.Authorization.Generated.DTO.OperationSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.OperationSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.OperationStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.OperationStrictDTO(this);
        }
        
        public override string ToString()
        {
            return this.Name;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.OperationRichDTO))]
    public partial class OperationFullDTO : Framework.Authorization.Generated.DTO.OperationSimpleDTO, Framework.Authorization.Generated.DTO.IOperationFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.OperationFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.OperationSimpleDTO _approveOperation;
        
        public OperationFullDTO()
        {
        }
        
        public OperationFullDTO(Framework.Authorization.Generated.DTO.IOperationFullDTO source) : 
                this(source, true)
        {
        }
        
        public OperationFullDTO(Framework.Authorization.Generated.DTO.IOperationFullDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.ApproveOperation = source.ApproveOperation;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.OperationSimpleDTO ApproveOperation
        {
            get
            {
                return this._approveOperation;
            }
            set
            {
                Framework.Authorization.Generated.DTO.OperationSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._approveOperation, newValue))
                {
                    base.RaisePropertyChanging("ApproveOperation");
                    this._approveOperation = newValue;
                    base.RaisePropertyChanged("ApproveOperation");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.OperationFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.OperationFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.OperationFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.OperationFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.OperationFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.OperationFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.OperationStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.OperationStrictDTO(this);
        }
    }
    
    [Framework.Restriction.UniqueGroupAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class OperationRichDTO : Framework.Authorization.Generated.DTO.OperationFullDTO, Framework.Authorization.Generated.DTO.IOperationRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.OperationRichDTO>
    {
        
        public OperationRichDTO()
        {
        }
        
        public OperationRichDTO(Framework.Authorization.Generated.DTO.IOperationRichDTO source) : 
                this(source, true)
        {
        }
        
        public OperationRichDTO(Framework.Authorization.Generated.DTO.IOperationRichDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.OperationRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.OperationRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.OperationRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.OperationRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.OperationStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.OperationStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class OperationStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.OperationIdentityDTO>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public OperationStrictDTO()
        {
        }
        
        public OperationStrictDTO(Framework.Authorization.Generated.DTO.OperationRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.OperationFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForOperation(this, source);
        }
        
        public OperationStrictDTO(Framework.Authorization.Generated.DTO.OperationRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public OperationStrictDTO(Framework.Authorization.Generated.DTO.OperationFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.OperationSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForOperation(this, source);
        }
        
        public OperationStrictDTO(Framework.Authorization.Generated.DTO.OperationFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public OperationStrictDTO(Framework.Authorization.Generated.DTO.OperationSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForOperation(this, source);
        }
        
        public OperationStrictDTO(Framework.Authorization.Generated.DTO.OperationSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private OperationStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForOperation(this, source);
        }
        
        private OperationStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private OperationStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForOperation(this, source);
        }
        
        private OperationStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.OperationIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.OperationIdentityDTO(this.Id);
            }
        }
    }
    
    public partial interface IOperationSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        string Description
        {
            get;
            set;
        }
        
        string Name
        {
            get;
            set;
        }
    }
    
    public partial interface IOperationFullDTO : Framework.Authorization.Generated.DTO.IOperationSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.OperationSimpleDTO ApproveOperation
        {
            get;
            set;
        }
    }
    
    public partial interface IOperationRichDTO : Framework.Authorization.Generated.DTO.IOperationFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO))]
    public partial class OperationRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IOperationRootFilterModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO>
    {
        
        public OperationRootFilterModelSimpleDTO()
        {
        }
        
        public OperationRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IOperationRootFilterModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO))]
    public partial class OperationRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO, Framework.Authorization.Generated.DTO.IOperationRootFilterModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _businessRole;
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        public OperationRootFilterModelFullDTO()
        {
        }
        
        public OperationRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IOperationRootFilterModelFullDTO source) : 
                base(source)
        {
            this.BusinessRole = source.BusinessRole;
            this.Principal = source.Principal;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._businessRole, newValue))
                {
                    base.RaisePropertyChanging("BusinessRole");
                    this._businessRole = newValue;
                    base.RaisePropertyChanged("BusinessRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PrincipalSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._principal, newValue))
                {
                    base.RaisePropertyChanging("Principal");
                    this._principal = newValue;
                    base.RaisePropertyChanged("Principal");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class OperationRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO, Framework.Authorization.Generated.DTO.IOperationRootFilterModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO>
    {
        
        public OperationRootFilterModelRichDTO()
        {
        }
        
        public OperationRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IOperationRootFilterModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.OperationRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class OperationRootFilterModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO BusinessRole;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Principal;
        
        public OperationRootFilterModelStrictDTO()
        {
        }
        
        public OperationRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForOperationRootFilterModel(this, source);
        }
        
        public OperationRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.OperationRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public OperationRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForOperationRootFilterModel(this, source);
        }
        
        public OperationRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.OperationRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public OperationRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForOperationRootFilterModel(this, source);
        }
        
        public OperationRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.OperationRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IOperationRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IOperationRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.IOperationRootFilterModelSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get;
            set;
        }
    }
    
    public partial interface IOperationRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.IOperationRootFilterModelFullDTO
    {
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRichDTO))]
    public partial class PermissionSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IPermissionSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionSimpleDTO>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>, Framework.Core.IMutablePeriodObject
    {
        
        private string _comment;
        
        private bool _isDelegatedFrom;
        
        private bool _isDelegatedTo;
        
        private Framework.Core.Period _period = Framework.Core.Period.Eternity;
        
        private Framework.Authorization.Generated.DTO.PermissionStatus _status;
        
        public PermissionSimpleDTO()
        {
        }
        
        public PermissionSimpleDTO(Framework.Authorization.Generated.DTO.IPermissionSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionSimpleDTO(Framework.Authorization.Generated.DTO.IPermissionSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Comment = source.Comment;
            this.IsDelegatedFrom = source.IsDelegatedFrom;
            this.IsDelegatedTo = source.IsDelegatedTo;
            this.Period = source.Period;
            this.Status = source.Status;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.MaxLengthAttribute()]
        public string Comment
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._comment);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._comment, newValue))
                {
                    base.RaisePropertyChanging("Comment");
                    this._comment = newValue;
                    base.RaisePropertyChanged("Comment");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedFrom
        {
            get
            {
                return this._isDelegatedFrom;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._isDelegatedFrom, newValue))
                {
                    base.RaisePropertyChanging("IsDelegatedFrom");
                    this._isDelegatedFrom = newValue;
                    base.RaisePropertyChanged("IsDelegatedFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDelegatedTo
        {
            get
            {
                return this._isDelegatedTo;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._isDelegatedTo, newValue))
                {
                    base.RaisePropertyChanging("IsDelegatedTo");
                    this._isDelegatedTo = newValue;
                    base.RaisePropertyChanged("IsDelegatedTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Core.Period Period
        {
            get
            {
                return this._period;
            }
            set
            {
                Framework.Core.Period newValue;
                newValue = value;
                if (!object.Equals(this._period, newValue))
                {
                    base.RaisePropertyChanging("Period");
                    this._period = newValue;
                    base.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PermissionStatus newValue;
                newValue = value;
                if (!object.Equals(this._status, newValue))
                {
                    base.RaisePropertyChanging("Status");
                    this._status = newValue;
                    base.RaisePropertyChanged("Status");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PermissionSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionRichDTO))]
    public partial class PermissionFullDTO : Framework.Authorization.Generated.DTO.PermissionSimpleDTO, Framework.Authorization.Generated.DTO.IPermissionFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _delegatedFromPrincipal;
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _principal;
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _role;
        
        public PermissionFullDTO()
        {
        }
        
        public PermissionFullDTO(Framework.Authorization.Generated.DTO.IPermissionFullDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionFullDTO(Framework.Authorization.Generated.DTO.IPermissionFullDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.DelegatedFromPrincipal = source.DelegatedFromPrincipal;
            this.Principal = source.Principal;
            this.Role = source.Role;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO DelegatedFromPrincipal
        {
            get
            {
                return this._delegatedFromPrincipal;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PrincipalSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._delegatedFromPrincipal, newValue))
                {
                    base.RaisePropertyChanging("DelegatedFromPrincipal");
                    this._delegatedFromPrincipal = newValue;
                    base.RaisePropertyChanged("DelegatedFromPrincipal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PrincipalSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._principal, newValue))
                {
                    base.RaisePropertyChanging("Principal");
                    this._principal = newValue;
                    base.RaisePropertyChanged("Principal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO Role
        {
            get
            {
                return this._role;
            }
            set
            {
                Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._role, newValue))
                {
                    base.RaisePropertyChanging("Role");
                    this._role = newValue;
                    base.RaisePropertyChanged("Role");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionRichDTO : Framework.Authorization.Generated.DTO.PermissionFullDTO, Framework.Authorization.Generated.DTO.IPermissionRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionRichDTO>, Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.PermissionRichDTO>, Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO>
    {
        
        private System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> _delegatedTo = new System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO>();
        
        private System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO> _filterItems = new System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO>();
        
        public PermissionRichDTO()
        {
        }
        
        public PermissionRichDTO(Framework.Authorization.Generated.DTO.IPermissionRichDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionRichDTO(Framework.Authorization.Generated.DTO.IPermissionRichDTO source, bool copyId) : 
                base(source, copyId)
        {
            if (!object.ReferenceEquals(source.DelegatedTo, null))
            {
                this.DelegatedTo = Framework.Core.EnumerableExtensions.ToObservableCollection(source.DelegatedTo, permission => permission.Clone(copyId));
            }
            if (!object.ReferenceEquals(source.FilterItems, null))
            {
                this.FilterItems = Framework.Core.EnumerableExtensions.ToObservableCollection(source.FilterItems, permissionFilterItem => permissionFilterItem.Clone(copyId));
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> DelegatedTo
        {
            get
            {
                return this._delegatedTo;
            }
            set
            {
                System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> newValue;
                newValue = value;
                if (!object.Equals(this._delegatedTo, newValue))
                {
                    base.RaisePropertyChanging("DelegatedTo");
                    this._delegatedTo = newValue;
                    base.RaisePropertyChanged("DelegatedTo");
                }
            }
        }
        
        System.Collections.Generic.ICollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.PermissionRichDTO>.Details
        {
            get
            {
                return this.DelegatedTo;
            }
        }
        
        System.Collections.Generic.ICollection<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO> Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO>.Details
        {
            get
            {
                return this.FilterItems;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.UniqueGroupAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO> FilterItems
        {
            get
            {
                return this._filterItems;
            }
            set
            {
                System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO> newValue;
                newValue = value;
                if (!object.Equals(this._filterItems, newValue))
                {
                    base.RaisePropertyChanging("FilterItems");
                    this._filterItems = newValue;
                    base.RaisePropertyChanged("FilterItems");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.PermissionRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PermissionIdentityDTO>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO> FilterItems = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO>();
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Core.Period Period = Framework.Core.Period.Eternity;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO Role;
        
        public PermissionStrictDTO()
        {
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermission(this, source);
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermission(this, source);
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermission(this, source);
        }
        
        public PermissionStrictDTO(Framework.Authorization.Generated.DTO.PermissionSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForPermission(this, source);
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForPermission(this, source);
        }
        
        private PermissionStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PermissionIdentityDTO(this.Id);
            }
        }
    }
    
    public partial interface IPermissionSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        string Comment
        {
            get;
            set;
        }
        
        bool IsDelegatedFrom
        {
            get;
            set;
        }
        
        bool IsDelegatedTo
        {
            get;
            set;
        }
        
        Framework.Core.Period Period
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.PermissionStatus Status
        {
            get;
            set;
        }
    }
    
    public partial interface IPermissionFullDTO : Framework.Authorization.Generated.DTO.IPermissionSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.PrincipalSimpleDTO DelegatedFromPrincipal
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Principal
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO Role
        {
            get;
            set;
        }
    }
    
    public partial interface IPermissionRichDTO : Framework.Authorization.Generated.DTO.IPermissionFullDTO
    {
        
        System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> DelegatedTo
        {
            get;
            set;
        }
        
        System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO> FilterItems
        {
            get;
            set;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO))]
    public partial class PermissionDirectFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO>
    {
        
        private System.Guid _entityId;
        
        private bool _strongDirect;
        
        public PermissionDirectFilterModelSimpleDTO()
        {
        }
        
        public PermissionDirectFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelSimpleDTO source) : 
                base(source)
        {
            this.EntityId = source.EntityId;
            this.StrongDirect = source.StrongDirect;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public System.Guid EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                System.Guid newValue;
                newValue = value;
                if (!object.Equals(this._entityId, newValue))
                {
                    base.RaisePropertyChanging("EntityId");
                    this._entityId = newValue;
                    base.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StrongDirect
        {
            get
            {
                return this._strongDirect;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._strongDirect, newValue))
                {
                    base.RaisePropertyChanging("StrongDirect");
                    this._strongDirect = newValue;
                    base.RaisePropertyChanged("StrongDirect");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO))]
    public partial class PermissionDirectFilterModelFullDTO : Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO, Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO _entityType;
        
        public PermissionDirectFilterModelFullDTO()
        {
        }
        
        public PermissionDirectFilterModelFullDTO(Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelFullDTO source) : 
                base(source)
        {
            this.EntityType = source.EntityType;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        public Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO EntityType
        {
            get
            {
                return this._entityType;
            }
            set
            {
                Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._entityType, newValue))
                {
                    base.RaisePropertyChanging("EntityType");
                    this._entityType = newValue;
                    base.RaisePropertyChanged("EntityType");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionDirectFilterModelRichDTO : Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO, Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO>
    {
        
        public PermissionDirectFilterModelRichDTO()
        {
        }
        
        public PermissionDirectFilterModelRichDTO(Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionDirectFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionDirectFilterModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EntityId;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.EntityTypeIdentityDTO EntityType;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StrongDirect;
        
        public PermissionDirectFilterModelStrictDTO()
        {
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermissionDirectFilterModel(this, source);
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermissionDirectFilterModel(this, source);
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermissionDirectFilterModel(this, source);
        }
        
        public PermissionDirectFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PermissionDirectFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IPermissionDirectFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
        
        System.Guid EntityId
        {
            get;
            set;
        }
        
        bool StrongDirect
        {
            get;
            set;
        }
    }
    
    public partial interface IPermissionDirectFilterModelFullDTO : Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO EntityType
        {
            get;
            set;
        }
    }
    
    public partial interface IPermissionDirectFilterModelRichDTO : Framework.Authorization.Generated.DTO.IPermissionDirectFilterModelFullDTO
    {
    }
    
    [Framework.Security.ViewDomainObjectAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionFilterEntitySimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IPermissionFilterEntitySimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO>
    {
        
        private System.Guid _entityId;
        
        public PermissionFilterEntitySimpleDTO()
        {
        }
        
        public PermissionFilterEntitySimpleDTO(Framework.Authorization.Generated.DTO.IPermissionFilterEntitySimpleDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionFilterEntitySimpleDTO(Framework.Authorization.Generated.DTO.IPermissionFilterEntitySimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.EntityId = source.EntityId;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public System.Guid EntityId
        {
            get
            {
                return this._entityId;
            }
            set
            {
                System.Guid newValue;
                newValue = value;
                if (!object.Equals(this._entityId, newValue))
                {
                    base.RaisePropertyChanging("EntityId");
                    this._entityId = newValue;
                    base.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO(this);
        }
    }
    
    public partial interface IPermissionFilterEntitySimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        System.Guid EntityId
        {
            get;
            set;
        }
    }
    
    [Framework.Security.ViewDomainObjectAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO))]
    public partial class PermissionFilterItemSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IPermissionFilterItemSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO>
    {
        
        public PermissionFilterItemSimpleDTO()
        {
        }
        
        public PermissionFilterItemSimpleDTO(Framework.Authorization.Generated.DTO.IPermissionFilterItemSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionFilterItemSimpleDTO(Framework.Authorization.Generated.DTO.IPermissionFilterItemSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO))]
    public partial class PermissionFilterItemFullDTO : Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO, Framework.Authorization.Generated.DTO.IPermissionFilterItemFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO _entity;
        
        private Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO _entityType;
        
        private Framework.Authorization.Generated.DTO.PermissionSimpleDTO _permission;
        
        public PermissionFilterItemFullDTO()
        {
        }
        
        public PermissionFilterItemFullDTO(Framework.Authorization.Generated.DTO.IPermissionFilterItemFullDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionFilterItemFullDTO(Framework.Authorization.Generated.DTO.IPermissionFilterItemFullDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Entity = source.Entity;
            this.EntityType = source.EntityType;
            this.Permission = source.Permission;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO Entity
        {
            get
            {
                return this._entity;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._entity, newValue))
                {
                    base.RaisePropertyChanging("Entity");
                    this._entity = newValue;
                    base.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO EntityType
        {
            get
            {
                return this._entityType;
            }
            set
            {
                Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._entityType, newValue))
                {
                    base.RaisePropertyChanging("EntityType");
                    this._entityType = newValue;
                    base.RaisePropertyChanged("EntityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PermissionSimpleDTO Permission
        {
            get
            {
                return this._permission;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PermissionSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._permission, newValue))
                {
                    base.RaisePropertyChanging("Permission");
                    this._permission = newValue;
                    base.RaisePropertyChanged("Permission");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionFilterItemRichDTO : Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO, Framework.Authorization.Generated.DTO.IPermissionFilterItemRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO>
    {
        
        public PermissionFilterItemRichDTO()
        {
        }
        
        public PermissionFilterItemRichDTO(Framework.Authorization.Generated.DTO.IPermissionFilterItemRichDTO source) : 
                this(source, true)
        {
        }
        
        public PermissionFilterItemRichDTO(Framework.Authorization.Generated.DTO.IPermissionFilterItemRichDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PermissionFilterItemStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PermissionFilterItemStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        public PermissionFilterItemStrictDTO()
        {
        }
        
        public PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPermissionFilterItem(this, source);
        }
        
        public PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.PermissionFilterItemRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPermissionFilterItem(this, source);
        }
        
        public PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.PermissionFilterItemFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPermissionFilterItem(this, source);
        }
        
        public PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.PermissionFilterItemSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForPermissionFilterItem(this, source);
        }
        
        private PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForPermissionFilterItem(this, source);
        }
        
        private PermissionFilterItemStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
    }
    
    public partial interface IPermissionFilterItemSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
    }
    
    public partial interface IPermissionFilterItemFullDTO : Framework.Authorization.Generated.DTO.IPermissionFilterItemSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.PermissionFilterEntitySimpleDTO Entity
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.EntityTypeSimpleDTO EntityType
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.PermissionSimpleDTO Permission
        {
            get;
            set;
        }
    }
    
    public partial interface IPermissionFilterItemRichDTO : Framework.Authorization.Generated.DTO.IPermissionFilterItemFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalVisualDTO : Framework.Authorization.Generated.DTO.BasePersistentDTO, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>, Framework.Persistent.IVisualIdentityObject, System.IComparable<Framework.Authorization.Generated.DTO.PrincipalVisualDTO>
    {
        
        private string _name;
        
        public PrincipalVisualDTO()
        {
        }
        
        public PrincipalVisualDTO(Framework.Authorization.Generated.DTO.PrincipalVisualDTO source) : 
                this(source, true)
        {
        }
        
        public PrincipalVisualDTO(Framework.Authorization.Generated.DTO.PrincipalVisualDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.Name = source.Name;
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalVisualDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalVisualDTO(this, copyId);
        }
        
        public int CompareTo(Framework.Authorization.Generated.DTO.PrincipalVisualDTO other)
        {
            return this.Name.CompareTo(other.Name);
        }
        
        public override string ToString()
        {
            return this.Name;
        }
    }
    
    [Framework.Authorization.AuthorizationEditDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalEdit)]
    [Framework.Authorization.AuthorizationViewDomainObjectAttribute(Framework.Authorization.AuthorizationSecurityOperationCode.PrincipalView)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRichDTO))]
    public partial class PrincipalSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.IPrincipalSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalSimpleDTO>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>, Framework.Persistent.IVisualIdentityObject, System.IComparable<Framework.Authorization.Generated.DTO.PrincipalSimpleDTO>
    {
        
        private System.Guid? _externalId;
        
        private string _name;
        
        public PrincipalSimpleDTO()
        {
        }
        
        public PrincipalSimpleDTO(Framework.Authorization.Generated.DTO.IPrincipalSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public PrincipalSimpleDTO(Framework.Authorization.Generated.DTO.IPrincipalSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.ExternalId = source.ExternalId;
            this.Name = source.Name;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? ExternalId
        {
            get
            {
                return this._externalId;
            }
            set
            {
                System.Guid? newValue;
                newValue = value;
                if (!object.Equals(this._externalId, newValue))
                {
                    base.RaisePropertyChanging("ExternalId");
                    this._externalId = newValue;
                    base.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(this.Id);
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalSimpleDTO(this);
        }
        
        public int CompareTo(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO other)
        {
            return this.Name.CompareTo(other.Name);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PrincipalStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalStrictDTO(this);
        }
        
        public override string ToString()
        {
            return this.Name;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRichDTO))]
    public partial class PrincipalFullDTO : Framework.Authorization.Generated.DTO.PrincipalSimpleDTO, Framework.Authorization.Generated.DTO.IPrincipalFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.PrincipalSimpleDTO _runAs;
        
        public PrincipalFullDTO()
        {
        }
        
        public PrincipalFullDTO(Framework.Authorization.Generated.DTO.IPrincipalFullDTO source) : 
                this(source, true)
        {
        }
        
        public PrincipalFullDTO(Framework.Authorization.Generated.DTO.IPrincipalFullDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.RunAs = source.RunAs;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.PrincipalSimpleDTO RunAs
        {
            get
            {
                return this._runAs;
            }
            set
            {
                Framework.Authorization.Generated.DTO.PrincipalSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._runAs, newValue))
                {
                    base.RaisePropertyChanging("RunAs");
                    this._runAs = newValue;
                    base.RaisePropertyChanged("RunAs");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalRichDTO : Framework.Authorization.Generated.DTO.PrincipalFullDTO, Framework.Authorization.Generated.DTO.IPrincipalRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalRichDTO>, Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.PermissionRichDTO>
    {
        
        private System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> _permissions = new System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO>();
        
        public PrincipalRichDTO()
        {
        }
        
        public PrincipalRichDTO(Framework.Authorization.Generated.DTO.IPrincipalRichDTO source) : 
                this(source, true)
        {
        }
        
        public PrincipalRichDTO(Framework.Authorization.Generated.DTO.IPrincipalRichDTO source, bool copyId) : 
                base(source, copyId)
        {
            if (!object.ReferenceEquals(source.Permissions, null))
            {
                this.Permissions = Framework.Core.EnumerableExtensions.ToObservableCollection(source.Permissions, permission => permission.Clone(copyId));
            }
        }
        
        System.Collections.Generic.ICollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> Framework.Persistent.IMaster<Framework.Authorization.Generated.DTO.PermissionRichDTO>.Details
        {
            get
            {
                return this.Permissions;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> Permissions
        {
            get
            {
                return this._permissions;
            }
            set
            {
                System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> newValue;
                newValue = value;
                if (!object.Equals(this._permissions, newValue))
                {
                    base.RaisePropertyChanging("Permissions");
                    this._permissions = newValue;
                    base.RaisePropertyChanged("Permissions");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>, Framework.Persistent.IIdentityObjectContainer<Framework.Authorization.Generated.DTO.PrincipalIdentityDTO>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active = true;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid? ExternalId;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionStrictDTO> Permissions = new System.Collections.Generic.List<Framework.Authorization.Generated.DTO.PermissionStrictDTO>();
        
        public PrincipalStrictDTO()
        {
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPrincipal(this, source);
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPrincipal(this, source);
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPrincipal(this, source);
        }
        
        public PrincipalStrictDTO(Framework.Authorization.Generated.DTO.PrincipalSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForPrincipal(this, source);
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForPrincipal(this, source);
        }
        
        private PrincipalStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalIdentityDTO Identity
        {
            get
            {
                return new Framework.Authorization.Generated.DTO.PrincipalIdentityDTO(this.Id);
            }
        }
    }
    
    public partial interface IPrincipalSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
        
        System.Guid? ExternalId
        {
            get;
            set;
        }
        
        string Name
        {
            get;
            set;
        }
    }
    
    public partial interface IPrincipalFullDTO : Framework.Authorization.Generated.DTO.IPrincipalSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.PrincipalSimpleDTO RunAs
        {
            get;
            set;
        }
    }
    
    public partial interface IPrincipalRichDTO : Framework.Authorization.Generated.DTO.IPrincipalFullDTO
    {
        
        System.Collections.ObjectModel.ObservableCollection<Framework.Authorization.Generated.DTO.PermissionRichDTO> Permissions
        {
            get;
            set;
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO))]
    public partial class PrincipalCreateModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IPrincipalCreateModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO>
    {
        
        public PrincipalCreateModelSimpleDTO()
        {
        }
        
        public PrincipalCreateModelSimpleDTO(Framework.Authorization.Generated.DTO.IPrincipalCreateModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO))]
    public partial class PrincipalCreateModelFullDTO : Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO, Framework.Authorization.Generated.DTO.IPrincipalCreateModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO>
    {
        
        public PrincipalCreateModelFullDTO()
        {
        }
        
        public PrincipalCreateModelFullDTO(Framework.Authorization.Generated.DTO.IPrincipalCreateModelFullDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalCreateModelRichDTO : Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO, Framework.Authorization.Generated.DTO.IPrincipalCreateModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO>
    {
        
        public PrincipalCreateModelRichDTO()
        {
        }
        
        public PrincipalCreateModelRichDTO(Framework.Authorization.Generated.DTO.IPrincipalCreateModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalCreateModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalCreateModelStrictDTO
    {
        
        public PrincipalCreateModelStrictDTO()
        {
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPrincipalCreateModel(this, source);
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPrincipalCreateModel(this, source);
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPrincipalCreateModel(this, source);
        }
        
        public PrincipalCreateModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalCreateModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IPrincipalCreateModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IPrincipalCreateModelFullDTO : Framework.Authorization.Generated.DTO.IPrincipalCreateModelSimpleDTO
    {
    }
    
    public partial interface IPrincipalCreateModelRichDTO : Framework.Authorization.Generated.DTO.IPrincipalCreateModelFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO))]
    public partial class PrincipalRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO>
    {
        
        public PrincipalRootFilterModelSimpleDTO()
        {
        }
        
        public PrincipalRootFilterModelSimpleDTO(Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelSimpleDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO))]
    public partial class PrincipalRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO, Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _businessRole;
        
        private Framework.Authorization.Generated.DTO.OperationSimpleDTO _operation;
        
        public PrincipalRootFilterModelFullDTO()
        {
        }
        
        public PrincipalRootFilterModelFullDTO(Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelFullDTO source) : 
                base(source)
        {
            this.BusinessRole = source.BusinessRole;
            this.Operation = source.Operation;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._businessRole, newValue))
                {
                    base.RaisePropertyChanging("BusinessRole");
                    this._businessRole = newValue;
                    base.RaisePropertyChanged("BusinessRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.OperationSimpleDTO Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                Framework.Authorization.Generated.DTO.OperationSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._operation, newValue))
                {
                    base.RaisePropertyChanging("Operation");
                    this._operation = newValue;
                    base.RaisePropertyChanged("Operation");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO, Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO>
    {
        
        public PrincipalRootFilterModelRichDTO()
        {
        }
        
        public PrincipalRootFilterModelRichDTO(Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelRichDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.PrincipalRootFilterModelStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class PrincipalRootFilterModelStrictDTO
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO BusinessRole;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.OperationIdentityDTO Operation;
        
        public PrincipalRootFilterModelStrictDTO()
        {
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForPrincipalRootFilterModel(this, source);
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForPrincipalRootFilterModel(this, source);
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForPrincipalRootFilterModel(this, source);
        }
        
        public PrincipalRootFilterModelStrictDTO(Framework.Authorization.Generated.DTO.PrincipalRootFilterModelSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
    }
    
    public partial interface IPrincipalRootFilterModelSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
    }
    
    public partial interface IPrincipalRootFilterModelFullDTO : Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.OperationSimpleDTO Operation
        {
            get;
            set;
        }
    }
    
    public partial interface IPrincipalRootFilterModelRichDTO : Framework.Authorization.Generated.DTO.IPrincipalRootFilterModelFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SecurityEntityFullDTO))]
    public partial class SecurityEntitySimpleDTO : Framework.Authorization.Generated.DTO.BaseAbstractDTO, Framework.Authorization.Generated.DTO.ISecurityEntitySimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO>, Framework.Persistent.IVisualIdentityObject
    {
        
        private bool _active;
        
        private System.Guid _id;
        
        private string _name;
        
        private System.Guid _parentId;
        
        public SecurityEntitySimpleDTO()
        {
        }
        
        public SecurityEntitySimpleDTO(Framework.Authorization.Generated.DTO.ISecurityEntitySimpleDTO source) : 
                base(source)
        {
            this.Active = source.Active;
            this.Id = source.Id;
            this.Name = source.Name;
            this.ParentId = source.ParentId;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                bool newValue;
                newValue = value;
                if (!object.Equals(this._active, newValue))
                {
                    base.RaisePropertyChanging("Active");
                    this._active = newValue;
                    base.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                System.Guid newValue;
                newValue = value;
                if (!object.Equals(this._id, newValue))
                {
                    base.RaisePropertyChanging("Id");
                    this._id = newValue;
                    base.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return Framework.Core.StringExtensions.TrimNull(this._name);
            }
            set
            {
                string newValue;
                newValue = Framework.Core.StringExtensions.TrimNull(value);
                if (!object.Equals(this._name, newValue))
                {
                    base.RaisePropertyChanging("Name");
                    this._name = newValue;
                    base.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                System.Guid newValue;
                newValue = value;
                if (!object.Equals(this._parentId, newValue))
                {
                    base.RaisePropertyChanging("ParentId");
                    this._parentId = newValue;
                    base.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SecurityEntityFullDTO : Framework.Authorization.Generated.DTO.SecurityEntitySimpleDTO, Framework.Authorization.Generated.DTO.ISecurityEntityFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.SecurityEntityFullDTO>
    {
        
        public SecurityEntityFullDTO()
        {
        }
        
        public SecurityEntityFullDTO(Framework.Authorization.Generated.DTO.ISecurityEntityFullDTO source) : 
                base(source)
        {
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.SecurityEntityFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.SecurityEntityFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.SecurityEntityFullDTO(this);
        }
    }
    
    public partial interface ISecurityEntitySimpleDTO : Framework.Authorization.Generated.DTO.IBaseAbstractDTO
    {
        
        bool Active
        {
            get;
            set;
        }
        
        System.Guid Id
        {
            get;
            set;
        }
        
        string Name
        {
            get;
            set;
        }
        
        System.Guid ParentId
        {
            get;
            set;
        }
    }
    
    public partial interface ISecurityEntityFullDTO : Framework.Authorization.Generated.DTO.ISecurityEntitySimpleDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO))]
    public partial class SubBusinessRoleLinkSimpleDTO : Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO, Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkSimpleDTO, System.ICloneable<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO>
    {
        
        public SubBusinessRoleLinkSimpleDTO()
        {
        }
        
        public SubBusinessRoleLinkSimpleDTO(Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkSimpleDTO source) : 
                this(source, true)
        {
        }
        
        public SubBusinessRoleLinkSimpleDTO(Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkSimpleDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO ToSimple()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO(this);
        }
        
        public virtual Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO))]
    public partial class SubBusinessRoleLinkFullDTO : Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO, Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkFullDTO, System.ICloneable<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO>
    {
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _businessRole;
        
        private Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO _subBusinessRole;
        
        public SubBusinessRoleLinkFullDTO()
        {
        }
        
        public SubBusinessRoleLinkFullDTO(Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkFullDTO source) : 
                this(source, true)
        {
        }
        
        public SubBusinessRoleLinkFullDTO(Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkFullDTO source, bool copyId) : 
                base(source, copyId)
        {
            this.BusinessRole = source.BusinessRole;
            this.SubBusinessRole = source.SubBusinessRole;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get
            {
                return this._businessRole;
            }
            set
            {
                Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._businessRole, newValue))
                {
                    base.RaisePropertyChanging("BusinessRole");
                    this._businessRole = newValue;
                    base.RaisePropertyChanged("BusinessRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        [Framework.Restriction.RequiredAttribute()]
        [Framework.Restriction.UniqueElementAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO SubBusinessRole
        {
            get
            {
                return this._subBusinessRole;
            }
            set
            {
                Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO newValue;
                newValue = value;
                if (!object.Equals(this._subBusinessRole, newValue))
                {
                    base.RaisePropertyChanging("SubBusinessRole");
                    this._subBusinessRole = newValue;
                    base.RaisePropertyChanged("SubBusinessRole");
                }
            }
        }
        
        public Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO ToFull()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SubBusinessRoleLinkRichDTO : Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO, Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkRichDTO, System.ICloneable<Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO>
    {
        
        public SubBusinessRoleLinkRichDTO()
        {
        }
        
        public SubBusinessRoleLinkRichDTO(Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkRichDTO source) : 
                this(source, true)
        {
        }
        
        public SubBusinessRoleLinkRichDTO(Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkRichDTO source, bool copyId) : 
                base(source, copyId)
        {
        }
        
        public Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO Clone(bool copyId)
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO(this, copyId);
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone();
        }
        
        public new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO Clone()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO(this);
        }
        
        public new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO ToRich()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO(this);
        }
        
        public override Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO ToStrict()
        {
            return new Framework.Authorization.Generated.DTO.SubBusinessRoleLinkStrictDTO(this);
        }
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="Auth")]
    public partial class SubBusinessRoleLinkStrictDTO : Framework.Persistent.IIdentityObject<System.Guid>
    {
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Framework.Authorization.Generated.DTO.BusinessRoleIdentityDTO SubBusinessRole;
        
        public SubBusinessRoleLinkStrictDTO()
        {
        }
        
        public SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapRichToStrictForSubBusinessRoleLink(this, source);
        }
        
        public SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkRichDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapFullToStrictForSubBusinessRoleLink(this, source);
        }
        
        public SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkFullDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        public SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapSimpleToStrictForSubBusinessRoleLink(this, source);
        }
        
        public SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.SubBusinessRoleLinkSimpleDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService) : 
                this(((Framework.Authorization.Generated.DTO.BasePersistentDTO)(source)), mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBaseAuditPersistentToStrictForSubBusinessRoleLink(this, source);
        }
        
        private SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.BaseAuditPersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        private SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source, Framework.Authorization.Generated.DTO.IAuthorizationClientDTOMappingService mappingService)
        {
            if (object.ReferenceEquals(mappingService, null))
            {
                throw new System.ArgumentNullException("mappingService");
            }
            mappingService.MapBasePersistentToStrictForSubBusinessRoleLink(this, source);
        }
        
        private SubBusinessRoleLinkStrictDTO(Framework.Authorization.Generated.DTO.BasePersistentDTO source) : 
                this(source, Framework.Authorization.Generated.DTO.AuthorizationClientPrimitiveDTOMappingService.Default)
        {
        }
        
        System.Guid Framework.Persistent.IIdentityObject<System.Guid>.Id
        {
            get
            {
                return this.Id;
            }
        }
    }
    
    public partial interface ISubBusinessRoleLinkSimpleDTO : Framework.Authorization.Generated.DTO.IBaseAuditPersistentDTO
    {
    }
    
    public partial interface ISubBusinessRoleLinkFullDTO : Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkSimpleDTO
    {
        
        Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO BusinessRole
        {
            get;
            set;
        }
        
        Framework.Authorization.Generated.DTO.BusinessRoleSimpleDTO SubBusinessRole
        {
            get;
            set;
        }
    }
    
    public partial interface ISubBusinessRoleLinkRichDTO : Framework.Authorization.Generated.DTO.ISubBusinessRoleLinkFullDTO
    {
    }
    
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.datacontract.org/2004/07/Framework.Authorization.Domain")]
    public enum PermissionStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Approved = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Approving = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rejected = 1,
    }
}
