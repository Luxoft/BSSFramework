//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Configuration.BLL
{
    
    
    public partial class AttachmentBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.Attachment, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IAttachmentBLL
    {
        
		partial void Initialize();
        
        public AttachmentBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Attachment> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class AttachmentBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IAttachmentBLL, Framework.Configuration.BLL.AttachmentBLL, Framework.Configuration.Domain.Attachment, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IAttachmentBLLFactory
    {
        
        public AttachmentBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class AttachmentContainerBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.AttachmentContainer, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IAttachmentContainerBLL
    {
        
		partial void Initialize();
        
        public AttachmentContainerBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.AttachmentContainer> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class AttachmentContainerBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IAttachmentContainerBLL, Framework.Configuration.BLL.AttachmentContainerBLL, Framework.Configuration.Domain.AttachmentContainer, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IAttachmentContainerBLLFactory
    {
        
        public AttachmentContainerBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class CodeFirstSubscriptionBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.CodeFirstSubscription, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.ICodeFirstSubscriptionBLL
    {
        
		partial void Initialize();
        
        public CodeFirstSubscriptionBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.CodeFirstSubscription> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class CodeFirstSubscriptionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.ICodeFirstSubscriptionBLL, Framework.Configuration.BLL.CodeFirstSubscriptionBLL, Framework.Configuration.Domain.CodeFirstSubscription, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.ICodeFirstSubscriptionBLLFactory
    {
        
        public CodeFirstSubscriptionBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class DomainObjectEventBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.DomainObjectEvent, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IDomainObjectEventBLL
    {
        
		partial void Initialize();
        
        public DomainObjectEventBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.DomainObjectEvent> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class DomainObjectEventBLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IDomainObjectEventBLL, Framework.Configuration.BLL.DomainObjectEventBLL, Framework.Configuration.Domain.DomainObjectEvent>, Framework.Configuration.BLL.IDomainObjectEventBLLFactory
    {
        
        public DomainObjectEventBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class DomainObjectModificationBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.DomainObjectModification, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IDomainObjectModificationBLL
    {
        
		partial void Initialize();
        
        public DomainObjectModificationBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.DomainObjectModification> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class DomainObjectModificationBLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IDomainObjectModificationBLL, Framework.Configuration.BLL.DomainObjectModificationBLL, Framework.Configuration.Domain.DomainObjectModification>, Framework.Configuration.BLL.IDomainObjectModificationBLLFactory
    {
        
        public DomainObjectModificationBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class DomainObjectNotificationBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.DomainObjectNotification, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IDomainObjectNotificationBLL
    {
        
		partial void Initialize();
        
        public DomainObjectNotificationBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.DomainObjectNotification> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class DomainObjectNotificationBLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IDomainObjectNotificationBLL, Framework.Configuration.BLL.DomainObjectNotificationBLL, Framework.Configuration.Domain.DomainObjectNotification>, Framework.Configuration.BLL.IDomainObjectNotificationBLLFactory
    {
        
        public DomainObjectNotificationBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class DomainTypeBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.DomainType, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IDomainTypeBLL
    {
        
		partial void Initialize();
        
        public DomainTypeBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.DomainType> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class DomainTypeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IDomainTypeBLL, Framework.Configuration.BLL.DomainTypeBLL, Framework.Configuration.Domain.DomainType, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IDomainTypeBLLFactory
    {
        
        public DomainTypeBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ExceptionMessageBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.ExceptionMessage, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IExceptionMessageBLL
    {
        
		partial void Initialize();
        
        public ExceptionMessageBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.ExceptionMessage> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ExceptionMessageBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IExceptionMessageBLL, Framework.Configuration.BLL.ExceptionMessageBLL, Framework.Configuration.Domain.ExceptionMessage, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IExceptionMessageBLLFactory
    {
        
        public ExceptionMessageBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class NamedLockBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.NamedLock, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.INamedLockBLL
    {
        
		partial void Initialize();
        
        public NamedLockBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.NamedLock> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class NamedLockBLLFactory : Framework.DomainDriven.BLL.Security.BLLFactoryBase<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.INamedLockBLL, Framework.Configuration.BLL.NamedLockBLL, Framework.Configuration.Domain.NamedLock>, Framework.Configuration.BLL.INamedLockBLLFactory
    {
        
        public NamedLockBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ReportBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.Reports.Report, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IReportBLL
    {
        
		partial void Initialize();
        
        public ReportBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.Report> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ReportBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IReportBLL, Framework.Configuration.BLL.ReportBLL, Framework.Configuration.Domain.Reports.Report, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IReportBLLFactory
    {
        
        public ReportBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ReportFilterBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.Reports.ReportFilter, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IReportFilterBLL
    {
        
		partial void Initialize();
        
        public ReportFilterBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.ReportFilter> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ReportFilterBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IReportFilterBLL, Framework.Configuration.BLL.ReportFilterBLL, Framework.Configuration.Domain.Reports.ReportFilter, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IReportFilterBLLFactory
    {
        
        public ReportFilterBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ReportParameterBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.Reports.ReportParameter, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IReportParameterBLL
    {
        
		partial void Initialize();
        
        public ReportParameterBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.ReportParameter> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ReportParameterBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IReportParameterBLL, Framework.Configuration.BLL.ReportParameterBLL, Framework.Configuration.Domain.Reports.ReportParameter, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IReportParameterBLLFactory
    {
        
        public ReportParameterBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ReportPropertyBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.Reports.ReportProperty, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IReportPropertyBLL
    {
        
		partial void Initialize();
        
        public ReportPropertyBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.ReportProperty> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ReportPropertyBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IReportPropertyBLL, Framework.Configuration.BLL.ReportPropertyBLL, Framework.Configuration.Domain.Reports.ReportProperty, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IReportPropertyBLLFactory
    {
        
        public ReportPropertyBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class SequenceBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.Sequence, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.ISequenceBLL
    {
        
		partial void Initialize();
        
        public SequenceBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Sequence> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class SequenceBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.ISequenceBLL, Framework.Configuration.BLL.SequenceBLL, Framework.Configuration.Domain.Sequence, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.ISequenceBLLFactory
    {
        
        public SequenceBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class SystemConstantBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.SystemConstant, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.ISystemConstantBLL
    {
        
		partial void Initialize();
        
        public SystemConstantBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.SystemConstant> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class SystemConstantBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.ISystemConstantBLL, Framework.Configuration.BLL.SystemConstantBLL, Framework.Configuration.Domain.SystemConstant, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.ISystemConstantBLLFactory
    {
        
        public SystemConstantBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TargetSystemBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.TargetSystem, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.ITargetSystemBLL
    {
        
		partial void Initialize();
        
        public TargetSystemBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.TargetSystem> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TargetSystemBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.ITargetSystemBLL, Framework.Configuration.BLL.TargetSystemBLL, Framework.Configuration.Domain.TargetSystem, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.ITargetSystemBLLFactory
    {
        
        public TargetSystemBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class UserActionBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.UserAction, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IUserActionBLL
    {
        
		partial void Initialize();
        
        public UserActionBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.UserAction> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class UserActionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IUserActionBLL, Framework.Configuration.BLL.UserActionBLL, Framework.Configuration.Domain.UserAction, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IUserActionBLLFactory
    {
        
        public UserActionBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class UserActionObjectBLL : Framework.Configuration.BLL.SecurityDomainBLLBase<Framework.Configuration.Domain.UserActionObject, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Configuration.BLL.IUserActionObjectBLL
    {
        
		partial void Initialize();
        
        public UserActionObjectBLL(Framework.Configuration.BLL.IConfigurationBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.UserActionObject> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class UserActionObjectBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.BLL.IUserActionObjectBLL, Framework.Configuration.BLL.UserActionObjectBLL, Framework.Configuration.Domain.UserActionObject, Framework.Configuration.ConfigurationSecurityOperationCode>, Framework.Configuration.BLL.IUserActionObjectBLLFactory
    {
        
        public UserActionObjectBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ConfigurationBLLFactoryContainer : Framework.DomainDriven.BLL.BLLContextContainer<Framework.Configuration.BLL.IConfigurationBLLContext>, Framework.Configuration.BLL.IConfigurationBLLFactoryContainer
    {
        
        private Framework.Configuration.BLL.IAttachmentBLL attachmentBLL;
        
        private Framework.Configuration.BLL.IAttachmentContainerBLL attachmentContainerBLL;
        
        private Framework.Configuration.BLL.ICodeFirstSubscriptionBLL codeFirstSubscriptionBLL;
        
        private Framework.Configuration.BLL.ConfigurationDefaultBLLFactory defaultBLLFactory;
        
        private Framework.Configuration.BLL.IDomainObjectEventBLL domainObjectEventBLL;
        
        private Framework.Configuration.BLL.IDomainObjectModificationBLL domainObjectModificationBLL;
        
        private Framework.Configuration.BLL.IDomainObjectNotificationBLL domainObjectNotificationBLL;
        
        private Framework.Configuration.BLL.IDomainTypeBLL domainTypeBLL;
        
        private Framework.Configuration.BLL.IExceptionMessageBLL exceptionMessageBLL;
        
        private Framework.Configuration.BLL.ConfigurationImplementedBLLFactory implementedBLLFactory;
        
        private Framework.Configuration.BLL.INamedLockBLL namedLockBLL;
        
        private Framework.Configuration.BLL.IReportBLL reportBLL;
        
        private Framework.Configuration.BLL.IReportFilterBLL reportFilterBLL;
        
        private Framework.Configuration.BLL.IReportParameterBLL reportParameterBLL;
        
        private Framework.Configuration.BLL.IReportPropertyBLL reportPropertyBLL;
        
        private Framework.Configuration.BLL.ISequenceBLL sequenceBLL;
        
        private Framework.Configuration.BLL.ISystemConstantBLL systemConstantBLL;
        
        private Framework.Configuration.BLL.ITargetSystemBLL targetSystemBLL;
        
        private Framework.Configuration.BLL.IUserActionBLL userActionBLL;
        
        private Framework.Configuration.BLL.IUserActionObjectBLL userActionObjectBLL;
        
        public ConfigurationBLLFactoryContainer(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public Framework.Configuration.BLL.IAttachmentBLL Attachment
        {
            get
            {
                if (object.ReferenceEquals(this.attachmentBLL, null))
                {
                    this.attachmentBLL = this.AttachmentFactory.Create();
                }
                return this.attachmentBLL;
            }
        }
        
        public Framework.Configuration.BLL.IAttachmentContainerBLL AttachmentContainer
        {
            get
            {
                if (object.ReferenceEquals(this.attachmentContainerBLL, null))
                {
                    this.attachmentContainerBLL = this.AttachmentContainerFactory.Create();
                }
                return this.attachmentContainerBLL;
            }
        }
        
        public Framework.Configuration.BLL.IAttachmentContainerBLLFactory AttachmentContainerFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IAttachmentContainerBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IAttachmentBLLFactory AttachmentFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IAttachmentBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.ICodeFirstSubscriptionBLL CodeFirstSubscription
        {
            get
            {
                if (object.ReferenceEquals(this.codeFirstSubscriptionBLL, null))
                {
                    this.codeFirstSubscriptionBLL = this.CodeFirstSubscriptionFactory.Create();
                }
                return this.codeFirstSubscriptionBLL;
            }
        }
        
        public Framework.Configuration.BLL.ICodeFirstSubscriptionBLLFactory CodeFirstSubscriptionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.ICodeFirstSubscriptionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.ConfigurationSecurityOperationCode, System.Guid> Default
        {
            get
            {
                if (object.ReferenceEquals(this.defaultBLLFactory, null))
                {
                    this.defaultBLLFactory = new Framework.Configuration.BLL.ConfigurationDefaultBLLFactory(this.Context);
                }
                return this.defaultBLLFactory;
            }
        }
        
        public Framework.Configuration.BLL.IDomainObjectEventBLL DomainObjectEvent
        {
            get
            {
                if (object.ReferenceEquals(this.domainObjectEventBLL, null))
                {
                    this.domainObjectEventBLL = this.DomainObjectEventFactory.Create();
                }
                return this.domainObjectEventBLL;
            }
        }
        
        public Framework.Configuration.BLL.IDomainObjectEventBLLFactory DomainObjectEventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IDomainObjectEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IDomainObjectModificationBLL DomainObjectModification
        {
            get
            {
                if (object.ReferenceEquals(this.domainObjectModificationBLL, null))
                {
                    this.domainObjectModificationBLL = this.DomainObjectModificationFactory.Create();
                }
                return this.domainObjectModificationBLL;
            }
        }
        
        public Framework.Configuration.BLL.IDomainObjectModificationBLLFactory DomainObjectModificationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IDomainObjectModificationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IDomainObjectNotificationBLL DomainObjectNotification
        {
            get
            {
                if (object.ReferenceEquals(this.domainObjectNotificationBLL, null))
                {
                    this.domainObjectNotificationBLL = this.DomainObjectNotificationFactory.Create();
                }
                return this.domainObjectNotificationBLL;
            }
        }
        
        public Framework.Configuration.BLL.IDomainObjectNotificationBLLFactory DomainObjectNotificationFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IDomainObjectNotificationBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IDomainTypeBLL DomainType
        {
            get
            {
                if (object.ReferenceEquals(this.domainTypeBLL, null))
                {
                    this.domainTypeBLL = this.DomainTypeFactory.Create();
                }
                return this.domainTypeBLL;
            }
        }
        
        public Framework.Configuration.BLL.IDomainTypeBLLFactory DomainTypeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IDomainTypeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IExceptionMessageBLL ExceptionMessage
        {
            get
            {
                if (object.ReferenceEquals(this.exceptionMessageBLL, null))
                {
                    this.exceptionMessageBLL = this.ExceptionMessageFactory.Create();
                }
                return this.exceptionMessageBLL;
            }
        }
        
        public Framework.Configuration.BLL.IExceptionMessageBLLFactory ExceptionMessageFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IExceptionMessageBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.ConfigurationSecurityOperationCode, System.Guid> Implemented
        {
            get
            {
                if (object.ReferenceEquals(this.implementedBLLFactory, null))
                {
                    this.implementedBLLFactory = new Framework.Configuration.BLL.ConfigurationImplementedBLLFactory(this.Context);
                }
                return this.implementedBLLFactory;
            }
        }
        
        public Framework.Configuration.BLL.INamedLockBLL NamedLock
        {
            get
            {
                if (object.ReferenceEquals(this.namedLockBLL, null))
                {
                    this.namedLockBLL = this.NamedLockFactory.Create();
                }
                return this.namedLockBLL;
            }
        }
        
        public Framework.Configuration.BLL.INamedLockBLLFactory NamedLockFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.INamedLockBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IReportBLL Report
        {
            get
            {
                if (object.ReferenceEquals(this.reportBLL, null))
                {
                    this.reportBLL = this.ReportFactory.Create();
                }
                return this.reportBLL;
            }
        }
        
        public Framework.Configuration.BLL.IReportBLLFactory ReportFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IReportBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IReportFilterBLL ReportFilter
        {
            get
            {
                if (object.ReferenceEquals(this.reportFilterBLL, null))
                {
                    this.reportFilterBLL = this.ReportFilterFactory.Create();
                }
                return this.reportFilterBLL;
            }
        }
        
        public Framework.Configuration.BLL.IReportFilterBLLFactory ReportFilterFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IReportFilterBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IReportParameterBLL ReportParameter
        {
            get
            {
                if (object.ReferenceEquals(this.reportParameterBLL, null))
                {
                    this.reportParameterBLL = this.ReportParameterFactory.Create();
                }
                return this.reportParameterBLL;
            }
        }
        
        public Framework.Configuration.BLL.IReportParameterBLLFactory ReportParameterFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IReportParameterBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IReportPropertyBLL ReportProperty
        {
            get
            {
                if (object.ReferenceEquals(this.reportPropertyBLL, null))
                {
                    this.reportPropertyBLL = this.ReportPropertyFactory.Create();
                }
                return this.reportPropertyBLL;
            }
        }
        
        public Framework.Configuration.BLL.IReportPropertyBLLFactory ReportPropertyFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IReportPropertyBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.ISequenceBLL Sequence
        {
            get
            {
                if (object.ReferenceEquals(this.sequenceBLL, null))
                {
                    this.sequenceBLL = this.SequenceFactory.Create();
                }
                return this.sequenceBLL;
            }
        }
        
        public Framework.Configuration.BLL.ISequenceBLLFactory SequenceFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.ISequenceBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.ISystemConstantBLL SystemConstant
        {
            get
            {
                if (object.ReferenceEquals(this.systemConstantBLL, null))
                {
                    this.systemConstantBLL = this.SystemConstantFactory.Create();
                }
                return this.systemConstantBLL;
            }
        }
        
        public Framework.Configuration.BLL.ISystemConstantBLLFactory SystemConstantFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.ISystemConstantBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.ITargetSystemBLL TargetSystem
        {
            get
            {
                if (object.ReferenceEquals(this.targetSystemBLL, null))
                {
                    this.targetSystemBLL = this.TargetSystemFactory.Create();
                }
                return this.targetSystemBLL;
            }
        }
        
        public Framework.Configuration.BLL.ITargetSystemBLLFactory TargetSystemFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.ITargetSystemBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IUserActionBLL UserAction
        {
            get
            {
                if (object.ReferenceEquals(this.userActionBLL, null))
                {
                    this.userActionBLL = this.UserActionFactory.Create();
                }
                return this.userActionBLL;
            }
        }
        
        public Framework.Configuration.BLL.IUserActionBLLFactory UserActionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IUserActionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Configuration.BLL.IUserActionObjectBLL UserActionObject
        {
            get
            {
                if (object.ReferenceEquals(this.userActionObjectBLL, null))
                {
                    this.userActionObjectBLL = this.UserActionObjectFactory.Create();
                }
                return this.userActionObjectBLL;
            }
        }
        
        public Framework.Configuration.BLL.IUserActionObjectBLLFactory UserActionObjectFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Configuration.BLL.IUserActionObjectBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public static void RegisterBLLFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
        {
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IAttachmentBLLFactory, Framework.Configuration.BLL.AttachmentBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IAttachmentContainerBLLFactory, Framework.Configuration.BLL.AttachmentContainerBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.ICodeFirstSubscriptionBLLFactory, Framework.Configuration.BLL.CodeFirstSubscriptionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IDomainObjectEventBLLFactory, Framework.Configuration.BLL.DomainObjectEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IDomainObjectModificationBLLFactory, Framework.Configuration.BLL.DomainObjectModificationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IDomainObjectNotificationBLLFactory, Framework.Configuration.BLL.DomainObjectNotificationBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IDomainTypeBLLFactory, Framework.Configuration.BLL.DomainTypeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IExceptionMessageBLLFactory, Framework.Configuration.BLL.ExceptionMessageBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.INamedLockBLLFactory, Framework.Configuration.BLL.NamedLockBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IReportBLLFactory, Framework.Configuration.BLL.ReportBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IReportFilterBLLFactory, Framework.Configuration.BLL.ReportFilterBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IReportParameterBLLFactory, Framework.Configuration.BLL.ReportParameterBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IReportPropertyBLLFactory, Framework.Configuration.BLL.ReportPropertyBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.ISequenceBLLFactory, Framework.Configuration.BLL.SequenceBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.ISystemConstantBLLFactory, Framework.Configuration.BLL.SystemConstantBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.ITargetSystemBLLFactory, Framework.Configuration.BLL.TargetSystemBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IUserActionBLLFactory, Framework.Configuration.BLL.UserActionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Configuration.BLL.IUserActionObjectBLLFactory, Framework.Configuration.BLL.UserActionObjectBLLFactory>(serviceCollection);
        }
    }
    
    public partial class ConfigurationDefaultBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.Domain.DomainObjectBase, Framework.Configuration.ConfigurationSecurityOperationCode, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.ConfigurationSecurityOperationCode, System.Guid>
    {
        
        public ConfigurationDefaultBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            return new Framework.Configuration.BLL.DomainBLLBase<TDomainObject>(this.Context);
        }
    }
    
    public partial class ConfigurationImplementedBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Configuration.BLL.IConfigurationBLLContext, Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.Domain.DomainObjectBase, Framework.Configuration.ConfigurationSecurityOperationCode, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Configuration.Domain.PersistentDomainObjectBase, Framework.Configuration.ConfigurationSecurityOperationCode, System.Guid>
    {
        
        public ConfigurationImplementedBLLFactory(Framework.Configuration.BLL.IConfigurationBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>()
        {
            if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Attachment));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainer));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.CodeFirstSubscription)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CodeFirstSubscription));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectEvent)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectEvent));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectModification)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectModification));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectNotification)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectNotification));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainType)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainType));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ExceptionMessage)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ExceptionMessage));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLock));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.Report)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Report));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportFilter)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFilter));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportParameter)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportParameter));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportProperty)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportProperty));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Sequence)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.Sequence));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SystemConstant)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SystemConstant));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.TargetSystem)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TargetSystem));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserAction)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserAction));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserActionObject)))
            {
                return ((Framework.DomainDriven.BLL.IDefaultDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionObject));
            }
            else
            {
                return new Framework.Configuration.BLL.DomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Attachment>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainerFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.AttachmentContainer>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.CodeFirstSubscription)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CodeFirstSubscriptionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.CodeFirstSubscription>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectEvent)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectEventFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectModification)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectModificationFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectNotification)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectNotificationFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainTypeFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.DomainType>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ExceptionMessage)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ExceptionMessageFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.ExceptionMessage>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLockFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.Report)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.Report>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportFilter)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFilterFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.ReportFilter>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportParameter)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportParameterFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.ReportParameter>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportProperty)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportPropertyFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Reports.ReportProperty>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Sequence)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SequenceFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.Sequence>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SystemConstant)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SystemConstantFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.SystemConstant>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.TargetSystem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TargetSystemFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.TargetSystem>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserAction)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.UserAction>)(securityProvider)))));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserActionObject)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionObjectFactory.Create(((Framework.SecuritySystem.ISecurityProvider<Framework.Configuration.Domain.UserActionObject>)(securityProvider)))));
            }
            else
            {
                return new Framework.Configuration.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.Configuration.ConfigurationSecurityOperationCode securityOperation)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainerFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.CodeFirstSubscription)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CodeFirstSubscriptionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectEvent)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectEventFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectModification)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectModificationFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectNotification)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectNotificationFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainTypeFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ExceptionMessage)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ExceptionMessageFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLockFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.Report)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportFilter)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFilterFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportParameter)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportParameterFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportProperty)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportPropertyFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Sequence)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SequenceFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SystemConstant)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SystemConstantFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.TargetSystem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TargetSystemFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserAction)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionFactory.Create(securityOperation)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserActionObject)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionObjectFactory.Create(securityOperation)));
            }
            else
            {
                return new Framework.Configuration.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context);
            }
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.BLLSecurityMode bllSecurityMode)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Attachment)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.AttachmentContainer)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.AttachmentContainerFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.CodeFirstSubscription)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.CodeFirstSubscriptionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectEvent)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectEventFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectModification)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectModificationFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainObjectNotification)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainObjectNotificationFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.DomainType)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.DomainTypeFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.ExceptionMessage)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ExceptionMessageFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.NamedLock)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.NamedLockFactory.Create()));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.Report)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportFilter)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportFilterFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportParameter)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportParameterFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Reports.ReportProperty)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.ReportPropertyFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.Sequence)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SequenceFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.SystemConstant)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.SystemConstantFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.TargetSystem)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.TargetSystemFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserAction)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionFactory.Create(bllSecurityMode)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Configuration.Domain.UserActionObject)))
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(this.Context.Logics.UserActionObjectFactory.Create(bllSecurityMode)));
            }
            else
            {
                return ((Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Configuration.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid>)(new Framework.Configuration.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context)));
            }
        }
    }
}
