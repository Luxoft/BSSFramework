//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Authorization.BLL
{
    
    
    public partial class AuthorizationMainFetchServiceBase : Framework.DomainDriven.MainFetchServiceBase<Framework.Authorization.Domain.PersistentDomainObjectBase>
    {
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.BusinessRole> GetBusinessRoleContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.BusinessRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.BusinessRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.BusinessRole>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.BusinessRole>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected override Framework.DomainDriven.IFetchContainer<TDomainObject> GetContainer<TDomainObject>(Framework.Transfering.ViewDTOType rule)
        {
            if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.BusinessRole)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetBusinessRoleContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.SecurityContextType)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetEntityTypeContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Permission)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetPermissionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionFilterEntity)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetPermissionFilterEntityContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.PermissionRestriction)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetPermissionRestrictionContainer(rule)));
            }
            else if ((typeof(TDomainObject) == typeof(Framework.Authorization.Domain.Principal)))
            {
                return ((Framework.DomainDriven.IFetchContainer<TDomainObject>)(this.GetPrincipalContainer(rule)));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("TDomainObject");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.SecurityContextType> GetEntityTypeContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.SecurityContextType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.SecurityContextType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.SecurityContextType>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.SecurityContextType>.Empty;
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.Permission> GetPermissionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.Permission>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.Permission>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.Permission>(
                    fetchRootRule => fetchRootRule.SelectNested(permission => permission.DelegatedFrom).SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectNested(permission => permission.Role));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.Permission>(
                    fetchRootRule => fetchRootRule.SelectNested(permission => permission.DelegatedFrom).SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.DelegatedTo).SelectNested(permission => permission.DelegatedFrom).SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.DelegatedTo).SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.Entity),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.DelegatedTo).SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.SecurityContextType),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.DelegatedTo).SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.DelegatedTo).SelectNested(permission => permission.Role),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.Entity),
                    fetchRootRule => fetchRootRule.SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.SecurityContextType),
                    fetchRootRule => fetchRootRule.SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectNested(permission => permission.Role));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.PermissionFilterEntity> GetPermissionFilterEntityContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.PermissionFilterEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.PermissionFilterEntity>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.PermissionFilterEntity>(fetchRootRule => fetchRootRule.SelectNested(permissionFilterEntity => permissionFilterEntity.EntityType));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.PermissionFilterEntity>(fetchRootRule => fetchRootRule.SelectNested(permissionFilterEntity => permissionFilterEntity.EntityType));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.PermissionRestriction> GetPermissionRestrictionContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.PermissionRestriction>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.PermissionRestriction>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.PermissionRestriction>(
                    fetchRootRule => fetchRootRule.SelectNested(permissionRestriction => permissionRestriction.Entity),
                    fetchRootRule => fetchRootRule.SelectNested(permissionRestriction => permissionRestriction.SecurityContextType),
                    fetchRootRule => fetchRootRule.SelectNested(permissionRestriction => permissionRestriction.Permission));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.PermissionRestriction>(
                    fetchRootRule => fetchRootRule.SelectNested(permissionRestriction => permissionRestriction.Entity),
                    fetchRootRule => fetchRootRule.SelectNested(permissionRestriction => permissionRestriction.SecurityContextType),
                    fetchRootRule => fetchRootRule.SelectNested(permissionRestriction => permissionRestriction.Permission));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
        
        protected virtual Framework.DomainDriven.IFetchContainer<Framework.Authorization.Domain.Principal> GetPrincipalContainer(Framework.Transfering.ViewDTOType rule)
        {
            if ((rule == Framework.Transfering.ViewDTOType.VisualDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.Principal>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.SimpleDTO))
            {
                return Framework.DomainDriven.FetchContainer<Framework.Authorization.Domain.Principal>.Empty;
            }
            else if ((rule == Framework.Transfering.ViewDTOType.FullDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.Principal>(fetchRootRule => fetchRootRule.SelectNested(principal => principal.RunAs));
            }
            else if ((rule == Framework.Transfering.ViewDTOType.RichDTO))
            {
                return Framework.DomainDriven.FetchContainer.Create<Framework.Authorization.Domain.Principal>(
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.DelegatedTo).SelectNested(permission => permission.DelegatedFrom).SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.DelegatedTo).SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.Entity),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.DelegatedTo).SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.SecurityContextType),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.DelegatedTo).SelectNested(permission => permission.Principal),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.DelegatedTo).SelectNested(permission => permission.Role),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.Entity),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectMany(permission => permission.Restrictions).SelectNested(permissionRestriction => permissionRestriction.SecurityContextType),
                    fetchRootRule => fetchRootRule.SelectMany(principal => principal.Permissions).SelectNested(permission => permission.Role),
                    fetchRootRule => fetchRootRule.SelectNested(principal => principal.RunAs));
            }
            else
            {
                throw new System.ArgumentOutOfRangeException("rule");
            }
        }
    }
    
    public partial class AuthorizationMainFetchService : Framework.Authorization.BLL.AuthorizationMainFetchServiceBase
    {
    }
}
